spec NatSet =
    free type Nat ::= Nat(arg : int) %key(defaultValue=Nat(0))% %key(extends=java.lang.Object)%

    generated type NatSet ::= tip | bin(e : Nat; els : NatSet) %key(defaultValue=tip)%

    ops
        remove : NatSet * Nat -> NatSet;
        eqv : NatSet * NatSet -> boolean %key(equality=true)% %key(heuristic=eqv)% ;
        contains : NatSet * Nat -> boolean;
        len : NatSet -> int;

    . eqv(tip, tip) = true
    forall n : Nat ; s1 : NatSet ; s2 : NatSet . eqv(s1, s2) = true <=> contains(s1,n) = contains(s2,n)

    forall s : NatSet; n : Nat . contains(bin(n, s), n) = true

    forall s : NatSet; n1 : Nat; n2 : Nat . contains(bin(n1, s), n2) = true <=> contains(s,n2) = true \/ n1 = n2
end

