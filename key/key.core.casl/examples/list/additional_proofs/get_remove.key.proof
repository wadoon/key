\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 10 14:39:49 CET 2022
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , floatRules-floatRules\\:strictfpOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\sorts {
    Nat \extends java.lang.Object;
    /*! @defaultValue(nil) */
    NatList;
}
\functions {
    \unique Nat Nat(int);
    \unique NatList nil;
    \unique NatList cons(Nat, NatList);
    NatList append(NatList, NatList);
    NatList reverse(NatList);
    int len(NatList);
    Nat get(NatList, int);
    NatList remove(NatList, int);
}
\axioms {
    natlist_induction {
        \schemaVar \formula phi;
        \schemaVar \variable NatList base;
        \schemaVar \variable Nat first;

        \find( ==> \forall base; phi )
        \varcond( \notFreeIn(first,phi) )

        "base case": \replacewith( ==>  {\subst base; nil} phi );
        "1. case": \replacewith( ==> \forall first; \forall base;  ( phi -> {\subst base; cons(first, base)} phi ) )
    };
    natlist_ctor_split {
        \schemaVar \term NatList natlist;
        \schemaVar \skolemTerm Nat first;
        \schemaVar \skolemTerm NatList rest;
        \find(natlist) \sameUpdateLevel
        \varcond(\new(first, \dependingOn(natlist)), \new(rest, \dependingOn(natlist)))
        \replacewith(nil) \add(natlist = nil ==>);
        \replacewith(cons(first, rest)) \add(natlist = cons(first, rest) ==>)
    };
    append_nil_l {
        \schemaVar \term NatList l;
        \find( append(nil, l) )
        \replacewith( l )
    };
    append_cons_e_l1_l2 {
        \schemaVar \term NatList l1;
        \schemaVar \term NatList l2;
        \schemaVar \term Nat e;
        \find( append(cons(e, l1), l2) )
        \replacewith( cons(e, append(l1, l2)) )
    };
    reverse_nil {
        \find( reverse(nil) )
        \replacewith( nil )
    };
    reverse_cons_e_l {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \find( reverse(cons(e, l)) )
        \replacewith( append(reverse(l), cons(e, nil)) )
    };
    len_nil {
        \find( len(nil) )
        \replacewith( 0 )
	\heuristics( simplify )
    };
    len_cons_e_l {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \find( len(cons(e, l)) )
        \replacewith( 1+len(l) )
	\heuristics( simplify )
    };
    get_cons_e_l_0 {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \find( get(cons(e, l), 0) )
        \replacewith( e )
    };
    get_cons_e_l_i {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \schemaVar \term int i;
        \find( get(cons(e, l), i) )
        \replacewith( get(l, i-1) )
    };
    remove_cons_e_l_0 {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \find( remove(cons(e, l), 0) )
        \replacewith( l )
    };
    remove_cons_e_l_j {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \schemaVar \term int j;
        \find( remove(cons(e, l), j) )
        \replacewith( cons(e, remove(l, j-1)) )
    };

    remove_len {
	\schemaVar \term NatList l;
	\schemaVar \term int i;
    	\find( len(remove(l, i)) )
	\replacewith( len(l) - 1 )
    };
}
\problem {
\forall NatList l;
  \forall int i;
    \forall int x;
      (     geq(len(l), Z(2(#)))
          & leq(Z(0(#)), i)
          & lt(i, len(l))
          & leq(Z(0(#)), x)
          & lt(x, sub(len(l), Z(1(#))))
       ->   get(remove(l, i), x)
          = \if (gt(i, x))
                \then (get(l, x))
                \else (get(l, add(x, Z(1(#))))))

}

\proof {
(keyLog "0" (keyUser "hannes" ) (keyVersion "6bf67feba6"))
(keyLog "1" (keyUser "hannes" ) (keyVersion "6bf67feba6"))

(autoModeTime "15873")

(branch "dummy ID"
(rule "natlist_induction" (formula "1") (inst "first=first") (userinteraction))
(branch "base case"
   (rule "allRight" (formula "1") (inst "sk=i_0"))
   (rule "allRight" (formula "1") (inst "sk=x_0"))
   (rule "impRight" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "6"))
   (rule "polySimp_elimSub" (formula "5") (term "1"))
   (rule "mul_literals" (formula "5") (term "1,1"))
   (rule "polySimp_addComm0" (formula "6") (term "1,2,0"))
   (rule "polySimp_addComm0" (formula "5") (term "1"))
   (rule "len_nil" (formula "3") (term "1"))
   (rule "len_nil" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "1. case"
   (rule "allRight" (formula "1") (inst "sk=first_0") (userinteraction))
   (rule "allRight" (formula "1") (inst "sk=l_0") (userinteraction))
   (rule "impRight" (formula "1") (userinteraction))
   (rule "swapQuantifiersAll" (formula "2") (userinteraction))
   (rule "auto_int_induction_geqZero" (formula "2") (inst "sk=x_0") (userinteraction))
   (branch "Base Case"
      (rule "allRight" (formula "2") (inst "sk=i_0") (userinteraction))
      (rule "leq_literals" (formula "2") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "add_zero_left" (formula "2") (term "1,2,1,1"))
      (rule "impRight" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "5") (term "1,0,0"))
      (rule "eqSymm" (formula "6"))
      (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "5") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimSub" (formula "4") (term "1"))
      (rule "mul_literals" (formula "4") (term "1,1"))
      (rule "polySimp_addComm0" (formula "5") (term "1,2,0,1,0,0"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0"))
      (rule "polySimp_addComm0" (formula "4") (term "1"))
      (rule "len_cons_e_l" (formula "3") (term "1"))
      (rule "len_cons_e_l" (formula "1") (term "0"))
      (rule "len_cons_e_l" (formula "4") (term "1,1"))
      (rule "polySimp_addAssoc" (formula "4") (term "1"))
      (rule "add_literals" (formula "4") (term "0,1"))
      (rule "add_zero_left" (formula "4") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "5") (term "0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "5") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "6") (term "0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0"))
      (rule "add_zero_left" (formula "3") (term "0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "4"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "4") (term "0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "nnf_imp2or" (formula "4") (term "0,0"))
      (rule "nnf_notAnd" (formula "4") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0,0,0"))
      (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0,0,0"))
      (rule "add_zero_right" (formula "4") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0,0"))
      (rule "mul_literals" (formula "4") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "4") (term "0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,0,0,0"))
      (rule "add_zero_left" (formula "4") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "4") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "4") (term "0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "4") (term "1,1,0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "4") (term "0,0"))
      (rule "commute_or_2" (formula "4") (term "0,0,0"))
      (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "4") (term "0,0,0,0,0"))
      (rule "commute_or" (formula "4") (term "0,0,0,0,0,0"))
      (rule "commute_or_2" (formula "4") (term "0,0,0,0,0"))
      (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "4") (term "0,0,0"))
      (rule "commute_or_2" (formula "4") (term "0,0"))
      (rule "ifthenelse_split" (formula "5") (term "0"))
      (branch "i_0 ≥ 1 TRUE"
         (rule "eqSymm" (formula "6"))
         (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
         (rule "leq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "ifthenelse_to_or_left" (formula "4") (term "0,0,0,0,0,0,0"))
         (rule "eqSymm" (formula "4") (term "1,0,0,0,0,0,0,0,0"))
         (rule "eqSymm" (formula "4") (term "1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "4") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "4") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0"))
         (rule "commute_or" (formula "4") (term "1,1,0,0"))
         (rule "commute_or" (formula "4") (term "0,1,0,0"))
         (rule "cnf_rightDist" (formula "4") (term "0,0"))
         (rule "distr_forallAnd" (formula "4") (term "0"))
         (rule "distr_forallAnd" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "commute_or_2" (formula "4") (term "0,0"))
         (rule "shift_paren_or" (formula "5") (term "0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0"))
         (rule "shift_paren_or" (formula "4") (term "0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0,0"))
         (rule "commute_or" (formula "4") (term "0,0,0,0,0,0,0"))
         (rule "remove_cons_e_l_j" (formula "6") (term "0,0") (userinteraction))
         (rule "get_cons_e_l_0" (formula "6") (term "0") (userinteraction))
         (rule "get_cons_e_l_0" (formula "6") (term "1") (userinteraction))
          (builtin "One Step Simplification" (formula "6"))
         (rule "closeTrue" (formula "6"))
      )
      (branch "i_0 ≥ 1 FALSE"
         (rule "eqSymm" (formula "6"))
         (rule "inEqSimp_geqRight" (formula "5"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
         (rule "leq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "ifthenelse_to_or_left" (formula "3") (term "0,0,0,0,0,0,0"))
         (rule "eqSymm" (formula "3") (term "1,1,0,0,0,0,0,0,0"))
         (rule "eqSymm" (formula "3") (term "1,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "3") (term "0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "3") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "3") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "3") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "3") (term "0,0,0"))
         (rule "commute_or_2" (formula "3") (term "0,0"))
         (rule "commute_or" (formula "3") (term "0,1,0,0"))
         (rule "commute_or" (formula "3") (term "1,1,0,0"))
         (rule "cnf_rightDist" (formula "3") (term "0,0"))
         (rule "distr_forallAnd" (formula "3") (term "0"))
         (rule "distr_forallAnd" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "commute_or_2" (formula "3") (term "0,0"))
         (rule "shift_paren_or" (formula "4") (term "0,0"))
         (rule "commute_or_2" (formula "4") (term "0,0,0"))
         (rule "shift_paren_or" (formula "3") (term "0,0,0"))
         (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "3") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "3") (term "0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0,0"))
         (rule "commute_or" (formula "3") (term "0,0,0,0,0,0,0"))
         (rule "remove_cons_e_l_0" (formula "5") (term "0,0") (userinteraction))
         (rule "get_cons_e_l_i" (formula "5") (term "1") (userinteraction))
         (rule "sub_literals" (formula "5") (term "1,1") (userinteraction))
          (builtin "One Step Simplification" (formula "5"))
         (rule "closeTrue" (formula "5"))
      )
   )
   (branch "Step Case (positive)"
      (rule "impRight" (formula "2") (userinteraction))
      (rule "auto_int_induction_geqZero" (formula "3") (inst "sk=i_0") (userinteraction))
      (branch "Base Case"
         (rule "leq_literals" (formula "3") (term "1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "polySimp_addLiterals" (formula "3") (term "1,2,1,1"))
         (rule "andLeft" (formula "1"))
         (rule "impRight" (formula "4"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "7") (term "1,0,0"))
         (rule "eqSymm" (formula "6") (term "1,0"))
         (rule "eqSymm" (formula "8"))
         (rule "replace_known_left" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "7") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1"))
         (rule "mul_literals" (formula "4") (term "1,1"))
         (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "0"))
         (rule "polySimp_addComm0" (formula "3") (term "1"))
         (rule "polySimp_addComm0" (formula "7") (term "1,2,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "1,1"))
         (rule "polySimp_addComm0" (formula "8") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "8") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "8") (term "1,2,0"))
         (rule "polySimp_addComm0" (formula "6") (term "1,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1"))
         (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0"))
         (rule "len_cons_e_l" (formula "2") (term "1"))
         (rule "len_cons_e_l" (formula "1") (term "0"))
         (rule "len_cons_e_l" (formula "6") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,0,0"))
         (rule "len_cons_e_l" (formula "4") (term "1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "1"))
         (rule "add_literals" (formula "4") (term "0,1"))
         (rule "add_zero_left" (formula "4") (term "1"))
         (rule "inEqSimp_gtToGeq" (formula "7") (term "0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1,0,0"))
         (rule "len_cons_e_l" (formula "6") (term "1,1,1,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "6") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "1,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,1,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "1,1,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "8") (term "0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "add_zero_right" (formula "2") (term "0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "0,0"))
         (rule "add_zero_left" (formula "2") (term "0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,0"))
         (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_homoInEq0" (formula "3"))
         (rule "times_zero_2" (formula "3") (term "1,0"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_invertInEq0" (formula "2"))
         (rule "times_zero_2" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "mul_literals" (formula "3") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "eqSymm" (formula "8"))
         (rule "inEqSimp_subsumption1" (formula "6") (term "1,0,0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
         (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
         (rule "leq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
         (rule "leq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "nnf_imp2or" (formula "5") (term "0,0"))
         (rule "nnf_imp2or" (formula "4") (term "0"))
         (rule "nnf_notAnd" (formula "4") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
         (rule "mul_literals" (formula "4") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "5") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,1,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "4") (term "0"))
         (rule "commute_or_2" (formula "5") (term "0,0"))
         (rule "commute_or" (formula "4") (term "0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
         (rule "commute_or" (formula "5") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0,0"))
         (rule "commute_or_2" (formula "5") (term "0,0"))
         (rule "ifthenelse_to_or_left" (formula "4") (term "0,0,0"))
         (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
         (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "4") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0,0,0"))
         (rule "commute_or" (formula "4") (term "0,0"))
         (rule "commute_or_2" (formula "4") (term "0"))
         (rule "commute_or" (formula "4") (term "1,1,0"))
         (rule "commute_or" (formula "4") (term "0,1,0"))
         (rule "cnf_rightDist" (formula "4") (term "0"))
         (rule "distr_forallAnd" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "commute_or_2" (formula "4") (term "0"))
         (rule "shift_paren_or" (formula "5") (term "0"))
         (rule "commute_or_2" (formula "5") (term "0,0"))
         (rule "shift_paren_or" (formula "4") (term "0,0"))
         (rule "commute_or" (formula "4") (term "0,0,0"))
         (rule "ifthenelse_to_or_left" (formula "6") (term "0,0,0,0,0,0,0"))
         (rule "eqSymm" (formula "6") (term "1,0,0,0,0,0,0,0,0"))
         (rule "eqSymm" (formula "6") (term "1,1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "6") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "6") (term "0,0,0"))
         (rule "commute_or_2" (formula "6") (term "0,0"))
         (rule "commute_or" (formula "6") (term "0,1,0,0"))
         (rule "commute_or" (formula "6") (term "1,1,0,0"))
         (rule "cnf_rightDist" (formula "6") (term "0,0"))
         (rule "distr_forallAnd" (formula "6") (term "0"))
         (rule "distr_forallAnd" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "commute_or_2" (formula "6") (term "0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0"))
         (rule "commute_or_2" (formula "7") (term "0,0,0"))
         (rule "shift_paren_or" (formula "6") (term "0,0,0"))
         (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "6") (term "0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0"))
         (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
         (rule "allLeft" (formula "5") (inst "t=Z(0(#))"))
         (rule "leq_literals" (formula "5") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_homoInEq1" (formula "5") (term "1"))
         (rule "times_zero_2" (formula "5") (term "1,0,1"))
         (rule "add_zero_right" (formula "5") (term "0,1"))
         (rule "inEqSimp_homoInEq1" (formula "5") (term "1,0"))
         (rule "times_zero_2" (formula "5") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "5") (term "0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1"))
         (rule "mul_literals" (formula "5") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0"))
         (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "5") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "5") (term "0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "remove_cons_e_l_0" (formula "9") (term "0,0") (userinteraction))
         (rule "get_cons_e_l_i" (formula "9") (term "1") (userinteraction))
         (rule "eqSymm" (formula "9"))
         (rule "polySimp_elimSub" (formula "9") (term "1,0"))
         (rule "mul_literals" (formula "9") (term "1,1,0"))
         (rule "polySimp_addComm1" (formula "9") (term "1,0"))
         (rule "add_literals" (formula "9") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "closeTrue" (formula "9"))
      )
      (branch "Step Case (positive)"
         (rule "impRight" (formula "3") (userinteraction))
         (rule "impRight" (formula "4") (userinteraction))
         (rule "ifthenelse_split" (formula "5") (term "1") (userinteraction))
         (branch "i_0 + 1 > x_0 + 1 TRUE"
            (rule "remove_cons_e_l_j" (formula "6") (term "0,0") (userinteraction))
            (rule "polySimp_addLiterals" (formula "3") (term "1,2,1,1,1"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "eqSymm" (formula "11") (term "1,0,0"))
            (rule "eqSymm" (formula "10") (term "1,0"))
            (rule "eqSymm" (formula "8") (term "1"))
            (rule "replace_known_left" (formula "10") (term "0,0,0,0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")) (ifInst ""  (formula "5")))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimSub" (formula "6") (term "1"))
            (rule "mul_literals" (formula "6") (term "1,1"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "1"))
            (rule "polySimp_addComm0" (formula "6") (term "0"))
            (rule "polySimp_addComm0" (formula "5") (term "1"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "1"))
            (rule "polySimp_addComm0" (formula "11") (term "1,2,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "1,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "8") (term "1,0,0,1"))
            (rule "polySimp_addComm0" (formula "8") (term "1,1,0,1"))
            (rule "polySimp_addComm0" (formula "8") (term "1,2,0,1"))
            (rule "polySimp_addComm0" (formula "8") (term "1,1,1"))
            (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "6") (term "1"))
            (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0"))
            (rule "len_cons_e_l" (formula "4") (term "1"))
            (rule "len_cons_e_l" (formula "2") (term "0"))
            (rule "len_cons_e_l" (formula "10") (term "1,1,0,0,0,0"))
            (rule "len_cons_e_l" (formula "8") (term "1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "11") (term "0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "10") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
            (rule "len_cons_e_l" (formula "6") (term "1,1"))
            (rule "len_cons_e_l" (formula "10") (term "1,1,1,0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "1"))
            (rule "add_literals" (formula "6") (term "0,1"))
            (rule "add_zero_left" (formula "6") (term "1"))
            (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,1,1,0,0"))
            (rule "add_zero_left" (formula "10") (term "1,1,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_gtToGeq" (formula "8") (term "0,0,1"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,1"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0"))
            (rule "add_zero_left" (formula "4") (term "0,0"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0"))
            (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
            (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_ltToLeq" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0"))
            (rule "polySimp_addComm0" (formula "8") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "5"))
            (rule "times_zero_2" (formula "5") (term "1,0"))
            (rule "add_zero_right" (formula "5") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "3"))
            (rule "times_zero_2" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
            (rule "mul_literals" (formula "5") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "8") (term "0") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0"))
            (rule "qeq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "9"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "6"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_subsumption1" (formula "8") (term "1,0,0") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
            (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
            (rule "times_zero_1" (formula "7") (term "0,0"))
            (rule "add_zero_left" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
            (rule "mul_literals" (formula "7") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "nnf_imp2or" (formula "9") (term "0,0"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "commute_or_2" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "8") (term "0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "9") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0"))
            (rule "ifthenelse_to_or_left" (formula "8") (term "0,0,0"))
            (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
            (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "commute_or" (formula "8") (term "0,1,0"))
            (rule "commute_or" (formula "8") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "8") (term "0"))
            (rule "distr_forallAnd" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "shift_paren_or" (formula "9") (term "0"))
            (rule "commute_or_2" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "8") (term "0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0"))
            (rule "ifthenelse_split" (formula "5") (term "0"))
            (branch "x_0 ≤ -2 + i_0 TRUE"
               (rule "eqSymm" (formula "6"))
               (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "5"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
               (rule "times_zero_1" (formula "7") (term "0,0"))
               (rule "add_zero_left" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "7"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "ifthenelse_to_or_left" (formula "10") (term "0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "10") (term "1,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "10") (term "0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0"))
               (rule "commute_or" (formula "10") (term "0,1,0,0"))
               (rule "commute_or" (formula "10") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "10") (term "0,0"))
               (rule "distr_forallAnd" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "commute_or_2" (formula "10") (term "0,0"))
               (rule "shift_paren_or" (formula "11") (term "0,0"))
               (rule "commute_or_2" (formula "11") (term "0,0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
               (rule "shift_paren_or" (formula "11") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "11") (term "0,0,0,0,0,0"))
               (rule "commute_or" (formula "10") (term "0,0,0,0,0,0,0"))
               (rule "allLeft" (formula "8") (inst "t=i_0"))
               (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "1"))
               (rule "polySimp_addComm1" (formula "8") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
               (rule "inEqSimp_contradInEq0" (formula "8") (term "1,0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
               (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "8") (term "0,0,1,0"))
               (rule "leq_literals" (formula "8") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1"))
               (rule "add_literals" (formula "8") (term "0,0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
               (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "8") (term "0,0,1"))
               (rule "leq_literals" (formula "8") (term "0,1"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "6"))
               (rule "qeq_literals" (formula "8") (term "0,1"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "allLeft" (formula "12") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0,0,0,0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0,0,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0,0,0"))
               (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "commute_or_2" (formula "12") (term "0,0"))
               (rule "cut_direct" (formula "12") (term "1,0"))
               (branch "CUT: len(l_0) ≤ 1 TRUE"
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "11"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "applyEq" (formula "10") (term "1,1,1,0") (ifseqformula "1"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "1"))
                  (rule "leq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "applyEqRigid" (formula "10") (term "1,1,1,0") (ifseqformula "1"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
               (branch "CUT: len(l_0) ≤ 1 FALSE"
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "replace_known_right" (formula "11") (term "1,0,0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "replace_known_right" (formula "13") (term "1,0,0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_leqRight" (formula "14"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                  (rule "leq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "allLeft" (formula "12") (inst "t=i_0"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "12") (term "0,1,0"))
                  (rule "qeq_literals" (formula "12") (term "1,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "12") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "cut_direct" (formula "12") (term "1"))
                  (branch "CUT: len(l_0) ≤ 1 + i_0 TRUE"
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "12"))
                     (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,0"))
                     (rule "times_zero_1" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "applyEqRigid" (formula "14") (term "1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "13") (term "1,1,0"))
                     (rule "add_literals" (formula "13") (term "0,1,1,0"))
                     (rule "add_zero_left" (formula "13") (term "1,1,0"))
                     (rule "applyEq" (formula "14") (term "1,1,1,0,0,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "14") (term "1,1,0,0,0"))
                     (rule "applyEqRigid" (formula "11") (term "1,1,1,0,0,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "1,1,0,0,0"))
                     (rule "applyEq" (formula "10") (term "1,1,1,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "10") (term "1,1,0"))
                     (rule "add_literals" (formula "10") (term "0,1,1,0"))
                     (rule "applyEq" (formula "11") (term "1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq0" (formula "12"))
                     (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,0"))
                     (rule "times_zero_1" (formula "12") (term "0"))
                     (rule "qeq_literals" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "applyEqRigid" (formula "9") (term "1,1,1,0") (ifseqformula "2"))
                     (rule "polySimp_addAssoc" (formula "9") (term "1,1,0"))
                     (rule "add_literals" (formula "9") (term "0,1,1,0"))
                     (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                     (rule "leq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0"))
                     (rule "add_literals" (formula "10") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "10") (term "0,1,0"))
                     (rule "leq_literals" (formula "10") (term "1,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "commute_or_2" (formula "8") (term "0"))
                     (rule "commute_or_2" (formula "7") (term "0"))
                     (rule "get_cons_e_l_i" (formula "11") (term "1") (userinteraction))
                     (rule "get_cons_e_l_i" (formula "11") (term "0") (userinteraction))
                     (rule "polySimp_elimSub" (formula "11") (term "1,1"))
                     (rule "mul_literals" (formula "11") (term "1,1,1"))
                     (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "1,1"))
                     (rule "add_literals" (formula "11") (term "0,1,1"))
                     (rule "add_zero_left" (formula "11") (term "1,1"))
                     (rule "polySimp_addComm1" (formula "11") (term "1,0"))
                     (rule "add_literals" (formula "11") (term "0,1,0"))
                     (rule "add_zero_left" (formula "11") (term "1,0"))
                     (rule "allLeft" (formula "9") (inst "t=i_0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,1,0,0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,1,0,0,0"))
                     (rule "leq_literals" (formula "9") (term "1,0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0,0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "9") (term "0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "allLeft" (formula "9") (inst "t=x_0"))
                     (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_contradInEq0" (formula "9") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1"))
                     (rule "leq_literals" (formula "9") (term "0,1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "closeFalse" (formula "9"))
                  )
                  (branch "CUT: len(l_0) ≤ 1 + i_0 FALSE"
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_leqRight" (formula "15"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "get_cons_e_l_i" (formula "15") (term "0") (userinteraction))
                     (rule "polySimp_elimSub" (formula "15") (term "1,0"))
                     (rule "mul_literals" (formula "15") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "1,0"))
                     (rule "add_literals" (formula "15") (term "0,1,0"))
                     (rule "add_zero_left" (formula "15") (term "1,0"))
                     (rule "allLeft" (formula "11") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0,0,0,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "commute_or_2" (formula "11") (term "0"))
                     (rule "allLeft" (formula "11") (inst "t=x_0"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1"))
                     (rule "mul_literals" (formula "11") (term "0,1,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0,0,1"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1"))
                     (rule "leq_literals" (formula "11") (term "0,1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "7"))
                     (rule "qeq_literals" (formula "11") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1"))
                     (rule "leq_literals" (formula "11") (term "0,1"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "11"))
                     (rule "eqSymm" (formula "17"))
                     (rule "get_cons_e_l_i" (formula "17") (term "0") (userinteraction))
                     (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                     (rule "mul_literals" (formula "17") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "1,0"))
                     (rule "add_literals" (formula "17") (term "0,1,0"))
                     (rule "add_zero_left" (formula "17") (term "1,0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "closeTrue" (formula "17"))
                  )
               )
            )
            (branch "x_0 ≤ -2 + i_0 FALSE"
               (rule "eqSymm" (formula "5"))
               (rule "inEqSimp_leqRight" (formula "11"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
               (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "10") (term "1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "13") (term "1,1,0") (ifseqformula "1"))
               (rule "polySimp_addAssoc" (formula "13") (term "1,0"))
               (rule "add_literals" (formula "13") (term "0,1,0"))
               (rule "add_zero_left" (formula "13") (term "1,0"))
               (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "1"))
               (rule "polySimp_addAssoc" (formula "7") (term "1,0"))
               (rule "add_literals" (formula "7") (term "0,1,0"))
               (rule "add_zero_left" (formula "7") (term "1,0"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,0"))
               (rule "times_zero_1" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "10") (term "1,1,1,0,0") (ifseqformula "1"))
               (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0"))
               (rule "add_literals" (formula "10") (term "0,1,1,0,0"))
               (rule "add_zero_left" (formula "10") (term "1,1,0,0"))
               (rule "applyEqRigid" (formula "5") (term "1,1") (ifseqformula "1"))
               (rule "polySimp_addAssoc" (formula "5") (term "1"))
               (rule "add_literals" (formula "5") (term "0,1"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,0"))
               (rule "times_zero_1" (formula "2") (term "0"))
               (rule "qeq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEqRigid" (formula "7") (term "1,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "8") (term "1,1,1,0,0,0,0") (ifseqformula "1"))
               (rule "polySimp_addAssoc" (formula "8") (term "1,1,0,0,0,0"))
               (rule "add_literals" (formula "8") (term "0,1,1,0,0,0,0"))
               (rule "add_zero_left" (formula "8") (term "1,1,0,0,0,0"))
               (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
               (rule "polySimp_addAssoc" (formula "10") (term "1,1"))
               (rule "add_literals" (formula "10") (term "0,1,1"))
               (rule "add_zero_left" (formula "10") (term "1,1"))
               (rule "applyEq" (formula "4") (term "1,1,1") (ifseqformula "1"))
               (rule "polySimp_addAssoc" (formula "4") (term "1,1"))
               (rule "add_literals" (formula "4") (term "0,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "6"))
               (rule "mul_literals" (formula "6") (term "1"))
               (rule "ifthenelse_to_or_left" (formula "8") (term "0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "8") (term "1,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "8") (term "1,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "8") (term "0,0,0"))
               (rule "commute_or_2" (formula "8") (term "0,0"))
               (rule "commute_or" (formula "8") (term "1,1,0,0"))
               (rule "commute_or" (formula "8") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "8") (term "0,0"))
               (rule "distr_forallAnd" (formula "8") (term "0"))
               (rule "distr_forallAnd" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "commute_or_2" (formula "8") (term "0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0"))
               (rule "commute_or_2" (formula "9") (term "0,0,0"))
               (rule "shift_paren_or" (formula "8") (term "0,0,0"))
               (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "8") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0,0"))
               (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0"))
               (rule "allLeft" (formula "6") (inst "t=i_0"))
               (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,1,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "6") (term "0,1,0"))
               (rule "qeq_literals" (formula "6") (term "1,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
               (rule "polySimp_addComm1" (formula "6") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1"))
               (rule "mul_literals" (formula "6") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
               (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1"))
               (rule "add_literals" (formula "6") (term "0,0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "6") (term "0,0,1"))
               (rule "leq_literals" (formula "6") (term "0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "5"))
               (rule "qeq_literals" (formula "6") (term "0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "allLeft" (formula "10") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0,0,0,0,0,0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0,0,0,0,0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0,0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0,0,0"))
               (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "commute_or_2" (formula "10") (term "0,0"))
               (rule "cut_direct" (formula "10") (term "1,0"))
               (branch "CUT: len(l_0) ≤ 1 TRUE"
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "9"))
                  (rule "applyEq" (formula "8") (term "1,1,1,0") (ifseqformula "2"))
                  (rule "add_literals" (formula "8") (term "1,1,0"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "add_zero_left" (formula "4") (term "0"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEq" (formula "9") (term "1,1,1,0") (ifseqformula "2"))
                  (rule "add_literals" (formula "9") (term "1,1,0"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "CUT: len(l_0) ≤ 1 FALSE"
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "replace_known_right" (formula "9") (term "1,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "replace_known_right" (formula "11") (term "1,0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_leqRight" (formula "12"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                  (rule "leq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "allLeft" (formula "10") (inst "t=i_0"))
                  (rule "inEqSimp_homoInEq0" (formula "10") (term "1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,1,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "10") (term "0,1,0"))
                  (rule "qeq_literals" (formula "10") (term "1,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "1"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "10") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "cut_direct" (formula "10") (term "1"))
                  (branch "CUT: len(l_0) ≤ 1 + i_0 TRUE"
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "10"))
                     (rule "applyEqRigid" (formula "10") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "13") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,1,0"))
                     (rule "add_literals" (formula "12") (term "0,1,1,0"))
                     (rule "add_zero_left" (formula "12") (term "1,1,0"))
                     (rule "applyEqRigid" (formula "8") (term "1,1,1,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "8") (term "1,1,0"))
                     (rule "add_literals" (formula "8") (term "0,1,1,0"))
                     (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "11"))
                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "1,0"))
                     (rule "times_zero_1" (formula "11") (term "0"))
                     (rule "qeq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "applyEqRigid" (formula "10") (term "1,1,1,0,0,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "10") (term "1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "12") (term "1,1,1,0,0,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "1,1,0,0,0"))
                     (rule "applyEqRigid" (formula "9") (term "1,1,1,0") (ifseqformula "3"))
                     (rule "polySimp_addAssoc" (formula "9") (term "1,1,0"))
                     (rule "add_literals" (formula "9") (term "0,1,1,0"))
                     (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "1,0"))
                     (rule "times_zero_1" (formula "4") (term "0"))
                     (rule "leq_literals" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "9") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0"))
                     (rule "add_literals" (formula "9") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "9") (term "0,1,0"))
                     (rule "leq_literals" (formula "9") (term "1,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "inEqSimp_or_subsumption3" (formula "7") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "7") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "7") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "get_cons_e_l_i" (formula "10") (term "1") (userinteraction))
                     (rule "get_cons_e_l_i" (formula "10") (term "0") (userinteraction))
                     (rule "polySimp_elimSub" (formula "10") (term "1,1"))
                     (rule "mul_literals" (formula "10") (term "1,1,1"))
                     (rule "polySimp_elimSub" (formula "10") (term "1,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,0"))
                     (rule "allLeft" (formula "8") (inst "t=i_0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,1,0,0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,1,0,0,0"))
                     (rule "leq_literals" (formula "8") (term "1,0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0,0,0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "8") (term "0,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "allLeft" (formula "8") (inst "t=add(Z(neglit(1(#))), i_0)"))
                     (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "8") (term "1"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,1"))
                     (rule "add_literals" (formula "8") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "8") (term "1,0,1"))
                     (rule "add_zero_right" (formula "8") (term "0,1"))
                     (rule "leq_literals" (formula "8") (term "1"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_invertInEq1" (formula "8"))
                     (rule "times_zero_2" (formula "8") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
                  (branch "CUT: len(l_0) ≤ 1 + i_0 FALSE"
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_leqRight" (formula "13"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                     (rule "add_literals" (formula "4") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                     (rule "add_literals" (formula "4") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0,0"))
                     (rule "add_zero_right" (formula "4") (term "0,0"))
                     (rule "qeq_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "get_cons_e_l_i" (formula "13") (term "0") (userinteraction))
                     (rule "get_cons_e_l_i" (formula "13") (term "1") (userinteraction))
                     (rule "polySimp_elimSub" (formula "13") (term "1,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0"))
                     (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                     (rule "mul_literals" (formula "13") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,1"))
                     (rule "allLeft" (formula "9") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0,0,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0,0,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0,0"))
                     (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "commute_or_2" (formula "9") (term "0"))
                     (rule "allLeft" (formula "9") (inst "t=add(Z(neglit(1(#))), i_0)"))
                     (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,1"))
                     (rule "polySimp_addComm1" (formula "9") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "9") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "0,0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,1,0"))
                     (rule "add_literals" (formula "9") (term "1,1,0,1,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "9") (term "0,1,0"))
                     (rule "leq_literals" (formula "9") (term "1,0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0"))
                     (rule "add_zero_left" (formula "9") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                     (rule "inEqSimp_invertInEq1" (formula "9") (term "0"))
                     (rule "times_zero_2" (formula "9") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1"))
                     (rule "leq_literals" (formula "9") (term "0,1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "closeFalse" (formula "5"))
                  )
               )
            )
         )
         (branch "i_0 + 1 > x_0 + 1 FALSE"
            (rule "remove_cons_e_l_j" (formula "6") (term "0,0") (userinteraction))
            (rule "polySimp_addLiterals" (formula "6") (term "1,1"))
            (rule "polySimp_addLiterals" (formula "2") (term "1,2,1,1,1"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "10") (term "1,0,0"))
            (rule "eqSymm" (formula "9") (term "1,0"))
            (rule "eqSymm" (formula "7") (term "1"))
            (rule "replace_known_left" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
            (rule "polySimp_addLiterals" (formula "12") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimSub" (formula "5") (term "1"))
            (rule "mul_literals" (formula "5") (term "1,1"))
            (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0"))
            (rule "polySimp_addComm0" (formula "11") (term "1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1"))
            (rule "polySimp_addComm0" (formula "5") (term "0"))
            (rule "polySimp_addComm0" (formula "4") (term "1"))
            (rule "polySimp_addComm0" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "2") (term "1"))
            (rule "polySimp_addComm0" (formula "10") (term "1,2,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,2,0,1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "1,1,0,1"))
            (rule "polySimp_addComm0" (formula "7") (term "1,1,1"))
            (rule "polySimp_addComm0" (formula "7") (term "1,0,0,1"))
            (rule "polySimp_addComm0" (formula "7") (term "1,2,0,1"))
            (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0,0"))
            (rule "polySimp_addComm0" (formula "5") (term "1"))
            (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
            (rule "len_cons_e_l" (formula "3") (term "1"))
            (rule "len_cons_e_l" (formula "1") (term "0"))
            (rule "len_cons_e_l" (formula "9") (term "1,1,0,0,0,0"))
            (rule "len_cons_e_l" (formula "7") (term "1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "10") (term "0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
            (rule "inEqSimp_gtRight" (formula "11"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "len_cons_e_l" (formula "6") (term "1,1"))
            (rule "len_cons_e_l" (formula "10") (term "1,1,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "1"))
            (rule "add_literals" (formula "6") (term "0,1"))
            (rule "add_zero_left" (formula "6") (term "1"))
            (rule "polySimp_addAssoc" (formula "10") (term "1,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,1,1,0,0"))
            (rule "add_zero_left" (formula "10") (term "1,1,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "8") (term "0,0,1"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,1"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0"))
            (rule "add_zero_left" (formula "4") (term "0,0"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0"))
            (rule "replace_known_left" (formula "10") (term "1,0,0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0"))
            (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_ltToLeq" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0"))
            (rule "polySimp_addComm0" (formula "8") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "5"))
            (rule "times_zero_2" (formula "5") (term "1,0"))
            (rule "add_zero_right" (formula "5") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "3"))
            (rule "times_zero_2" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
            (rule "mul_literals" (formula "5") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "10") (term "1,0,0") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
            (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "7"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0,1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,1"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0,1"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,0,0,1"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,1"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0,1"))
            (rule "leq_literals" (formula "7") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "eqSymm" (formula "7") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "8"))
            (rule "leq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,0"))
            (rule "qeq_literals" (formula "6") (term "0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "nnf_imp2or" (formula "9") (term "0,0"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "commute_or_2" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "8") (term "0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "9") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0"))
            (rule "ifthenelse_to_or_left" (formula "8") (term "0,0,0"))
            (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
            (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "commute_or" (formula "8") (term "0,1,0"))
            (rule "commute_or" (formula "8") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "8") (term "0"))
            (rule "distr_forallAnd" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "commute_or_2" (formula "8") (term "0"))
            (rule "shift_paren_or" (formula "9") (term "0"))
            (rule "commute_or_2" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "8") (term "0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0"))
            (rule "ifthenelse_to_or_left" (formula "10") (term "0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "10") (term "1,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "10") (term "1,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0,0,0,0,0,0"))
            (rule "commute_or" (formula "10") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,0"))
            (rule "commute_or" (formula "10") (term "1,1,0,0"))
            (rule "commute_or" (formula "10") (term "0,1,0,0"))
            (rule "cnf_rightDist" (formula "10") (term "0,0"))
            (rule "distr_forallAnd" (formula "10") (term "0"))
            (rule "distr_forallAnd" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "commute_or_2" (formula "10") (term "0,0"))
            (rule "shift_paren_or" (formula "11") (term "0,0"))
            (rule "commute_or_2" (formula "11") (term "0,0,0"))
            (rule "shift_paren_or" (formula "10") (term "0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "11") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "10") (term "0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "11") (term "0,0,0,0,0,0"))
            (rule "commute_or" (formula "10") (term "0,0,0,0,0,0,0"))
            (rule "allLeft" (formula "9") (inst "t=i_0"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1"))
            (rule "polySimp_addComm1" (formula "9") (term "0,1"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1"))
            (rule "mul_literals" (formula "9") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
            (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,1"))
            (rule "leq_literals" (formula "9") (term "0,1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "9") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
            (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "9") (term "0,0,1"))
            (rule "leq_literals" (formula "9") (term "0,1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "allLeft" (formula "12") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0,0,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0,0,0"))
            (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0,0,0,0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "12") (term "0,1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "commute_or_2" (formula "12") (term "0,0"))
            (rule "cut_direct" (formula "12") (term "1,0"))
            (branch "CUT: len(l_0) ≤ 1 TRUE"
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "11"))
               (rule "applyEq" (formula "11") (term "1,1,1,0") (ifseqformula "2"))
               (rule "add_literals" (formula "11") (term "1,1,0"))
               (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "2"))
               (rule "leq_literals" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "applyEq" (formula "9") (term "1,1,1,0") (ifseqformula "2"))
               (rule "add_literals" (formula "9") (term "1,1,0"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "add_zero_left" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "4"))
               (rule "qeq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
            (branch "CUT: len(l_0) ≤ 1 FALSE"
                (builtin "One Step Simplification" (formula "12"))
               (rule "replace_known_right" (formula "11") (term "1,0,0") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "replace_known_right" (formula "13") (term "1,0,0") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_leqRight" (formula "14"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "allLeft" (formula "13") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0,0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0"))
               (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0,0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "13") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "commute_or_2" (formula "13") (term "0"))
               (rule "allLeft" (formula "12") (inst "t=x_0"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "1"))
               (rule "polySimp_addComm1" (formula "12") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1"))
               (rule "mul_literals" (formula "12") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0,0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "12") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
               (rule "leq_literals" (formula "12") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1"))
               (rule "add_literals" (formula "12") (term "0,0,0,0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
               (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "12") (term "0,0,1"))
               (rule "leq_literals" (formula "12") (term "0,1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "allLeft" (formula "13") (inst "t=i_0"))
               (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,1,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,1,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,1,0"))
               (rule "add_zero_right" (formula "13") (term "0,1,0"))
               (rule "qeq_literals" (formula "13") (term "1,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
               (rule "polySimp_addComm1" (formula "13") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1"))
               (rule "mul_literals" (formula "13") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1"))
               (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "13") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "cut_direct" (formula "13") (term "1"))
               (branch "CUT: len(l_0) ≤ 1 + i_0 TRUE"
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "13"))
                  (rule "applyEqRigid" (formula "15") (term "1,1,1,0") (ifseqformula "3"))
                  (rule "polySimp_addAssoc" (formula "15") (term "1,1,0"))
                  (rule "add_literals" (formula "15") (term "0,1,1,0"))
                  (rule "add_zero_left" (formula "15") (term "1,1,0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq0" (formula "14"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
                  (rule "add_literals" (formula "14") (term "1,0"))
                  (rule "times_zero_1" (formula "14") (term "0"))
                  (rule "qeq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEqRigid" (formula "15") (term "1,1,1,0,0,0") (ifseqformula "3"))
                  (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "15") (term "1,1,0,0,0"))
                  (rule "applyEq" (formula "11") (term "1,1,1,0") (ifseqformula "3"))
                  (rule "polySimp_addAssoc" (formula "11") (term "1,1,0"))
                  (rule "add_literals" (formula "11") (term "0,1,1,0"))
                  (rule "applyEqRigid" (formula "12") (term "1,1,1,0,0,0") (ifseqformula "3"))
                  (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "12") (term "1,1,0,0,0"))
                  (rule "applyEqRigid" (formula "12") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEqRigid" (formula "15") (term "1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "applyEqRigid" (formula "9") (term "1,1,1,0") (ifseqformula "3"))
                  (rule "polySimp_addAssoc" (formula "9") (term "1,1,0"))
                  (rule "add_literals" (formula "9") (term "0,1,1,0"))
                  (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0"))
                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "1,0"))
                  (rule "times_zero_1" (formula "4") (term "0"))
                  (rule "leq_literals" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "4"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "leq_literals" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "CUT: len(l_0) ≤ 1 + i_0 FALSE"
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "get_cons_e_l_i" (formula "16") (term "0") (userinteraction))
                  (rule "get_cons_e_l_i" (formula "16") (term "1") (userinteraction))
                  (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                  (rule "mul_literals" (formula "16") (term "1,1,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                  (rule "mul_literals" (formula "16") (term "1,1,1"))
                  (rule "polySimp_addComm1" (formula "16") (term "1,0"))
                  (rule "add_literals" (formula "16") (term "0,1,0"))
                  (rule "add_zero_left" (formula "16") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "1,1"))
                  (rule "add_literals" (formula "16") (term "0,1,1"))
                  (rule "close" (formula "16") (ifseqformula "12"))
               )
            )
         )
      )
      (branch "Step Case (negative)"
         (rule "polySimp_addLiterals" (formula "3") (term "1,2,1,1,1,0"))
         (rule "polySimp_addLiterals" (formula "3") (term "1,2,1,1,1"))
         (rule "andLeft" (formula "1"))
         (rule "impRight" (formula "4"))
         (rule "impRight" (formula "5"))
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "10") (term "1,0,0"))
         (rule "eqSymm" (formula "9") (term "1,0"))
         (rule "eqSymm" (formula "11"))
         (rule "eqSymm" (formula "7") (term "1"))
         (rule "replace_known_left" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimSub" (formula "5") (term "1"))
         (rule "mul_literals" (formula "5") (term "1,1"))
         (rule "polySimp_elimSub" (formula "3") (term "0"))
         (rule "mul_literals" (formula "3") (term "1,0"))
         (rule "polySimp_elimSub" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "1,1"))
         (rule "polySimp_elimSub" (formula "11") (term "1,0,1"))
         (rule "mul_literals" (formula "11") (term "1,1,0,1"))
         (rule "polySimp_elimSub" (formula "11") (term "0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
         (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "5") (term "0"))
         (rule "polySimp_addComm0" (formula "4") (term "1"))
         (rule "polySimp_addComm0" (formula "10") (term "1,2,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,1"))
         (rule "polySimp_addComm0" (formula "11") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,2,0"))
         (rule "polySimp_addComm0" (formula "9") (term "1,2,0,1,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,1"))
         (rule "polySimp_addComm0" (formula "7") (term "1,0,0,1"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,1"))
         (rule "polySimp_addComm0" (formula "7") (term "1,2,0,1"))
         (rule "polySimp_addComm0" (formula "10") (term "1,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "5") (term "1"))
         (rule "polySimp_addComm0" (formula "3") (term "0"))
         (rule "polySimp_addComm0" (formula "2") (term "1"))
         (rule "polySimp_addComm0" (formula "11") (term "1,0,1"))
         (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
         (rule "len_cons_e_l" (formula "3") (term "1"))
         (rule "len_cons_e_l" (formula "1") (term "0"))
         (rule "len_cons_e_l" (formula "9") (term "1,1,0,0,0,0"))
         (rule "len_cons_e_l" (formula "7") (term "1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "10") (term "0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "9") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
         (rule "len_cons_e_l" (formula "5") (term "1,1"))
         (rule "len_cons_e_l" (formula "9") (term "1,1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "1"))
         (rule "add_literals" (formula "5") (term "0,1"))
         (rule "add_zero_left" (formula "5") (term "1"))
         (rule "polySimp_addAssoc" (formula "9") (term "1,1,0,0"))
         (rule "add_literals" (formula "9") (term "0,1,1,0,0"))
         (rule "add_zero_left" (formula "9") (term "1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "7") (term "0,0,1"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,1"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,1"))
         (rule "add_literals" (formula "7") (term "0,0,0,0,0,1"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "11") (term "0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,0"))
         (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
         (rule "add_literals" (formula "3") (term "0,0,0"))
         (rule "add_zero_left" (formula "3") (term "0,0"))
         (rule "polySimp_addComm0" (formula "3") (term "0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "4"))
         (rule "times_zero_2" (formula "4") (term "1,0"))
         (rule "add_zero_right" (formula "4") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "times_zero_2" (formula "2") (term "1,0"))
         (rule "add_zero_right" (formula "2") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "10") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7") (term "0,0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,1"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
         (rule "mul_literals" (formula "4") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "6"))
         (rule "qeq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
   (branch "Step Case (negative)"
      (rule "impRight" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "allRight" (formula "4") (inst "sk=i_0"))
      (rule "impRight" (formula "4"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "8") (term "1,0,0"))
      (rule "eqSymm" (formula "7") (term "1,0"))
      (rule "eqSymm" (formula "9"))
      (rule "replace_known_left" (formula "7") (term "0,0,0,0,0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimSub" (formula "5") (term "1"))
      (rule "mul_literals" (formula "5") (term "1,1"))
      (rule "polySimp_elimSub" (formula "5") (term "0"))
      (rule "mul_literals" (formula "5") (term "1,0"))
      (rule "polySimp_elimSub" (formula "4") (term "1"))
      (rule "mul_literals" (formula "4") (term "1,1"))
      (rule "polySimp_elimSub" (formula "9") (term "1,0,0"))
      (rule "mul_literals" (formula "9") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "9") (term "1,1,0"))
      (rule "mul_literals" (formula "9") (term "1,1,1,0"))
      (rule "polySimp_elimSub" (formula "9") (term "0,1,2,0"))
      (rule "mul_literals" (formula "9") (term "1,0,1,2,0"))
      (rule "polySimp_addLiterals" (formula "9") (term "1,2,0"))
      (rule "add_zero_right" (formula "9") (term "1,2,0"))
      (rule "polySimp_elimSub" (formula "9") (term "1,1"))
      (rule "mul_literals" (formula "9") (term "1,1,1"))
      (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0"))
      (rule "mul_literals" (formula "7") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "1,2,0,1,0,0"))
      (rule "polySimp_addComm0" (formula "7") (term "1,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,0"))
      (rule "polySimp_addComm0" (formula "5") (term "1"))
      (rule "polySimp_addComm0" (formula "5") (term "0"))
      (rule "polySimp_addComm0" (formula "4") (term "1"))
      (rule "polySimp_addComm0" (formula "9") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
      (rule "polySimp_addComm0" (formula "9") (term "1,1"))
      (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
      (rule "len_cons_e_l" (formula "3") (term "1"))
      (rule "len_cons_e_l" (formula "1") (term "0"))
      (rule "len_cons_e_l" (formula "7") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "8") (term "0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,1,0"))
      (rule "len_cons_e_l" (formula "5") (term "1,1"))
      (rule "len_cons_e_l" (formula "7") (term "1,1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "1"))
      (rule "add_literals" (formula "5") (term "0,1"))
      (rule "add_zero_left" (formula "5") (term "1"))
      (rule "polySimp_addAssoc" (formula "7") (term "1,1,0,0"))
      (rule "add_literals" (formula "7") (term "0,1,1,0,0"))
      (rule "add_zero_left" (formula "7") (term "1,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "9") (term "0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,0,0"))
      (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0"))
      (rule "add_zero_left" (formula "3") (term "0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "5"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "5") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,0"))
      (rule "inEqSimp_homoInEq0" (formula "4"))
      (rule "times_zero_2" (formula "4") (term "1,0"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "9") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "0,1,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "0,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "5"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0"))
      (rule "polySimp_elimOne" (formula "5") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4"))
      (rule "mul_literals" (formula "4") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "4"))
      (rule "qeq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "closeFalse" (formula "6"))
   )
)
)
}
