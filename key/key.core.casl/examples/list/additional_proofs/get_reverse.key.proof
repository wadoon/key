\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Feb 16 18:02:10 CET 2022
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , floatRules-floatRules\\:strictfpOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\sorts {
    Nat \extends java.lang.Object;
    /*! @defaultValue(nil) */
    NatList;
}
\functions {
    \unique Nat Nat(int);
    \unique NatList nil;
    \unique NatList cons(Nat, NatList);
    NatList append(NatList, NatList);
    NatList reverse(NatList);
    int len(NatList);
    Nat get(NatList, int);
    NatList remove(NatList, int);
}
\axioms {
    natlist_induction {
        \schemaVar \formula phi;
        \schemaVar \variable NatList base;
        \schemaVar \variable Nat first;

        \find( ==> \forall base; phi )
        \varcond( \notFreeIn(first,phi) )

        "base case": \replacewith( ==>  {\subst base; nil} phi );
        "1. case": \replacewith( ==> \forall first; \forall base;  ( phi -> {\subst base; cons(first, base)} phi ) )
    };
    natlist_ctor_split {
        \schemaVar \term NatList natlist;
        \schemaVar \skolemTerm Nat first;
        \schemaVar \skolemTerm NatList rest;
        \find(natlist) \sameUpdateLevel
        \varcond(\new(first, \dependingOn(natlist)), \new(rest, \dependingOn(natlist)))
        \replacewith(nil) \add(natlist = nil ==>);
        \replacewith(cons(first, rest)) \add(natlist = cons(first, rest) ==>)
    };
    append_nil_l {
        \schemaVar \term NatList l;
        \find( append(nil, l) )
        \replacewith( l )
    };
    append_cons_e_l1_l2 {
        \schemaVar \term NatList l1;
        \schemaVar \term NatList l2;
        \schemaVar \term Nat e;
        \find( append(cons(e, l1), l2) )
        \replacewith( cons(e, append(l1, l2)) )
    };
    reverse_nil {
        \find( reverse(nil) )
        \replacewith( nil )
    };
    reverse_cons_e_l {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \find( reverse(cons(e, l)) )
        \replacewith( append(reverse(l), cons(e, nil)) )
    };
    len_nil {
        \find( len(nil) )
        \replacewith( 0 )
    };
    len_cons_e_l {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \find( len(cons(e, l)) )
        \replacewith( 1+len(l) )
    };
    get_cons_e_l_0 {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \find( get(cons(e, l), 0) )
        \replacewith( e )
    };
    get_cons_e_l_i {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \schemaVar \term int i;
        \find( get(cons(e, l), i) )
        \replacewith( get(l, i-1) )
    };
    remove_cons_e_l_0 {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \find( remove(cons(e, l), 0) )
        \replacewith( l )
    };
    remove_cons_e_l_j {
        \schemaVar \term Nat e;
        \schemaVar \term NatList l;
        \schemaVar \term int j;
        \find( remove(cons(e, l), j) )
        \replacewith( cons(e, remove(l, j-1)) )
    };

    rev_natlist_induction {
        \schemaVar \formula phi;
        \schemaVar \variable NatList base;
        \schemaVar \variable Nat first;

        \find( ==> \forall base; phi )
        \varcond( \notFreeIn(first, phi) )

        "base case": \replacewith( ==>  {\subst base; nil} phi );
        "1. case": \replacewith( ==> \forall first; ( {\subst base; nil} phi -> {\subst base; cons(first, nil)} phi ) );
	"2. case": \replacewith( ==> \forall first; \forall base;  ( {\subst base; cons(first, nil) } phi -> {\subst base; cons(first, reverse(base))}phi ) )
    };

	get_ind {
    		\schemaVar \formula phi;
			\schemaVar \variable int idx;
	\schemaVar \variable NatList base;
	\schemaVar \variable Nat first;

	\find( ==> \forall idx; \forall base; phi )
	\varcond( \notFreeIn(first, phi) )

	\replacewith( ==> \forall idx; {\subst base;nil}phi );
	\replacewith( ==> \forall first; {\subst base;cons(first,nil)}{\subst idx;0}phi );
	\replacewith( ==> \forall idx; \forall first; \forall base; {\subst base;cons(first,base)}{\subst idx;idx}phi )
	\add( \forall first; {\subst base;cons(first,nil)}{\subst idx;0}phi ==> )
    };


    get_last_l {
    	       \schemaVar \term NatList l;
	       \schemaVar \term Nat i;
    	       \find( get(append(l, cons(i, nil)), len(l)) )
	       \replacewith( i )
    };

    get_last_n {
    	       \schemaVar \term NatList l1,l2;
       	       \schemaVar \term Nat i;
	       \schemaVar \term int j;

	       \find( get(append(l1,l2), j) )
	       \replacewith( get(l1, j) ) \add( j < len(l1) ==> );
	       \replacewith( get(l2, j-len(l1) ) ) \add( j >= len(l1) ==> )

    };

    len_reverse {
    		\schemaVar \term NatList l;
		\find( len(reverse(l)) )
		\replacewith( len(l) )
    };

    len_append {
    	       \schemaVar \term NatList l1,l2;
	       \find( len(append(l1,l2)) )
	       \replacewith( len(l1) + len(l2) )
    };

    append_append {
    		  \schemaVar \term NatList l1,l2,l3;
		  \find( append(append(l1,l2),l3) )
		  \replacewith( append(l1, append(l2,l3)) )
    };

    rev_rev {
    	    \schemaVar \term NatList l;
	    \find( reverse(reverse(l)) )
	    \replacewith( l )
    };
}
\problem {
\forall NatList l;
  \forall int i;
    (     geq(len(l), Z(1(#)))
        & geq(i, Z(0(#)))
        & lt(i, len(l))
     ->   get(reverse(l), sub(sub(len(l), i), Z(1(#))))
        = get(l, i))

}

\proof {
(keyLog "0" (keyUser "hannes" ) (keyVersion "6bf67feba6"))

(autoModeTime "1276")

(branch "dummy ID"
(rule "natlist_induction" (formula "1") (inst "first=first") (userinteraction))
(branch "base case"
   (rule "len_nil" (formula "1") (term "0,0,0,0,0") (userinteraction))
   (rule "qeq_literals" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeTrue" (formula "1"))
)
(branch "1. case"
   (rule "allRight" (formula "1") (inst "sk=first_0") (userinteraction))
   (rule "allRight" (formula "1") (inst "sk=l_0") (userinteraction))
   (rule "impRight" (formula "1") (userinteraction))
   (rule "auto_int_induction_geqZero" (formula "2") (inst "sk=i_0") (userinteraction))
   (branch "Base Case"
      (rule "impRight" (formula "2") (userinteraction))
      (rule "qeq_literals" (formula "1") (term "1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_elimSub" (formula "3") (term "1,0,1,0"))
      (rule "mul_literals" (formula "3") (term "1,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "4") (term "1,0"))
      (rule "mul_literals" (formula "4") (term "1,1,0"))
      (rule "polySimp_elimSub" (formula "3") (term "0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "4") (term "0,1,0"))
      (rule "times_zero_2" (formula "4") (term "1,0,1,0"))
      (rule "polySimp_addLiterals" (formula "4") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "1,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "1,0"))
      (rule "polySimp_addComm0" (formula "3") (term "0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "nnf_imp2or" (formula "2") (term "0"))
      (rule "nnf_notAnd" (formula "2") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
      (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "2") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
      (rule "mul_literals" (formula "2") (term "1,1,0,0,0"))
      (rule "commute_or_2" (formula "2") (term "0"))
      (rule "commute_or_2" (formula "2") (term "0,0"))
      (rule "commute_or" (formula "2") (term "0,0,0"))
      (rule "commute_or_2" (formula "2") (term "0,0"))
      (rule "commute_or_2" (formula "2") (term "0"))
      (rule "cut_direct" (formula "2") (term "1,0"))
      (branch "CUT: len(l_0) ≤ 0 TRUE"
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "len_cons_e_l" (formula "1") (term "0") (userinteraction))
         (rule "len_cons_e_l" (formula "3") (term "1,1,0") (userinteraction))
         (rule "reverse_cons_e_l" (formula "3") (term "0,0") (userinteraction))
         (rule "polySimp_addAssoc" (formula "3") (term "1,0"))
         (rule "add_literals" (formula "3") (term "0,1,0") (userinteraction))
         (rule "add_zero_left" (formula "3") (term "1,0") (userinteraction))
         (rule "eqTermCut" (formula "3") (term "1,0") (inst "s=len(reverse(l_0))") (userinteraction))
         (branch "Assume len(l_0) = len(reverse(l_0))"
            (rule "applyEqRigid" (formula "4") (term "1,0") (ifseqformula "1") (userinteraction))
            (rule "get_last_l" (formula "4") (term "0") (userinteraction))
            (rule "get_cons_e_l_0" (formula "4") (term "1") (userinteraction))
             (builtin "One Step Simplification" (formula "4"))
            (rule "closeTrue" (formula "4"))
         )
         (branch "Assume len(l_0) != len(reverse(l_0))"
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "len_reverse" (formula "3") (term "1") (userinteraction))
             (builtin "One Step Simplification" (formula "3") (userinteraction))
            (rule "closeTrue" (formula "3") (userinteraction))
         )
      )
      (branch "CUT: len(l_0) ≤ 0 FALSE"
          (builtin "One Step Simplification" (formula "2"))
         (rule "inEqSimp_leqRight" (formula "3"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "len_cons_e_l" (formula "4") (term "1,1,0") (userinteraction))
         (rule "get_cons_e_l_0" (formula "4") (term "1") (userinteraction))
         (rule "polySimp_addAssoc" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0,1,0"))
         (rule "add_zero_left" (formula "4") (term "1,0"))
         (rule "reverse_cons_e_l" (formula "4") (term "0,0") (userinteraction))
         (rule "eqTermCut" (formula "4") (term "1,0") (inst "s=len(reverse(l_0))") (userinteraction))
         (branch "Assume len(l_0) = len(reverse(l_0))"
            (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "1") (userinteraction))
            (rule "get_last_l" (formula "5") (term "0") (userinteraction))
             (builtin "One Step Simplification" (formula "5"))
            (rule "closeTrue" (formula "5"))
         )
         (branch "Assume len(l_0) != len(reverse(l_0))"
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "len_reverse" (formula "4") (term "1") (userinteraction))
             (builtin "One Step Simplification" (formula "4"))
            (rule "closeTrue" (formula "4"))
         )
      )
   )
   (branch "Step Case (positive)"
      (rule "impRight" (formula "2") (userinteraction))
      (rule "len_cons_e_l" (formula "1") (term "0,0,0,0,1") (userinteraction))
      (rule "len_cons_e_l" (formula "1") (term "1,1,0,1") (userinteraction))
      (rule "impRight" (formula "3") (userinteraction))
      (rule "andLeft" (formula "2") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "andLeft" (formula "1") (userinteraction))
      (rule "len_cons_e_l" (formula "1") (term "0") (userinteraction))
      (rule "len_cons_e_l" (formula "3") (term "1") (userinteraction))
      (rule "impLeft" (formula "5") (userinteraction))
      (branch "Case 1"
         (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "4")))
         (rule "polySimp_elimSub" (formula "5") (term "1,0,1,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "7") (term "1,0"))
         (rule "mul_literals" (formula "7") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "5") (term "0,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "7") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
         (rule "polySimp_addComm0" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "3") (term "0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1"))
         (rule "polySimp_addComm1" (formula "5") (term "1,0,1,0"))
         (rule "polySimp_addComm0" (formula "7") (term "1,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "5") (term "0,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
         (rule "add_literals" (formula "7") (term "0,0,1,0"))
         (rule "inEqSimp_ltRight" (formula "6"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "add_zero_left" (formula "4") (term "0,0"))
         (rule "polySimp_addComm0" (formula "4") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "0,0"))
         (rule "add_zero_left" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
         (rule "mul_literals" (formula "3") (term "1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_invertInEq0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "times_zero_2" (formula "2") (term "1"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
         (rule "andLeft" (formula "4"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "1,1,0"))
         (rule "times_zero_1" (formula "4") (term "1,0"))
         (rule "add_zero_right" (formula "4") (term "0"))
         (rule "leq_literals" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
      (branch "Case 2"
         (rule "get_cons_e_l_i" (formula "7") (term "1") (userinteraction))
         (rule "sub" (formula "7") (term "1,1"))
         (rule "neg_literal" (formula "7") (term "1,1,1"))
         (rule "polySimp_addLiterals" (formula "7") (term "1,1"))
         (rule "add_zero_right" (formula "7") (term "1,1"))
         (rule "len_cons_e_l" (formula "7") (term "0,0,1,0") (userinteraction))
         (rule "sub" (formula "7") (term "1,0"))
         (rule "sub" (formula "7") (term "0,1,0"))
         (rule "minus_distribute_1" (formula "7") (term "1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,1,0"))
         (rule "neg_literal" (formula "7") (term "1,1,0") (userinteraction))
         (rule "neg_literal" (formula "7") (term "1,0,1,0") (userinteraction))
         (rule "polySimp_addLiterals" (formula "7") (term "1,0") (userinteraction))
         (rule "polySimp_addComm0" (formula "7") (term "1,0") (userinteraction))
         (rule "polySimp_addAssoc" (formula "7") (term "1,0") (userinteraction))
         (rule "polySimp_addAssoc" (formula "7") (term "0,1,0") (userinteraction))
         (rule "add_literals" (formula "7") (term "0,0,1,0") (userinteraction))
         (rule "instAll" (formula "7") (term "1,1") (ifseqformula "6") (userinteraction))
         (rule "eqSymm" (formula "1") (term "1") (userinteraction))
         (rule "impLeft" (formula "1") (userinteraction))
         (branch "Case 1"
            (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_elimNeg" (formula "8") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "5") (term "1,0"))
            (rule "mul_literals" (formula "5") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0,1,0"))
            (rule "polySimp_elimSub" (formula "5") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "6") (term "0,1,0,1,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "0"))
            (rule "polySimp_addComm1" (formula "8") (term "1,0"))
            (rule "polySimp_addComm1" (formula "5") (term "1,0"))
            (rule "polySimp_addComm1" (formula "6") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "5") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,0,1,0"))
            (rule "polySimp_addComm1" (formula "5") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "7") (term "0,1"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0"))
            (rule "add_zero_left" (formula "3") (term "0,0"))
            (rule "polySimp_addComm0" (formula "3") (term "0"))
            (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_geqRight" (formula "6"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_invertInEq0" (formula "2"))
            (rule "times_zero_2" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "5"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "times_zero_2" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "1"))
            (rule "add_zero_right" (formula "5") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "3"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch "Case 2"
            (rule "applyEqRigid" (formula "8") (term "1") (ifseqformula "1") (userinteraction))
            (rule "reverse_cons_e_l" (formula "8") (term "0,0") (userinteraction))
            (rule "get_last_n" (formula "8") (term "0") (userinteraction))
            (branch "Case 1"
               (rule "eqSymm" (formula "2"))
               (rule "eqSymm" (formula "9"))
               (rule "polySimp_elimSub" (formula "7") (term "1,0"))
               (rule "mul_literals" (formula "7") (term "1,1,0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0,1,0"))
               (rule "mul_literals" (formula "8") (term "1,1,0,1,0"))
               (rule "polySimp_elimNeg" (formula "1") (term "1,0"))
               (rule "polySimp_elimSub" (formula "2") (term "1,0"))
               (rule "mul_literals" (formula "2") (term "1,1,0"))
               (rule "polySimp_elimNeg" (formula "9") (term "1,1,1"))
               (rule "polySimp_elimSub" (formula "9") (term "1,0"))
               (rule "mul_literals" (formula "9") (term "1,1,0"))
               (rule "polySimp_elimSub" (formula "7") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "8") (term "0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "2") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "9") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "0"))
               (rule "polySimp_addComm0" (formula "4") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "9") (term "1,1"))
               (rule "polySimp_addComm1" (formula "7") (term "1,0"))
               (rule "polySimp_addComm1" (formula "8") (term "1,0,1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "9") (term "1,0"))
               (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "0,1,0,1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "1,0"))
               (rule "polySimp_addComm0" (formula "9") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "7") (term "1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "9") (term "1,0"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "closeTrue" (formula "9"))
            )
            (branch "Case 2"
               (rule "len_reverse" (formula "9") (term "1,1,0") (userinteraction))
               (rule "sub" (formula "9") (term "1,0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,0") (userinteraction))
               (rule "polySimp_addComm0" (formula "9") (term "0,1,1,0") (userinteraction))
               (rule "polySimp_addAssoc" (formula "9") (term "1,0") (userinteraction))
               (rule "eqSymm" (formula "2"))
               (rule "eqSymm" (formula "9"))
               (rule "polySimp_elimSub" (formula "7") (term "1,0"))
               (rule "mul_literals" (formula "7") (term "1,1,0"))
               (rule "polySimp_elimNeg" (formula "1") (term "1,0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,0,1,0"))
               (rule "mul_literals" (formula "8") (term "1,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "2") (term "1,0"))
               (rule "mul_literals" (formula "2") (term "1,1,0"))
               (rule "polySimp_elimNeg" (formula "9") (term "1,1,1"))
               (rule "polySimp_elimSub" (formula "9") (term "1,0"))
               (rule "mul_literals" (formula "9") (term "1,1,0"))
               (rule "polySimp_elimNeg" (formula "9") (term "0,0,1,1"))
               (rule "polySimp_elimSub" (formula "7") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "8") (term "0,1,0,1,0"))
               (rule "polySimp_elimSub" (formula "2") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "9") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "5") (term "0"))
               (rule "polySimp_addComm0" (formula "4") (term "0"))
               (rule "polySimp_addComm0" (formula "9") (term "1,0,1,1"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "7") (term "1,0"))
               (rule "polySimp_addComm1" (formula "8") (term "1,0,1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "1,0"))
               (rule "polySimp_addComm1" (formula "9") (term "1,0"))
               (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "0,1,0,1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "9") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "7") (term "1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "1,0"))
               (rule "polySimp_addComm1" (formula "9") (term "1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0,1,1"))
               (rule "polySimp_addComm0" (formula "9") (term "0,0,1,1"))
               (rule "polySimp_pullOutFactor2b" (formula "9") (term "0,1,1"))
               (rule "add_literals" (formula "9") (term "1,1,0,1,1"))
               (rule "times_zero_1" (formula "9") (term "1,0,1,1"))
               (rule "add_zero_right" (formula "9") (term "0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0"))
               (rule "add_zero_left" (formula "5") (term "0,0"))
               (rule "polySimp_addComm0" (formula "5") (term "0"))
               (rule "inEqSimp_commuteGeq" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "add_zero_left" (formula "3") (term "0"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "inEqSimp_invertInEq0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "times_zero_2" (formula "3") (term "1"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "nnf_imp2or" (formula "7") (term "0"))
               (rule "nnf_notAnd" (formula "7") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0"))
               (rule "mul_literals" (formula "7") (term "1,1,0,0,0"))
               (rule "commute_or_2" (formula "7") (term "0"))
               (rule "commute_or_2" (formula "7") (term "0,0"))
               (rule "commute_or" (formula "7") (term "0,0,0"))
               (rule "commute_or_2" (formula "7") (term "0,0"))
               (rule "commute_or_2" (formula "7") (term "0"))
               (rule "cut_direct" (formula "7") (term "1,0"))
               (branch "CUT: len(l_0) ≤ 0 TRUE"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "times_zero_2" (formula "4") (term "1,0"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "3"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "applyEqRigid" (formula "2") (term "1,1,0") (ifseqformula "3"))
                  (rule "add_zero_right" (formula "2") (term "1,0"))
                  (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "3"))
                  (rule "leq_literals" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
               (branch "CUT: len(l_0) ≤ 0 FALSE"
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "inEqSimp_leqRight" (formula "8"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "allLeft" (formula "7") (inst "t=i_0"))
                  (rule "polySimp_addComm1" (formula "7") (term "1,0,0,0"))
                  (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "len_cons_e_l" (formula "6") (term "1,1,0") (userinteraction))
                  (rule "polySimp_addAssoc" (formula "6") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,1,0"))
                  (rule "add_literals" (formula "6") (term "0,0,1,0"))
                  (rule "add_zero_left" (formula "6") (term "0,1,0"))
                  (rule "len_reverse" (formula "2") (term "0") (userinteraction))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
         )
      )
   )
   (branch "Step Case (negative)"
      (rule "impRight" (formula "2"))
      (rule "impRight" (formula "3"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0"))
      (rule "mul_literals" (formula "6") (term "1,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,1"))
      (rule "mul_literals" (formula "7") (term "1,1,1"))
      (rule "polySimp_elimSub" (formula "7") (term "1,0,1,0"))
      (rule "mul_literals" (formula "7") (term "1,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "3") (term "0"))
      (rule "mul_literals" (formula "3") (term "1,0"))
      (rule "polySimp_elimSub" (formula "2") (term "0"))
      (rule "mul_literals" (formula "2") (term "1,0"))
      (rule "polySimp_elimSub" (formula "5") (term "1,0,1"))
      (rule "mul_literals" (formula "5") (term "1,1,0,1"))
      (rule "polySimp_elimSub" (formula "6") (term "0,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,0"))
      (rule "mul_literals" (formula "7") (term "1,1,0"))
      (rule "polySimp_elimSub" (formula "5") (term "0,1,0,1"))
      (rule "polySimp_elimSub" (formula "7") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "1,1"))
      (rule "polySimp_addComm0" (formula "3") (term "0"))
      (rule "polySimp_addComm0" (formula "2") (term "0"))
      (rule "polySimp_addComm1" (formula "6") (term "1,0,1,0"))
      (rule "polySimp_addComm1" (formula "5") (term "1,0,1"))
      (rule "polySimp_addComm0" (formula "7") (term "1,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "6") (term "0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "5") (term "0,1,0,1"))
      (rule "polySimp_addComm1" (formula "5") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,1,0"))
      (rule "add_zero_left" (formula "7") (term "0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "5") (term "0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0"))
      (rule "add_zero_left" (formula "3") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
      (rule "qeq_literals" (formula "4") (term "0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
)
}
