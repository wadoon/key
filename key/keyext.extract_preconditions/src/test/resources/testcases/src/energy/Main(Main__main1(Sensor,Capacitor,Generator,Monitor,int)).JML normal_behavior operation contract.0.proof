\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jun 22 17:52:17 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:noRestriction , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_COMPLETION
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Tue Jun 22 17:52:17 CEST 2021
contract=Main[Main\\:\\:main1(Sensor,Capacitor,Generator,Monitor,int)].JML normal_behavior operation contract.0
name=Main[Main\\:\\:main1(Sensor,Capacitor,Generator,Monitor,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "florian" ) (keyVersion ""))

(autoModeTime "18747")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "s,c_0,g,m,windSpeed,self_25,exc_25,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "14"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "14"))
(rule "notLeft" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "notLeft" (formula "13"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "15"))
 (builtin "One Step Simplification" (formula "5"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "6"))
(rule "assignment" (formula "18") (term "1"))
 (builtin "One Step Simplification" (formula "18"))
(rule "Class_invariant_axiom_for_Capacitor" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "Class_invariant_axiom_for_Main" (formula "13"))
(rule "true_left" (formula "13"))
(rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_main1,savedHeapBefore_main1"))
 (builtin "One Step Simplification" (formula "18"))
(rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x"))
(rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0") (ifseqformula "1"))
(rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "11"))
(rule "replace_known_left" (formula "10") (term "1") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "10"))
(rule "true_left" (formula "10"))
(rule "methodCallWithAssignment" (formula "18") (inst "#v0=x_1"))
(branch "Normal Execution (_m != null)"
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "windSpeed_1"))
   (rule "assignment" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "g_1"))
   (rule "assignment" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_checkState,savedHeapBefore_checkState"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "returnUnfold" (formula "18") (term "1") (inst "#v0=x_2"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_2"))
   (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
   (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_3"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_3"))
   (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_4"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_4"))
   (rule "compound_less_than_comparison_2" (formula "18") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_5"))
   (rule "assignment" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_6"))
   (rule "assignment_read_attribute" (formula "18"))
   (branch "Normal Execution (g_1 != null)"
       (builtin "One Step Simplification" (formula "18"))
      (rule "less_than_comparison_simple" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "compound_assignment_1_new" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "ifElseSplit" (formula "18"))
      (branch "if x_3 true"
          (builtin "One Step Simplification" (formula "19"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "assignment" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "methodCallReturn" (formula "19") (term "1"))
         (rule "assignment" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "methodCallEmpty" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "blockEmpty" (formula "19") (term "1"))
         (rule "assignment" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "ifSplit" (formula "19"))
         (branch "if x true"
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x false"
             (builtin "One Step Simplification" (formula "20"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "methodCallEmpty" (formula "19") (term "1"))
            (rule "tryEmpty" (formula "19") (term "1"))
            (rule "emptyModality" (formula "19") (term "1"))
            (rule "andRight" (formula "19"))
            (branch "Case 1"
               (rule "andRight" (formula "19"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_ltRight" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "10"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1"))
                  (rule "Class_invariant_axiom_for_Capacitor" (formula "19"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0"))
                  (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_leqRight" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_ltRight" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "10"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1"))
                  (rule "Class_invariant_axiom_for_Main" (formula "19"))
                  (rule "closeTrue" (formula "19"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "19"))
               (rule "closeTrue" (formula "19"))
            )
         )
      )
      (branch "if x_3 false"
          (builtin "One Step Simplification" (formula "19"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "compound_less_than_comparison_2" (formula "19") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
         (rule "variableDeclarationAssign" (formula "19") (term "1"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_7"))
         (rule "eval_order_access2" (formula "19") (term "1") (inst "#v0=c"))
         (rule "variableDeclarationAssign" (formula "19") (term "1"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "c_1"))
         (rule "assignment_read_attribute" (formula "19"))
         (branch "Normal Execution (g_1 != null)"
             (builtin "One Step Simplification" (formula "19"))
            (rule "assignment_read_attribute" (formula "19"))
            (branch "Normal Execution (c_1 != null)"
                (builtin "One Step Simplification" (formula "19"))
               (rule "variableDeclarationAssign" (formula "19") (term "1"))
               (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_8"))
               (rule "eval_order_access2" (formula "19") (term "1") (inst "#v0=c"))
               (rule "variableDeclarationAssign" (formula "19") (term "1"))
               (rule "variableDeclaration" (formula "19") (term "1") (newnames "c_2"))
               (rule "assignment_read_attribute" (formula "19"))
               (branch "Normal Execution (g_1 != null)"
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "assignment_read_attribute" (formula "19"))
                  (branch "Normal Execution (c_2 != null)"
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "applyEq" (formula "19") (term "1,0,1,0,0") (ifseqformula "11"))
                     (rule "applyEq" (formula "19") (term "1,0,1,0") (ifseqformula "11"))
                     (rule "less_than_comparison_simple" (formula "19") (term "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "blockEmpty" (formula "19") (term "1"))
                     (rule "methodCallReturn" (formula "19") (term "1"))
                     (rule "assignment" (formula "19") (term "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "methodCallEmpty" (formula "19") (term "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "blockEmpty" (formula "19") (term "1"))
                     (rule "assignment" (formula "19") (term "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "ifSplit" (formula "19"))
                     (branch "if x true"
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "20"))
                         (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_run,exc_26,heapAfter_run,anon_heap_run") (contract "Generator[Generator::run(int)].JML normal_behavior operation contract.0"))
                        (branch "Post (run)"
                            (builtin "One Step Simplification" (formula "22"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "polySimp_addComm0" (formula "18") (term "1"))
                           (rule "applyEq" (formula "18") (term "1,1,1") (ifseqformula "12"))
                           (rule "applyEq" (formula "16") (term "0,1,0") (ifseqformula "12"))
                           (rule "pullOutSelect" (formula "18") (term "1,0") (inst "selectSK=Generator_c_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "8")))
                           (rule "elementOfSingleton" (formula "18") (term "0,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "applyEqReverse" (formula "19") (term "1,0") (ifseqformula "18"))
                           (rule "hideAuxiliaryEq" (formula "18"))
                           (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "12"))
                           (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=Capacitor_charge_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
                           (rule "elementOfSingleton" (formula "18") (term "0,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "18"))
                           (rule "hideAuxiliaryEq" (formula "18"))
                           (rule "Class_invariant_axiom_for_Generator" (formula "19"))
                           (rule "replaceKnownSelect_taclet000000100_0" (formula "19") (term "0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000100_1" (formula "19") (term "0,0"))
                           (rule "notLeft" (formula "19"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "12"))
                           (rule "methodCallEmpty" (formula "24") (term "1"))
                           (rule "tryEmpty" (formula "24") (term "1"))
                           (rule "emptyModality" (formula "24") (term "1"))
                           (rule "andRight" (formula "24"))
                           (branch "Case 1"
                              (rule "andRight" (formula "24"))
                              (branch "Case 1"
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "cut" (inst "cutFormula=lt(add(int::select(heap, c_0, Capacitor::$charge),
       windSpeed),
   int::select(heap, c_0, Capacitor::$maxCharge))<<origin(\"User_Interaction @ node 193 (cut)\",\"[]\")>>") (userinteraction))
                                 (branch "CUT: c_0.charge + windSpeed < c_0.maxCharge TRUE"
                                    (rule "Class_invariant_axiom_for_Capacitor" (formula "25") (userinteraction))
                                    (rule "andRight" (formula "25") (userinteraction))
                                    (branch "Case 1"
                                       (rule "replaceKnownSelect_taclet000000100_2" (formula "25") (term "1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000000100_3" (formula "25") (term "1"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "25"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "inEqSimp_gtToGeq" (formula "13"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "20"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                       (rule "mul_literals" (formula "13") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0"))
                                       (rule "qeq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                                       (rule "mul_literals" (formula "15") (term "0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "15"))
                                       (rule "qeq_literals" (formula "13") (term "0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "closeFalse" (formula "13"))
                                    )
                                    (branch "Case 2"
                                       (rule "replaceKnownSelect_taclet000000100_2" (formula "25") (term "0") (userinteraction))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000000100_3" (formula "25") (term "0") (userinteraction))
                                       (rule "selectOfAnonEQ" (formula "25") (term "1") (ifseqformula "17"))
                                        (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "22")) (ifInst ""  (formula "8")))
                                       (rule "elementOfSingleton" (formula "25") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "19") (userinteraction))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "25"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_gtToGeq" (formula "13"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                       (rule "mul_literals" (formula "13") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0"))
                                       (rule "qeq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "CUT: c_0.charge + windSpeed < c_0.maxCharge FALSE"
                                    (rule "Class_invariant_axiom_for_Capacitor" (formula "25") (userinteraction))
                                    (rule "andRight" (formula "25") (userinteraction))
                                    (branch "Case 1"
                                       (rule "replaceKnownSelect_taclet000000100_2" (formula "25") (term "1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet000000100_3" (formula "25") (term "1"))
                                       (rule "polySimp_addComm0" (formula "19") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "25"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "inEqSimp_ltRight" (formula "20"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_gtToGeq" (formula "13"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "20"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                       (rule "mul_literals" (formula "13") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "16") (term "0,0"))
                                       (rule "qeq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "2"))
                                       (rule "times_zero_1" (formula "15") (term "0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "15") (term "0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "closeFalse" (formula "15"))
                                    )
                                    (branch "Case 2"
                                        (opengoal " ")
                                    )
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_gtToGeq" (formula "11"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                 (rule "mul_literals" (formula "11") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                                 (rule "add_literals" (formula "14") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0"))
                                 (rule "qeq_literals" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "Class_invariant_axiom_for_Main" (formula "23"))
                                 (rule "closeTrue" (formula "23"))
                              )
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "closeTrue" (formula "24"))
                           )
                        )
                        (branch "Exceptional Post (run)"
                            (builtin "One Step Simplification" (formula "22"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "translateJavaAddInt" (formula "16") (term "1,0,0,1,1"))
                           (rule "andLeft" (formula "16"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,0") (ifseqformula "16"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "19"))
                           (rule "notLeft" (formula "17"))
                           (rule "close" (formula "20") (ifseqformula "19"))
                        )
                        (branch "Pre (run)"
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "3")))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_gtToGeq" (formula "11"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "mul_literals" (formula "11") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "20") (term "0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0"))
                           (rule "qeq_literals" (formula "20") (term "0,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "Class_invariant_axiom_for_Generator" (formula "19"))
                           (rule "notRight" (formula "19"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "13"))
                           (rule "close" (formula "17") (ifseqformula "13"))
                        )
                        (branch "Null reference (_g = null)"
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "15")))
                           (rule "closeTrue" (formula "20"))
                        )
                     )
                     (branch "if x false"
                         (builtin "One Step Simplification" (formula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "methodCallEmpty" (formula "20") (term "1"))
                        (rule "tryEmpty" (formula "20") (term "1"))
                        (rule "emptyModality" (formula "20") (term "1"))
                        (rule "andRight" (formula "20"))
                        (branch "Case 1"
                           (rule "andRight" (formula "20"))
                           (branch "Case 1"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_ltRight" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_gtToGeq" (formula "11"))
                              (rule "mul_literals" (formula "11") (term "1,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                              (rule "mul_literals" (formula "11") (term "1"))
                              (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq1" (formula "15"))
                              (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                              (rule "add_literals" (formula "15") (term "1,0"))
                              (rule "times_zero_1" (formula "15") (term "0"))
                              (rule "leq_literals" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "Class_invariant_axiom_for_Capacitor" (formula "19"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
                              (rule "inEqSimp_commuteLeq" (formula "19") (term "0"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_ltRight" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_gtToGeq" (formula "11"))
                              (rule "mul_literals" (formula "11") (term "1,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                              (rule "mul_literals" (formula "11") (term "1"))
                              (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq1" (formula "15"))
                              (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                              (rule "add_literals" (formula "15") (term "1,0"))
                              (rule "times_zero_1" (formula "15") (term "0"))
                              (rule "leq_literals" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "Class_invariant_axiom_for_Main" (formula "19"))
                              (rule "closeTrue" (formula "19"))
                           )
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "closeTrue" (formula "20"))
                        )
                     )
                  )
                  (branch "Null Reference (c_2 = null)"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "false_right" (formula "20"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "11"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                     (rule "close" (formula "17") (ifseqformula "1"))
                  )
               )
               (branch "Null Reference (g_1 = null)"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (c_1 = null)"
                (builtin "One Step Simplification" (formula "1"))
               (rule "false_right" (formula "20"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "11"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
               (rule "close" (formula "17") (ifseqformula "1"))
            )
         )
         (branch "Null Reference (g_1 = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (g_1 = null)"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (_m = null)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
   (rule "closeFalse" (formula "1"))
)
)
}
