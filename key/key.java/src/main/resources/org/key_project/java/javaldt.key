\sorts {
  JStmt;
  JExpr;
  JName;
  JType;
  JStr;
  JCase;
  JCatch;
}

\functions {
        Sequential = createJavaStatement("Block", JAVA_STATEMENT, JAVA_STATEMENT);
        explicitConstructorInvocationStmt = createJavaStatement("ExplicitConstructorInvocation", JAVA_EXPR);
        ForStmt = createJavaStatement("For", JAVA_EXPR, JAVA_EXPR, JAVA_EXPR, JAVA_STATEMENT);
        SwitchStmt = createJavaStatement("Switch", JAVA_EXPR, JAVA_EXPR, JAVA_STATEMENT, JAVA_STATEMENT);
        ForEachStmt = createJavaStatement("ForEach", JAVA_EXPR, JAVA_EXPR, JAVA_STATEMENT);
        ContinueStmt = createJavaStatement("Continue", JAVA_EXPR);
        ExpressionStmt = createJavaStatement("Expression", JAVA_EXPR);
        WhileStmt = createJavaStatement("While", JAVA_EXPR, JAVA_STATEMENT);
        ReturnStmt = createJavaStatement("Return", JAVA_EXPR);
        EmptyStmt = createJavaStatement("Empty");
        UnparsableStmt = createJavaStatement("Unparsable");
        DoStmt = createJavaStatement("Do", JAVA_EXPR, JAVA_STATEMENT);
        SynchronizedStmt = createJavaStatement("Synchronized", JAVA_EXPR);
        LabeledStmt = createJavaStatement("Labeled", JAVA_EXPR, JAVA_STATEMENT);
        YieldStmt = createJavaStatement("Yield", JAVA_EXPR);
        IfStmt = createJavaStatement("If", JAVA_EXPR, JAVA_STATEMENT, JAVA_STATEMENT);
        BreakStmt = createJavaStatement("Break", JAVA_EXPR);
        AssertStmt = createJavaStatement("Assert", JAVA_EXPR);
        ThrowStmt = createJavaStatement("Throw", JAVA_EXPR);
        TryStmt = createJavaStatement("Try", JAVA_STATEMENT, JAVA_CATCH, JAVA_STATEMENT);
        TryStmtWithResources = createJavaStatement("TryStmtWithResources",
                JAVA_STATEMENT, JAVA_STATEMENT, JAVA_CATCH, JAVA_STATEMENT);
        //endregion

        // region Jml statements
        JmlSetStatement = createJavaStatement("JmlSetStatement", JAVA_EXPR, JAVA_EXPR);
        JmlUnreachableStmt = createJavaStatement("JmlUnreachable");
        JmlGhostStatements = createJavaStatement("JmlGhostStatements", JAVA_EXPR);
        JmlRefiningStmt = createJavaStatement("JmlRefining", JAVA_EXPR);
        //endregion

        //region Expression
        EmptyExpr = createJavaExpr("Empty");
        CommaExpr = createJavaExpr("Comma", JAVA_EXPR, JAVA_EXPR);
        ArrayAccessExpr = createJavaExpr("ArrayAccess", JAVA_EXPR, JAVA_EXPR);
        LambdaExpr = createJavaExpr("Lambda", JAVA_EXPR, JAVA_EXPR);
        ConditionalExpr = createJavaExpr("Conditional", JAVA_EXPR, JAVA_EXPR, JAVA_EXPR);

        //AnnotationExpr = createJavaExpr("Annotation", );
        //MarkerAnnotationExpr = createJavaExpr("MarkerAnnotation", );
        //SingleMemberAnnotationExpr = createJavaExpr("SingleMemberAnnotation", );
        //NormalAnnotationExpr = createJavaExpr("NormalAnnotation", );

        InstanceOfExpr = createJavaExpr("InstanceOf", JAVA_EXPR, JAVA_TYPE);
        CastExpr = createJavaExpr("Cast", JAVA_TYPE, JAVA_EXPR);
        ThisExpr = createJavaExpr("This");

        //Problemtic
        SwitchExpr = createJavaExpr("Switch");
        NullLiteralExpr = createJavaExpr("NullLiteral");
        BooleanLiteralExpr = createJavaExpr("BooleanLiteral", Sort.FORMULA);
        LiteralStringValueExpr = createJavaExpr("LiteralStringValue", JAVA_STRING);
        TextBlockLiteralExpr = createJavaExpr("TextBlockLiteral", JAVA_STRING);
        CharLiteralExpr = createJavaExpr("CharLiteral");
        DoubleLiteralExpr = createJavaExpr("DoubleLiteral", realSort);
        LongLiteralExpr = createJavaExpr("LongLiteral", intSort);
        StringLiteralExpr = createJavaExpr("StringLiteral", JAVA_STRING);
        IntegerLiteralExpr = createJavaExpr("IntegerLiteral", intSort);

        //PROBLEMATIC
        ObjectCreationExpr = createJavaExpr("ObjectCreation", JAVA_TYPE, JAVA_EXPR);
        SuperExpr = createJavaExpr("Super");
        BinaryMultExpr = createJavaExpr("BinaryMult", JAVA_EXPR, JAVA_EXPR);
        BinaryAddExpr = createJavaExpr("BinaryAdd", JAVA_EXPR, JAVA_EXPR);
        BinaryDivExpr = createJavaExpr("BinaryDiv", JAVA_EXPR, JAVA_EXPR);
        BinaryModExpr = createJavaExpr("BinaryMod", JAVA_EXPR, JAVA_EXPR);
        BinaryXorExpr = createJavaExpr("BinaryXor", JAVA_EXPR, JAVA_EXPR);
        BinaryAndExpr = createJavaExpr("BinaryAnd", JAVA_EXPR, JAVA_EXPR);
        BinaryOrExpr = createJavaExpr("BinaryOr", JAVA_EXPR, JAVA_EXPR);
        LogicalOrExpr = createJavaExpr("LogicalOr", JAVA_EXPR, JAVA_EXPR);
        LogicalAndExpr = createJavaExpr("LogicalAnd", JAVA_EXPR, JAVA_EXPR);

        PatternExpr = createJavaExpr("Pattern", JAVA_EXPR, JAVA_TYPE, JAVA_EXPR);
        ArrayCreationExpr = createJavaExpr("ArrayCreation", JAVA_TYPE, JAVA_EXPR);
        MethodCallExpr = createJavaExpr("MethodCall", JAVA_EXPR, JAVA_EXPR /*args*/);
        AssignExpr = createJavaExpr("Assign", JAVA_EXPR, JAVA_EXPR);
        AssignLogialAndExpr = createJavaExpr("Assign", JAVA_EXPR, JAVA_EXPR);
        AssignBinaryAndExpr = createJavaExpr("Assign", JAVA_EXPR, JAVA_EXPR);
        AssignAddExpr = createJavaExpr("Assign", JAVA_EXPR, JAVA_EXPR);
        AssignSubExpr = createJavaExpr("Assign", JAVA_EXPR, JAVA_EXPR);
        AssignDivExpr = createJavaExpr("Assign", JAVA_EXPR, JAVA_EXPR);
        NameExpr = createJavaExpr("Name", JAVA_EXPR);
        MethodReferenceExpr = createJavaExpr("MethodReference", JAVA_TYPE, JAVA_EXPR);
        EnclosedExpr = createJavaExpr("Enclosed", JAVA_EXPR);
        VariableDeclarationExpr = createJavaExpr("VariableDeclaration", JAVA_TYPE, JAVA_NAME, JAVA_EXPR);
        UnaryExprLogicalNegation = createJavaExpr("UnaryExprLogicalNegation", JAVA_EXPR);
        UnaryExprBitwiseNegation = createJavaExpr("UnaryExprBitwiseNegation", JAVA_EXPR);
        UnaryExprMinus = createJavaExpr("UnaryExprMinus", JAVA_EXPR);
        ArrayInitializerExpr = createJavaExpr("ArrayInitializer");
        TypeExpr = createJavaType("Type", JAVA_NAME);
        FieldAccessExpr = createJavaExpr("FieldAccess", JAVA_EXPR, JAVA_EXPR);
}