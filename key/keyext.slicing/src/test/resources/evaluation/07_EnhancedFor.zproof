\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Jun 03 15:23:38 CEST 2022
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:showSatisfiability , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=500
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../../../../../tmp/keyheap-examples-5168408956043133922.tmp/firstTouch/08-Java5/src";

\proofObligation "#Proof Obligation Settings
#Fri Jun 03 15:23:38 CEST 2022
contract=For[For\\:\\:sum()].JML operation contract.0
name=For[For\\:\\:sum()].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "arne" ) (keyVersion "66e163adc6"))

(autoModeTime "442")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "translateJavaCastInt" (formula "1") (term "1,0,1,0,0,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1") (notes "useless"))
(rule "andLeft" (formula "1") (notes "useless"))
(rule "notLeft" (formula "2") (notes "useless"))
(rule "eqSymm" (formula "7") (term "0,1,0,0"))
(rule "assignment" (formula "7"))
(rule "Class_invariant_axiom_for_For" (formula "5") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "notLeft" (formula "7"))
   (rule "notLeft" (formula "6"))
   (rule "notLeft" (formula "5"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_sum,savedHeapBefore_sum"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "s"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "z"))
   (rule "eval_order_array_access6" (formula "9") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "assignment_read_length" (formula "9") (term "1"))
   (branch "Normal Execution (x_arr != null)"
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "5")) (notes "useless"))
      (rule "false_right" (formula "9") (notes "useless"))
      (rule "enhancedfor_iterable" (formula "9") (term "1"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "arr_1"))
      (rule "assignment_read_attribute_this" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "for_to_while" (formula "9") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "idx"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "elim_double_block_3" (formula "9") (term "1"))
      (rule "loopScopeInvDia" (formula "9") (term "1") (newnames "idx_0,s_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
      (branch "Invariant Initially Valid"
          (builtin "One Step Simplification" (formula "9"))
         (rule "bsum_lower_equals_upper" (formula "9") (term "0,1,0"))
         (rule "translateJavaCastInt" (formula "9") (term "1,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "leq_literals" (formula "9") (term "0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_leqRight" (formula "9"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "arrayLengthIsAnInt" (formula "1") (term "0") (notes "useless"))
          (builtin "One Step Simplification" (formula "1") (notes "useless"))
         (rule "true_left" (formula "1") (notes "useless"))
         (rule "arrayLengthNotNegative" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Invariant Preserved and Used"
          (builtin "One Step Simplification" (formula "10"))
         (rule "translateJavaSubInt" (formula "10") (term "0,1,1,0,1"))
         (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0,1,1"))
         (rule "translateJavaCastInt" (formula "10") (term "1,0,0,0,1,1,0,1,1"))
         (rule "translateJavaCastInt" (formula "10") (term "1,0,0"))
         (rule "impRight" (formula "10"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "2"))
         (rule "eqSymm" (formula "13") (term "0,0,0,1,1,0,1"))
         (rule "eqSymm" (formula "13") (term "0,0,1,0,1,1,0,1"))
         (rule "eqSymm" (formula "1"))
         (rule "polySimp_elimSub" (formula "13") (term "0,1,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "13") (term "0,1,1,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "13") (term "0,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
         (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
         (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
         (rule "assignment" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_4"))
         (rule "assignment_read_length" (formula "13") (term "1"))
         (branch "Normal Execution (arr_1 != null)"
             (builtin "One Step Simplification" (formula "14"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "9")) (notes "useless"))
            (rule "false_right" (formula "13") (notes "useless"))
            (rule "less_than_comparison_simple" (formula "13") (term "1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0"))
            (rule "ifElseSplit" (formula "13"))
            (branch "if x_2 true"
                (builtin "One Step Simplification" (formula "14"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "i"))
               (rule "assignment_array2" (formula "14") (term "1"))
               (branch "Normal Execution (arr_1 != null)"
                   (builtin "One Step Simplification" (formula "15"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "10")) (notes "useless"))
                  (rule "orRight" (formula "14") (notes "useless"))
                  (rule "inEqSimp_leqRight" (formula "14") (notes "useless"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0") (notes "useless"))
                  (rule "inEqSimp_ltRight" (formula "15") (notes "useless"))
                  (rule "times_zero_1" (formula "1") (term "0,0") (notes "useless"))
                  (rule "add_zero_left" (formula "1") (term "0") (notes "useless"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (notes "useless"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1") (notes "useless"))
                  (rule "polySimp_rightDist" (formula "1") (term "1") (notes "useless"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1") (notes "useless"))
                  (rule "mul_literals" (formula "1") (term "0,1") (notes "useless"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1") (notes "useless"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1") (notes "useless"))
                  (rule "inEqSimp_homoInEq0" (formula "4") (term "0") (notes "useless"))
                  (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0") (notes "useless"))
                  (rule "add_literals" (formula "4") (term "1,1,0,0") (notes "useless"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0") (notes "useless"))
                  (rule "add_zero_right" (formula "4") (term "0,0") (notes "useless"))
                  (rule "qeq_literals" (formula "4") (term "0") (notes "useless"))
                   (builtin "One Step Simplification" (formula "4") (notes "useless"))
                  (rule "true_left" (formula "4") (notes "useless"))
                  (rule "compound_assignment_op_plus" (formula "13") (term "1"))
                  (rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x_2"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_5"))
                  (rule "remove_parentheses_right" (formula "13") (term "1"))
                  (rule "compound_addition_2" (formula "13") (term "1") (inst "#v1=x_7") (inst "#v0=x_6"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_6"))
                  (rule "assignment" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_7"))
                  (rule "remove_parentheses_right" (formula "13") (term "1"))
                  (rule "assignment" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "assignmentAdditionInt" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "translateJavaAddInt" (formula "13") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "13") (term "1"))
                  (rule "assignment" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "blockEmpty" (formula "13") (term "1"))
                  (rule "postincrement" (formula "13") (term "1"))
                  (rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x_2"))
                  (rule "variableDeclarationAssign" (formula "13") (term "1"))
                  (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_8"))
                  (rule "remove_parentheses_right" (formula "13") (term "1"))
                  (rule "assignmentAdditionInt" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "translateJavaAddInt" (formula "13") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "13") (term "1"))
                  (rule "assignment" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "blockEmpty" (formula "13") (term "1"))
                  (rule "lsContinue" (formula "13") (term "1"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,0,1"))
                  (rule "polySimp_rightDist" (formula "13") (term "0,0,1"))
                  (rule "mul_literals" (formula "13") (term "0,0,0,1"))
                  (rule "bsum_induction_upper_concrete" (formula "13") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "13") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
                  (rule "precOfInt" (formula "13") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,1"))
                  (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,1"))
                  (rule "add_literals" (formula "13") (term "1,1,0,1,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,1,1"))
                  (rule "add_zero_right" (formula "13") (term "0,1,1"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,1"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1"))
                  (rule "add_literals" (formula "13") (term "1,0,1,1"))
                  (rule "times_zero_1" (formula "13") (term "0,1,1"))
                  (rule "leq_literals" (formula "13") (term "1,1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,0,0,0,0"))
                  (rule "replace_known_left" (formula "13") (term "0,0,1,0,0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,0,0"))
                  (rule "add_literals" (formula "13") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "13") (term "1"))
                  (rule "times_zero_2" (formula "13") (term "1,0,1"))
                  (rule "add_zero_right" (formula "13") (term "0,1"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,0") (ifseqformula "2"))
                  (rule "polySimp_pullOutFactor1" (formula "13") (term "0,0,0"))
                  (rule "add_literals" (formula "13") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1"))
                  (rule "mul_literals" (formula "13") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1"))
                  (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_geqRight" (formula "13"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Null Reference (arr_1 = null)"
                   (builtin "One Step Simplification" (formula "15") (notes "useless"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (arr_1 != null, but idx Out of Bounds!)"
                   (builtin "One Step Simplification" (formula "15") (notes "useless"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "blockThrow" (formula "15") (term "1") (notes "useless"))
                  (rule "blockThrow" (formula "15") (term "1") (notes "useless"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "2") (notes "useless"))
                  (rule "inEqSimp_homoInEq0" (formula "5") (term "0") (notes "useless"))
                  (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0") (notes "useless"))
                  (rule "add_literals" (formula "5") (term "1,1,0,0") (notes "useless"))
                  (rule "times_zero_1" (formula "5") (term "1,0,0") (notes "useless"))
                  (rule "add_zero_right" (formula "5") (term "0,0") (notes "useless"))
                  (rule "qeq_literals" (formula "5") (term "0") (notes "useless"))
                   (builtin "One Step Simplification" (formula "5") (notes "useless"))
                  (rule "true_left" (formula "5") (notes "useless"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "if x_2 false"
                (builtin "One Step Simplification" (formula "14"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_geqRight" (formula "9"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "4") (notes "useless"))
               (rule "inEqSimp_homoInEq0" (formula "1") (notes "useless"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0") (notes "useless"))
               (rule "add_literals" (formula "1") (term "1,0") (notes "useless"))
               (rule "times_zero_1" (formula "1") (term "0") (notes "useless"))
               (rule "qeq_literals" (formula "1") (notes "useless"))
               (rule "true_left" (formula "1") (notes "useless"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "3") (notes "useless"))
               (rule "inEqSimp_homoInEq1" (formula "4") (notes "useless"))
               (rule "polySimp_pullOutFactor1" (formula "4") (term "0") (notes "useless"))
               (rule "add_literals" (formula "4") (term "1,0") (notes "useless"))
               (rule "times_zero_1" (formula "4") (term "0") (notes "useless"))
               (rule "leq_literals" (formula "4") (notes "useless"))
               (rule "true_left" (formula "4") (notes "useless"))
               (rule "applyEq" (formula "13") (term "1,0,1,1,0") (ifseqformula "3"))
               (rule "polySimp_pullOutFactor2" (formula "13") (term "0,1,1,0"))
               (rule "add_literals" (formula "13") (term "1,0,1,1,0"))
               (rule "times_zero_1" (formula "13") (term "0,1,1,0"))
               (rule "blockBreak" (formula "13") (term "1"))
               (rule "lsBreak" (formula "13") (term "1"))
               (rule "assignment" (formula "13") (term "1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "methodCallReturn" (formula "13") (term "1"))
               (rule "assignment" (formula "13") (term "1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "methodCallEmpty" (formula "13") (term "1"))
               (rule "tryEmpty" (formula "13") (term "1"))
               (rule "emptyModality" (formula "13") (term "1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "3"))
               (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "Class_invariant_axiom_for_For" (formula "13") (inst "sk=sk_1") (ifseqformula "7"))
               (branch "Use Axiom"
                  (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
                  (rule "closeTrue" (formula "13"))
               )
               (branch "Show Axiom Satisfiability"
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
                  (rule "closeTrue" (formula "13"))
               )
            )
         )
         (branch "Null Reference (arr_1 = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (x_arr = null)"
       (builtin "One Step Simplification" (formula "10") (notes "useless"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Show Axiom Satisfiability"
    (builtin "One Step Simplification" (formula "6"))
   (rule "closeTrue" (formula "6"))
)
)
}
