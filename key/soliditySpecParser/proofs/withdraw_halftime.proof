\profile "Solidity Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 21 00:39:52 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_HIGH
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:solidity , programRules-programRules\\:Solidity , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , paymentHistoryDetail-paymentHistoryDetail\\:net , transfer-transfer\\:noCallBack
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_SKIP
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\withOptions transfer:noCallBack;


\programVariables {
  MultiAuctionImpl self;
  Message msg;
  
}

\rules {
    insertCInv {
        \schemaVar \term Heap h;
        \schemaVar \term MultiAuctionImpl self;
        \schemaVar \variable Address a;
\schemaVar \variable int i;
\schemaVar \variable Address hb;


        \find(CInv(h, self))
        \varcond(\notFreeIn(a,h,self),\notFreeIn(i,h,self),\notFreeIn(hb,h,self))
        \replacewith(    
            ((((\exists hb; (\forall a; (((((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)hb))) >= (int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)a)))) & (((a != hb) & (a != (Address::select(h,self,MultiAuctionImpl::$auctionOwner)))) -> ((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)a))) = int::select(h,net,address(a))))) & (((MultiAuctionImpl.State::select(h,self,MultiAuctionImpl::$state)) = MultiAuctionImpl.State::select(h,null,MultiAuctionImpl.State::$AUCTION_OPEN)) -> (int::select(h,net,address((Address::select(h,self,MultiAuctionImpl::$auctionOwner)))) = 0))) & ((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)hb))) = (int::select(h,net,address(hb))+int::select(h,net,address((Address::select(h,self,MultiAuctionImpl::$auctionOwner))))))))) & (((MultiAuctionImpl.State::select(h,self,MultiAuctionImpl::$state)) = MultiAuctionImpl.State::select(h,null,MultiAuctionImpl.State::$AUCTION_OPEN)) -> (\forall a; (((int::select(h,net,address(a)) > 0) -> ((boolean::select(h,(boolean[]::select(h,self,MultiAuctionImpl::$bidded)), arr((int)a))) = TRUE)) & (((\exists i; (((i >= 0) & (i < (int::select(h,(Address[]::select(h,self,MultiAuctionImpl::$bidders)),arr_length)))) & ((Address::select(h,(Address[]::select(h,self,MultiAuctionImpl::$bidders)), arr((int)i))) = a))))<->(((boolean::select(h,(boolean[]::select(h,self,MultiAuctionImpl::$bidded)), arr((int)a))) = TRUE))))))) & ((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)(Address::select(h,self,MultiAuctionImpl::$auctionOwner))))) = 0)) & (\forall a; ((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)a))) >= 0)))
        )
        \heuristics(userTaclets1)
    };
}
 
\problem {
     !  java.lang.Address::select(heap,
                                  msg,
                                  java.lang.Message::$sender)
      = self
   & !gross_to = gross_from
   & CInv(heap, self)
   &   int::select(heap,
                   msg,
                   java.lang.Message::$value)
     = Z(0(#))
   & !  java.lang.Address[]::select(heap,
                                    self,
                                    MultiAuctionImpl::$bidders)
      = null
   & !  int[]::select(heap,
                      self,
                      MultiAuctionImpl::$balances)
      = null
   & !  java.lang.Address::select(heap,
                                  self,
                                  MultiAuctionImpl::$auctionOwner)
      = null
   & !  int::select(heap,
                    self,
                    java.lang.Address::$balance)
      = null
   & !  boolean[]::select(heap,
                          self,
                          MultiAuctionImpl::$bidded)
      = null
   & !  MultiAuctionImpl.State::select(heap,
                                       self,
                                       MultiAuctionImpl::$state)
      = null
-> {savedHeap:=heap}
     \[{
         self.withdraw(msg)@MultiAuctionImpl;
       }\] (  CInv(heap, self)
            &   MultiAuctionImpl.State::select(savedHeap,
                                               self,
                                               MultiAuctionImpl::$state)
              = MultiAuctionImpl.State::select(savedHeap,
                                               null,
                                               MultiAuctionImpl.State::$AUCTION_OPEN)
            &   int::select(heap,
                            net,
                            address(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender)))
              = Z(0(#))
            & \forall Field f;
                \forall java.lang.Object o;
                  (  elementOf(o,
                               f,
                               union(singleton(int[]::select(savedHeap,
                                                             self,
                                                             MultiAuctionImpl::$balances),
                                               arr((int)(java.lang.Address::select(savedHeap,
                                                                                   msg,
                                                                                   java.lang.Message::$sender)))),
                                     singleton(net,
                                               address(java.lang.Address::select(savedHeap,
                                                                                 msg,
                                                                                 java.lang.Message::$sender)))))
                   | !o = null
                   & !  boolean::select(savedHeap,
                                        o,
                                        java.lang.Object::<created>)
                      = TRUE
                   |   any::select(heap, o, f)
                     = any::select(savedHeap, o, f)))

}

\proof {
(keyLog "0" (keyUser "niklon" ) (keyVersion "e4a211603f"))

(autoModeTime "176156")

(branch "dummy ID"
(rule "sortsDisjoint1" (formula "1") (term "0,1,0,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "elementOfUnion" (formula "10") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "1,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_withdraw,savedHeapBefore_withdraw"))
(rule "simplifyUpdate2" (formula "10") (term "1"))
(rule "insertCInv" (formula "1") (inst "a=a") (inst "i=i") (inst "hb=hb"))
(rule "castDel" (formula "1") (term "0,2,0,1,0,0,1,0,1,1,0,0"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "1") (inst "sk=hb_0"))
(rule "eqSymm" (formula "2") (term "1,0,0,1,0,1"))
(rule "polySimp_homoEq" (formula "1") (term "1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "1") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,1,0,1"))
(rule "inEqSimp_gtToGeq" (formula "2") (term "0,0,0,1"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "1") (term "0,0,0,0"))
(rule "polySimp_sepPosMonomial" (formula "1") (term "1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
(rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0,1,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0,0,1"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,1"))
(rule "nnf_imp2or" (formula "1") (term "1,0,0"))
(rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "2") (term "0,0,1"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,1"))
(rule "add_literals" (formula "2") (term "0,0,0,0,0,1"))
(rule "add_zero_left" (formula "2") (term "0,0,0,0,1"))
(rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
(rule "double_not" (formula "1") (term "1,0,1,0,0,0"))
(rule "double_not" (formula "1") (term "0,0,1,0,0,0"))
(rule "distr_forallAnd" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "all_unused" (formula "2"))
(rule "applyEq" (formula "1") (term "0,1,1,0") (ifseqformula "2"))
(rule "polySimp_sepNegMonomial" (formula "1") (term "1,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,1,0"))
(rule "distr_forallAnd" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "all_unused" (formula "2"))
(rule "distr_forallAnd" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "commute_or" (formula "5") (term "0,0,1"))
(rule "commute_and_2" (formula "5") (term "0,0,1,0,1"))
(rule "insertCInv" (formula "16") (term "0,0,0,0,1") (inst "a=a") (inst "i=i") (inst "hb=hb"))
(rule "castDel" (formula "16") (term "0,2,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "16") (term "1,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "16") (term "0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "16") (term "0,0,1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "16") (term "0,0,0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "16") (term "0,0,0,0,1,1,0,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "16") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
(rule "double_not" (formula "16") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
(rule "double_not" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
(rule "commute_and" (formula "5") (term "0,0,0,1,0,1"))
(rule "methodCallUnfoldArguments" (formula "16") (term "1"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "var"))
(rule "evalEqualityLeft" (formula "16") (term "1") (inst "#b=s"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "s"))
(rule "assignLocalVariableReadAttribute" (formula "16") (term "1"))
(rule "evalEqualityRight" (formula "16") (term "1,1") (inst "#b=s_1"))
(rule "sequentialToParallel2" (formula "16"))
(rule "simplifyUpdate3" (formula "16") (term "1,0"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "s_1"))
(rule "assignLocalVariableEnumValue" (formula "16") (term "1"))
(rule "assignLocalVariableEqual" (formula "16") (term "1,1"))
(rule "eqSymm" (formula "16") (term "0,0,0,1,1"))
(rule "sequentialToParallel2" (formula "16"))
(rule "simplifyUpdate3" (formula "16") (term "1,0"))
(rule "sequentialToParallel2" (formula "16"))
(rule "requireSucc" (formula "16"))
(rule "simplifyUpdate2" (formula "1"))
(rule "simplifyUpdate2" (formula "17"))
(rule "simplifyUpdate3" (formula "1") (term "0"))
(rule "applyOnSkip" (formula "17") (term "1,0"))
(rule "parallelWithSkip2" (formula "17") (term "0"))
(rule "applyOnElementary" (formula "1") (term "0"))
(rule "applyOnRigidTerm" (formula "1") (term "0,0"))
(rule "simplifyUpdate1" (formula "1") (term "2,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
(rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
(rule "applyOnPV" (formula "1") (term "0,0,0,0"))
(rule "applyOnPV" (formula "1") (term "1,0,0,0"))
(rule "eqSymm" (formula "1") (term "0,0,0"))
(rule "applyOnRigidFormula" (formula "1"))
(rule "simplifyUpdate1" (formula "1") (term "1"))
(rule "applyOnPV" (formula "1") (term "0"))
(rule "ifthenelse_concrete3" (formula "1"))
(rule "boolean_not_equal_2" (formula "1") (term "1"))
(rule "concrete_or_4" (formula "1"))
(rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
(rule "concrete_not_1" (formula "4") (term "0"))
(rule "concrete_or_2" (formula "4"))
(rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
(rule "concrete_impl_1" (formula "6"))
(rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
(rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "4"))
(rule "polySimp_pullOutFactor1" (formula "5") (term "1"))
(rule "add_literals" (formula "5") (term "1,1"))
(rule "times_zero_1" (formula "5") (term "1"))
(rule "distr_forallAnd" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "emptyBlock" (formula "18") (term "1"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "tmp"))
(rule "unfoldReadArray1" (formula "18") (term "1") (inst "#arr=x_arr"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x_arr"))
(rule "assignLocalVariableReadAttribute" (formula "18") (term "1"))
(rule "unfoldReadArray2" (formula "18") (term "1,1") (inst "#idxV=x"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x"))
(rule "evalCastAddressToInt2" (formula "18") (term "1"))
(rule "assignLocalVariableReadArray" (formula "18") (term "1,1"))
(rule "castDel" (formula "18") (term "0,2,0,0,1,1"))
(rule "unfoldAssignArray1" (formula "18") (term "1,1,1") (inst "#arr=x_arr"))
(rule "sequentialToParallel2" (formula "18") (term "1"))
(rule "simplifyUpdate2" (formula "18") (term "1"))
(rule "applyOnElementary" (formula "18") (term "0,1"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "applyOnElementary" (formula "18") (term "1,0"))
(rule "sequentialToParallel1" (formula "18") (term "0,1,0"))
(rule "simplifyUpdate3" (formula "18") (term "1,0,0,1,0"))
(rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "18") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
(rule "applyOnPV" (formula "18") (term "1,0,1,0"))
(rule "applyOnRigidTerm" (formula "18") (term "2,0,1,0"))
(rule "applyOnPV" (formula "18") (term "0,2,0,1,0"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x_arr_1"))
(rule "assignLocalVariableReadAttribute" (formula "18") (term "1"))
(rule "unfoldAssignArray2" (formula "18") (term "1,1") (inst "#idxV=x"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
(rule "evalCastAddressToInt2" (formula "18") (term "1"))
(rule "assignArray" (formula "18") (term "1,1"))
(rule "castDel" (formula "18") (term "0,2,0,0,1,1"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "sequentialToParallel2" (formula "18"))
(rule "simplifyUpdate2" (formula "18"))
(rule "simplifyUpdate3" (formula "18") (term "1,0"))
(rule "applyOnElementary" (formula "18") (term "1,0"))
(rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "18") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "18") (term "3,0,1,0"))
(rule "applyOnPV" (formula "18") (term "1,0,1,0"))
(rule "applyOnRigidTerm" (formula "18") (term "2,0,1,0"))
(rule "applyOnPV" (formula "18") (term "0,2,0,1,0"))
(rule "cnf_eqv" (formula "7") (term "0"))
(rule "nnf_notEx" (formula "7") (term "0,1,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "1,0,0,0,1,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,0,1,0"))
(rule "add_zero_right" (formula "7") (term "0,0,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,1,0"))
(rule "mul_literals" (formula "7") (term "1,1,0,0,0,1,0"))
(rule "distr_forallAnd" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
(rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
(rule "qeq_literals" (formula "10"))
(rule "true_left" (formula "10"))
(rule "allLeft" (formula "10") (inst "t=hb_0"))
(rule "ex_pull_out2" (formula "7") (term "0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "cnf_rightDist" (formula "7") (term "0,0"))
(rule "commute_or" (formula "7") (term "1,0,0"))
(rule "cnf_rightDist" (formula "7") (term "0,0,0"))
(rule "commute_or" (formula "7") (term "1,0,0,0"))
(rule "commute_or" (formula "7") (term "0,0,0,0"))
(rule "methodCallUnfoldTarget" (formula "20") (term "1") (inst "#v0=a"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "a"))
(rule "assignLocalVariableReadAttributeNonThis" (formula "20") (term "1"))
(rule "sequentialToParallel2" (formula "20"))
(rule "transferSucc" (formula "20"))
(rule "simplifyUpdate3" (formula "20") (term "1,0"))
(rule "applyOnElementary" (formula "20") (term "1,0"))
(rule "polySimp_elimSub" (formula "20") (term "3,1,0,0,1"))
(rule "sequentialToParallel2" (formula "20"))
(rule "simplifyUpdate2" (formula "20"))
(rule "simplifyUpdate3" (formula "20") (term "1,0"))
(rule "applyOnElementary" (formula "20") (term "1,0"))
(rule "polySimp_addComm0" (formula "20") (term "3,1,1,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,0,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0,0,1,0"))
(rule "ifthenelse_negated" (formula "20") (term "1,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
(rule "simplifyUpdate2" (formula "20") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
(rule "applyOnPV" (formula "20") (term "1,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "0,2,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,2,0,1,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "3,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,3,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "0,3,2,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "2,2,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,2,2,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,3,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,3,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,3,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "0,1,3,2,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,1,3,2,0,1,0"))
(rule "polySimp_addComm0" (formula "20") (term "3,2,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,3,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,3,2,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,1,3,2,0,1,0"))
(rule "polySimp_addComm0" (formula "20") (term "3,2,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "2,1,3,2,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,2,1,3,2,0,1,0"))
(rule "pullOutSelect" (formula "20") (term "0,0,0,1,0") (inst "selectSK=java_lang_Message_sender_0"))
(rule "applyEq" (formula "21") (term "0,2,1,3,2,0,1,0") (ifseqformula "1"))
(rule "applyEq" (formula "21") (term "0,2,2,0,1,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "21") (term "0,0,0,1,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "21") (term "0,2,1,3,2,0,1,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "21") (term "0,2,2,0,1,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "replace_known_right" (formula "20") (term "0,0,1,0") (ifseqformula "14"))
(rule "ifthenelse_false" (formula "20") (term "0,1,0"))
(rule "pullOutSelect" (formula "20") (term "1,3,0,1,0") (inst "selectSK=address_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "21") (term "1,3,0,1,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "functionCallEmpty" (formula "20") (term "1"))
(rule "all_pull_out2" (formula "8") (term "0"))
(rule "swapQuantifiersAll" (formula "8"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(rule "commute_or_2" (formula "8") (term "0,0,0"))
(rule "commute_or" (formula "8") (term "0,0,0,0"))
(rule "commute_or_2" (formula "8") (term "0,0,0"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(rule "elim_forall4" (formula "8") (term "0"))
(rule "emptyProgram" (formula "20") (term "1"))
(rule "applyOnRigidFormula" (formula "20"))
(rule "applyOnRigidFormula" (formula "20") (term "0"))
(rule "simplifyUpdate2" (formula "20") (term "1,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0"))
(rule "simplifyUpdate2" (formula "20") (term "0,0,0"))
(rule "simplifyUpdate2" (formula "20") (term "1,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,1"))
(rule "simplifyUpdate2" (formula "20") (term "0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0,0"))
(rule "replace_known_left" (formula "20") (term "1,0,0") (ifseqformula "1"))
(rule "concrete_and_3" (formula "20") (term "0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "2,0,1,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,1,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,2,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,0,2,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,2,0,1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,0,1"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0,0,1"))
(rule "eqSymm" (formula "20") (term "1,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,1"))
(rule "simplifyUpdate2" (formula "20") (term "0,1,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,0,1,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,0,1,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,0,1,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,0,1"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,1"))
(rule "simplifyUpdate2" (formula "20") (term "0,1,0,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "1,1,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,0,1,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,0,1,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,1,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,1,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "2,0,1,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,1,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,1,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "0,1,1,0,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "0,0,0,0,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,1,1,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,1,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,0,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,0,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,0,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,2,0,1,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,1,0,0,0,0,1"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,0,0,0,0,0,1"))
(rule "applyOnPV" (formula "20") (term "0,1,0,0,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,0,0,0,0,1"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,0,0,0,1"))
(rule "applyOnRigidTerm" (formula "20") (term "0,0,1,1,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,0,1,1,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,1,0,0,0,1"))
(rule "applyOnPV" (formula "20") (term "0,0,0,1,1,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,1,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,0,2,0,1,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,0,2,0,1,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,0,2,0,1,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,0,2,0,1,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,1,1,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,1,1,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,1,1,0,0,0,0,1"))
(rule "applyOnPV" (formula "20") (term "0,0,1,1,1,0,0,0,0,1"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,1,0,0,0,0,0,1"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,0,0,1,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,0,1,1,0,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,1,0,0,0,0,0,1"))
(rule "applyOnPV" (formula "20") (term "0,0,0,1,1,0,0,0,0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,0,1,1,0,0,0,0,0,1"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,1,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,1,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,1,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,1,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,1,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,1,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,1,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,1,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,1,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,1,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,0,0,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,0,0,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,0,0,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,0,0,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,0,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "2,0,1,1,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,1,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,1,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,0,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate2" (formula "20") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,1,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,1,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,1,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "0,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate2" (formula "20") (term "0,0,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,1,0,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,1,0,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,0,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,0,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,2,0,1,1,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,2,0,1,1,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,2,0,1,1,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,2,0,1,1,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "2,0,1,1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,1,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,0,0,1,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,0,0,1,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,0,0,1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,0,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,0,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,0,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "0,1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "20") (term "1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "0,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,2,0,1,1,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,2,0,1,1,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,0,2,0,1,1,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,2,0,1,1,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,0,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,0,1,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,0,1,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,0,1,1,0,0,0,0,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "0,1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,1,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,1,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,1,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,1,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "20") (term "1,1,1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "applyOnPV" (formula "20") (term "0,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0"))
(rule "pullOutSelect" (formula "20") (term "0,1,0") (inst "selectSK=address_1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "eqClose" (formula "1") (term "0,0,0"))
(rule "concrete_and_1" (formula "1") (term "0,0"))
(rule "castDel" (formula "1") (term "1,0"))
(rule "eqSymm" (formula "1") (term "0,0"))
(rule "pullOutSelect" (formula "21") (term "1,0,0,1,0,0") (inst "selectSK=MultiAuctionImpl_balances_0"))
(rule "applyEq" (formula "22") (term "1,0,1,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "22") (term "1,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "22") (term "1,0,1,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "22") (term "1,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "22") (term "1,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "22") (term "1,0,1,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "1,0,0,1,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "1,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "1,0,1,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "1,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "1,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "pullOutSelect" (formula "21") (term "1,0,1,0,0,0,0") (inst "selectSK=MultiAuctionImpl_State_AUCTION_OPEN_0"))
(rule "applyEq" (formula "22") (term "1,0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "22") (term "1,0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "pullOutSelect" (formula "21") (term "0,0,1,0,0,0,0") (inst "selectSK=MultiAuctionImpl_state_0"))
(rule "applyEq" (formula "22") (term "0,0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "22") (term "0,0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "replace_known_left" (formula "21") (term "0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "2"))
(rule "concrete_not_1" (formula "21") (term "0,1,0,0,0,0,0,0,0,0"))
(rule "concrete_or_2" (formula "21") (term "1,0,0,0,0,0,0,0,0"))
(rule "replace_known_left" (formula "21") (term "0,1,0,0,0,0") (ifseqformula "2"))
(rule "concrete_impl_1" (formula "21") (term "1,0,0,0,0"))
(rule "pullOutSelect" (formula "21") (term "0,0,2,0,1,0,0,0") (inst "selectSK=MultiAuctionImpl_auctionOwner_0"))
(rule "applyEq" (formula "22") (term "0,2,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "22") (term "1,1,0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "22") (term "0,2,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "22") (term "0,2,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "1,1,0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "0,0,2,0,1,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "22") (term "0,2,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "pullOutSelect" (formula "1") (term "0,2,2,0") (inst "selectSK=java_lang_Message_sender_1"))
(rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "replaceKnownSelect_taclet_0" (formula "1") (term "2,0"))
(rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "1") (term "2,0"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "2") (term "0,2,2,0") (ifseqformula "1"))
(rule "replaceKnownSelect_taclet_2" (formula "2") (term "2,0"))
(rule "replaceKnownAuxiliaryConstant_taclet_3" (formula "2") (term "2,0"))
(rule "applyEqReverse" (formula "2") (term "0,0,0") (ifseqformula "1"))
(rule "eqClose" (formula "2") (term "0,0"))
(rule "ifthenelse_true" (formula "2") (term "0"))
(rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "2"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "polySimp_sepPosMonomial" (formula "20") (term "1,0"))
(rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
(rule "polySimp_elimOne" (formula "20") (term "1,1,0"))
(rule "pullOutSelect" (formula "20") (term "1,1,1,1,0,0,0,1,0,1,0,0,0,0") (inst "selectSK=MultiAuctionImpl_bidders_0"))
(rule "applyEq" (formula "21") (term "1,1,1,0,0,1,0,1,0,0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "21") (term "1,1,1,1,0,0,0,1,0,1,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "21") (term "1,1,1,0,0,1,0,1,0,0,0,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "pullOutSelect" (formula "20") (term "1,0,1,0,0,1,0,0,0,0") (inst "selectSK=MultiAuctionImpl_bidded_0"))
(rule "applyEq" (formula "21") (term "1,0,1,1,0,1,0,0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "21") (term "1,0,1,0,0,1,0,0,0,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "21") (term "1,0,1,1,0,1,0,0,0,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "pullOutSelect" (formula "20") (term "0,1,1,0,0,0,0,0,0,0") (inst "selectSK=address_2"))
(rule "applyEq" (formula "21") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "eqClose" (formula "1") (term "0,0,0"))
(rule "concrete_and_1" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "0,0"))
(rule "castDel" (formula "1") (term "1,0"))
(rule "pullOutSelect" (formula "21") (term "0,1,0,0,0") (inst "selectSK=arr_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "eqClose" (formula "1") (term "0,0,0,0"))
(rule "concrete_and_1" (formula "1") (term "0,0,0"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "castDel" (formula "1") (term "1,0"))
(rule "intCastEqual" (formula "1") (term "0,0"))
(rule "applyEq" (formula "1") (term "2,0") (ifseqformula "11"))
(rule "ifthenelse_same_branches" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "22") (term "0,1,0,0,0") (ifseqformula "1"))
(rule "eqClose" (formula "22") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "22") (term "0,0,0"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=address_3"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "applyEq" (formula "1") (term "2,0") (ifseqformula "6"))
(rule "pullOutSelect" (formula "21") (term "1,1,1,0,0,0,1,0,1,0,0,0") (inst "selectSK=arr_length_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "22") (term "1,1,1,0,0,0,1,0,1,0,0,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "allLeft" (formula "3") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
(rule "applyEq" (formula "3") (term "0") (ifseqformula "11"))
(rule "inEqSimp_commuteLeq" (formula "3"))
(rule "arrLengthLengthNotNegative" (formula "8") (term "1,1,1,1,0,0"))
(rule "andRight" (formula "22") (userinteraction))
(branch "Case 1"
   (rule "andRight" (formula "22") (userinteraction))
   (branch "Case 1"
      (rule "andRight" (formula "22") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "22") (userinteraction))
         (branch "Case 1"
            (rule "int_induction" (inst "b=(   (  geq(n, Z(0(#)))<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>
     & lt(n,
          int::select(store(store(heap,
                                  int[]::select(heap,
                                                self,
                                                MultiAuctionImpl::$balances),
                                  arr((int)(java.lang.Address::select(heap,
                                                                      msg,
                                                                      java.lang.Message::$sender))),
                                  Z(0(#))),
                            net,
                            address(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender)),
                            add(mul(int::select(heap,
                                                int[]::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$balances),
                                                arr((int)(java.lang.Address::select(heap,
                                                                                    msg,
                                                                                    java.lang.Message::$sender)))),
                                    Z(neglit(1(#)))),
                                int::select(heap,
                                            net,
                                            address(java.lang.Address::select(heap,
                                                                              msg,
                                                                              java.lang.Message::$sender))))),
                      java.lang.Address[]::select(store(store(heap,
                                                              int[]::select(heap,
                                                                            self,
                                                                            MultiAuctionImpl::$balances),
                                                              arr((int)(java.lang.Address::select(heap,
                                                                                                  msg,
                                                                                                  java.lang.Message::$sender))),
                                                              Z(0(#))),
                                                        net,
                                                        address(java.lang.Address::select(heap,
                                                                                          msg,
                                                                                          java.lang.Message::$sender)),
                                                        add(mul(int::select(heap,
                                                                            int[]::select(heap,
                                                                                          self,
                                                                                          MultiAuctionImpl::$balances),
                                                                            arr((int)(java.lang.Address::select(heap,
                                                                                                                msg,
                                                                                                                java.lang.Message::$sender)))),
                                                                Z(neglit(1(#)))),
                                                            int::select(heap,
                                                                        net,
                                                                        address(java.lang.Address::select(heap,
                                                                                                          msg,
                                                                                                          java.lang.Message::$sender))))),
                                                  self,
                                                  MultiAuctionImpl::$bidders),
                      arr_length))<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>
 -> (\\exists int j;
       ((  (geq(j, Z(0(#)))<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>
         & leq(j, n)<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>
         & (\\forall int i;
              ((   (  geq(i, Z(0(#)))<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>
                    & leq(i, n)<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>
                -> geq(int::select(store(store(heap,
                                               int[]::select(heap,
                                                             self,
                                                             MultiAuctionImpl::$balances),
                                               arr((int)(java.lang.Address::select(heap,
                                                                                   msg,
                                                                                   java.lang.Message::$sender))),
                                               Z(0(#))),
                                         net,
                                         address(java.lang.Address::select(heap,
                                                                           msg,
                                                                           java.lang.Message::$sender)),
                                         add(mul(int::select(heap,
                                                             int[]::select(heap,
                                                                           self,
                                                                           MultiAuctionImpl::$balances),
                                                             arr((int)(java.lang.Address::select(heap,
                                                                                                 msg,
                                                                                                 java.lang.Message::$sender)))),
                                                 Z(neglit(1(#)))),
                                             int::select(heap,
                                                         net,
                                                         address(java.lang.Address::select(heap,
                                                                                           msg,
                                                                                           java.lang.Message::$sender))))),
                                   int[]::select(store(store(heap,
                                                             int[]::select(heap,
                                                                           self,
                                                                           MultiAuctionImpl::$balances),
                                                             arr((int)(java.lang.Address::select(heap,
                                                                                                 msg,
                                                                                                 java.lang.Message::$sender))),
                                                             Z(0(#))),
                                                       net,
                                                       address(java.lang.Address::select(heap,
                                                                                         msg,
                                                                                         java.lang.Message::$sender)),
                                                       add(mul(int::select(heap,
                                                                           int[]::select(heap,
                                                                                         self,
                                                                                         MultiAuctionImpl::$balances),
                                                                           arr((int)(java.lang.Address::select(heap,
                                                                                                               msg,
                                                                                                               java.lang.Message::$sender)))),
                                                               Z(neglit(1(#)))),
                                                           int::select(heap,
                                                                       net,
                                                                       address(java.lang.Address::select(heap,
                                                                                                         msg,
                                                                                                         java.lang.Message::$sender))))),
                                                 self,
                                                 MultiAuctionImpl::$balances),
                                   arr((int)(java.lang.Address::select(store(store(heap,
                                                                                   int[]::select(heap,
                                                                                                 self,
                                                                                                 MultiAuctionImpl::$balances),
                                                                                   arr((int)(java.lang.Address::select(heap,
                                                                                                                       msg,
                                                                                                                       java.lang.Message::$sender))),
                                                                                   Z(0(#))),
                                                                             net,
                                                                             address(java.lang.Address::select(heap,
                                                                                                               msg,
                                                                                                               java.lang.Message::$sender)),
                                                                             add(mul(int::select(heap,
                                                                                                 int[]::select(heap,
                                                                                                               self,
                                                                                                               MultiAuctionImpl::$balances),
                                                                                                 arr((int)(java.lang.Address::select(heap,
                                                                                                                                     msg,
                                                                                                                                     java.lang.Message::$sender)))),
                                                                                     Z(neglit(1(#)))),
                                                                                 int::select(heap,
                                                                                             net,
                                                                                             address(java.lang.Address::select(heap,
                                                                                                                               msg,
                                                                                                                               java.lang.Message::$sender))))),
                                                                       java.lang.Address[]::select(store(store(heap,
                                                                                                               int[]::select(heap,
                                                                                                                             self,
                                                                                                                             MultiAuctionImpl::$balances),
                                                                                                               arr((int)(java.lang.Address::select(heap,
                                                                                                                                                   msg,
                                                                                                                                                   java.lang.Message::$sender))),
                                                                                                               Z(0(#))),
                                                                                                         net,
                                                                                                         address(java.lang.Address::select(heap,
                                                                                                                                           msg,
                                                                                                                                           java.lang.Message::$sender)),
                                                                                                         add(mul(int::select(heap,
                                                                                                                             int[]::select(heap,
                                                                                                                                           self,
                                                                                                                                           MultiAuctionImpl::$balances),
                                                                                                                             arr((int)(java.lang.Address::select(heap,
                                                                                                                                                                 msg,
                                                                                                                                                                 java.lang.Message::$sender)))),
                                                                                                                 Z(neglit(1(#)))),
                                                                                                             int::select(heap,
                                                                                                                         net,
                                                                                                                         address(java.lang.Address::select(heap,
                                                                                                                                                           msg,
                                                                                                                                                           java.lang.Message::$sender))))),
                                                                                                   self,
                                                                                                   MultiAuctionImpl::$bidders),
                                                                       arr(j))))),
                       int::select(store(store(heap,
                                               int[]::select(heap,
                                                             self,
                                                             MultiAuctionImpl::$balances),
                                               arr((int)(java.lang.Address::select(heap,
                                                                                   msg,
                                                                                   java.lang.Message::$sender))),
                                               Z(0(#))),
                                         net,
                                         address(java.lang.Address::select(heap,
                                                                           msg,
                                                                           java.lang.Message::$sender)),
                                         add(mul(int::select(heap,
                                                             int[]::select(heap,
                                                                           self,
                                                                           MultiAuctionImpl::$balances),
                                                             arr((int)(java.lang.Address::select(heap,
                                                                                                 msg,
                                                                                                 java.lang.Message::$sender)))),
                                                 Z(neglit(1(#)))),
                                             int::select(heap,
                                                         net,
                                                         address(java.lang.Address::select(heap,
                                                                                           msg,
                                                                                           java.lang.Message::$sender))))),
                                   int[]::select(store(store(heap,
                                                             int[]::select(heap,
                                                                           self,
                                                                           MultiAuctionImpl::$balances),
                                                             arr((int)(java.lang.Address::select(heap,
                                                                                                 msg,
                                                                                                 java.lang.Message::$sender))),
                                                             Z(0(#))),
                                                       net,
                                                       address(java.lang.Address::select(heap,
                                                                                         msg,
                                                                                         java.lang.Message::$sender)),
                                                       add(mul(int::select(heap,
                                                                           int[]::select(heap,
                                                                                         self,
                                                                                         MultiAuctionImpl::$balances),
                                                                           arr((int)(java.lang.Address::select(heap,
                                                                                                               msg,
                                                                                                               java.lang.Message::$sender)))),
                                                               Z(neglit(1(#)))),
                                                           int::select(heap,
                                                                       net,
                                                                       address(java.lang.Address::select(heap,
                                                                                                         msg,
                                                                                                         java.lang.Message::$sender))))),
                                                 self,
                                                 MultiAuctionImpl::$balances),
                                   arr((int)(java.lang.Address::select(store(store(heap,
                                                                                   int[]::select(heap,
                                                                                                 self,
                                                                                                 MultiAuctionImpl::$balances),
                                                                                   arr((int)(java.lang.Address::select(heap,
                                                                                                                       msg,
                                                                                                                       java.lang.Message::$sender))),
                                                                                   Z(0(#))),
                                                                             net,
                                                                             address(java.lang.Address::select(heap,
                                                                                                               msg,
                                                                                                               java.lang.Message::$sender)),
                                                                             add(mul(int::select(heap,
                                                                                                 int[]::select(heap,
                                                                                                               self,
                                                                                                               MultiAuctionImpl::$balances),
                                                                                                 arr((int)(java.lang.Address::select(heap,
                                                                                                                                     msg,
                                                                                                                                     java.lang.Message::$sender)))),
                                                                                     Z(neglit(1(#)))),
                                                                                 int::select(heap,
                                                                                             net,
                                                                                             address(java.lang.Address::select(heap,
                                                                                                                               msg,
                                                                                                                               java.lang.Message::$sender))))),
                                                                       java.lang.Address[]::select(store(store(heap,
                                                                                                               int[]::select(heap,
                                                                                                                             self,
                                                                                                                             MultiAuctionImpl::$balances),
                                                                                                               arr((int)(java.lang.Address::select(heap,
                                                                                                                                                   msg,
                                                                                                                                                   java.lang.Message::$sender))),
                                                                                                               Z(0(#))),
                                                                                                         net,
                                                                                                         address(java.lang.Address::select(heap,
                                                                                                                                           msg,
                                                                                                                                           java.lang.Message::$sender)),
                                                                                                         add(mul(int::select(heap,
                                                                                                                             int[]::select(heap,
                                                                                                                                           self,
                                                                                                                                           MultiAuctionImpl::$balances),
                                                                                                                             arr((int)(java.lang.Address::select(heap,
                                                                                                                                                                 msg,
                                                                                                                                                                 java.lang.Message::$sender)))),
                                                                                                                 Z(neglit(1(#)))),
                                                                                                             int::select(heap,
                                                                                                                         net,
                                                                                                                         address(java.lang.Address::select(heap,
                                                                                                                                                           msg,
                                                                                                                                                           java.lang.Message::$sender))))),
                                                                                                   self,
                                                                                                   MultiAuctionImpl::$bidders),
                                                                       arr(i))))))<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>))<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>))<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>)<<origin(\"User_Interaction @ node 1145 (int_induction)\",\"[]\")>>") (inst "nv=n") (userinteraction))
            (branch "Base Case"
               (rule "replaceKnownSelect_taclet_20" (formula "15") (term "1,1,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "15") (term "1,1,1,0"))
               (rule "replaceKnownSelect_taclet_32" (formula "15") (term "1,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "15") (term "1,1,0"))
               (rule "replaceKnownSelect_taclet_5" (formula "15") (term "1,0,1,0,1,0,1"))
               (rule "replaceKnownSelect_taclet_5" (formula "15") (term "1,1,1,0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "15") (term "1,0,1,0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "15") (term "1,1,1,0,1,0,1"))
               (rule "replaceKnownSelect_taclet_20" (formula "15") (term "1,0,0,2,0,1,0,1,0,1"))
               (rule "replaceKnownSelect_taclet_20" (formula "15") (term "1,0,0,2,1,1,0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "15") (term "1,0,0,2,0,1,0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "15") (term "1,0,0,2,1,1,0,1,0,1"))
               (rule "qeq_literals" (formula "15") (term "0,0"))
               (rule "concrete_and_1" (formula "15") (term "0"))
               (rule "impRight" (formula "15"))
               (rule "inEqSimp_ltToLeq" (formula "1"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
               (rule "leq_literals" (formula "9") (term "0"))
               (rule "concrete_or_1" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "nnf_ex2all" (formula "23"))
               (rule "nnf_ex2all" (formula "16"))
               (rule "nnf_notAll" (formula "2") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "2") (term "0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "inEqSimp_or_antiSymm0" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "1,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "ifthenelse_true_for" (formula "1") (term "0,0"))
               (rule "nnf_notAll" (formula "1") (term "1,0"))
               (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
               (rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
               (rule "nnf_notOr" (formula "1") (term "0,1,0"))
               (rule "double_not" (formula "1") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,1,0"))
               (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,0"))
               (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
               (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0"))
               (rule "commute_or_2" (formula "2") (term "0,0,0"))
               (rule "commute_or_2" (formula "2") (term "0,0"))
               (rule "commute_or_2" (formula "2") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0"))
               (rule "shift_paren_or" (formula "2") (term "1,0,0"))
               (rule "commute_and" (formula "1") (term "0,0,1,0"))
               (rule "inEqSimp_and_antiSymm0" (formula "1") (term "0,0,1,0"))
               (rule "applyEq_or_int2" (formula "2") (term "0,0,0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,0,0,0"))
               (rule "applyEq_or_int2" (formula "2") (term "1,0,1,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "2") (term "0,1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "0,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,1,0,1,0,0"))
               (rule "commute_and" (formula "1") (term "0,1,0"))
               (rule "elim_exists4" (formula "1") (term "1,0"))
               (rule "pullOutSelect" (formula "1") (term "1,1,1,0") (inst "selectSK=arr_1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0"))
               (rule "intCastEqual" (formula "1") (term "0,0"))
               (rule "pullOutSelect" (formula "1") (term "0,0,2,2,0") (inst "selectSK=arr_2"))
               (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "2") (term "0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "21"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "2") (term "1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "2") (term "0,0,2,2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "1") (term "0,0"))
               (rule "commute_or" (formula "2") (term "0"))
               (rule "elim_forall4" (formula "2"))
               (rule "replaceKnownSelect_taclet00000_35" (formula "2") (term "0"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "qeq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch "Step Case"
               (rule "allRight" (formula "15") (inst "sk=n_0") (userinteraction))
               (rule "impRight" (formula "15") (userinteraction))
               (rule "impRight" (formula "16") (userinteraction))
               (rule "andLeft" (formula "2") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "impLeft" (formula "4") (userinteraction))
               (branch "Case 1"
                  (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,1"))
                  (rule "replaceKnownSelect_taclet_32" (formula "2") (term "1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "1"))
                  (rule "replaceKnownSelect_taclet_20" (formula "18") (term "1,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "18") (term "1,1,1"))
                  (rule "replaceKnownSelect_taclet_32" (formula "18") (term "1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "18") (term "1,1"))
                  (rule "replaceKnownSelect_taclet_5" (formula "19") (term "1,0,1,0,1,0"))
                  (rule "replaceKnownSelect_taclet_5" (formula "19") (term "1,1,1,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "19") (term "1,0,1,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "19") (term "1,1,1,0,1,0"))
                  (rule "replaceKnownSelect_taclet_20" (formula "19") (term "1,0,0,2,0,1,0,1,0"))
                  (rule "replaceKnownSelect_taclet_20" (formula "19") (term "1,0,0,2,1,1,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "19") (term "1,0,0,2,0,1,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "19") (term "1,0,0,2,1,1,0,1,0"))
                  (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "3"))
                  (rule "concrete_and_1" (formula "18"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "1,1,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0"))
                  (rule "inEqSimp_ltRight" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
                  (rule "leq_literals" (formula "2") (term "0"))
                  (rule "concrete_or_1" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_literals" (formula "2") (term "0"))
                  (rule "leq_literals" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "Case 2"
                  (rule "exLeft" (formula "4") (inst "sk=j_0") (userinteraction))
                  (rule "cut" (inst "cutFormula=gt(int::select(store(store(heap,
                           int[]::select(heap,
                                         self,
                                         MultiAuctionImpl::$balances),
                           arr((int)(java.lang.Address::select(heap,
                                                               msg,
                                                               java.lang.Message::$sender))),
                           Z(0(#))),
                     net,
                     address(java.lang.Address::select(heap,
                                                       msg,
                                                       java.lang.Message::$sender)),
                     add(mul(int::select(heap,
                                         int[]::select(heap,
                                                       self,
                                                       MultiAuctionImpl::$balances),
                                         arr((int)(java.lang.Address::select(heap,
                                                                             msg,
                                                                             java.lang.Message::$sender)))),
                             Z(neglit(1(#)))),
                         int::select(heap,
                                     net,
                                     address(java.lang.Address::select(heap,
                                                                       msg,
                                                                       java.lang.Message::$sender))))),
               int[]::select(store(store(heap,
                                         int[]::select(heap,
                                                       self,
                                                       MultiAuctionImpl::$balances),
                                         arr((int)(java.lang.Address::select(heap,
                                                                             msg,
                                                                             java.lang.Message::$sender))),
                                         Z(0(#))),
                                   net,
                                   address(java.lang.Address::select(heap,
                                                                     msg,
                                                                     java.lang.Message::$sender)),
                                   add(mul(int::select(heap,
                                                       int[]::select(heap,
                                                                     self,
                                                                     MultiAuctionImpl::$balances),
                                                       arr((int)(java.lang.Address::select(heap,
                                                                                           msg,
                                                                                           java.lang.Message::$sender)))),
                                           Z(neglit(1(#)))),
                                       int::select(heap,
                                                   net,
                                                   address(java.lang.Address::select(heap,
                                                                                     msg,
                                                                                     java.lang.Message::$sender))))),
                             self,
                             MultiAuctionImpl::$balances),
               arr((int)(java.lang.Address::select(store(store(heap,
                                                               int[]::select(heap,
                                                                             self,
                                                                             MultiAuctionImpl::$balances),
                                                               arr((int)(java.lang.Address::select(heap,
                                                                                                   msg,
                                                                                                   java.lang.Message::$sender))),
                                                               Z(0(#))),
                                                         net,
                                                         address(java.lang.Address::select(heap,
                                                                                           msg,
                                                                                           java.lang.Message::$sender)),
                                                         add(mul(int::select(heap,
                                                                             int[]::select(heap,
                                                                                           self,
                                                                                           MultiAuctionImpl::$balances),
                                                                             arr((int)(java.lang.Address::select(heap,
                                                                                                                 msg,
                                                                                                                 java.lang.Message::$sender)))),
                                                                 Z(neglit(1(#)))),
                                                             int::select(heap,
                                                                         net,
                                                                         address(java.lang.Address::select(heap,
                                                                                                           msg,
                                                                                                           java.lang.Message::$sender))))),
                                                   java.lang.Address[]::select(store(store(heap,
                                                                                           int[]::select(heap,
                                                                                                         self,
                                                                                                         MultiAuctionImpl::$balances),
                                                                                           arr((int)(java.lang.Address::select(heap,
                                                                                                                               msg,
                                                                                                                               java.lang.Message::$sender))),
                                                                                           Z(0(#))),
                                                                                     net,
                                                                                     address(java.lang.Address::select(heap,
                                                                                                                       msg,
                                                                                                                       java.lang.Message::$sender)),
                                                                                     add(mul(int::select(heap,
                                                                                                         int[]::select(heap,
                                                                                                                       self,
                                                                                                                       MultiAuctionImpl::$balances),
                                                                                                         arr((int)(java.lang.Address::select(heap,
                                                                                                                                             msg,
                                                                                                                                             java.lang.Message::$sender)))),
                                                                                             Z(neglit(1(#)))),
                                                                                         int::select(heap,
                                                                                                     net,
                                                                                                     address(java.lang.Address::select(heap,
                                                                                                                                       msg,
                                                                                                                                       java.lang.Message::$sender))))),
                                                                               self,
                                                                               MultiAuctionImpl::$bidders),
                                                   arr(j_0))))),
   int::select(store(store(heap,
                           int[]::select(heap,
                                         self,
                                         MultiAuctionImpl::$balances),
                           arr((int)(java.lang.Address::select(heap,
                                                               msg,
                                                               java.lang.Message::$sender))),
                           Z(0(#))),
                     net,
                     address(java.lang.Address::select(heap,
                                                       msg,
                                                       java.lang.Message::$sender)),
                     add(mul(int::select(heap,
                                         int[]::select(heap,
                                                       self,
                                                       MultiAuctionImpl::$balances),
                                         arr((int)(java.lang.Address::select(heap,
                                                                             msg,
                                                                             java.lang.Message::$sender)))),
                             Z(neglit(1(#)))),
                         int::select(heap,
                                     net,
                                     address(java.lang.Address::select(heap,
                                                                       msg,
                                                                       java.lang.Message::$sender))))),
               int[]::select(store(store(heap,
                                         int[]::select(heap,
                                                       self,
                                                       MultiAuctionImpl::$balances),
                                         arr((int)(java.lang.Address::select(heap,
                                                                             msg,
                                                                             java.lang.Message::$sender))),
                                         Z(0(#))),
                                   net,
                                   address(java.lang.Address::select(heap,
                                                                     msg,
                                                                     java.lang.Message::$sender)),
                                   add(mul(int::select(heap,
                                                       int[]::select(heap,
                                                                     self,
                                                                     MultiAuctionImpl::$balances),
                                                       arr((int)(java.lang.Address::select(heap,
                                                                                           msg,
                                                                                           java.lang.Message::$sender)))),
                                           Z(neglit(1(#)))),
                                       int::select(heap,
                                                   net,
                                                   address(java.lang.Address::select(heap,
                                                                                     msg,
                                                                                     java.lang.Message::$sender))))),
                             self,
                             MultiAuctionImpl::$balances),
               arr((int)(java.lang.Address::select(store(store(heap,
                                                               int[]::select(heap,
                                                                             self,
                                                                             MultiAuctionImpl::$balances),
                                                               arr((int)(java.lang.Address::select(heap,
                                                                                                   msg,
                                                                                                   java.lang.Message::$sender))),
                                                               Z(0(#))),
                                                         net,
                                                         address(java.lang.Address::select(heap,
                                                                                           msg,
                                                                                           java.lang.Message::$sender)),
                                                         add(mul(int::select(heap,
                                                                             int[]::select(heap,
                                                                                           self,
                                                                                           MultiAuctionImpl::$balances),
                                                                             arr((int)(java.lang.Address::select(heap,
                                                                                                                 msg,
                                                                                                                 java.lang.Message::$sender)))),
                                                                 Z(neglit(1(#)))),
                                                             int::select(heap,
                                                                         net,
                                                                         address(java.lang.Address::select(heap,
                                                                                                           msg,
                                                                                                           java.lang.Message::$sender))))),
                                                   java.lang.Address[]::select(store(store(heap,
                                                                                           int[]::select(heap,
                                                                                                         self,
                                                                                                         MultiAuctionImpl::$balances),
                                                                                           arr((int)(java.lang.Address::select(heap,
                                                                                                                               msg,
                                                                                                                               java.lang.Message::$sender))),
                                                                                           Z(0(#))),
                                                                                     net,
                                                                                     address(java.lang.Address::select(heap,
                                                                                                                       msg,
                                                                                                                       java.lang.Message::$sender)),
                                                                                     add(mul(int::select(heap,
                                                                                                         int[]::select(heap,
                                                                                                                       self,
                                                                                                                       MultiAuctionImpl::$balances),
                                                                                                         arr((int)(java.lang.Address::select(heap,
                                                                                                                                             msg,
                                                                                                                                             java.lang.Message::$sender)))),
                                                                                             Z(neglit(1(#)))),
                                                                                         int::select(heap,
                                                                                                     net,
                                                                                                     address(java.lang.Address::select(heap,
                                                                                                                                       msg,
                                                                                                                                       java.lang.Message::$sender))))),
                                                                               self,
                                                                               MultiAuctionImpl::$bidders),
                                                   arr(add(n_0,
                                                           Z(1(#)))))))))<<origin(\"User_Interaction @ node 2455 (cut)\",\"[]\")>>") (userinteraction))
                  (branch "CUT: self.balances[(int)self.bidders[j_0]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))]]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))] > self.balances[(int)self.bidders[n_0 + 1]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))]]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))] TRUE"
                     (rule "instEx" (formula "5") (term "0,0,0") (ifseqformula "20") (userinteraction))
                     (rule "andLeft" (formula "5") (userinteraction))
                     (rule "andLeft" (formula "5") (userinteraction))
                     (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "5") (userinteraction))
                     (rule "concrete_and_1" (formula "22") (term "0") (userinteraction))
                     (rule "add_lesseq" (formula "6") (inst "i1=Z(1(#))") (userinteraction))
                     (rule "andRight" (formula "22") (userinteraction))
                     (branch "Case 1"
                        (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,1"))
                        (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,1"))
                        (rule "replaceKnownSelect_taclet_32" (formula "3") (term "1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "1"))
                        (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,1,1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "23") (term "1,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "23") (term "1,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,1"))
                        (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "23") (term "1,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "23") (term "1,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "23") (term "1,0,0,2,1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "23") (term "1,0,0,2,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "23") (term "1,0,0,2,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "23") (term "1,0,0,2,0,1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0"))
                        (rule "polySimp_addComm0" (formula "22") (term "1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,2,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0"))
                        (rule "add_zero_left" (formula "7") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "5"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "22") (inst "sk=i_0") (userinteraction))
                        (rule "impRight" (formula "22") (userinteraction))
                        (rule "cut" (inst "cutFormula=lt(i_0, add(n_0, Z(1(#))))<<origin(\"User_Interaction @ node 11850 (cut)\",\"[]\")>>") (userinteraction))
                        (branch "CUT: i_0 < n_0 + 1 TRUE"
                           (rule "instAll" (formula "24") (term "0,2,0,0,2,1") (ifseqformula "9") (userinteraction))
                           (rule "replaceKnownSelect_taclet_5" (formula "4") (term "1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "4") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "25") (term "1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "25") (term "1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "4") (term "1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "4") (term "1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_32" (formula "6") (term "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "25") (term "1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "25") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,0,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "10") (term "1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "10") (term "1,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "25") (term "1,0,0,2,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,0,2,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,0,2,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "25") (term "1,0,0,2,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "10") (term "1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "10") (term "1,1,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "26") (term "1,0,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "26") (term "1,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "25") (term "1,0,0,2,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,0,0,2,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,0,0,2,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,0,2,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,0,2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "25") (term "1,0,0,2,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "26") (term "1,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "26") (term "1,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,1,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "26") (term "1,0,0,2,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "26") (term "1,0,0,2,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,0,0,2,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,0,0,2,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "26") (term "1,0,0,2,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "26") (term "1,0,0,2,0,1,0,1,0"))
                           (rule "andLeft" (formula "3"))
                           (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                           (rule "concrete_and_1" (formula "1") (term "0"))
                           (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                           (rule "concrete_impl_3" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "polySimp_addComm0" (formula "27") (term "1,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,2,0,0,2,1"))
                           (rule "polySimp_addComm0" (formula "6") (term "0"))
                           (rule "polySimp_addComm0" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1"))
                           (rule "polySimp_addComm0" (formula "5") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_gtToGeq" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "3"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "5"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "polySimp_elimOne" (formula "8") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1"))
                           (rule "polySimp_elimOne" (formula "11") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: i_0 < n_0 + 1 FALSE"
                           (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "24") (term "1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "2") (term "1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "24") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "2") (term "1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_32" (formula "4") (term "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "4") (term "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "24") (term "1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "2") (term "1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "24") (term "1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "2") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "8") (term "1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "8") (term "1,1,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "24") (term "1,0,0,2,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "24") (term "1,0,0,2,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,0,2,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,0,2,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "8") (term "1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "8") (term "1,1,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "25") (term "1,0,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "25") (term "1,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "24") (term "1,0,0,2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "24") (term "1,0,0,2,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,0,2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,0,2,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,0,2,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,0,2,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "25") (term "1,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "25") (term "1,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "25") (term "1,0,0,2,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "25") (term "1,0,0,2,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,0,2,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,0,2,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "25") (term "1,0,0,2,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "25") (term "1,0,0,2,0,1,0,1,0"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,2,0,0,2,1"))
                           (rule "polySimp_addComm0" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "5") (term "0"))
                           (rule "polySimp_addComm0" (formula "24") (term "1"))
                           (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1"))
                           (rule "inEqSimp_geqRight" (formula "25"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltRight" (formula "25"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_gtToGeq" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "mul_literals" (formula "6") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1"))
                           (rule "polySimp_elimOne" (formula "10") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
                           (rule "leq_literals" (formula "6") (term "0"))
                           (rule "concrete_or_1" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "pullOutSelect" (formula "10") (term "1,1,0") (inst "selectSK=arr_1"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "10"))
                           (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "10"))
                           (rule "simplifySelectOfStore" (formula "10"))
                           (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "10") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "10") (term "0,0"))
                           (rule "ifthenelse_false" (formula "10") (term "0"))
                           (rule "simplifySelectOfStore" (formula "10"))
                           (rule "eqClose" (formula "10") (term "0,0,0,0"))
                           (rule "concrete_and_1" (formula "10") (term "0,0,0"))
                           (rule "equalUnique" (formula "10") (term "0,0,0"))
                           (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "10") (term "0,0"))
                           (rule "castDel" (formula "10") (term "1,0"))
                           (rule "eqSymm" (formula "10") (term "0,0"))
                           (rule "intCastEqual" (formula "10") (term "0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfStore" (formula "5"))
                           (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "5") (term "0,0"))
                           (rule "equalUnique" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "5") (term "0,0"))
                           (rule "ifthenelse_false" (formula "5") (term "0"))
                           (rule "simplifySelectOfStore" (formula "5"))
                           (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "5") (term "0,0"))
                           (rule "eqClose" (formula "5") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "5") (term "0,0"))
                           (rule "equalUnique" (formula "5") (term "0,0"))
                           (rule "castDel" (formula "5") (term "1,0"))
                           (rule "eqSymm" (formula "5") (term "0,0"))
                           (rule "intCastEqual" (formula "5") (term "0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                           (rule "mul_literals" (formula "8") (term "0,0"))
                           (rule "add_zero_left" (formula "8") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "8"))
                           (rule "leq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "3"))
                           (rule "polySimp_addAssoc" (formula "7") (term "1"))
                           (rule "add_literals" (formula "7") (term "0,1"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "3"))
                           (rule "inEqSimp_commuteGeq" (formula "11"))
                           (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "times_zero_1" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "times_zero_1" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "3") (term "1,0,2,0,0,2,2,0") (ifseqformula "2"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,2,0,0,2,2,0"))
                           (rule "add_literals" (formula "3") (term "0,0,2,0,0,2,2,0"))
                           (rule "add_zero_left" (formula "3") (term "0,2,0,0,2,2,0"))
                           (rule "applyEqRigid" (formula "3") (term "1,0,2,0,0,0") (ifseqformula "2"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,2,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,2,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,2,0,0,0"))
                           (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "2"))
                           (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "2"))
                           (rule "applyEqRigid" (formula "26") (term "1,1,1,0,0,1,0") (ifseqformula "2"))
                           (rule "polySimp_addAssoc" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "add_literals" (formula "26") (term "0,1,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "applyEqRigid" (formula "26") (term "1,1,1,0,0") (ifseqformula "2"))
                           (rule "polySimp_addAssoc" (formula "26") (term "1,1,0,0"))
                           (rule "add_literals" (formula "26") (term "0,1,1,0,0"))
                           (rule "add_zero_left" (formula "26") (term "1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "pullOutSelect" (formula "9") (term "0,0,2,2,0") (inst "selectSK=arr_3"))
                           (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "9"))
                           (rule "simplifySelectOfStore" (formula "9"))
                           (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "9") (term "0,0"))
                           (rule "equalUnique" (formula "9") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "9") (term "0,0"))
                           (rule "ifthenelse_false" (formula "9") (term "0"))
                           (rule "simplifySelectOfStore" (formula "9"))
                           (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "9") (term "0,0"))
                           (rule "equalUnique" (formula "9") (term "1,0,0"))
                           (rule "eqSymm" (formula "10") (term "0,0"))
                           (rule "eqSymm" (formula "9") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "9") (term "0,0,0"))
                           (rule "replace_known_right" (formula "9") (term "1,0,0,0") (ifseqformula "30"))
                           (rule "concrete_and_4" (formula "9") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "9") (term "0,0"))
                           (rule "ifthenelse_false" (formula "9") (term "0"))
                           (rule "applyEqReverse" (formula "10") (term "1,0,0") (ifseqformula "9"))
                           (rule "applyEqReverse" (formula "10") (term "0,0,2,2,0") (ifseqformula "9"))
                           (rule "hideAuxiliaryEq" (formula "9"))
                           (rule "eqSymm" (formula "9") (term "0,0"))
                           (rule "pullOutSelect" (formula "1") (term "0,0,2,0") (inst "selectSK=arr_4"))
                           (rule "applyEq" (formula "4") (term "0,0,2,2,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "eqSymm" (formula "4") (term "0,0"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "29"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "0,0,2,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "4") (term "1,0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "4") (term "0,0,2,2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "3") (term "0,0"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_5"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "equalUnique" (formula "1") (term "1,0,0"))
                           (rule "eqClose" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0"))
                           (rule "castDel" (formula "1") (term "1,0"))
                           (rule "eqSymm" (formula "1") (term "0,0"))
                           (rule "intCastEqual" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "CUT: self.balances[(int)self.bidders[j_0]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))]]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))] > self.balances[(int)self.bidders[n_0 + 1]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))]]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))] FALSE"
                     (rule "exRight" (formula "20") (inst "t=add(n_0, Z(1(#)))") (userinteraction))
                     (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "1") (userinteraction))
                     (rule "concrete_and_1" (formula "20") (term "0") (userinteraction))
                     (rule "andRight" (formula "20") (userinteraction))
                     (branch "Case 1"
                        (rule "replaceKnownSelect_taclet_5" (formula "19") (term "1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "19") (term "1,1"))
                        (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "19") (term "1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "19") (term "1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,1"))
                        (rule "replaceKnownSelect_taclet_32" (formula "2") (term "1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "1"))
                        (rule "replaceKnownSelect_taclet_5" (formula "4") (term "1,0,1,0,1"))
                        (rule "replaceKnownSelect_taclet_5" (formula "4") (term "1,1,1,0,1"))
                        (rule "replaceKnownSelect_taclet_20" (formula "19") (term "1,0,0,2,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "19") (term "1,0,0,2,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "4") (term "1,0,1,0,1"))
                        (rule "replaceKnownSelect_taclet_5" (formula "21") (term "1,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "21") (term "1,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "4") (term "1,1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "19") (term "1,0,0,2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "19") (term "1,0,0,2,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "21") (term "1,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "21") (term "1,1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,0,2,0,1,0,1"))
                        (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,0,2,1,1,0,1"))
                        (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,0,0,2,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,0,0,2,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,0,2,0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,0,2,1,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,0,0,2,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,0,0,2,1,1,0,1,0"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addComm0" (formula "22") (term "1"))
                        (rule "polySimp_addComm0" (formula "22") (term "0"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0,1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "21") (term "0,2,0,0,2,1"))
                        (rule "polySimp_addComm0" (formula "2") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "22"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "20") (inst "sk=i_0") (userinteraction))
                        (rule "cut" (inst "cutFormula=lt(i_0, add(n_0, Z(1(#))))<<origin(\"User_Interaction @ node 12046 (cut)\",\"[]\")>>") (userinteraction))
                        (branch "CUT: i_0 < n_0 + 1 TRUE"
                           (rule "andLeft" (formula "5") (userinteraction))
                           (rule "andLeft" (formula "5") (userinteraction))
                           (rule "instAll" (formula "23") (term "0,0,0") (ifseqformula "7") (userinteraction))
                           (rule "replaceKnownSelect_taclet_5" (formula "23") (term "1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "23") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "23") (term "1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "23") (term "1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_32" (formula "4") (term "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "4") (term "1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,0,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "24") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "24") (term "1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "8") (term "1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "8") (term "1,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "24") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "24") (term "1,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "23") (term "1,0,0,2,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "23") (term "1,0,0,2,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "8") (term "1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "8") (term "1,1,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,1,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "24") (term "1,0,0,2,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "24") (term "1,0,0,2,1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "25") (term "1,0,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "25") (term "1,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "23") (term "1,0,0,2,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,0,2,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "23") (term "1,0,0,2,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,0,2,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "24") (term "1,0,0,2,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "24") (term "1,0,0,2,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "25") (term "1,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "25") (term "1,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "25") (term "1,0,0,2,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "25") (term "1,0,0,2,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,0,2,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,0,2,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "25") (term "1,0,0,2,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "25") (term "1,0,0,2,0,1,0,1,0"))
                           (rule "impRight" (formula "24"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "3") (term "0"))
                           (rule "polySimp_addComm0" (formula "25") (term "0,2,0,0,2,1"))
                           (rule "polySimp_addComm0" (formula "5") (term "0"))
                           (rule "polySimp_addComm0" (formula "4") (term "1"))
                           (rule "polySimp_addComm0" (formula "6") (term "0"))
                           (rule "polySimp_addComm0" (formula "27") (term "1,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,2,0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1"))
                           (rule "inEqSimp_gtRight" (formula "25"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                           (rule "add_literals" (formula "6") (term "0,0,0"))
                           (rule "add_zero_left" (formula "6") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "6") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
                           (rule "concrete_impl_1" (formula "5"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                           (rule "polySimp_elimOne" (formula "8") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                           (rule "leq_literals" (formula "7") (term "0"))
                           (rule "concrete_or_1" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "pullOutSelect" (formula "10") (term "1,1,0") (inst "selectSK=arr_1"))
                           (rule "applyEq" (formula "2") (term "1") (ifseqformula "10"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "10"))
                           (rule "simplifySelectOfStore" (formula "10"))
                           (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "10") (term "0,0"))
                           (rule "equalUnique" (formula "10") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "10") (term "0,0"))
                           (rule "ifthenelse_false" (formula "10") (term "0"))
                           (rule "simplifySelectOfStore" (formula "10"))
                           (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "10") (term "0,0"))
                           (rule "eqClose" (formula "10") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "10") (term "0,0"))
                           (rule "equalUnique" (formula "10") (term "0,0"))
                           (rule "castDel" (formula "10") (term "1,0"))
                           (rule "eqSymm" (formula "10") (term "0,0"))
                           (rule "intCastEqual" (formula "10") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "4"))
                           (rule "pullOutSelect" (formula "2") (term "0,0,2,0") (inst "selectSK=arr_2"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0") (ifseqformula "2"))
                           (rule "simplifySelectOfStore" (formula "2"))
                           (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "2") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "simplifySelectOfStore" (formula "2"))
                           (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0"))
                           (rule "equalUnique" (formula "2") (term "1,0,0"))
                           (rule "eqSymm" (formula "2") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "2") (term "0,0,0"))
                           (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "30"))
                           (rule "concrete_and_2" (formula "2") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "0,0,2,0") (ifseqformula "2"))
                           (rule "applyEqReverse" (formula "1") (term "0,0,2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "pullOutSelect" (formula "10") (term "0,0,2,2,0") (inst "selectSK=arr_3"))
                           (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "10"))
                           (rule "simplifySelectOfStore" (formula "10"))
                           (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "10") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "10") (term "0,0"))
                           (rule "ifthenelse_false" (formula "10") (term "0"))
                           (rule "simplifySelectOfStore" (formula "10"))
                           (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "10") (term "0,0"))
                           (rule "equalUnique" (formula "10") (term "1,0,0"))
                           (rule "eqSymm" (formula "11") (term "0,0"))
                           (rule "eqSymm" (formula "10") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "10") (term "0,0,0"))
                           (rule "replace_known_right" (formula "10") (term "1,0,0,0") (ifseqformula "31"))
                           (rule "concrete_and_4" (formula "10") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "10") (term "0,0"))
                           (rule "ifthenelse_false" (formula "10") (term "0"))
                           (rule "applyEqReverse" (formula "11") (term "1,0,0") (ifseqformula "10"))
                           (rule "applyEqReverse" (formula "11") (term "0,0,2,2,0") (ifseqformula "10"))
                           (rule "hideAuxiliaryEq" (formula "10"))
                           (rule "eqSymm" (formula "10") (term "0,0"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_4"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "simplifySelectOfStore" (formula "4"))
                           (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "4") (term "0,0"))
                           (rule "equalUnique" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "4") (term "0,0"))
                           (rule "ifthenelse_false" (formula "4") (term "0"))
                           (rule "simplifySelectOfStore" (formula "4"))
                           (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                           (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "4") (term "0,0"))
                           (rule "eqClose" (formula "4") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "4") (term "0,0"))
                           (rule "castDel" (formula "4") (term "1,0"))
                           (rule "eqSymm" (formula "4") (term "0,0"))
                           (rule "intCastEqual" (formula "4") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_5"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                           (rule "simplifySelectOfStore" (formula "2"))
                           (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0"))
                           (rule "equalUnique" (formula "2") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "simplifySelectOfStore" (formula "2"))
                           (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0"))
                           (rule "equalUnique" (formula "2") (term "1,0,0"))
                           (rule "eqClose" (formula "2") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "2") (term "0,0"))
                           (rule "castDel" (formula "2") (term "1,0"))
                           (rule "eqSymm" (formula "2") (term "0,0"))
                           (rule "intCastEqual" (formula "2") (term "0,0"))
                           (rule "pullOutSelect" (formula "5") (term "0,0,2,2,0") (inst "selectSK=arr_6"))
                           (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "5"))
                           (rule "simplifySelectOfStore" (formula "5"))
                           (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "5") (term "0,0"))
                           (rule "equalUnique" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "5") (term "0,0"))
                           (rule "ifthenelse_false" (formula "5") (term "0"))
                           (rule "simplifySelectOfStore" (formula "5"))
                           (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "5") (term "0,0"))
                           (rule "equalUnique" (formula "5") (term "1,0,0"))
                           (rule "eqSymm" (formula "6") (term "0,0"))
                           (rule "eqSymm" (formula "5") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "5") (term "0,0,0"))
                           (rule "replace_known_right" (formula "5") (term "1,0,0,0") (ifseqformula "33"))
                           (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "5") (term "0,0"))
                           (rule "ifthenelse_false" (formula "5") (term "0"))
                           (rule "applyEqReverse" (formula "6") (term "1,0,0") (ifseqformula "5"))
                           (rule "applyEqReverse" (formula "6") (term "0,0,2,2,0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "eqSymm" (formula "5") (term "0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "7"))
                           (rule "andLeft" (formula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "leq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch "CUT: i_0 < n_0 + 1 FALSE"
                           (rule "replaceKnownSelect_taclet_5" (formula "20") (term "1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "20") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "20") (term "1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "20") (term "1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,1"))
                           (rule "replaceKnownSelect_taclet_32" (formula "2") (term "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "21") (term "1,0,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "21") (term "1,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "21") (term "1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "21") (term "1,1,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "20") (term "1,0,0,2,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "4") (term "1,0,1,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "20") (term "1,0,0,2,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "4") (term "1,1,1,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,0,0,2,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,0,0,2,1,1"))
                           (rule "replaceKnownSelect_taclet_5" (formula "22") (term "1,0,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_5" (formula "22") (term "1,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "20") (term "1,0,0,2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "4") (term "1,0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "20") (term "1,0,0,2,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "4") (term "1,1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,0,0,2,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,0,0,2,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "22") (term "1,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "22") (term "1,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,0,2,0,1,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,0,2,1,1,0,1"))
                           (rule "replaceKnownSelect_taclet_20" (formula "22") (term "1,0,0,2,0,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet_20" (formula "22") (term "1,0,0,2,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,0,2,0,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,0,2,1,1,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "22") (term "1,0,0,2,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "22") (term "1,0,0,2,1,1,0,1,0"))
                           (rule "impRight" (formula "21"))
                           (rule "andLeft" (formula "5"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "6"))
                           (rule "polySimp_addComm0" (formula "23") (term "1"))
                           (rule "polySimp_addComm0" (formula "3") (term "0"))
                           (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0,1,0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,2,0,0,2,1"))
                           (rule "polySimp_addComm0" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "25") (term "0,2,0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1"))
                           (rule "inEqSimp_ltRight" (formula "23"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_gtRight" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "25"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                           (rule "add_literals" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "inEqSimp_homoInEq0" (formula "5"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "mul_literals" (formula "6") (term "1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                           (rule "polySimp_elimOne" (formula "7") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
                           (rule "leq_literals" (formula "6") (term "0"))
                           (rule "concrete_or_1" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "pullOutSelect" (formula "10") (term "1,1,0") (inst "selectSK=arr_1"))
                           (rule "applyEq" (formula "2") (term "1") (ifseqformula "10"))
                           (rule "simplifySelectOfStore" (formula "10"))
                           (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "10") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "10") (term "0,0"))
                           (rule "ifthenelse_false" (formula "10") (term "0"))
                           (rule "simplifySelectOfStore" (formula "10"))
                           (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                           (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "10") (term "0,0"))
                           (rule "eqClose" (formula "10") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "10") (term "0,0"))
                           (rule "castDel" (formula "10") (term "1,0"))
                           (rule "eqSymm" (formula "10") (term "0,0"))
                           (rule "intCastEqual" (formula "10") (term "0,0"))
                           (rule "pullOutSelect" (formula "2") (term "0,0,2,0") (inst "selectSK=arr_2"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0") (ifseqformula "2"))
                           (rule "simplifySelectOfStore" (formula "2"))
                           (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "2") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "simplifySelectOfStore" (formula "2"))
                           (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0"))
                           (rule "equalUnique" (formula "2") (term "1,0,0"))
                           (rule "eqSymm" (formula "2") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "2") (term "0,0,0"))
                           (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "30"))
                           (rule "concrete_and_2" (formula "2") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0,0"))
                           (rule "ifthenelse_false" (formula "2") (term "0"))
                           (rule "applyEqReverse" (formula "3") (term "0,0,2,0") (ifseqformula "2"))
                           (rule "applyEqReverse" (formula "1") (term "0,0,2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "inEqSimp_homoInEq0" (formula "1"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "5"))
                           (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "5"))
                           (rule "polySimp_addAssoc" (formula "7") (term "1"))
                           (rule "add_literals" (formula "7") (term "0,1"))
                           (rule "applyEq" (formula "1") (term "1,0,2,0,0,2,1,1") (ifseqformula "5"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,2,0,0,2,1,1"))
                           (rule "add_literals" (formula "1") (term "0,0,2,0,0,2,1,1"))
                           (rule "add_zero_left" (formula "1") (term "0,2,0,0,2,1,1"))
                           (rule "applyEq" (formula "12") (term "1,1,0,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "2") (term "1,0,2,0,0,2,0") (ifseqformula "5"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,2,0,0,2,0"))
                           (rule "add_literals" (formula "2") (term "0,0,2,0,0,2,0"))
                           (rule "add_zero_left" (formula "2") (term "0,2,0,0,2,0"))
                           (rule "applyEqRigid" (formula "27") (term "1,1,1,0,0") (ifseqformula "5"))
                           (rule "polySimp_addAssoc" (formula "27") (term "1,1,0,0"))
                           (rule "add_literals" (formula "27") (term "0,1,1,0,0"))
                           (rule "add_zero_left" (formula "27") (term "1,1,0,0"))
                           (rule "applyEq" (formula "27") (term "1,1,1,0,0,1,0") (ifseqformula "5"))
                           (rule "polySimp_addAssoc" (formula "27") (term "1,1,0,0,1,0"))
                           (rule "add_literals" (formula "27") (term "0,1,1,0,0,1,0"))
                           (rule "add_zero_left" (formula "27") (term "1,1,0,0,1,0"))
                           (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "1,0"))
                           (rule "times_zero_1" (formula "6") (term "0"))
                           (rule "leq_literals" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq0" (formula "3"))
                           (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,0"))
                           (rule "times_zero_1" (formula "3") (term "0"))
                           (rule "qeq_literals" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "8"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "mul_literals" (formula "6") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "6"))
                           (rule "leq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "pullOutSelect" (formula "8") (term "0,0,2,2,0") (inst "selectSK=arr_3"))
                           (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "8"))
                           (rule "simplifySelectOfStore" (formula "8"))
                           (rule "equalUnique" (formula "8") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "8") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "8") (term "0,0"))
                           (rule "ifthenelse_false" (formula "8") (term "0"))
                           (rule "simplifySelectOfStore" (formula "8"))
                           (rule "equalUnique" (formula "8") (term "1,0,0,0"))
                           (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "8") (term "0,0"))
                           (rule "eqSymm" (formula "9") (term "0,0"))
                           (rule "eqSymm" (formula "8") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "8") (term "0,0,0"))
                           (rule "replace_known_right" (formula "8") (term "1,0,0,0") (ifseqformula "29"))
                           (rule "concrete_and_4" (formula "8") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "8") (term "0,0"))
                           (rule "ifthenelse_false" (formula "8") (term "0"))
                           (rule "applyEqReverse" (formula "9") (term "1,0,0") (ifseqformula "8"))
                           (rule "applyEqReverse" (formula "9") (term "0,0,2,2,0") (ifseqformula "8"))
                           (rule "hideAuxiliaryEq" (formula "8"))
                           (rule "eqSymm" (formula "8") (term "0,0"))
                           (rule "pullOutSelect" (formula "1") (term "0,0,2,0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "simplifySelectOfStore" (formula "1"))
                           (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                           (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "eqSymm" (formula "1") (term "0,0,0"))
                           (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                           (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "29"))
                           (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "0,0,2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
            )
            (branch "Use Case"
               (rule "allLeft" (formula "1") (inst "t=sub(int::select(store(store(heap,
                            int[]::select(heap,
                                          self,
                                          MultiAuctionImpl::$balances),
                            arr((int)(java.lang.Address::select(heap,
                                                                msg,
                                                                java.lang.Message::$sender))),
                            Z(0(#))),
                      net,
                      address(java.lang.Address::select(heap,
                                                        msg,
                                                        java.lang.Message::$sender)),
                      add(mul(int::select(heap,
                                          int[]::select(heap,
                                                        self,
                                                        MultiAuctionImpl::$balances),
                                          arr((int)(java.lang.Address::select(heap,
                                                                              msg,
                                                                              java.lang.Message::$sender)))),
                              Z(neglit(1(#)))),
                          int::select(heap,
                                      net,
                                      address(java.lang.Address::select(heap,
                                                                        msg,
                                                                        java.lang.Message::$sender))))),
                java.lang.Address[]::select(store(store(heap,
                                                        int[]::select(heap,
                                                                      self,
                                                                      MultiAuctionImpl::$balances),
                                                        arr((int)(java.lang.Address::select(heap,
                                                                                            msg,
                                                                                            java.lang.Message::$sender))),
                                                        Z(0(#))),
                                                  net,
                                                  address(java.lang.Address::select(heap,
                                                                                    msg,
                                                                                    java.lang.Message::$sender)),
                                                  add(mul(int::select(heap,
                                                                      int[]::select(heap,
                                                                                    self,
                                                                                    MultiAuctionImpl::$balances),
                                                                      arr((int)(java.lang.Address::select(heap,
                                                                                                          msg,
                                                                                                          java.lang.Message::$sender)))),
                                                          Z(neglit(1(#)))),
                                                      int::select(heap,
                                                                  net,
                                                                  address(java.lang.Address::select(heap,
                                                                                                    msg,
                                                                                                    java.lang.Message::$sender))))),
                                            self,
                                            MultiAuctionImpl::$bidders),
                arr_length),
    Z(1(#)))") (userinteraction))
               (rule "cut_direct" (formula "1") (term "0") (userinteraction))
               (branch "CUT: int::select(heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))], self.bidders@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))], arr_length) - 1 >= 0 TRUE"
                  (rule "concrete_impl_1" (formula "2") (userinteraction))
                  (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1") (userinteraction))
                  (rule "concrete_and_1" (formula "2") (term "0") (userinteraction))
                  (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,1,0"))
                  (rule "replaceKnownSelect_taclet_32" (formula "2") (term "1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "1,0"))
                  (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,0,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "0,0"))
                  (rule "polySimp_elimOneLeft0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "0"))
                  (rule "pullOutSelect" (formula "2") (term "1,1,0,0") (inst "selectSK=arr_length_1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0"))
                  (rule "replaceKnownSelect_taclet_32" (formula "2") (term "0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "0"))
                  (rule "applyEqReverse" (formula "3") (term "1,1,0,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "cut_direct" (formula "2") (term "0"))
                  (branch "CUT: 1 + -1 * int::select(heap, self.bidders, arr_length) + (-1 + int::select(heap, self.bidders, arr_length)) <= 0 TRUE"
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,0"))
                     (rule "times_zero_1" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "concrete_impl_1" (formula "2") (userinteraction))
                     (rule "cut" (inst "cutFormula=(  java.lang.Address::select(heap,
                             msg,
                             java.lang.Message::$sender)
 = hb_0)<<origin(\"User_Interaction @ node 23321 (cut)\",\"[]\")>>") (userinteraction))
                     (branch "CUT: msg.sender = hb_0 TRUE"
                        (rule "exLeft" (formula "3") (inst "sk=j_0") (userinteraction))
                        (rule "andLeft" (formula "3") (userinteraction))
                        (rule "andLeft" (formula "3") (userinteraction))
                        (rule "exRight" (formula "28") (inst "t=java.lang.Address::select(store(store(heap,
                                      int[]::select(heap,
                                                    self,
                                                    MultiAuctionImpl::$balances),
                                      arr((int)(java.lang.Address::select(heap,
                                                                          msg,
                                                                          java.lang.Message::$sender))),
                                      Z(0(#))),
                                net,
                                address(java.lang.Address::select(heap,
                                                                  msg,
                                                                  java.lang.Message::$sender)),
                                add(mul(int::select(heap,
                                                    int[]::select(heap,
                                                                  self,
                                                                  MultiAuctionImpl::$balances),
                                                    arr((int)(java.lang.Address::select(heap,
                                                                                        msg,
                                                                                        java.lang.Message::$sender)))),
                                        Z(neglit(1(#)))),
                                    int::select(heap,
                                                net,
                                                address(java.lang.Address::select(heap,
                                                                                  msg,
                                                                                  java.lang.Message::$sender))))),
                          java.lang.Address[]::select(store(store(heap,
                                                                  int[]::select(heap,
                                                                                self,
                                                                                MultiAuctionImpl::$balances),
                                                                  arr((int)(java.lang.Address::select(heap,
                                                                                                      msg,
                                                                                                      java.lang.Message::$sender))),
                                                                  Z(0(#))),
                                                            net,
                                                            address(java.lang.Address::select(heap,
                                                                                              msg,
                                                                                              java.lang.Message::$sender)),
                                                            add(mul(int::select(heap,
                                                                                int[]::select(heap,
                                                                                              self,
                                                                                              MultiAuctionImpl::$balances),
                                                                                arr((int)(java.lang.Address::select(heap,
                                                                                                                    msg,
                                                                                                                    java.lang.Message::$sender)))),
                                                                    Z(neglit(1(#)))),
                                                                int::select(heap,
                                                                            net,
                                                                            address(java.lang.Address::select(heap,
                                                                                                              msg,
                                                                                                              java.lang.Message::$sender))))),
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))") (userinteraction))
                        (rule "allRight" (formula "28") (inst "sk=a_0") (userinteraction))
                        (rule "cut" (inst "cutFormula=(\\exists int i;
   ((  (geq(i, Z(0(#)))<<origin(\"User_Interaction @ node 26182 (cut)\",\"[]\")>>
     & lt(i,
          int::select(store(store(heap,
                                  int[]::select(heap,
                                                self,
                                                MultiAuctionImpl::$balances),
                                  arr((int)(java.lang.Address::select(heap,
                                                                      msg,
                                                                      java.lang.Message::$sender))),
                                  Z(0(#))),
                            net,
                            address(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender)),
                            add(mul(int::select(heap,
                                                int[]::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$balances),
                                                arr((int)(java.lang.Address::select(heap,
                                                                                    msg,
                                                                                    java.lang.Message::$sender)))),
                                    Z(neglit(1(#)))),
                                int::select(heap,
                                            net,
                                            address(java.lang.Address::select(heap,
                                                                              msg,
                                                                              java.lang.Message::$sender))))),
                      java.lang.Address[]::select(store(store(heap,
                                                              int[]::select(heap,
                                                                            self,
                                                                            MultiAuctionImpl::$balances),
                                                              arr((int)(java.lang.Address::select(heap,
                                                                                                  msg,
                                                                                                  java.lang.Message::$sender))),
                                                              Z(0(#))),
                                                        net,
                                                        address(java.lang.Address::select(heap,
                                                                                          msg,
                                                                                          java.lang.Message::$sender)),
                                                        add(mul(int::select(heap,
                                                                            int[]::select(heap,
                                                                                          self,
                                                                                          MultiAuctionImpl::$balances),
                                                                            arr((int)(java.lang.Address::select(heap,
                                                                                                                msg,
                                                                                                                java.lang.Message::$sender)))),
                                                                Z(neglit(1(#)))),
                                                            int::select(heap,
                                                                        net,
                                                                        address(java.lang.Address::select(heap,
                                                                                                          msg,
                                                                                                          java.lang.Message::$sender))))),
                                                  self,
                                                  MultiAuctionImpl::$bidders),
                      arr_length))<<origin(\"User_Interaction @ node 26182 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 26182 (cut)\",\"[]\")>>
     & (  java.lang.Address::select(store(store(heap,
                                                int[]::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$balances),
                                                arr((int)(java.lang.Address::select(heap,
                                                                                    msg,
                                                                                    java.lang.Message::$sender))),
                                                Z(0(#))),
                                          net,
                                          address(java.lang.Address::select(heap,
                                                                            msg,
                                                                            java.lang.Message::$sender)),
                                          add(mul(int::select(heap,
                                                              int[]::select(heap,
                                                                            self,
                                                                            MultiAuctionImpl::$balances),
                                                              arr((int)(java.lang.Address::select(heap,
                                                                                                  msg,
                                                                                                  java.lang.Message::$sender)))),
                                                  Z(neglit(1(#)))),
                                              int::select(heap,
                                                          net,
                                                          address(java.lang.Address::select(heap,
                                                                                            msg,
                                                                                            java.lang.Message::$sender))))),
                                    java.lang.Address[]::select(store(store(heap,
                                                                            int[]::select(heap,
                                                                                          self,
                                                                                          MultiAuctionImpl::$balances),
                                                                            arr((int)(java.lang.Address::select(heap,
                                                                                                                msg,
                                                                                                                java.lang.Message::$sender))),
                                                                            Z(0(#))),
                                                                      net,
                                                                      address(java.lang.Address::select(heap,
                                                                                                        msg,
                                                                                                        java.lang.Message::$sender)),
                                                                      add(mul(int::select(heap,
                                                                                          int[]::select(heap,
                                                                                                        self,
                                                                                                        MultiAuctionImpl::$balances),
                                                                                          arr((int)(java.lang.Address::select(heap,
                                                                                                                              msg,
                                                                                                                              java.lang.Message::$sender)))),
                                                                              Z(neglit(1(#)))),
                                                                          int::select(heap,
                                                                                      net,
                                                                                      address(java.lang.Address::select(heap,
                                                                                                                        msg,
                                                                                                                        java.lang.Message::$sender))))),
                                                                self,
                                                                MultiAuctionImpl::$bidders),
                                    arr(i))
        = a_0)<<origin(\"User_Interaction @ node 26182 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 26182 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 26182 (cut)\",\"[]\")>>") (userinteraction))
                        (branch "CUT: exists int i; ( i >= 0 & i < int::select(heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))], self.bidders@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))], arr_length) & self.bidders[i]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))] = a_0) TRUE"
                           (rule "exLeft" (formula "1") (inst "sk=i_0") (userinteraction))
                           (rule "instAll" (formula "1") (term "0,0,0") (ifseqformula "6") (userinteraction))
                           (rule "impLeft" (formula "1") (userinteraction))
                           (branch "Case 1"
                              (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,1"))
                              (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,0,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,1"))
                              (rule "replaceKnownSelect_taclet_32" (formula "5") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "5") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,0,0"))
                              (rule "replaceKnownSelect_taclet_32" (formula "3") (term "0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,1"))
                              (rule "replaceKnownSelect_taclet_20" (formula "22") (term "1,0,1,1"))
                              (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,1,1,0"))
                              (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,1,1,0"))
                              (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "22") (term "1,0,1,1"))
                              (rule "replaceKnownSelect_taclet_32" (formula "22") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "22") (term "0,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,1,1,0"))
                              (rule "replaceKnownSelect_taclet_32" (formula "1") (term "1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "1") (term "1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "30") (term "1,0,0,2,0,1"))
                              (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,1,1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "30") (term "1,0,2,1,1,1"))
                              (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,1,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "30") (term "1,0,0,0,1,0,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,0,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "30") (term "1,0,0,2,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_32" (formula "6") (term "0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "30") (term "1,0,0,2,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,1,1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_32" (formula "7") (term "1,1,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "30") (term "1,0,2,1,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "7") (term "1,1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,0,1,0,1,0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,1,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "30") (term "1,0,0,0,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "30") (term "1,0,0,2,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,0,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,1,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "32") (term "1,1,0,0"))
                              (rule "eqSymm" (formula "32") (term "1,0,1,0,0"))
                              (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                              (rule "concrete_and_1" (formula "24"))
                              (rule "polySimp_elimSub" (formula "7") (term "1"))
                              (rule "mul_literals" (formula "7") (term "1,1"))
                              (rule "polySimp_elimSub" (formula "5") (term "0"))
                              (rule "mul_literals" (formula "5") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,1,0,0"))
                              (rule "polySimp_elimSub" (formula "24") (term "1"))
                              (rule "mul_literals" (formula "24") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "7") (term "1"))
                              (rule "polySimp_addComm0" (formula "5") (term "0"))
                              (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "24") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "24"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "8"))
                              (rule "polySimp_addComm1" (formula "8") (term "0"))
                              (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "5"))
                              (rule "eqSymm" (formula "11") (term "0,0"))
                              (rule "applyEq" (formula "11") (term "0,2,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,2,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,0,2,0,1") (ifseqformula "5"))
                              (rule "polySimp_homoEq" (formula "32") (term "1"))
                              (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,0,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,2,0,0,0,2,0,0,0,0") (ifseqformula "5"))
                              (rule "inEqSimp_commuteGeq" (formula "32") (term "0,0,0"))
                              (rule "applyEq" (formula "33") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,0,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,0,1,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "11") (term "0,0,2,0,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,2,0,0,0,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,0,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,0,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "5"))
                              (rule "eqSymm" (formula "32") (term "1,1,0,0"))
                              (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "4") (term "0,2,1,3,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "4") (term "0,2,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,2,1,3,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "4") (term "0,0,2,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,2,0,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,2,0,1,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "1,3,0,0,1,0,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,1,0,0"))
                              (rule "add_literals" (formula "33") (term "1,3,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "3,0,0,1,0,0"))
                              (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,1,1,0"))
                              (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,1,1,0"))
                              (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,1,1,0"))
                              (rule "applyEq" (formula "9") (term "1,3,0,1,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,1,1,0"))
                              (rule "add_literals" (formula "9") (term "1,3,0,1,1,0"))
                              (rule "times_zero_1" (formula "9") (term "3,0,1,1,0"))
                              (rule "applyEq" (formula "33") (term "1,3,0,0,1,1,0,0,0,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,1,1,0,0,0,0"))
                              (rule "add_literals" (formula "33") (term "1,3,0,0,1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "33") (term "3,0,0,1,1,0,0,0,0"))
                              (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,2,1,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,0,2,0,1,0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,2,1,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,0,1") (ifseqformula "5"))
                              (rule "polySimp_addComm1" (formula "32") (term "0,1"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,0,0,0") (ifseqformula "5"))
                              (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                              (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "applyEq" (formula "32") (term "1,3,0,0,0,0,1,0,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,0,0,0,1,0,0"))
                              (rule "add_literals" (formula "32") (term "1,3,0,0,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "32") (term "3,0,0,0,0,1,0,0"))
                              (rule "applyEq" (formula "33") (term "1,3,0,1,0,0,0,0,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,0,0,0,0,0"))
                              (rule "add_literals" (formula "33") (term "1,3,0,1,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "33") (term "3,0,1,0,0,0,0,0"))
                              (rule "applyEq" (formula "10") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,1,1,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "10") (term "1,3,0,1,1,0,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "3,0,1,1,0,1,0,1,1,0"))
                              (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,0,1,0"))
                              (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,0,1,0"))
                              (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,0,1,0"))
                              (rule "applyEq" (formula "9") (term "1,3,0,0,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,1,0"))
                              (rule "add_literals" (formula "9") (term "1,3,0,0,1,0"))
                              (rule "times_zero_1" (formula "9") (term "3,0,0,1,0"))
                              (rule "applyEq" (formula "4") (term "1,3,0,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "4") (term "3,0,0"))
                              (rule "add_literals" (formula "4") (term "1,3,0,0"))
                              (rule "times_zero_1" (formula "4") (term "3,0,0"))
                              (rule "applyEq" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                              (rule "applyEq" (formula "32") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,2,0,0,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "5"))
                              (rule "eqSymm" (formula "32") (term "1,1,0,0"))
                              (rule "applyEq" (formula "33") (term "1,3,0,0,0,0,0,0,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "33") (term "1,3,0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "33") (term "3,0,0,0,0,0,0,0"))
                              (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "15"))
                              (rule "polySimp_pullOutFactor2" (formula "11") (term "1,0"))
                              (rule "add_literals" (formula "11") (term "1,1,0"))
                              (rule "times_zero_1" (formula "11") (term "1,0"))
                              (rule "ifthenelse_same_branches" (formula "11") (term "0"))
                              (rule "applyEqReverse" (formula "32") (term "0,0,0,1") (ifseqformula "11"))
                              (rule "add_zero_left" (formula "32") (term "0,0,1"))
                              (rule "applyEqReverse" (formula "32") (term "0,1,0") (ifseqformula "11"))
                              (rule "eqClose" (formula "32") (term "1,0"))
                              (rule "concrete_and_3" (formula "32") (term "0"))
                              (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0") (ifseqformula "11"))
                              (rule "eqClose" (formula "33") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "33") (term "0,0,0"))
                              (rule "applyEqReverse" (formula "33") (term "0,1,1,0,0") (ifseqformula "11"))
                              (rule "add_zero_left" (formula "33") (term "1,1,0,0"))
                              (rule "hideAuxiliaryEq" (formula "11"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,2,1,3,0,0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,2,0,0,2,0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "1,3,0,0,1,1,0") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,1,1,0"))
                              (rule "add_literals" (formula "31") (term "1,3,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "31") (term "3,0,0,1,1,0"))
                              (rule "applyEq" (formula "31") (term "0,2,1,3,0,0,0,2,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,2,0,0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,0,3,0,0,1,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,2,1,3,0,0,1,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,0,0,1,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "1,3,0,1,0,0") (ifseqformula "14"))
                              (rule "polySimp_addComm0" (formula "31") (term "3,0,1,0,0"))
                              (rule "applyEq" (formula "31") (term "1,3,0,0,0,2,0,1,0,1") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,0,2,0,1,0,1"))
                              (rule "add_literals" (formula "31") (term "1,3,0,0,0,2,0,1,0,1"))
                              (rule "times_zero_1" (formula "31") (term "3,0,0,0,2,0,1,0,1"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,0,3,0,0,0,2,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,2,0,0,1,1,0") (ifseqformula "5"))
                              (rule "eqSymm" (formula "31") (term "1,1,0"))
                              (rule "applyEq" (formula "31") (term "0,2,1,3,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,0,3,0,0,2,0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,2,0,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,0,0,0,2,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,2,0,0,1,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "0,2,0,0,0,2,0,1,0,1") (ifseqformula "5"))
                              (rule "polySimp_addComm0" (formula "31") (term "0,1"))
                              (rule "applyEq" (formula "31") (term "1,3,0,1,0,1") (ifseqformula "14"))
                              (rule "polySimp_addComm0" (formula "31") (term "3,0,1,0,1"))
                              (rule "applyEq" (formula "31") (term "1,3,0,0,2,1,0,1") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,2,1,0,1"))
                              (rule "add_literals" (formula "31") (term "1,3,0,0,2,1,0,1"))
                              (rule "times_zero_1" (formula "31") (term "3,0,0,2,1,0,1"))
                              (rule "polySimp_addComm0" (formula "31") (term "0,1"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,1,3,0,1,0,0") (ifseqformula "5"))
                              (rule "polySimp_pullOutFactor1" (formula "31") (term "3,0,1,0,0"))
                              (rule "add_literals" (formula "31") (term "1,3,0,1,0,0"))
                              (rule "times_zero_1" (formula "31") (term "3,0,1,0,0"))
                              (rule "applyEq" (formula "31") (term "1,3,0,0,1,1,0") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,1,1,0"))
                              (rule "add_literals" (formula "31") (term "1,3,0,0,1,1,0"))
                              (rule "times_zero_1" (formula "31") (term "3,0,0,1,1,0"))
                              (rule "eqSymm" (formula "31") (term "1,1,0"))
                              (rule "applyEq" (formula "31") (term "1,3,0,0,0,2,0,0,0") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,0,2,0,0,0"))
                              (rule "add_literals" (formula "31") (term "1,3,0,0,0,2,0,0,0"))
                              (rule "times_zero_1" (formula "31") (term "3,0,0,0,2,0,0,0"))
                              (rule "applyEq" (formula "31") (term "1,3,0,0,0,0") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,0,0"))
                              (rule "add_literals" (formula "31") (term "1,3,0,0,0,0"))
                              (rule "times_zero_1" (formula "31") (term "3,0,0,0,0"))
                              (rule "applyEq" (formula "32") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,1,1,1,0,0,0"))
                              (rule "add_literals" (formula "32") (term "1,3,0,1,1,1,0,0,0"))
                              (rule "times_zero_1" (formula "32") (term "3,0,1,1,1,0,0,0"))
                              (rule "applyEq" (formula "32") (term "1,3,0,1,1,0,0") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,1,1,0,0"))
                              (rule "add_literals" (formula "32") (term "1,3,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "32") (term "3,0,1,1,0,0"))
                              (rule "applyEq" (formula "31") (term "0,0,2,0,1,3,0,0,0,1") (ifseqformula "5"))
                              (rule "polySimp_pullOutFactor1" (formula "31") (term "3,0,0,0,1"))
                              (rule "add_literals" (formula "31") (term "1,3,0,0,0,1"))
                              (rule "times_zero_1" (formula "31") (term "3,0,0,0,1"))
                              (rule "applyEq" (formula "31") (term "1,3,0,0,1,0,1") (ifseqformula "14"))
                              (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,1,0,1"))
                              (rule "add_literals" (formula "31") (term "1,3,0,0,1,0,1"))
                              (rule "times_zero_1" (formula "31") (term "3,0,0,1,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1"))
                              (rule "polySimp_rightDist" (formula "8") (term "1"))
                              (rule "mul_literals" (formula "8") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                              (rule "polySimp_sepNegMonomial" (formula "31") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "31") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "31") (term "0,1"))
                              (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "6"))
                              (rule "leq_literals" (formula "17") (term "0"))
                              (rule "concrete_or_1" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_literals" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Case 2"
                              (rule "andLeft" (formula "2") (userinteraction))
                              (rule "andLeft" (formula "2") (userinteraction))
                              (rule "applyEqReverse" (formula "32") (term "0,0,2,1,0,0,0") (ifseqformula "4") (userinteraction))
                              (rule "andRight" (formula "32") (userinteraction))
                              (branch "Case 1"
                                 (rule "andRight" (formula "32") (userinteraction))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "32") (userinteraction))
                                    (branch "Case 1"
                                       (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,0"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,1"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,1"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,1"))
                                       (rule "close" (formula "32") (ifseqformula "1"))
                                    )
                                    (branch "Case 2"
                                       (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,0"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,1"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,1"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,1"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "3") (term "1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,1"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "9") (term "1,0,1,0"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "9") (term "1,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "32") (term "1,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "6") (term "0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,1"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "8") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "8") (term "0,1"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,1"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "9") (term "1,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "9") (term "1,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "32") (term "1,0,0,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,1,1,0,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,0,2,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,0,2,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,1,1,0,1,0"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "10") (term "1,1,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "10") (term "1,1,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "9") (term "0,1,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "9") (term "0,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "10") (term "1,0,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "10") (term "1,1,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,0,2,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,0,2,0,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "10") (term "1,0,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "10") (term "1,1,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "orRight" (formula "32"))
                                       (rule "orRight" (formula "32"))
                                       (rule "eqSymm" (formula "34"))
                                       (rule "eqSymm" (formula "33"))
                                       (rule "polySimp_elimSub" (formula "6") (term "0"))
                                       (rule "mul_literals" (formula "6") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "8") (term "1"))
                                       (rule "mul_literals" (formula "8") (term "1,1"))
                                       (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "6") (term "0"))
                                       (rule "polySimp_addComm0" (formula "8") (term "1"))
                                       (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "8"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0"))
                                       (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,2,1,3,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0,0,2,0") (ifseqformula "5"))
                                       (rule "inEqSimp_commuteGeq" (formula "1"))
                                       (rule "applyEq" (formula "32") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "34") (term "0,2,0,0") (ifseqformula "5"))
                                       (rule "eqSymm" (formula "34"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "11") (term "0,2,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,0,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "26") (term "0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,0,1,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,2,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "5"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "applyEq" (formula "9") (term "0,2,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "0,2,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,1,1,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "10") (term "1,3,0,1,1,0,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "10") (term "3,0,1,1,0,1,0,1,1,0"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "35") (term "1,3,0,1,0,0,0,0,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "35") (term "3,0,1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "35") (term "1,3,0,1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "35") (term "3,0,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "applyEq" (formula "9") (term "1,3,0,0,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,1,0"))
                                       (rule "add_literals" (formula "9") (term "1,3,0,0,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "3,0,0,1,0"))
                                       (rule "applyEq" (formula "35") (term "1,3,0,0,0,0,0,0,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "35") (term "3,0,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "35") (term "1,3,0,0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "35") (term "3,0,0,0,0,0,0,0"))
                                       (rule "applyEq" (formula "4") (term "1,3,0,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "4") (term "3,0,0"))
                                       (rule "add_literals" (formula "4") (term "1,3,0,0"))
                                       (rule "times_zero_1" (formula "4") (term "3,0,0"))
                                       (rule "applyEq" (formula "34") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "32") (term "1,3,0,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,0"))
                                       (rule "add_literals" (formula "32") (term "1,3,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "3,0,0"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,2,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "34") (term "0,2,0,0") (ifseqformula "5"))
                                       (rule "eqSymm" (formula "34"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,2,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,1,1,0"))
                                       (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,1,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,1,1,0"))
                                       (rule "applyEq" (formula "35") (term "1,3,0,0,1,1,0,0,0,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "35") (term "3,0,0,1,1,0,0,0,0"))
                                       (rule "add_literals" (formula "35") (term "1,3,0,0,1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "35") (term "3,0,0,1,1,0,0,0,0"))
                                       (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,0,1,0"))
                                       (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,0,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,0,1,0"))
                                       (rule "applyEq" (formula "1") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0,0,2,0") (ifseqformula "5"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "applyEq" (formula "9") (term "1,3,0,1,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,1,1,0"))
                                       (rule "add_literals" (formula "9") (term "1,3,0,1,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "3,0,1,1,0"))
                                       (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "15"))
                                       (rule "polySimp_pullOutFactor2" (formula "11") (term "1,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0"))
                                       (rule "ifthenelse_same_branches" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "35") (term "0,1,1,0,0") (ifseqformula "11"))
                                       (rule "add_zero_left" (formula "35") (term "1,1,0,0"))
                                       (rule "applyEqReverse" (formula "35") (term "0,1,0,0,0") (ifseqformula "11"))
                                       (rule "eqClose" (formula "35") (term "1,0,0,0"))
                                       (rule "concrete_and_3" (formula "35") (term "0,0,0"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "applyEq" (formula "34") (term "1,3,0,0,1,0,0") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "34") (term "3,0,0,1,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,3,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "3,0,0,1,0,0"))
                                       (rule "applyEq" (formula "1") (term "1,3,0,1") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1"))
                                       (rule "add_literals" (formula "1") (term "1,3,0,1"))
                                       (rule "times_zero_1" (formula "1") (term "3,0,1"))
                                       (rule "applyEq" (formula "33") (term "0,0,2,0,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "33") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "1") (term "1,3,0,0,0,2,0") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,2,0"))
                                       (rule "add_literals" (formula "1") (term "1,3,0,0,0,2,0"))
                                       (rule "times_zero_1" (formula "1") (term "3,0,0,0,2,0"))
                                       (rule "applyEq" (formula "1") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                       (rule "inEqSimp_commuteGeq" (formula "1"))
                                       (rule "applyEq" (formula "33") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "33") (term "1,3,0,1") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1"))
                                       (rule "add_literals" (formula "33") (term "1,3,0,1"))
                                       (rule "times_zero_1" (formula "33") (term "3,0,1"))
                                       (rule "applyEq" (formula "34") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "34") (term "3,0,1,1,1,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,3,0,1,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "3,0,1,1,1,0,0,0"))
                                       (rule "applyEq" (formula "34") (term "1,3,0,1,1,0,0") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "34") (term "3,0,1,1,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,3,0,1,1,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "3,0,1,1,0,0"))
                                       (rule "applyEq" (formula "1") (term "1,3,0,0,0,2,0") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,2,0"))
                                       (rule "add_literals" (formula "1") (term "1,3,0,0,0,2,0"))
                                       (rule "times_zero_1" (formula "1") (term "3,0,0,0,2,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "applyEq" (formula "33") (term "1,3,0,0") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,3,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "3,0,0"))
                                       (rule "applyEq" (formula "1") (term "1,3,0,0") (ifseqformula "14"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,3,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "3,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                       (rule "mul_literals" (formula "8") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "6"))
                                       (rule "leq_literals" (formula "17") (term "0"))
                                       (rule "concrete_or_1" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,1") (ifseqformula "4"))
                                       (rule "simplifySelectOfStore" (formula "4"))
                                       (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "4") (term "0,0"))
                                       (rule "equalUnique" (formula "4") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "4") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "4") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "4"))
                                       (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "4") (term "0,0"))
                                       (rule "equalUnique" (formula "4") (term "1,0,0"))
                                       (rule "eqSymm" (formula "4") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "4") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "26"))
                                       (rule "concrete_and_2" (formula "4") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "4") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "4") (term "0"))
                                       (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "1") (term "0,0,2,1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,1") (ifseqformula "4"))
                                       (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_2"))
                                       (rule "applyEq" (formula "10") (term "0,0,2,1,1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "0,0,2,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0"))
                                       (rule "equalUnique" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                       (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0"))
                                       (rule "eqSymm" (formula "1") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                                       (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "applyEqReverse" (formula "10") (term "0,0,2,1,1,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0,2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "32") (term "1") (inst "selectSK=arr_3"))
                                       (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0"))
                                       (rule "equalUnique" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0"))
                                       (rule "eqClose" (formula "1") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "1") (term "0,0"))
                                       (rule "equalUnique" (formula "1") (term "0,0"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "intCastEqual" (formula "1") (term "0,0"))
                                       (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=address_4"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                       (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                       (rule "equalUnique" (formula "1") (term "0,0,0"))
                                       (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "eqSymm" (formula "34"))
                                       (rule "pullOutSelect" (formula "11") (term "1,1,0") (inst "selectSK=arr_4"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "11"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "eqClose" (formula "11") (term "0,0,0,0"))
                                       (rule "concrete_and_1" (formula "11") (term "0,0,0"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "castDel" (formula "11") (term "1,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "intCastEqual" (formula "11") (term "0,0"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=address_5"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0"))
                                       (rule "equalUnique" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "nnf_ex2all" (formula "36"))
                                       (rule "nnf_imp2or" (formula "14") (term "0,1,0,1,1,0"))
                                       (rule "nnf_imp2or" (formula "13") (term "0"))
                                       (rule "nnf_notAll" (formula "1") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0"))
                                       (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                       (rule "nnf_imp2or" (formula "14") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,1,0,1,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,1,0"))
                                       (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,1,0"))
                                       (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
                                       (rule "commute_or_2" (formula "1") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                       (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                                       (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                                       (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "14") (term "0,1,0,1,1,0"))
                                       (rule "ifthenelse_split" (formula "3") (term "0"))
                                       (branch "hb_0 = a_0 TRUE"
                                          (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "eqSymm" (formula "36"))
                                          (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "3"))
                                          (rule "ifthenelse_true" (formula "2") (term "0"))
                                          (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "2"))
                                          (rule "eqClose" (formula "36"))
                                          (rule "closeTrue" (formula "36"))
                                       )
                                       (branch "hb_0 = a_0 FALSE"
                                          (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "3"))
                                          (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "26"))
                                          (rule "ifthenelse_false" (formula "2") (term "0"))
                                          (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "eqSymm" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "2"))
                                          (rule "ifthenelse_split" (formula "10") (term "0"))
                                          (branch "self.bidders[j_0] = hb_0 TRUE"
                                             (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "11"))
                                             (rule "applyEqReverse" (formula "12") (term "1,1,0") (ifseqformula "11"))
                                             (rule "hideAuxiliaryEq" (formula "11"))
                                             (rule "applyEq" (formula "33") (term "0") (ifseqformula "10"))
                                             (rule "all_pull_out1" (formula "12") (term "0,1,1,0"))
                                             (rule "ex_pull_out3" (formula "12") (term "1,0"))
                                             (rule "all_pull_out3" (formula "12") (term "0,1,0"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "12") (term "1,0,0,1,0"))
                                             (rule "shift_paren_or" (formula "12") (term "0,1,0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0,1,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0,0,1,0"))
                                             (rule "commute_or" (formula "12") (term "1,0,0,0,1,0"))
                                             (rule "commute_or" (formula "12") (term "0,0,0,0,0,1,0"))
                                             (rule "ex_pull_out3" (formula "12") (term "0"))
                                             (rule "allLeft" (formula "23") (inst "t=a_0"))
                                             (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "2"))
                                             (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                                             (rule "qeq_literals" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "23"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "34") (term "1") (ifseqformula "22"))
                                             (rule "allLeft" (formula "13") (inst "t=a_0"))
                                             (rule "inEqSimp_commuteLeq" (formula "13"))
                                             (rule "applyEq" (formula "13") (term "1") (ifseqformula "23"))
                                             (rule "allLeft" (formula "19") (inst "t=i_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                             (rule "applyEq" (formula "19") (term "0,0,2,0,0,0") (ifseqformula "4"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "3"))
                                             (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                             (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "19") (term "0,0,1"))
                                             (rule "leq_literals" (formula "19") (term "0,1"))
                                             (rule "concrete_and_2" (formula "19") (term "1"))
                                             (rule "concrete_or_4" (formula "19"))
                                             (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "19") (term "0,1"))
                                             (rule "concrete_and_2" (formula "19") (term "1"))
                                             (rule "concrete_or_4" (formula "19"))
                                             (rule "allLeft" (formula "20") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                             (rule "applyEq" (formula "20") (term "0,0,2,0,0,0") (ifseqformula "9"))
                                             (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                             (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "20") (term "0,0,1"))
                                             (rule "leq_literals" (formula "20") (term "0,1"))
                                             (rule "concrete_and_2" (formula "20") (term "1"))
                                             (rule "concrete_or_4" (formula "20"))
                                             (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "20") (term "0,1"))
                                             (rule "concrete_and_2" (formula "20") (term "1"))
                                             (rule "concrete_or_4" (formula "20"))
                                             (rule "all_pull_out3" (formula "11") (term "0,0"))
                                             (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "11") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "11") (term "0,1,0,0,0"))
                                             (rule "eq_or_2" (formula "11") (term "0,0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "11") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "11") (term "1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "11") (term "0,1,0,0,0,0"))
                                             (rule "eq_or" (formula "11") (term "0,0,1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "11") (term "0,0,0,0,0,0,0"))
                                             (rule "eq_or_2" (formula "11") (term "0,0,0,0,0,0"))
                                             (rule "commute_and" (formula "1") (term "0,0,0"))
                                             (rule "commute_and_2" (formula "1") (term "0,0"))
                                             (rule "allLeft" (formula "10") (inst "t=j_0"))
                                             (rule "replaceKnownSelect_taclet1001000020000_40" (formula "10") (term "0,0,2,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet1001000020000_42" (formula "10") (term "0,0,2,0,1"))
                                             (rule "replaceKnownSelect_taclet1001000020000_46" (formula "10") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet011001000020000_52" (formula "10") (term "0,1"))
                                             (rule "leq_literals" (formula "10") (term "1"))
                                             (rule "concrete_or_3" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "allLeft" (formula "10") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet1001000020000_37" (formula "10") (term "0,0,2,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet1001000020000_39" (formula "10") (term "0,0,2,0,1"))
                                             (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                                             (rule "applyEq" (formula "10") (term "0,0,2,0,1") (ifseqformula "4"))
                                             (rule "replaceKnownSelect_taclet1001000020000_43" (formula "10") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11001000020000_50" (formula "10") (term "0,1"))
                                             (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "25"))
                                             (rule "leq_literals" (formula "10") (term "1"))
                                             (rule "concrete_or_3" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "allLeft" (formula "18") (inst "t=a_0"))
                                             (rule "exLeft" (formula "18") (inst "sk=i_1"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "eqSymm" (formula "18") (term "0"))
                                             (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "22"))
                                             (rule "concrete_not_1" (formula "18") (term "1"))
                                             (rule "concrete_or_4" (formula "18"))
                                             (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "22"))
                                             (rule "concrete_not_1" (formula "20") (term "0"))
                                             (rule "concrete_or_2" (formula "20"))
                                             (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "22"))
                                             (rule "concrete_not_1" (formula "19") (term "0"))
                                             (rule "concrete_or_2" (formula "19"))
                                             (rule "inEqSimp_homoInEq0" (formula "20"))
                                             (rule "polySimp_addComm1" (formula "20") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                             (rule "polySimp_mulComm0" (formula "20") (term "1"))
                                             (rule "polySimp_rightDist" (formula "20") (term "1"))
                                             (rule "mul_literals" (formula "20") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                                             (rule "allLeft" (formula "21") (inst "t=hb_0"))
                                             (rule "exLeft" (formula "21") (inst "sk=i_2"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "andLeft" (formula "21"))
                                             (rule "eqSymm" (formula "21") (term "0"))
                                             (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "26"))
                                             (rule "concrete_not_1" (formula "22") (term "0"))
                                             (rule "concrete_or_2" (formula "22"))
                                             (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "26"))
                                             (rule "concrete_not_1" (formula "23") (term "0"))
                                             (rule "concrete_or_2" (formula "23"))
                                             (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "26"))
                                             (rule "concrete_not_1" (formula "21") (term "1"))
                                             (rule "concrete_or_4" (formula "21"))
                                             (rule "inEqSimp_homoInEq0" (formula "23"))
                                             (rule "polySimp_addComm1" (formula "23") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                             (rule "polySimp_mulComm0" (formula "23") (term "1"))
                                             (rule "polySimp_rightDist" (formula "23") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                                             (rule "mul_literals" (formula "23") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                                             (rule "allLeft" (formula "10") (inst "t=i_2"))
                                             (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "24"))
                                             (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
                                             (rule "add_literals" (formula "10") (term "0,0,1,0"))
                                             (rule "leq_literals" (formula "10") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "10") (term "1,0"))
                                             (rule "concrete_or_4" (formula "10") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "23"))
                                             (rule "qeq_literals" (formula "10") (term "0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0"))
                                             (rule "concrete_or_2" (formula "10"))
                                             (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=arr_5"))
                                             (rule "simplifySelectOfStore" (formula "10"))
                                             (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "10") (term "0,0"))
                                             (rule "equalUnique" (formula "10") (term "1,0,0"))
                                             (rule "concrete_and_4" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "10"))
                                             (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                                             (rule "eqClose" (formula "10") (term "0,0,0,0"))
                                             (rule "concrete_and_1" (formula "10") (term "0,0,0"))
                                             (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "10") (term "0,0"))
                                             (rule "castDel" (formula "10") (term "1,0"))
                                             (rule "eqSymm" (formula "10") (term "0,0"))
                                             (rule "intCastEqual" (formula "10") (term "0,0"))
                                             (rule "pullOutSelect" (formula "10") (term "0,0,2,2,0") (inst "selectSK=arr_6"))
                                             (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "10"))
                                             (rule "simplifySelectOfStore" (formula "10"))
                                             (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "10"))
                                             (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "10") (term "0,0"))
                                             (rule "equalUnique" (formula "10") (term "1,0,0"))
                                             (rule "eqSymm" (formula "11") (term "0,0"))
                                             (rule "eqSymm" (formula "10") (term "0,0,0"))
                                             (rule "sortsDisjointModuloNull" (formula "10") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "10") (term "1,0,0,0") (ifseqformula "40"))
                                             (rule "concrete_and_4" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "applyEqReverse" (formula "11") (term "0,0,2,2,0") (ifseqformula "10"))
                                             (rule "applyEqReverse" (formula "11") (term "1,0,0") (ifseqformula "10"))
                                             (rule "hideAuxiliaryEq" (formula "10"))
                                             (rule "eqSymm" (formula "10") (term "0,0"))
                                             (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "23"))
                                             (rule "ifthenelse_true" (formula "10") (term "0"))
                                             (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "10"))
                                             (rule "leq_literals" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "hideAuxiliaryEq" (formula "10"))
                                             (rule "allLeft" (formula "10") (inst "t=i_1"))
                                             (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "10") (term "0,0") (ifseqformula "20"))
                                             (rule "qeq_literals" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "concrete_or_2" (formula "10") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                                             (rule "inEqSimp_homoInEq1" (formula "10") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "10") (term "0,0,0"))
                                             (rule "leq_literals" (formula "10") (term "0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0"))
                                             (rule "concrete_or_2" (formula "10"))
                                             (rule "pullOutSelect" (formula "10") (term "0,0,2,0") (inst "selectSK=arr_7"))
                                             (rule "simplifySelectOfStore" (formula "10"))
                                             (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "10"))
                                             (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                                             (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "10") (term "0,0"))
                                             (rule "eqSymm" (formula "10") (term "0,0,0"))
                                             (rule "sortsDisjointModuloNull" (formula "10") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "10") (term "0,0,0,0") (ifseqformula "38"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "10") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "10") (term "0"))
                                             (rule "applyEqReverse" (formula "11") (term "0,0,2,0") (ifseqformula "10"))
                                             (rule "hideAuxiliaryEq" (formula "10"))
                                             (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "19"))
                                             (rule "replaceKnownSelect_taclet1001000020000_43" (formula "10") (term "0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11001000020000_50" (formula "10") (term "0"))
                                             (rule "applyEq" (formula "10") (term "0") (ifseqformula "31"))
                                             (rule "leq_literals" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "allLeft" (formula "27") (inst "t=i_2"))
                                             (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                             (rule "applyEq" (formula "27") (term "0,0,2,0,0,0") (ifseqformula "21"))
                                             (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "26"))
                                             (rule "concrete_or_1" (formula "27") (term "0"))
                                             (rule "concrete_or_1" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "allLeft" (formula "27") (inst "t=i_1"))
                                             (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                             (rule "applyEq" (formula "27") (term "0,0,2,0,0,0") (ifseqformula "18"))
                                             (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "25"))
                                             (rule "concrete_or_1" (formula "27") (term "0"))
                                             (rule "concrete_or_1" (formula "27"))
                                             (rule "true_left" (formula "27"))
                                             (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                             (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "16"))
                                             (rule "leq_literals" (formula "17") (term "1"))
                                             (rule "concrete_or_3" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "allLeft" (formula "27") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                             (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                             (rule "allLeft" (formula "14") (inst "t=a_0"))
                                             (rule "eqSymm" (formula "14") (term "1,0"))
                                             (rule "eqSymm" (formula "14") (term "0,0"))
                                             (rule "eqSymm" (formula "14") (term "1"))
                                             (rule "replace_known_right" (formula "14") (term "1,0") (ifseqformula "43"))
                                             (rule "concrete_or_4" (formula "14") (term "0"))
                                             (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "35"))
                                             (rule "concrete_or_2" (formula "14"))
                                             (rule "applyEq" (formula "44") (term "0") (ifseqformula "14"))
                                             (rule "close" (formula "44") (ifseqformula "32"))
                                          )
                                          (branch "self.bidders[j_0] = hb_0 FALSE"
                                             (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "10"))
                                             (rule "applyEqReverse" (formula "11") (term "1,1,0") (ifseqformula "10"))
                                             (rule "hideAuxiliaryEq" (formula "10"))
                                             (rule "inEqSimp_commuteLeq" (formula "2"))
                                             (rule "all_pull_out1" (formula "11") (term "0,1,1,0"))
                                             (rule "ex_pull_out3" (formula "11") (term "1,0"))
                                             (rule "all_pull_out3" (formula "11") (term "0,1,0"))
                                             (rule "cnf_rightDist" (formula "11") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "11") (term "1,0,0,1,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,1,0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "11") (term "0,0,0,1,0"))
                                             (rule "commute_or_2" (formula "11") (term "0,0,0,0,1,0"))
                                             (rule "commute_or" (formula "11") (term "1,0,0,0,1,0"))
                                             (rule "commute_or" (formula "11") (term "0,0,0,0,0,1,0"))
                                             (rule "ex_pull_out3" (formula "11") (term "0"))
                                             (rule "allLeft" (formula "22") (inst "t=a_0"))
                                             (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                             (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                             (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "14"))
                                             (rule "mul_literals" (formula "25") (term "0,0"))
                                             (rule "add_zero_left" (formula "25") (term "0"))
                                             (rule "allLeft" (formula "21") (inst "t=i_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                             (rule "applyEq" (formula "21") (term "0,0,2,0,0,0") (ifseqformula "6"))
                                             (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "4"))
                                             (rule "qeq_literals" (formula "21") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "21") (term "1,0"))
                                             (rule "concrete_or_4" (formula "21") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "5"))
                                             (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                             (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "21") (term "0,0,1"))
                                             (rule "leq_literals" (formula "21") (term "0,1"))
                                             (rule "concrete_and_2" (formula "21") (term "1"))
                                             (rule "concrete_or_4" (formula "21"))
                                             (rule "allLeft" (formula "22") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "22") (term "1,0"))
                                             (rule "concrete_or_4" (formula "22") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
                                             (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                             (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "22") (term "0,0,1"))
                                             (rule "leq_literals" (formula "22") (term "0,1"))
                                             (rule "concrete_and_2" (formula "22") (term "1"))
                                             (rule "concrete_or_4" (formula "22"))
                                             (rule "all_pull_out3" (formula "12") (term "0,0"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                                             (rule "eq_or_2" (formula "12") (term "0,0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,1,0,0,0,0"))
                                             (rule "eq_or" (formula "12") (term "0,0,1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "12") (term "0,0,0,0,0,0,0"))
                                             (rule "eq_or_2" (formula "12") (term "0,0,0,0,0,0"))
                                             (rule "commute_and" (formula "1") (term "0,0,0"))
                                             (rule "commute_and_2" (formula "1") (term "0,0"))
                                             (rule "allLeft" (formula "20") (inst "t=a_0"))
                                             (rule "exLeft" (formula "20") (inst "sk=i_1"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "eqSymm" (formula "20") (term "0"))
                                             (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "20") (term "1"))
                                             (rule "concrete_or_4" (formula "20"))
                                             (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "22") (term "0"))
                                             (rule "concrete_or_2" (formula "22"))
                                             (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "21") (term "0"))
                                             (rule "concrete_or_2" (formula "21"))
                                             (rule "inEqSimp_homoInEq0" (formula "22"))
                                             (rule "polySimp_addComm1" (formula "22") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                             (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                             (rule "polySimp_rightDist" (formula "22") (term "1"))
                                             (rule "mul_literals" (formula "22") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                             (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                             (rule "exLeft" (formula "23") (inst "sk=i_2"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "28"))
                                             (rule "concrete_not_1" (formula "25") (term "0"))
                                             (rule "concrete_or_2" (formula "25"))
                                             (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "28"))
                                             (rule "concrete_not_1" (formula "24") (term "0"))
                                             (rule "concrete_or_2" (formula "24"))
                                             (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "28"))
                                             (rule "concrete_not_1" (formula "23") (term "1"))
                                             (rule "concrete_or_4" (formula "23"))
                                             (rule "inEqSimp_homoInEq0" (formula "25"))
                                             (rule "polySimp_addComm1" (formula "25") (term "0"))
                                             (rule "applyEq" (formula "11") (term "0,0,2,1,1,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "36") (term "0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "28") (term "0,0,2,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "45") (term "0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "33") (term "0,0,2,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "23"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                             (rule "mul_literals" (formula "25") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                                             (rule "polySimp_elimOne" (formula "3") (term "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "14"))
                                             (rule "mul_literals" (formula "33") (term "0,0"))
                                             (rule "add_zero_left" (formula "33") (term "0"))
                                             (rule "allLeft" (formula "29") (inst "t=i_1"))
                                             (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                             (rule "applyEq" (formula "29") (term "0,0,2,0,0,0") (ifseqformula "20"))
                                             (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "27"))
                                             (rule "concrete_or_1" (formula "29") (term "0"))
                                             (rule "concrete_or_1" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "allLeft" (formula "26") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                             (rule "exLeft" (formula "26") (inst "sk=i_3"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "eqSymm" (formula "26") (term "0"))
                                             (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "31"))
                                             (rule "concrete_not_1" (formula "26") (term "1"))
                                             (rule "concrete_or_4" (formula "26"))
                                             (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "31"))
                                             (rule "concrete_not_1" (formula "28") (term "0"))
                                             (rule "concrete_or_2" (formula "28"))
                                             (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "31"))
                                             (rule "concrete_not_1" (formula "27") (term "0"))
                                             (rule "concrete_or_2" (formula "27"))
                                             (rule "inEqSimp_homoInEq0" (formula "28"))
                                             (rule "polySimp_addComm1" (formula "28") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                             (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                             (rule "polySimp_rightDist" (formula "28") (term "1"))
                                             (rule "mul_literals" (formula "28") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                             (rule "allLeft" (formula "11") (inst "t=i_2"))
                                             (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "25"))
                                             (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "concrete_or_2" (formula "11") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "26"))
                                             (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0"))
                                             (rule "leq_literals" (formula "11") (term "0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0"))
                                             (rule "concrete_or_2" (formula "11"))
                                             (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_5"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "11") (term "0,0"))
                                             (rule "eqClose" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "11") (term "0,0"))
                                             (rule "castDel" (formula "11") (term "1,0"))
                                             (rule "eqSymm" (formula "11") (term "0,0"))
                                             (rule "intCastEqual" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "12"))
                                             (rule "pullOutSelect" (formula "11") (term "0,0,2,2,0") (inst "selectSK=arr_6"))
                                             (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "11") (term "0,0"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0"))
                                             (rule "eqSymm" (formula "12") (term "0,0"))
                                             (rule "eqSymm" (formula "11") (term "0,0,0"))
                                             (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "46"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "applyEqReverse" (formula "12") (term "1,0,0") (ifseqformula "11"))
                                             (rule "applyEqReverse" (formula "12") (term "0,0,2,2,0") (ifseqformula "11"))
                                             (rule "hideAuxiliaryEq" (formula "11"))
                                             (rule "eqSymm" (formula "11") (term "0,0"))
                                             (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "41"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
                                             (rule "hideAuxiliaryEq" (formula "11"))
                                             (rule "inEqSimp_homoInEq1" (formula "11"))
                                             (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                             (rule "add_literals" (formula "11") (term "1,0"))
                                             (rule "times_zero_1" (formula "11") (term "0"))
                                             (rule "leq_literals" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "allLeft" (formula "11") (inst "t=j_0"))
                                             (rule "replaceKnownSelect_taclet1001000020000_40" (formula "11") (term "0,0,2,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet1001000020000_42" (formula "11") (term "0,0,2,0,1"))
                                             (rule "replaceKnownSelect_taclet1001000020000_46" (formula "11") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet111001000020000_52" (formula "11") (term "0,1"))
                                             (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "11") (term "0,0,2,0,1") (ifseqformula "24"))
                                             (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                                             (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
                                             (rule "add_literals" (formula "11") (term "1,0,1"))
                                             (rule "times_zero_1" (formula "11") (term "0,1"))
                                             (rule "qeq_literals" (formula "11") (term "1"))
                                             (rule "concrete_or_3" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "allLeft" (formula "11") (inst "t=i_1"))
                                             (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "23"))
                                             (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,1,0"))
                                             (rule "leq_literals" (formula "11") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "11") (term "1,0"))
                                             (rule "concrete_or_4" (formula "11") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "22"))
                                             (rule "qeq_literals" (formula "11") (term "0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0"))
                                             (rule "concrete_or_2" (formula "11"))
                                             (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_7"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "11") (term "0,0"))
                                             (rule "eqClose" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "11") (term "0,0"))
                                             (rule "castDel" (formula "11") (term "1,0"))
                                             (rule "eqSymm" (formula "11") (term "0,0"))
                                             (rule "intCastEqual" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "12"))
                                             (rule "pullOutSelect" (formula "11") (term "0,0,2,2,0") (inst "selectSK=arr_8"))
                                             (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "11") (term "0,0"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0"))
                                             (rule "eqSymm" (formula "12") (term "0,0"))
                                             (rule "eqSymm" (formula "11") (term "0,0,0"))
                                             (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "46"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "applyEqReverse" (formula "12") (term "1,0,0") (ifseqformula "11"))
                                             (rule "applyEqReverse" (formula "12") (term "0,0,2,2,0") (ifseqformula "11"))
                                             (rule "hideAuxiliaryEq" (formula "11"))
                                             (rule "eqSymm" (formula "11") (term "0,0"))
                                             (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "22"))
                                             (rule "eqSymm" (formula "11") (term "0,0"))
                                             (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "42"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
                                             (rule "hideAuxiliaryEq" (formula "11"))
                                             (rule "applyEq" (formula "11") (term "0,0,2,1") (ifseqformula "21"))
                                             (rule "allLeft" (formula "11") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet1001000020000_37" (formula "11") (term "0,0,2,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet1001000020000_39" (formula "11") (term "0,0,2,0,1"))
                                             (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                             (rule "applyEq" (formula "11") (term "0,0,2,0,1") (ifseqformula "6"))
                                             (rule "replaceKnownSelect_taclet1001000020000_43" (formula "11") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet11001000020000_50" (formula "11") (term "0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
                                             (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "3"))
                                             (rule "concrete_or_3" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "allLeft" (formula "32") (inst "t=i_3"))
                                             (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                             (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "31"))
                                             (rule "concrete_or_1" (formula "32") (term "0"))
                                             (rule "concrete_or_1" (formula "32"))
                                             (rule "true_left" (formula "32"))
                                             (rule "allLeft" (formula "11") (inst "t=i_3"))
                                             (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "29"))
                                             (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                             (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,1,0"))
                                             (rule "leq_literals" (formula "11") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "11") (term "1,0"))
                                             (rule "concrete_or_4" (formula "11") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "28"))
                                             (rule "qeq_literals" (formula "11") (term "0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0"))
                                             (rule "concrete_or_2" (formula "11"))
                                             (rule "pullOutSelect" (formula "11") (term "0,0,2,0") (inst "selectSK=arr_9"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "11") (term "0,0"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0"))
                                             (rule "eqSymm" (formula "11") (term "0,0,0"))
                                             (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "45"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "applyEqReverse" (formula "12") (term "0,0,2,0") (ifseqformula "11"))
                                             (rule "hideAuxiliaryEq" (formula "11"))
                                             (rule "applyEq" (formula "11") (term "0,0,2,0") (ifseqformula "27"))
                                             (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_10"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "11") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "11"))
                                             (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                             (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "11") (term "0,0"))
                                             (rule "eqClose" (formula "11") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "11") (term "0,0"))
                                             (rule "castDel" (formula "11") (term "1,0"))
                                             (rule "eqSymm" (formula "11") (term "0,0"))
                                             (rule "intCastEqual" (formula "11") (term "0,0"))
                                             (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "41"))
                                             (rule "ifthenelse_false" (formula "11") (term "0"))
                                             (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "11"))
                                             (rule "hideAuxiliaryEq" (formula "11"))
                                             (rule "inEqSimp_homoInEq0" (formula "11"))
                                             (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                             (rule "add_literals" (formula "11") (term "1,0"))
                                             (rule "times_zero_1" (formula "11") (term "0"))
                                             (rule "qeq_literals" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "allLeft" (formula "19") (inst "t=hb_0"))
                                             (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "17"))
                                             (rule "allLeft" (formula "20") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                             (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "18"))
                                             (rule "leq_literals" (formula "20") (term "1"))
                                             (rule "concrete_or_3" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "allLeft" (formula "33") (inst "t=(int)(hb_0)"))
                                             (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                             (rule "allLeft" (formula "34") (inst "t=(int)(a_0)"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "allLeft" (formula "16") (inst "t=a_0"))
                                             (rule "eqSymm" (formula "16") (term "1,0"))
                                             (rule "eqSymm" (formula "16") (term "1"))
                                             (rule "eqSymm" (formula "16") (term "0,0"))
                                             (rule "replace_known_right" (formula "16") (term "1,0") (ifseqformula "53"))
                                             (rule "concrete_or_4" (formula "16") (term "0"))
                                             (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "44"))
                                             (rule "concrete_or_2" (formula "16"))
                                             (rule "close" (formula "54") (ifseqformula "16"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,0"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,1"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,1"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,1"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "3") (term "1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,1"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "9") (term "1,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "9") (term "1,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "6") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,1"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "8") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "8") (term "0,1"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,1"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "9") (term "1,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "9") (term "1,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,1,1,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,0,2,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,0,2,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,1,1,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "10") (term "1,1,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "10") (term "1,1,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "9") (term "0,1,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "9") (term "0,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "10") (term "1,0,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "10") (term "1,1,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,0,2,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,0,2,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "10") (term "1,0,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "10") (term "1,1,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "replace_known_right" (formula "33") (term "1,0,0,0") (ifseqformula "32"))
                                    (rule "concrete_and_4" (formula "33") (term "0,0,0"))
                                    (rule "concrete_and_2" (formula "33") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "6") (term "0"))
                                    (rule "mul_literals" (formula "6") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "8") (term "1"))
                                    (rule "mul_literals" (formula "8") (term "1,1"))
                                    (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0"))
                                    (rule "polySimp_addComm0" (formula "8") (term "1"))
                                    (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "8"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,0") (ifseqformula "5"))
                                    (rule "inEqSimp_commuteGeq" (formula "1"))
                                    (rule "applyEq" (formula "11") (term "0,0,2,0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,2,0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "11") (term "0,2,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,2,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "5"))
                                    (rule "eqSymm" (formula "11") (term "0,0"))
                                    (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,2,1,3,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "26") (term "0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "9") (term "1,3,0,0,1,0") (ifseqformula "15"))
                                    (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,1,0"))
                                    (rule "add_literals" (formula "9") (term "1,3,0,0,1,0"))
                                    (rule "times_zero_1" (formula "9") (term "3,0,0,1,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,0") (ifseqformula "15"))
                                    (rule "polySimp_pullOutFactor2" (formula "4") (term "3,0,0"))
                                    (rule "add_literals" (formula "4") (term "1,3,0,0"))
                                    (rule "times_zero_1" (formula "4") (term "3,0,0"))
                                    (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "15"))
                                    (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,1,1,0"))
                                    (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,1,1,0"))
                                    (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,1,1,0"))
                                    (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                                    (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                                    (rule "add_literals" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                                    (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                                    (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "applyEq" (formula "1") (term "0,2,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,1") (ifseqformula "5"))
                                    (rule "applyEq" (formula "1") (term "0,2,1,3,0,1") (ifseqformula "5"))
                                    (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "15"))
                                    (rule "polySimp_pullOutFactor2" (formula "11") (term "1,0"))
                                    (rule "add_literals" (formula "11") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "11") (term "1,0"))
                                    (rule "ifthenelse_same_branches" (formula "11") (term "0"))
                                    (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "11"))
                                    (rule "eqClose" (formula "32"))
                                    (rule "closeTrue" (formula "32"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "applyEqReverse" (formula "32") (term "0,1") (ifseqformula "11") (userinteraction))
                                 (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,0"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,1"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,1"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,1"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "3") (term "1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,1"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "9") (term "1,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "9") (term "1,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "6") (term "0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,1"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "8") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "8") (term "0,1"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "32") (term "1,0,0,2,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "32") (term "1,0,2,1,1"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "9") (term "1,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "9") (term "1,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,1,1,0,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,1,1,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,0,2,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "9") (term "1,0,0,2,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "32") (term "1,0,0,2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "32") (term "1,0,2,1,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,1,1,0,0"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "9") (term "0,1,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "9") (term "0,1,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,1,1,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "10") (term "1,1,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "10") (term "1,1,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "10") (term "1,0,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "10") (term "1,1,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,0,2,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "9") (term "1,0,0,2,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "10") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "10") (term "1,0,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "10") (term "1,1,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "10") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "6") (term "0"))
                                 (rule "mul_literals" (formula "6") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "8") (term "1"))
                                 (rule "mul_literals" (formula "8") (term "1,1"))
                                 (rule "polySimp_homoEq" (formula "32"))
                                 (rule "polySimp_elimSub" (formula "9") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "6") (term "0"))
                                 (rule "polySimp_addComm0" (formula "8") (term "1"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "9") (term "1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "32") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1,1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "8"))
                                 (rule "polySimp_addComm1" (formula "8") (term "0"))
                                 (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,2,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,0,2,0,1,0,0") (ifseqformula "5"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,2,0") (ifseqformula "5"))
                                 (rule "inEqSimp_commuteGeq" (formula "1"))
                                 (rule "applyEq" (formula "33") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "5"))
                                 (rule "eqSymm" (formula "32") (term "0,1,0"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,2,1,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "5"))
                                 (rule "eqSymm" (formula "11") (term "0,0"))
                                 (rule "applyEq" (formula "33") (term "0,2,0,1,1,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,2,1,3,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "11") (term "0,0,2,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "11") (term "0,2,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,2,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "15"))
                                 (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,1,1,0"))
                                 (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,1,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,1,1,0"))
                                 (rule "applyEq" (formula "4") (term "1,3,0,0") (ifseqformula "15"))
                                 (rule "polySimp_pullOutFactor2" (formula "4") (term "3,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,3,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "3,0,0"))
                                 (rule "applyEq" (formula "32") (term "0,2,0,0,2,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,2,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,2,1,3,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,2,0,0,0,2,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,2,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,2,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,0,2,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,2,1,3,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,2,0,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "33") (term "1,3,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,1,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,3,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "3,0,0,1,0,0"))
                                 (rule "applyEq" (formula "10") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                                 (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,1,1,0,1,0,1,1,0"))
                                 (rule "add_literals" (formula "10") (term "1,3,0,1,1,0,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "3,0,1,1,0,1,0,1,1,0"))
                                 (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,2,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,2,0,0,0,2,0,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,2,0,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,2,0,0,0,2,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,0,0") (ifseqformula "5"))
                                 (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                                 (rule "applyEq" (formula "32") (term "1,1,1,0") (ifseqformula "15"))
                                 (rule "polySimp_pullOutFactor2" (formula "32") (term "1,1,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,1,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,1,0"))
                                 (rule "ifthenelse_same_branches" (formula "32") (term "1,0"))
                                 (rule "add_zero_right" (formula "32") (term "0"))
                                 (rule "applyEq" (formula "33") (term "1,3,0,0,1,1,0,0,0,0") (ifseqformula "15"))
                                 (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,1,1,0,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "1,3,0,0,1,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "33") (term "3,0,0,1,1,0,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,2,0") (ifseqformula "5"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "15"))
                                 (rule "polySimp_pullOutFactor2" (formula "11") (term "1,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0"))
                                 (rule "ifthenelse_same_branches" (formula "11") (term "0"))
                                 (rule "applyEqReverse" (formula "33") (term "0,1,0,0,0") (ifseqformula "11"))
                                 (rule "eqClose" (formula "33") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "33") (term "0,0,0"))
                                 (rule "applyEqReverse" (formula "33") (term "0,1,1,0,0") (ifseqformula "11"))
                                 (rule "add_zero_left" (formula "33") (term "1,1,0,0"))
                                 (rule "hideAuxiliaryEq" (formula "11"))
                                 (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                 (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                 (rule "applyEq" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                                 (rule "add_literals" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                                 (rule "applyEq" (formula "9") (term "1,3,0,1,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,1,1,0"))
                                 (rule "add_literals" (formula "9") (term "1,3,0,1,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "3,0,1,1,0"))
                                 (rule "applyEq" (formula "9") (term "1,3,0,0,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,1,0"))
                                 (rule "add_literals" (formula "9") (term "1,3,0,0,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "3,0,0,1,0"))
                                 (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,0,1,0"))
                                 (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,0,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,0,1,0"))
                                 (rule "applyEq" (formula "31") (term "0,2,1,3,0,0,2,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,0,2,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,2,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,0,2,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,0,2,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "1"))
                                 (rule "applyEq" (formula "31") (term "0,2,1,3,0,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "31") (term "0,2,1,3,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "31") (term "0,0,2,0,0,3,0,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "31") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,0,2,0,1,0"))
                                 (rule "add_literals" (formula "31") (term "1,3,0,0,0,2,0,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "3,0,0,0,2,0,1,0"))
                                 (rule "applyEq" (formula "31") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "32") (term "1,3,0,0,0,0,0,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,3,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "3,0,0,0,0,0,0"))
                                 (rule "applyEq" (formula "31") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "5"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0"))
                                 (rule "applyEq" (formula "32") (term "1,3,0,1,0,0,0,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,3,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "3,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "32") (term "1,3,0,1,1,0,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,1,1,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,3,0,1,1,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "3,0,1,1,0,0"))
                                 (rule "applyEq" (formula "32") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,1,1,1,0,0,0"))
                                 (rule "add_literals" (formula "32") (term "1,3,0,1,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "3,0,1,1,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,1") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,1"))
                                 (rule "applyEq" (formula "31") (term "1,3,0,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,1,0"))
                                 (rule "add_literals" (formula "31") (term "1,3,0,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "3,0,1,0"))
                                 (rule "applyEq" (formula "31") (term "1,3,0,0,2,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,2,1,0"))
                                 (rule "add_literals" (formula "31") (term "1,3,0,0,2,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "3,0,0,2,1,0"))
                                 (rule "polySimp_addComm0" (formula "31") (term "0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,0,2,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,2,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,0,2,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,0,2,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "31") (term "1,3,0,0,1,0") (ifseqformula "14"))
                                 (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,1,0"))
                                 (rule "add_literals" (formula "31") (term "1,3,0,0,1,0"))
                                 (rule "times_zero_1" (formula "31") (term "3,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                 (rule "mul_literals" (formula "6") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1"))
                                 (rule "mul_literals" (formula "8") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                 (rule "polySimp_sepNegMonomial" (formula "31"))
                                 (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                 (rule "polySimp_elimOne" (formula "31") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "6"))
                                 (rule "leq_literals" (formula "17") (term "0"))
                                 (rule "concrete_or_1" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "pullOutSelect" (formula "9") (term "0,0,2,1,1,0") (inst "selectSK=arr_1"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "31") (term "0,0,2,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "31") (term "0,2,1") (ifseqformula "9"))
                                 (rule "simplifySelectOfStore" (formula "9"))
                                 (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "9") (term "0,0"))
                                 (rule "equalUnique" (formula "9") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "9") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "9") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "9"))
                                 (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "9") (term "0,0"))
                                 (rule "equalUnique" (formula "9") (term "1,0,0"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "eqSymm" (formula "9") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "9") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "9") (term "0,0,0,0") (ifseqformula "26"))
                                 (rule "concrete_and_2" (formula "9") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "9") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "9") (term "0"))
                                 (rule "applyEqReverse" (formula "31") (term "0,2,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "31") (term "0,0,2,1") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,2,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "10") (term "0,0,2,1,1,0") (ifseqformula "9"))
                                 (rule "hideAuxiliaryEq" (formula "9"))
                                 (rule "inEqSimp_commuteGeq" (formula "1"))
                                 (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_2"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0") (ifseqformula "4"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0"))
                                 (rule "eqSymm" (formula "4") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "4") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "26"))
                                 (rule "concrete_and_2" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,1") (ifseqformula "4"))
                                 (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=address_4"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0"))
                                 (rule "eqClose" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,0"))
                                 (rule "castDel" (formula "1") (term "1,0"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "eqSymm" (formula "1") (term "0,0"))
                                 (rule "pullOutSelect" (formula "10") (term "1,1,0") (inst "selectSK=arr_3"))
                                 (rule "applyEq" (formula "32") (term "0") (ifseqformula "10"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "10"))
                                 (rule "simplifySelectOfStore" (formula "10"))
                                 (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "10") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "10") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "10") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "10"))
                                 (rule "equalUnique" (formula "10") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "10") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "10") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "10") (term "0,0"))
                                 (rule "eqClose" (formula "10") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "10") (term "0,0"))
                                 (rule "castDel" (formula "10") (term "1,0"))
                                 (rule "eqSymm" (formula "10") (term "0,0"))
                                 (rule "intCastEqual" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "2"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=address_5"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfStore" (formula "2"))
                                 (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0"))
                                 (rule "equalUnique" (formula "2") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "2"))
                                 (rule "eqClose" (formula "2") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                                 (rule "equalUnique" (formula "2") (term "0,0,0"))
                                 (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0"))
                                 (rule "castDel" (formula "2") (term "1,0"))
                                 (rule "intCastEqual" (formula "2") (term "0,0"))
                                 (rule "nnf_ex2all" (formula "34"))
                                 (rule "nnf_imp2or" (formula "14") (term "0,1,0,1,1,0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "nnf_notAll" (formula "1") (term "0"))
                                 (rule "nnf_imp2or" (formula "14") (term "0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "14") (term "1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,1,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,1,0,1,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,1,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,1,0"))
                                 (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,0,1,1,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,1,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,1,0"))
                                 (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                 (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                                 (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                                 (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                                 (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                 (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0,1,0,1,1,0"))
                                 (rule "ifthenelse_split" (formula "12") (term "0"))
                                 (branch "self.bidders[j_0] = hb_0 TRUE"
                                    (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "14") (term "1,1,0") (ifseqformula "13"))
                                    (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "13"))
                                    (rule "hideAuxiliaryEq" (formula "13"))
                                    (rule "eqSymm" (formula "34"))
                                    (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "12"))
                                    (rule "ifthenelse_true" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "2"))
                                    (rule "eqClose" (formula "34"))
                                    (rule "closeTrue" (formula "34"))
                                 )
                                 (branch "self.bidders[j_0] = hb_0 FALSE"
                                    (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "12"))
                                    (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "12"))
                                    (rule "applyEqReverse" (formula "13") (term "1,1,0") (ifseqformula "12"))
                                    (rule "hideAuxiliaryEq" (formula "12"))
                                    (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "26"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "eqSymm" (formula "33"))
                                    (rule "inEqSimp_commuteLeq" (formula "3"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "hb_0 = a_0 TRUE"
                                       (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "11") (term "0,2,0,0,1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "11") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "12") (term "0,0,2,0,0,0,0,2,0,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "14") (term "0,0,2,1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "11") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "25") (term "1") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "16") (term "0,2,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "12") (term "0,2,0,1,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "12") (term "0,2,0,0,0,2,1,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "27") (term "0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "12") (term "0,0,2,0,0,1,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "12") (term "0,0,2,0,0,0,0,2,1,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "12") (term "0,2,0,0,0,2,0,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "15") (term "1,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "12") (term "0,0,2,0,0,0,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "11") (term "0,0,2,0,0,0,1,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "16") (term "0,0,2,1") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "12") (term "0,2,0,0,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "22") (term "0,0,2,0") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                                       (rule "allLeft" (formula "20") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "20") (term "1,0"))
                                       (rule "concrete_or_4" (formula "20") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                       (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "20") (term "0,0,1"))
                                       (rule "leq_literals" (formula "20") (term "0,1"))
                                       (rule "concrete_and_2" (formula "20") (term "1"))
                                       (rule "concrete_or_4" (formula "20"))
                                       (rule "allLeft" (formula "21") (inst "t=i_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                       (rule "applyEq" (formula "21") (term "0,0,2,0,0,0") (ifseqformula "6"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "21") (term "0,0,1"))
                                       (rule "leq_literals" (formula "21") (term "0,1"))
                                       (rule "concrete_and_2" (formula "21") (term "1"))
                                       (rule "concrete_or_4" (formula "21"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "21") (term "0,1"))
                                       (rule "concrete_and_2" (formula "21") (term "1"))
                                       (rule "concrete_or_4" (formula "21"))
                                       (rule "all_pull_out1" (formula "12") (term "0,1,1,0"))
                                       (rule "ex_pull_out3" (formula "12") (term "1,0"))
                                       (rule "commute_and" (formula "1") (term "0,0,0"))
                                       (rule "all_pull_out3" (formula "12") (term "0,1,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "1,0,0,1,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,1,0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0,0,1,0"))
                                       (rule "commute_or" (formula "12") (term "1,0,0,0,1,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0,0,1,0"))
                                       (rule "ex_pull_out3" (formula "12") (term "0"))
                                       (rule "all_pull_out3" (formula "12") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                                       (rule "eq_or_2" (formula "12") (term "0,0,1,0,0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "1,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,0,0,0,0"))
                                       (rule "eq_or" (formula "12") (term "0,0,1,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0,0,0,0"))
                                       (rule "eq_or_2" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "commute_and_2" (formula "1") (term "0,0"))
                                       (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "24"))
                                       (rule "inEqSimp_commuteLeq" (formula "14"))
                                       (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "3") (term "0,0"))
                                       (rule "add_zero_left" (formula "3") (term "0"))
                                       (rule "allLeft" (formula "20") (inst "t=a_0"))
                                       (rule "exLeft" (formula "20") (inst "sk=i_1"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "eqSymm" (formula "20") (term "0"))
                                       (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "25"))
                                       (rule "concrete_not_1" (formula "21") (term "0"))
                                       (rule "concrete_or_2" (formula "21"))
                                       (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "25"))
                                       (rule "concrete_not_1" (formula "22") (term "0"))
                                       (rule "concrete_or_2" (formula "22"))
                                       (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "25"))
                                       (rule "concrete_not_1" (formula "20") (term "1"))
                                       (rule "concrete_or_4" (formula "20"))
                                       (rule "inEqSimp_homoInEq0" (formula "22"))
                                       (rule "polySimp_addComm1" (formula "22") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1"))
                                       (rule "mul_literals" (formula "22") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                       (rule "allLeft" (formula "11") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "concrete_or_2" (formula "11") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0,0,2,0") (inst "selectSK=arr_5"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "36"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,2,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_6"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "eqClose" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "11") (term "0,0"))
                                       (rule "castDel" (formula "11") (term "1,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "intCastEqual" (formula "11") (term "0,0"))
                                       (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "33"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "inEqSimp_homoInEq0" (formula "11"))
                                       (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,0"))
                                       (rule "times_zero_1" (formula "11") (term "0"))
                                       (rule "qeq_literals" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "11") (inst "t=i_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "concrete_or_2" (formula "11") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0,0,2,0") (inst "selectSK=arr_7"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "36"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,2,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0") (ifseqformula "6"))
                                       (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_8"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "eqClose" (formula "11") (term "1,0,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0,0"))
                                       (rule "eqClose" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "0,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_true" (formula "11") (term "0"))
                                       (rule "castDel" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "inEqSimp_commuteLeq" (formula "11"))
                                       (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                       (rule "exLeft" (formula "23") (inst "sk=i_2"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "27"))
                                       (rule "concrete_not_1" (formula "23") (term "1"))
                                       (rule "concrete_or_4" (formula "23"))
                                       (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "27"))
                                       (rule "concrete_not_1" (formula "25") (term "0"))
                                       (rule "concrete_or_2" (formula "25"))
                                       (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "27"))
                                       (rule "concrete_not_1" (formula "24") (term "0"))
                                       (rule "concrete_or_2" (formula "24"))
                                       (rule "inEqSimp_homoInEq0" (formula "25"))
                                       (rule "polySimp_addComm1" (formula "25") (term "0"))
                                       (rule "applyEq" (formula "42") (term "0,2,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "27") (term "0,0,2,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "34") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,1,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "42") (term "0,0,2,1") (ifseqformula "23"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                       (rule "mul_literals" (formula "25") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "3") (term "0,0"))
                                       (rule "add_zero_left" (formula "3") (term "0"))
                                       (rule "allLeft" (formula "19") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                       (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "19") (term "1"))
                                       (rule "concrete_or_3" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "allLeft" (formula "29") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                       (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                       (rule "allLeft" (formula "30") (inst "t=(int)(a_0)"))
                                       (rule "inEqSimp_commuteGeq" (formula "30") (term "1"))
                                       (rule "allLeft" (formula "26") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                       (rule "exLeft" (formula "26") (inst "sk=i_3"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "eqSymm" (formula "26") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
                                       (rule "polySimp_addComm1" (formula "28") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                                       (rule "mul_literals" (formula "28") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                                       (rule "allLeft" (formula "29") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                       (rule "exLeft" (formula "29") (inst "sk=i_4"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "eqSymm" (formula "29") (term "0"))
                                       (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "33"))
                                       (rule "concrete_not_1" (formula "31") (term "0"))
                                       (rule "concrete_or_2" (formula "31"))
                                       (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "33"))
                                       (rule "concrete_not_1" (formula "30") (term "0"))
                                       (rule "concrete_or_2" (formula "30"))
                                       (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "33"))
                                       (rule "concrete_not_1" (formula "29") (term "1"))
                                       (rule "concrete_or_4" (formula "29"))
                                       (rule "inEqSimp_homoInEq0" (formula "31"))
                                       (rule "polySimp_addComm1" (formula "31") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                                       (rule "mul_literals" (formula "31") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                                       (rule "allLeft" (formula "37") (inst "t=i_1"))
                                       (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                       (rule "applyEq" (formula "37") (term "0,0,2,0,0,0") (ifseqformula "20"))
                                       (rule "replace_known_left" (formula "37") (term "0,0") (ifseqformula "34"))
                                       (rule "concrete_or_1" (formula "37") (term "0"))
                                       (rule "concrete_or_1" (formula "37"))
                                       (rule "true_left" (formula "37"))
                                       (rule "allLeft" (formula "15") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                                       (rule "allLeft" (formula "11") (inst "t=i_2"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "27"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "11") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "11") (term "1,0"))
                                       (rule "concrete_or_4" (formula "11") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "26"))
                                       (rule "qeq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0,0,2,0") (inst "selectSK=arr_9"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "48"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,2,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_10"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "eqClose" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "11") (term "0,0"))
                                       (rule "castDel" (formula "11") (term "1,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "intCastEqual" (formula "11") (term "0,0"))
                                       (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "45"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "inEqSimp_homoInEq0" (formula "11"))
                                       (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,0"))
                                       (rule "times_zero_1" (formula "11") (term "0"))
                                       (rule "qeq_literals" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "41") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(a_0)))"))
                                       (rule "allLeft" (formula "11") (inst "t=j_0"))
                                       (rule "replaceKnownSelect_taclet0111000020000_53" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000020000_55" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownSelect_taclet0111000020000_56" (formula "11") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000020000_58" (formula "11") (term "0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0,1") (ifseqformula "25"))
                                       (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                                       (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
                                       (rule "add_literals" (formula "11") (term "1,0,1"))
                                       (rule "times_zero_1" (formula "11") (term "0,1"))
                                       (rule "qeq_literals" (formula "11") (term "1"))
                                       (rule "concrete_or_3" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(a_0)))"))
                                       (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "42") (term "0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0"))
                                       (rule "allLeft" (formula "11") (inst "t=i_1"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "25"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "11") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "11") (term "1,0"))
                                       (rule "concrete_or_4" (formula "11") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "24"))
                                       (rule "qeq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0,0,2,0") (inst "selectSK=arr_11"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "11") (term "1,0,0,0") (ifseqformula "51"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,2,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0") (ifseqformula "23"))
                                       (rule "replaceKnownSelect_taclet0111000020000_62" (formula "11") (term "0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000020000_64" (formula "11") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11"))
                                       (rule "allLeft" (formula "11") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet0111000020000_59" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000020000_61" (formula "11") (term "0,0,2,0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0,1") (ifseqformula "6"))
                                       (rule "replaceKnownSelect_taclet0111000020000_62" (formula "11") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0111000020000_64" (formula "11") (term "0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "3"))
                                       (rule "concrete_or_3" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "43") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                                       (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "15"))
                                       (rule "times_zero_1" (formula "43") (term "0,0"))
                                       (rule "add_zero_left" (formula "43") (term "0"))
                                       (rule "allLeft" (formula "39") (inst "t=i_4"))
                                       (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                       (rule "applyEq" (formula "39") (term "0,0,2,0,0,0") (ifseqformula "31"))
                                       (rule "replace_known_left" (formula "39") (term "0,0") (ifseqformula "35"))
                                       (rule "concrete_or_1" (formula "39") (term "0"))
                                       (rule "concrete_or_1" (formula "39"))
                                       (rule "true_left" (formula "39"))
                                       (rule "allLeft" (formula "11") (inst "t=i_4"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "33"))
                                       (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "concrete_or_2" (formula "11") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "34"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_12"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "eqClose" (formula "11") (term "0,0,0,0"))
                                       (rule "concrete_and_1" (formula "11") (term "0,0,0"))
                                       (rule "equalUnique" (formula "11") (term "0,0,0"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "castDel" (formula "11") (term "1,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "intCastEqual" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12"))
                                       (rule "pullOutSelect" (formula "11") (term "0,0,2,2,0") (inst "selectSK=arr_13"))
                                       (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "52"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,2,2,0") (ifseqformula "11"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,2,0") (ifseqformula "33"))
                                       (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "33"))
                                       (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "48"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "11"))
                                       (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,0"))
                                       (rule "times_zero_1" (formula "11") (term "0"))
                                       (rule "leq_literals" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "cut_direct" (formula "37") (term "1,0"))
                                       (branch "CUT: (int)self.auctionOwner <= -1 TRUE"
                                          (rule "concrete_or_3" (formula "38") (term "0"))
                                          (rule "concrete_or_1" (formula "38"))
                                          (rule "true_left" (formula "38"))
                                          (rule "cut_direct" (formula "38") (term "1,0"))
                                          (branch "CUT: (int)(a_0) <= -1 TRUE"
                                             (rule "concrete_or_3" (formula "39") (term "0"))
                                             (rule "concrete_or_1" (formula "39"))
                                             (rule "true_left" (formula "39"))
                                             (rule "cut_direct" (formula "29") (term "1"))
                                             (branch "CUT: i_3 >= 0 TRUE"
                                                (rule "concrete_or_3" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "cut_direct" (formula "28") (term "0"))
                                                (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                   (rule "concrete_or_1" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "cut_direct" (formula "30") (term "1"))
                                                   (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                      (rule "concrete_or_3" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "allLeft" (formula "18") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "18") (term "1"))
                                                      (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "47"))
                                                      (rule "concrete_or_2" (formula "18") (term "0"))
                                                      (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "55"))
                                                      (rule "concrete_or_4" (formula "18"))
                                                      (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "36") (term "0,0,2,0") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "11") (term "0,0,2,1,1,0") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "55") (term "0,0,2,1") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "32") (term "1") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "26") (term "1") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "55") (term "0,2,0") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "47") (term "0") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "3") (term "0") (ifseqformula "41"))
                                                      (rule "qeq_literals" (formula "3"))
                                                      (rule "true_left" (formula "3"))
                                                      (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "40"))
                                                      (rule "applyEq" (formula "13") (term "0") (ifseqformula "40"))
                                                      (rule "inEqSimp_commuteLeq" (formula "13"))
                                                      (rule "applyEq" (formula "53") (term "0") (ifseqformula "19"))
                                                      (rule "eqSymm" (formula "53"))
                                                      (rule "close" (formula "53") (ifseqformula "39"))
                                                   )
                                                   (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                      (rule "concrete_or_4" (formula "30"))
                                                      (rule "notLeft" (formula "30"))
                                                      (rule "inEqSimp_geqRight" (formula "46"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                                                      (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                                      (rule "mul_literals" (formula "6") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                                      (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "6") (term "1"))
                                                      (rule "mul_literals" (formula "6") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                                                      (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                                      (rule "mul_literals" (formula "12") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "12") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                                      (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "12") (term "0"))
                                                      (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                                                      (rule "mul_literals" (formula "10") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                                      (rule "mul_literals" (formula "10") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "33") (term "0"))
                                                      (rule "concrete_or_1" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "1"))
                                                      (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                                                      (rule "mul_literals" (formula "31") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                                      (rule "polySimp_mulComm0" (formula "31") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "31") (term "1"))
                                                      (rule "mul_literals" (formula "31") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "1"))
                                                      (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                                                      (rule "mul_literals" (formula "36") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "36") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "36"))
                                                      (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "36") (term "0"))
                                                      (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "1"))
                                                      (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                                                      (rule "mul_literals" (formula "28") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                                      (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "28") (term "1"))
                                                      (rule "mul_literals" (formula "28") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "37"))
                                                      (rule "mul_literals" (formula "36") (term "0,0"))
                                                      (rule "add_zero_left" (formula "36") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                                                      (rule "mul_literals" (formula "36") (term "1"))
                                                      (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
                                                      (rule "mul_literals" (formula "12") (term "0,0"))
                                                      (rule "add_zero_left" (formula "12") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                      (rule "mul_literals" (formula "12") (term "1"))
                                                      (rule "allLeft" (formula "22") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "22") (term "1"))
                                                      (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "53"))
                                                      (rule "concrete_or_2" (formula "22") (term "0"))
                                                      (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "61"))
                                                      (rule "concrete_or_4" (formula "22"))
                                                      (rule "applyEq" (formula "53") (term "0") (ifseqformula "22"))
                                                      (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "22"))
                                                      (rule "applyEq" (formula "41") (term "0,0,2,0") (ifseqformula "22"))
                                                      (rule "close" (formula "52") (ifseqformula "41"))
                                                   )
                                                )
                                                (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                   (rule "concrete_or_2" (formula "28"))
                                                   (rule "notLeft" (formula "28"))
                                                   (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "45"))
                                                   (rule "concrete_not_2" (formula "29") (term "0"))
                                                   (rule "concrete_or_1" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "allLeft" (formula "18") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                   (rule "eqSymm" (formula "18") (term "1"))
                                                   (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "55"))
                                                   (rule "concrete_or_4" (formula "18"))
                                                   (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "47"))
                                                   (rule "concrete_or_2" (formula "18"))
                                                   (rule "applyEq" (formula "47") (term "0") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "55") (term "0,2,0") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "30") (term "1") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "26") (term "1") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "11") (term "0,0,2,1,1,0") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "18"))
                                                   (rule "applyEq" (formula "34") (term "0,0,2,0") (ifseqformula "18"))
                                                   (rule "close" (formula "45") (ifseqformula "34"))
                                                )
                                             )
                                             (branch "CUT: i_3 >= 0 FALSE"
                                                (rule "concrete_or_4" (formula "29"))
                                                (rule "notLeft" (formula "29"))
                                                (rule "replace_known_right" (formula "28") (term "0,1") (ifseqformula "45"))
                                                (rule "concrete_not_2" (formula "28") (term "1"))
                                                (rule "concrete_or_3" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "44"))
                                                (rule "concrete_not_2" (formula "28") (term "0"))
                                                (rule "concrete_or_1" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "inEqSimp_geqRight" (formula "44"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "allLeft" (formula "19") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                (rule "eqSymm" (formula "19") (term "1"))
                                                (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "54"))
                                                (rule "concrete_or_4" (formula "19"))
                                                (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "46"))
                                                (rule "concrete_or_2" (formula "19"))
                                                (rule "applyEq" (formula "30") (term "1") (ifseqformula "19"))
                                                (rule "applyEq" (formula "12") (term "0,0,2,1,1,0") (ifseqformula "19"))
                                                (rule "applyEq" (formula "46") (term "0") (ifseqformula "19"))
                                                (rule "applyEq" (formula "54") (term "0,2,0") (ifseqformula "19"))
                                                (rule "applyEq" (formula "15") (term "0,0,2,0") (ifseqformula "19"))
                                                (rule "applyEq" (formula "34") (term "0,0,2,0") (ifseqformula "19"))
                                                (rule "close" (formula "45") (ifseqformula "34"))
                                             )
                                          )
                                          (branch "CUT: (int)(a_0) <= -1 FALSE"
                                             (rule "concrete_or_4" (formula "38") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "46"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "cut_direct" (formula "39") (term "1"))
                                             (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(a_0) TRUE"
                                                (rule "concrete_or_3" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "39"))
                                                (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                                                (rule "mul_literals" (formula "25") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1"))
                                                (rule "mul_literals" (formula "25") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "40"))
                                                (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                                                (rule "mul_literals" (formula "29") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                                                (rule "polySimp_mulComm0" (formula "29") (term "1"))
                                                (rule "polySimp_rightDist" (formula "29") (term "1"))
                                                (rule "mul_literals" (formula "29") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "41"))
                                                (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                                (rule "mul_literals" (formula "6") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                                (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                                (rule "polySimp_rightDist" (formula "6") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                                (rule "mul_literals" (formula "6") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "42"))
                                                (rule "mul_literals" (formula "10") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                                (rule "mul_literals" (formula "10") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "1") (term "0"))
                                                (rule "concrete_or_1" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "42"))
                                                (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1"))
                                                (rule "mul_literals" (formula "12") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "43"))
                                                (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                (rule "mul_literals" (formula "38") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                (rule "cut_direct" (formula "34") (term "1"))
                                                (branch "CUT: i_3 >= 0 TRUE"
                                                   (rule "concrete_or_3" (formula "35"))
                                                   (rule "true_left" (formula "35"))
                                                   (rule "cut_direct" (formula "33") (term "0"))
                                                   (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                      (rule "concrete_or_1" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "cut_direct" (formula "35") (term "1"))
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                         (rule "concrete_or_3" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "44"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                                                         (rule "mul_literals" (formula "35") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1"))
                                                         (rule "mul_literals" (formula "35") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                                         (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "21") (term "1"))
                                                         (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "62"))
                                                         (rule "concrete_or_4" (formula "21"))
                                                         (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "54"))
                                                         (rule "concrete_or_2" (formula "21"))
                                                         (rule "applyEq" (formula "43") (term "0,0,2,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "14") (term "0,0,2,1,1,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "62") (term "0,0,2,1") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "38") (term "1") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "17") (term "0,0,2,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "62") (term "0,2,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "30") (term "1") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "54") (term "0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "3") (term "0") (ifseqformula "48"))
                                                         (rule "qeq_literals" (formula "3"))
                                                         (rule "true_left" (formula "3"))
                                                         (rule "applyEq" (formula "16") (term "0") (ifseqformula "47"))
                                                         (rule "inEqSimp_commuteLeq" (formula "16"))
                                                         (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "46"))
                                                         (rule "applyEq" (formula "60") (term "0") (ifseqformula "22"))
                                                         (rule "eqSymm" (formula "60"))
                                                         (rule "close" (formula "60") (ifseqformula "46"))
                                                      )
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                         (rule "concrete_or_4" (formula "35"))
                                                         (rule "notLeft" (formula "35"))
                                                         (rule "inEqSimp_geqRight" (formula "52"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                                                         (rule "mul_literals" (formula "39") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "39") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "39"))
                                                         (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "39") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                                                         (rule "mul_literals" (formula "33") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                                                         (rule "polySimp_mulComm0" (formula "33") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "33") (term "1"))
                                                         (rule "mul_literals" (formula "33") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                                                         (rule "mul_literals" (formula "11") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                                         (rule "mul_literals" (formula "11") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "11"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                         (rule "concrete_or_1" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                                         (rule "mul_literals" (formula "7") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                                         (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "7") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                                         (rule "mul_literals" (formula "7") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                                                         (rule "mul_literals" (formula "31") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                                         (rule "polySimp_mulComm0" (formula "31") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "31") (term "1"))
                                                         (rule "mul_literals" (formula "31") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                                         (rule "mul_literals" (formula "16") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "16") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                                                         (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "16") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "43"))
                                                         (rule "mul_literals" (formula "41") (term "0,0"))
                                                         (rule "add_zero_left" (formula "41") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                                         (rule "mul_literals" (formula "41") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "16"))
                                                         (rule "mul_literals" (formula "14") (term "0,0"))
                                                         (rule "add_zero_left" (formula "14") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                         (rule "mul_literals" (formula "14") (term "1"))
                                                         (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "25") (term "1"))
                                                         (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "59"))
                                                         (rule "concrete_or_2" (formula "25") (term "0"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "67"))
                                                         (rule "concrete_or_4" (formula "25"))
                                                         (rule "applyEq" (formula "18") (term "0,0,2,1,1,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "21") (term "0,0,2,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "35") (term "1") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "67") (term "0,2,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "47") (term "0,0,2,0") (ifseqformula "25"))
                                                         (rule "close" (formula "58") (ifseqformula "47"))
                                                      )
                                                   )
                                                   (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                      (rule "concrete_or_2" (formula "33"))
                                                      (rule "notLeft" (formula "33"))
                                                      (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "51"))
                                                      (rule "concrete_not_2" (formula "34") (term "0"))
                                                      (rule "concrete_or_1" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "21") (term "1"))
                                                      (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "61"))
                                                      (rule "concrete_or_4" (formula "21"))
                                                      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "53"))
                                                      (rule "concrete_or_2" (formula "21"))
                                                      (rule "applyEq" (formula "61") (term "0,2,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "30") (term "1") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "17") (term "0,0,2,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "35") (term "1") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "14") (term "0,0,2,1,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "40") (term "0,0,2,0") (ifseqformula "21"))
                                                      (rule "close" (formula "51") (ifseqformula "40"))
                                                   )
                                                )
                                                (branch "CUT: i_3 >= 0 FALSE"
                                                   (rule "concrete_or_4" (formula "34"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "51"))
                                                   (rule "concrete_not_2" (formula "33") (term "1"))
                                                   (rule "concrete_or_3" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "50"))
                                                   (rule "concrete_not_2" (formula "33") (term "0"))
                                                   (rule "concrete_or_1" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "inEqSimp_geqRight" (formula "50"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "22") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                   (rule "eqSymm" (formula "22") (term "1"))
                                                   (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "60"))
                                                   (rule "concrete_or_4" (formula "22"))
                                                   (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "52"))
                                                   (rule "concrete_or_2" (formula "22"))
                                                   (rule "applyEq" (formula "40") (term "0,0,2,0") (ifseqformula "22"))
                                                   (rule "close" (formula "51") (ifseqformula "40"))
                                                )
                                             )
                                             (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(a_0) FALSE"
                                                (rule "concrete_or_4" (formula "39"))
                                                (rule "inEqSimp_leqRight" (formula "47"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "cut_direct" (formula "31") (term "1"))
                                                (branch "CUT: i_3 >= 0 TRUE"
                                                   (rule "concrete_or_3" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "cut_direct" (formula "30") (term "0"))
                                                   (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                      (rule "concrete_or_1" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "cut_direct" (formula "32") (term "1"))
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                         (rule "concrete_or_3" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "allLeft" (formula "20") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "20") (term "1"))
                                                         (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "49"))
                                                         (rule "concrete_or_2" (formula "20") (term "0"))
                                                         (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "57"))
                                                         (rule "concrete_or_4" (formula "20"))
                                                         (rule "applyEq" (formula "34") (term "1") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "13") (term "0,0,2,1,1,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "28") (term "1") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "38") (term "0,0,2,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "5") (term "0,0,2,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "49") (term "0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "16") (term "0,0,2,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "57") (term "0,2,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "57") (term "0,0,2,1") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "57") (term "0") (ifseqformula "23"))
                                                         (rule "eqSymm" (formula "57"))
                                                         (rule "close" (formula "57") (ifseqformula "43"))
                                                      )
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                         (rule "concrete_or_4" (formula "32"))
                                                         (rule "notLeft" (formula "32"))
                                                         (rule "inEqSimp_geqRight" (formula "48"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                                                         (rule "mul_literals" (formula "11") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                                         (rule "mul_literals" (formula "11") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "11"))
                                                         (rule "leq_literals" (formula "33") (term "0"))
                                                         (rule "concrete_or_1" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                                         (rule "mul_literals" (formula "8") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                                         (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "8") (term "1"))
                                                         (rule "mul_literals" (formula "8") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                                         (rule "mul_literals" (formula "15") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "15") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "15"))
                                                         (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "15") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                                                         (rule "mul_literals" (formula "30") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                                                         (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "30") (term "1"))
                                                         (rule "mul_literals" (formula "30") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                                                         (rule "mul_literals" (formula "34") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                                         (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "34") (term "1"))
                                                         (rule "mul_literals" (formula "34") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                                                         (rule "mul_literals" (formula "39") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "39") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "39"))
                                                         (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "39") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                                         (rule "mul_literals" (formula "4") (term "0,0"))
                                                         (rule "add_zero_left" (formula "4") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                         (rule "mul_literals" (formula "4") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "40"))
                                                         (rule "mul_literals" (formula "39") (term "0,0"))
                                                         (rule "add_zero_left" (formula "39") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                         (rule "mul_literals" (formula "39") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "16"))
                                                         (rule "mul_literals" (formula "15") (term "0,0"))
                                                         (rule "add_zero_left" (formula "15") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                         (rule "mul_literals" (formula "15") (term "1"))
                                                         (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "25") (term "1"))
                                                         (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "56"))
                                                         (rule "concrete_or_2" (formula "25") (term "0"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "64"))
                                                         (rule "concrete_or_4" (formula "25"))
                                                         (rule "applyEq" (formula "44") (term "0,0,2,0") (ifseqformula "25"))
                                                         (rule "close" (formula "55") (ifseqformula "44"))
                                                      )
                                                   )
                                                   (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                      (rule "concrete_or_2" (formula "30"))
                                                      (rule "notLeft" (formula "30"))
                                                      (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "47"))
                                                      (rule "concrete_not_2" (formula "31") (term "0"))
                                                      (rule "concrete_or_1" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "allLeft" (formula "20") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "20") (term "1"))
                                                      (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "57"))
                                                      (rule "concrete_or_4" (formula "20"))
                                                      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "49"))
                                                      (rule "concrete_or_2" (formula "20"))
                                                      (rule "applyEq" (formula "28") (term "1") (ifseqformula "20"))
                                                      (rule "applyEq" (formula "36") (term "0,0,2,0") (ifseqformula "20"))
                                                      (rule "close" (formula "47") (ifseqformula "36"))
                                                   )
                                                )
                                                (branch "CUT: i_3 >= 0 FALSE"
                                                   (rule "concrete_or_4" (formula "31"))
                                                   (rule "notLeft" (formula "31"))
                                                   (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "47"))
                                                   (rule "concrete_not_2" (formula "30") (term "1"))
                                                   (rule "concrete_or_3" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "replace_known_right" (formula "30") (term "0,0") (ifseqformula "46"))
                                                   (rule "concrete_not_2" (formula "30") (term "0"))
                                                   (rule "concrete_or_1" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "inEqSimp_geqRight" (formula "46"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                   (rule "eqSymm" (formula "21") (term "1"))
                                                   (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "48"))
                                                   (rule "concrete_or_2" (formula "21") (term "0"))
                                                   (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "56"))
                                                   (rule "concrete_or_4" (formula "21"))
                                                   (rule "applyEq" (formula "17") (term "0,0,2,0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "29") (term "1") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "48") (term "0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "56") (term "0,0,2,1") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "32") (term "1") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "36") (term "0,0,2,0") (ifseqformula "21"))
                                                   (rule "close" (formula "47") (ifseqformula "36"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: (int)self.auctionOwner <= -1 FALSE"
                                          (rule "concrete_or_4" (formula "37") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "46"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "cut_direct" (formula "38") (term "1"))
                                          (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner TRUE"
                                             (rule "concrete_or_3" (formula "39"))
                                             (rule "true_left" (formula "39"))
                                             (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "38"))
                                             (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                                             (rule "mul_literals" (formula "25") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                             (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                             (rule "polySimp_rightDist" (formula "25") (term "1"))
                                             (rule "mul_literals" (formula "25") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "39"))
                                             (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1"))
                                             (rule "mul_literals" (formula "11") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "40"))
                                             (rule "polySimp_rightDist" (formula "30") (term "0,0"))
                                             (rule "mul_literals" (formula "30") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                                             (rule "polySimp_mulComm0" (formula "30") (term "1"))
                                             (rule "polySimp_rightDist" (formula "30") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                                             (rule "mul_literals" (formula "30") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "41"))
                                             (rule "mul_literals" (formula "9") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                             (rule "mul_literals" (formula "9") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "1") (term "0"))
                                             (rule "concrete_or_1" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "41"))
                                             (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "42"))
                                             (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                             (rule "mul_literals" (formula "38") (term "0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                             (rule "polySimp_rightDist" (formula "38") (term "1"))
                                             (rule "mul_literals" (formula "38") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                             (rule "cut_direct" (formula "44") (term "1,0"))
                                             (branch "CUT: (int)(a_0) <= -1 TRUE"
                                                (rule "concrete_or_3" (formula "45") (term "0"))
                                                (rule "concrete_or_1" (formula "45"))
                                                (rule "true_left" (formula "45"))
                                                (rule "cut_direct" (formula "34") (term "1"))
                                                (branch "CUT: i_3 >= 0 TRUE"
                                                   (rule "concrete_or_3" (formula "35"))
                                                   (rule "true_left" (formula "35"))
                                                   (rule "cut_direct" (formula "33") (term "0"))
                                                   (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                      (rule "concrete_or_1" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "cut_direct" (formula "35") (term "1"))
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                         (rule "concrete_or_3" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "43"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                                                         (rule "mul_literals" (formula "35") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                                                         (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "1"))
                                                         (rule "mul_literals" (formula "35") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                                         (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "21") (term "1"))
                                                         (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "54"))
                                                         (rule "concrete_or_2" (formula "21") (term "0"))
                                                         (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "62"))
                                                         (rule "concrete_or_4" (formula "21"))
                                                         (rule "applyEq" (formula "62") (term "0,0,2,1") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "30") (term "1") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "14") (term "0,0,2,1,1,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "38") (term "1") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "17") (term "0,0,2,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "54") (term "0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "43") (term "0,0,2,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "62") (term "0,2,0") (ifseqformula "21"))
                                                         (rule "applyEq" (formula "3") (term "0") (ifseqformula "48"))
                                                         (rule "qeq_literals" (formula "3"))
                                                         (rule "true_left" (formula "3"))
                                                         (rule "applyEq" (formula "16") (term "0") (ifseqformula "47"))
                                                         (rule "inEqSimp_commuteLeq" (formula "16"))
                                                         (rule "applyEq" (formula "60") (term "0") (ifseqformula "22"))
                                                         (rule "eqSymm" (formula "60"))
                                                         (rule "close" (formula "60") (ifseqformula "46"))
                                                      )
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                         (rule "concrete_or_4" (formula "35"))
                                                         (rule "notLeft" (formula "35"))
                                                         (rule "inEqSimp_geqRight" (formula "52"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                                                         (rule "mul_literals" (formula "29") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                                                         (rule "polySimp_mulComm0" (formula "29") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "29") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                                                         (rule "mul_literals" (formula "29") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                                                         (rule "mul_literals" (formula "34") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                                         (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "34") (term "1"))
                                                         (rule "mul_literals" (formula "34") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                                                         (rule "mul_literals" (formula "41") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "41") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "41"))
                                                         (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "41") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "14") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                                         (rule "mul_literals" (formula "7") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                                         (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "7") (term "1"))
                                                         (rule "mul_literals" (formula "7") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                                                         (rule "mul_literals" (formula "12") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                         (rule "mul_literals" (formula "12") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "12"))
                                                         (rule "leq_literals" (formula "40") (term "0"))
                                                         (rule "concrete_or_1" (formula "40"))
                                                         (rule "true_left" (formula "40"))
                                                         (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "43"))
                                                         (rule "mul_literals" (formula "41") (term "0,0"))
                                                         (rule "add_zero_left" (formula "41") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                                         (rule "mul_literals" (formula "41") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "16"))
                                                         (rule "mul_literals" (formula "14") (term "0,0"))
                                                         (rule "add_zero_left" (formula "14") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                         (rule "mul_literals" (formula "14") (term "1"))
                                                         (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "25") (term "1"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "67"))
                                                         (rule "concrete_or_4" (formula "25"))
                                                         (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "59"))
                                                         (rule "concrete_or_2" (formula "25"))
                                                         (rule "applyEq" (formula "4") (term "0,0,2,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "41") (term "1") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "67") (term "0,2,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "59") (term "0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "47") (term "0,0,2,0") (ifseqformula "25"))
                                                         (rule "close" (formula "58") (ifseqformula "47"))
                                                      )
                                                   )
                                                   (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                      (rule "concrete_or_2" (formula "33"))
                                                      (rule "notLeft" (formula "33"))
                                                      (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "51"))
                                                      (rule "concrete_not_2" (formula "34") (term "0"))
                                                      (rule "concrete_or_1" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "21") (term "1"))
                                                      (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "53"))
                                                      (rule "concrete_or_2" (formula "21") (term "0"))
                                                      (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "61"))
                                                      (rule "concrete_or_4" (formula "21"))
                                                      (rule "applyEq" (formula "17") (term "0,0,2,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "61") (term "0,0,2,1") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "40") (term "0,0,2,0") (ifseqformula "21"))
                                                      (rule "close" (formula "51") (ifseqformula "40"))
                                                   )
                                                )
                                                (branch "CUT: i_3 >= 0 FALSE"
                                                   (rule "concrete_or_4" (formula "34"))
                                                   (rule "notLeft" (formula "34"))
                                                   (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "51"))
                                                   (rule "concrete_not_2" (formula "33") (term "1"))
                                                   (rule "concrete_or_3" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "50"))
                                                   (rule "concrete_not_2" (formula "33") (term "0"))
                                                   (rule "concrete_or_1" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "inEqSimp_geqRight" (formula "50"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "22") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                   (rule "eqSymm" (formula "22") (term "1"))
                                                   (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "52"))
                                                   (rule "concrete_or_2" (formula "22") (term "0"))
                                                   (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "60"))
                                                   (rule "concrete_or_4" (formula "22"))
                                                   (rule "applyEq" (formula "35") (term "1") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "15") (term "0,0,2,1,1,0") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "40") (term "0,0,2,0") (ifseqformula "22"))
                                                   (rule "close" (formula "51") (ifseqformula "40"))
                                                )
                                             )
                                             (branch "CUT: (int)(a_0) <= -1 FALSE"
                                                (rule "concrete_or_4" (formula "44") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "52"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "cut_direct" (formula "45") (term "1"))
                                                (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(a_0) TRUE"
                                                   (rule "concrete_or_3" (formula "46"))
                                                   (rule "true_left" (formula "46"))
                                                   (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "45"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                                                   (rule "mul_literals" (formula "33") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "46"))
                                                   (rule "mul_literals" (formula "11") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                                   (rule "mul_literals" (formula "11") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "1") (term "0"))
                                                   (rule "concrete_or_1" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "46"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                                                   (rule "mul_literals" (formula "29") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1"))
                                                   (rule "mul_literals" (formula "29") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "47"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                                   (rule "mul_literals" (formula "6") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "6") (term "1"))
                                                   (rule "mul_literals" (formula "6") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "48"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1"))
                                                   (rule "mul_literals" (formula "43") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "49"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                                   (rule "mul_literals" (formula "15") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                                   (rule "cut_direct" (formula "39") (term "1"))
                                                   (branch "CUT: i_3 >= 0 TRUE"
                                                      (rule "concrete_or_3" (formula "40"))
                                                      (rule "true_left" (formula "40"))
                                                      (rule "cut_direct" (formula "38") (term "0"))
                                                      (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                         (rule "concrete_or_1" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "cut_direct" (formula "40") (term "1"))
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                            (rule "concrete_or_3" (formula "41"))
                                                            (rule "true_left" (formula "41"))
                                                            (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "50"))
                                                            (rule "polySimp_rightDist" (formula "40") (term "0,0"))
                                                            (rule "mul_literals" (formula "40") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                                                            (rule "polySimp_mulComm0" (formula "40") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "40") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "40") (term "1,1"))
                                                            (rule "mul_literals" (formula "40") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "40") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "50"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                                                            (rule "mul_literals" (formula "41") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                                            (rule "polySimp_mulComm0" (formula "41") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "41") (term "1"))
                                                            (rule "mul_literals" (formula "41") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "41") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "41") (term "1,1"))
                                                            (rule "allLeft" (formula "24") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                            (rule "eqSymm" (formula "24") (term "1"))
                                                            (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "61"))
                                                            (rule "concrete_or_2" (formula "24") (term "0"))
                                                            (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "69"))
                                                            (rule "concrete_or_4" (formula "24"))
                                                            (rule "applyEq" (formula "17") (term "0,0,2,1,1,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "61") (term "0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "50") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "69") (term "0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "34") (term "1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "69") (term "0,0,2,1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "44") (term "1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "55"))
                                                            (rule "applyEq" (formula "3") (term "0") (ifseqformula "55"))
                                                            (rule "qeq_literals" (formula "3"))
                                                            (rule "true_left" (formula "3"))
                                                            (rule "applyEq" (formula "19") (term "0") (ifseqformula "54"))
                                                            (rule "inEqSimp_commuteLeq" (formula "19"))
                                                            (rule "applyEq" (formula "67") (term "0") (ifseqformula "25"))
                                                            (rule "eqSymm" (formula "67"))
                                                            (rule "close" (formula "67") (ifseqformula "53"))
                                                         )
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                            (rule "concrete_or_4" (formula "40"))
                                                            (rule "notLeft" (formula "40"))
                                                            (rule "inEqSimp_geqRight" (formula "58"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                            (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                            (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                            (rule "mul_literals" (formula "38") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                                                            (rule "mul_literals" (formula "17") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "17") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                                            (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "17") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "47") (term "0,0"))
                                                            (rule "mul_literals" (formula "47") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "47") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "47"))
                                                            (rule "polySimp_mulLiterals" (formula "47") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "47") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
                                                            (rule "mul_literals" (formula "13") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                                            (rule "mul_literals" (formula "13") (term "1"))
                                                            (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "13"))
                                                            (rule "leq_literals" (formula "43") (term "0"))
                                                            (rule "concrete_or_1" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                                                            (rule "mul_literals" (formula "35") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                                                            (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "35") (term "1"))
                                                            (rule "mul_literals" (formula "35") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                                            (rule "mul_literals" (formula "8") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                                            (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "8") (term "1"))
                                                            (rule "mul_literals" (formula "8") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "46") (ifseqformula "49"))
                                                            (rule "mul_literals" (formula "46") (term "0,0"))
                                                            (rule "add_zero_left" (formula "46") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "46"))
                                                            (rule "mul_literals" (formula "46") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "19"))
                                                            (rule "mul_literals" (formula "16") (term "0,0"))
                                                            (rule "add_zero_left" (formula "16") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                                            (rule "mul_literals" (formula "16") (term "1"))
                                                            (rule "allLeft" (formula "28") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                            (rule "eqSymm" (formula "28") (term "1"))
                                                            (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "65"))
                                                            (rule "concrete_or_2" (formula "28") (term "0"))
                                                            (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "73"))
                                                            (rule "concrete_or_4" (formula "28"))
                                                            (rule "applyEq" (formula "65") (term "0") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "21") (term "0,0,2,1,1,0") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "24") (term "0,0,2,0") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "73") (term "0,2,0") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "4") (term "0,0,2,0") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "39") (term "1") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "73") (term "0,0,2,1") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "46") (term "1") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "53") (term "0,0,2,0") (ifseqformula "28"))
                                                            (rule "close" (formula "64") (ifseqformula "53"))
                                                         )
                                                      )
                                                      (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                         (rule "concrete_or_2" (formula "38"))
                                                         (rule "notLeft" (formula "38"))
                                                         (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "57"))
                                                         (rule "concrete_not_2" (formula "39") (term "0"))
                                                         (rule "concrete_or_1" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "24") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "24") (term "1"))
                                                         (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "59"))
                                                         (rule "concrete_or_2" (formula "24") (term "0"))
                                                         (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "67"))
                                                         (rule "concrete_or_4" (formula "24"))
                                                         (rule "applyEq" (formula "59") (term "0") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "34") (term "1") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "46") (term "0,0,2,0") (ifseqformula "24"))
                                                         (rule "close" (formula "57") (ifseqformula "46"))
                                                      )
                                                   )
                                                   (branch "CUT: i_3 >= 0 FALSE"
                                                      (rule "concrete_or_4" (formula "39"))
                                                      (rule "notLeft" (formula "39"))
                                                      (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "57"))
                                                      (rule "concrete_not_2" (formula "39") (term "0"))
                                                      (rule "concrete_or_1" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "replace_known_right" (formula "38") (term "0,1") (ifseqformula "56"))
                                                      (rule "concrete_not_2" (formula "38") (term "1"))
                                                      (rule "concrete_or_3" (formula "38"))
                                                      (rule "true_left" (formula "38"))
                                                      (rule "inEqSimp_geqRight" (formula "56"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "25") (term "1"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "66"))
                                                      (rule "concrete_or_4" (formula "25"))
                                                      (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "58"))
                                                      (rule "concrete_or_2" (formula "25"))
                                                      (rule "applyEq" (formula "18") (term "0,0,2,1,1,0") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "66") (term "0,2,0") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "58") (term "0") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "4") (term "0,0,2,0") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "46") (term "0,0,2,0") (ifseqformula "25"))
                                                      (rule "close" (formula "57") (ifseqformula "46"))
                                                   )
                                                )
                                                (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(a_0) FALSE"
                                                   (rule "concrete_or_4" (formula "45"))
                                                   (rule "inEqSimp_leqRight" (formula "53"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "mul_literals" (formula "1") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "45"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                   (rule "mul_literals" (formula "1") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                   (rule "cut_direct" (formula "37") (term "1"))
                                                   (branch "CUT: i_3 >= 0 TRUE"
                                                      (rule "concrete_or_3" (formula "38"))
                                                      (rule "true_left" (formula "38"))
                                                      (rule "cut_direct" (formula "36") (term "0"))
                                                      (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                         (rule "concrete_or_1" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "cut_direct" (formula "38") (term "1"))
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                            (rule "concrete_or_3" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "46"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                            (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                            (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                            (rule "mul_literals" (formula "38") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                            (rule "allLeft" (formula "24") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                            (rule "eqSymm" (formula "24") (term "1"))
                                                            (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "57"))
                                                            (rule "concrete_or_2" (formula "24") (term "0"))
                                                            (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "65"))
                                                            (rule "concrete_or_4" (formula "24"))
                                                            (rule "applyEq" (formula "65") (term "0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "65") (term "0,0,2,1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "57") (term "0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "33") (term "1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "17") (term "0,0,2,1,1,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "41") (term "1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "46") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "65") (term "0") (ifseqformula "27"))
                                                            (rule "eqSymm" (formula "65"))
                                                            (rule "close" (formula "65") (ifseqformula "51"))
                                                         )
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                            (rule "concrete_or_4" (formula "38"))
                                                            (rule "notLeft" (formula "38"))
                                                            (rule "inEqSimp_geqRight" (formula "55"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                                                            (rule "mul_literals" (formula "14") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                            (rule "mul_literals" (formula "14") (term "1"))
                                                            (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "14"))
                                                            (rule "leq_literals" (formula "39") (term "0"))
                                                            (rule "concrete_or_1" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                                                            (rule "mul_literals" (formula "18") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "18") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                                                            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "18") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                                            (rule "mul_literals" (formula "43") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "43") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "43"))
                                                            (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "43") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                            (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                                            (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "10") (term "1"))
                                                            (rule "mul_literals" (formula "10") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                                                            (rule "mul_literals" (formula "39") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                            (rule "polySimp_mulComm0" (formula "39") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "39") (term "1"))
                                                            (rule "mul_literals" (formula "39") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "39") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "39") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                                                            (rule "mul_literals" (formula "35") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                                                            (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "35") (term "1"))
                                                            (rule "mul_literals" (formula "35") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
                                                            (rule "mul_literals" (formula "5") (term "0,0"))
                                                            (rule "add_zero_left" (formula "5") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                                            (rule "mul_literals" (formula "5") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "47"))
                                                            (rule "mul_literals" (formula "45") (term "0,0"))
                                                            (rule "add_zero_left" (formula "45") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                                            (rule "mul_literals" (formula "45") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "20"))
                                                            (rule "mul_literals" (formula "18") (term "0,0"))
                                                            (rule "add_zero_left" (formula "18") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                                            (rule "mul_literals" (formula "18") (term "1"))
                                                            (rule "allLeft" (formula "29") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                            (rule "eqSymm" (formula "29") (term "1"))
                                                            (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "71"))
                                                            (rule "concrete_or_4" (formula "29"))
                                                            (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "63"))
                                                            (rule "concrete_or_2" (formula "29"))
                                                            (rule "applyEq" (formula "8") (term "0,0,2,0") (ifseqformula "29"))
                                                            (rule "applyEq" (formula "22") (term "0,0,2,1,1,0") (ifseqformula "29"))
                                                            (rule "applyEq" (formula "51") (term "0,0,2,0") (ifseqformula "29"))
                                                            (rule "close" (formula "62") (ifseqformula "51"))
                                                         )
                                                      )
                                                      (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                         (rule "concrete_or_2" (formula "36"))
                                                         (rule "notLeft" (formula "36"))
                                                         (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "54"))
                                                         (rule "concrete_not_2" (formula "37") (term "0"))
                                                         (rule "concrete_or_1" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "24") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "24") (term "1"))
                                                         (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "64"))
                                                         (rule "concrete_or_4" (formula "24"))
                                                         (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "56"))
                                                         (rule "concrete_or_2" (formula "24"))
                                                         (rule "applyEq" (formula "43") (term "0,0,2,0") (ifseqformula "24"))
                                                         (rule "close" (formula "54") (ifseqformula "43"))
                                                      )
                                                   )
                                                   (branch "CUT: i_3 >= 0 FALSE"
                                                      (rule "concrete_or_4" (formula "37"))
                                                      (rule "notLeft" (formula "37"))
                                                      (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "54"))
                                                      (rule "concrete_not_2" (formula "37") (term "0"))
                                                      (rule "concrete_or_1" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "replace_known_right" (formula "36") (term "0,1") (ifseqformula "53"))
                                                      (rule "concrete_not_2" (formula "36") (term "1"))
                                                      (rule "concrete_or_3" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "inEqSimp_geqRight" (formula "53"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "25") (term "1"))
                                                      (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "55"))
                                                      (rule "concrete_or_2" (formula "25") (term "0"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "63"))
                                                      (rule "concrete_or_4" (formula "25"))
                                                      (rule "applyEq" (formula "43") (term "0,0,2,0") (ifseqformula "25"))
                                                      (rule "close" (formula "54") (ifseqformula "43"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner FALSE"
                                             (rule "concrete_or_4" (formula "38"))
                                             (rule "inEqSimp_leqRight" (formula "47"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "cut_direct" (formula "40") (term "1,0"))
                                             (branch "CUT: (int)(a_0) <= -1 TRUE"
                                                (rule "concrete_or_3" (formula "41") (term "0"))
                                                (rule "concrete_or_1" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "cut_direct" (formula "31") (term "1"))
                                                (branch "CUT: i_3 >= 0 TRUE"
                                                   (rule "concrete_or_3" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "cut_direct" (formula "30") (term "0"))
                                                   (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                      (rule "concrete_or_1" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "cut_direct" (formula "32") (term "1"))
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                         (rule "concrete_or_3" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "allLeft" (formula "20") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "20") (term "1"))
                                                         (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "57"))
                                                         (rule "concrete_or_4" (formula "20"))
                                                         (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "49"))
                                                         (rule "concrete_or_2" (formula "20"))
                                                         (rule "applyEq" (formula "49") (term "0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "57") (term "0,0,2,1") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "38") (term "0,0,2,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "57") (term "0,2,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "5") (term "0,0,2,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "28") (term "1") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "16") (term "0,0,2,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "34") (term "1") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "13") (term "0,0,2,1,1,0") (ifseqformula "20"))
                                                         (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "43"))
                                                         (rule "applyEq" (formula "16") (term "0") (ifseqformula "43"))
                                                         (rule "inEqSimp_commuteLeq" (formula "16"))
                                                         (rule "applyEq" (formula "56") (term "0") (ifseqformula "22"))
                                                         (rule "eqSymm" (formula "56"))
                                                         (rule "close" (formula "56") (ifseqformula "42"))
                                                      )
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                         (rule "concrete_or_4" (formula "32"))
                                                         (rule "notLeft" (formula "32"))
                                                         (rule "inEqSimp_geqRight" (formula "48"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                                                         (rule "mul_literals" (formula "35") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "35") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "35"))
                                                         (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "35") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                                                         (rule "mul_literals" (formula "11") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                                         (rule "mul_literals" (formula "11") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "11"))
                                                         (rule "leq_literals" (formula "33") (term "0"))
                                                         (rule "concrete_or_1" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                                         (rule "mul_literals" (formula "14") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "14") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                                                         (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "14") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                                                         (rule "mul_literals" (formula "32") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                                                         (rule "polySimp_mulComm0" (formula "32") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "32") (term "1"))
                                                         (rule "mul_literals" (formula "32") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                         (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                         (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                                         (rule "polySimp_mulComm0" (formula "9") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "9") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                                                         (rule "mul_literals" (formula "9") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "1"))
                                                         (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                                                         (rule "mul_literals" (formula "31") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                                         (rule "polySimp_mulComm0" (formula "31") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "31") (term "1"))
                                                         (rule "mul_literals" (formula "31") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "40"))
                                                         (rule "mul_literals" (formula "39") (term "0,0"))
                                                         (rule "add_zero_left" (formula "39") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                         (rule "mul_literals" (formula "39") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "16"))
                                                         (rule "mul_literals" (formula "15") (term "0,0"))
                                                         (rule "add_zero_left" (formula "15") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                         (rule "mul_literals" (formula "15") (term "1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                                         (rule "mul_literals" (formula "4") (term "0,0"))
                                                         (rule "add_zero_left" (formula "4") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                         (rule "mul_literals" (formula "4") (term "1"))
                                                         (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "25") (term "1"))
                                                         (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "56"))
                                                         (rule "concrete_or_2" (formula "25") (term "0"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "64"))
                                                         (rule "concrete_or_4" (formula "25"))
                                                         (rule "applyEq" (formula "21") (term "0,0,2,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "18") (term "0,0,2,1,1,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "64") (term "0,2,0") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "64") (term "0,0,2,1") (ifseqformula "25"))
                                                         (rule "applyEq" (formula "44") (term "0,0,2,0") (ifseqformula "25"))
                                                         (rule "close" (formula "55") (ifseqformula "44"))
                                                      )
                                                   )
                                                   (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                      (rule "concrete_or_2" (formula "30"))
                                                      (rule "notLeft" (formula "30"))
                                                      (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "47"))
                                                      (rule "concrete_not_2" (formula "31") (term "0"))
                                                      (rule "concrete_or_1" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "allLeft" (formula "20") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "20") (term "1"))
                                                      (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "49"))
                                                      (rule "concrete_or_2" (formula "20") (term "0"))
                                                      (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "57"))
                                                      (rule "concrete_or_4" (formula "20"))
                                                      (rule "applyEq" (formula "36") (term "0,0,2,0") (ifseqformula "20"))
                                                      (rule "close" (formula "47") (ifseqformula "36"))
                                                   )
                                                )
                                                (branch "CUT: i_3 >= 0 FALSE"
                                                   (rule "concrete_or_4" (formula "31"))
                                                   (rule "notLeft" (formula "31"))
                                                   (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "47"))
                                                   (rule "concrete_not_2" (formula "31") (term "0"))
                                                   (rule "concrete_or_1" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "46"))
                                                   (rule "concrete_not_2" (formula "30") (term "1"))
                                                   (rule "concrete_or_3" (formula "30"))
                                                   (rule "true_left" (formula "30"))
                                                   (rule "inEqSimp_geqRight" (formula "46"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                   (rule "eqSymm" (formula "21") (term "1"))
                                                   (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "56"))
                                                   (rule "concrete_or_4" (formula "21"))
                                                   (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "48"))
                                                   (rule "concrete_or_2" (formula "21"))
                                                   (rule "applyEq" (formula "14") (term "0,0,2,1,1,0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "48") (term "0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "29") (term "1") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "17") (term "0,0,2,0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "56") (term "0,0,2,1") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "56") (term "0,2,0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "36") (term "0,0,2,0") (ifseqformula "21"))
                                                   (rule "close" (formula "47") (ifseqformula "36"))
                                                )
                                             )
                                             (branch "CUT: (int)(a_0) <= -1 FALSE"
                                                (rule "concrete_or_4" (formula "40") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "48"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "cut_direct" (formula "41") (term "1"))
                                                (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(a_0) TRUE"
                                                   (rule "concrete_or_3" (formula "42"))
                                                   (rule "true_left" (formula "42"))
                                                   (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "41"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "0,0"))
                                                   (rule "mul_literals" (formula "27") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                                                   (rule "polySimp_mulComm0" (formula "27") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "27") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                                                   (rule "mul_literals" (formula "27") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "42"))
                                                   (rule "mul_literals" (formula "11") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                                   (rule "mul_literals" (formula "11") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "1") (term "0"))
                                                   (rule "concrete_or_1" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "42"))
                                                   (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                                   (rule "mul_literals" (formula "7") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                                   (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "7") (term "1"))
                                                   (rule "mul_literals" (formula "7") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "43"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "44"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "33"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1"))
                                                   (rule "mul_literals" (formula "33") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "45"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1"))
                                                   (rule "mul_literals" (formula "15") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "46"))
                                                   (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                                                   (rule "mul_literals" (formula "41") (term "0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                                   (rule "polySimp_mulComm0" (formula "41") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "41") (term "1"))
                                                   (rule "mul_literals" (formula "41") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "41") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "41") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                   (rule "mul_literals" (formula "3") (term "0,0"))
                                                   (rule "add_zero_left" (formula "3") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "mul_literals" (formula "3") (term "1"))
                                                   (rule "cut_direct" (formula "37") (term "1"))
                                                   (branch "CUT: i_3 >= 0 TRUE"
                                                      (rule "concrete_or_3" (formula "38"))
                                                      (rule "true_left" (formula "38"))
                                                      (rule "cut_direct" (formula "36") (term "0"))
                                                      (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                         (rule "concrete_or_1" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "cut_direct" (formula "38") (term "1"))
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                            (rule "concrete_or_3" (formula "39"))
                                                            (rule "true_left" (formula "39"))
                                                            (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "47"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                            (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                            (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                            (rule "mul_literals" (formula "38") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                            (rule "allLeft" (formula "24") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                            (rule "eqSymm" (formula "24") (term "1"))
                                                            (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "57"))
                                                            (rule "concrete_or_2" (formula "24") (term "0"))
                                                            (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "65"))
                                                            (rule "concrete_or_4" (formula "24"))
                                                            (rule "applyEq" (formula "65") (term "0,0,2,1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "33") (term "1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "57") (term "0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "46") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "41") (term "1") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "65") (term "0,2,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "17") (term "0,0,2,1,1,0") (ifseqformula "24"))
                                                            (rule "applyEq" (formula "17") (term "1,1,0") (ifseqformula "51"))
                                                            (rule "applyEq" (formula "6") (term "0") (ifseqformula "51"))
                                                            (rule "qeq_literals" (formula "6"))
                                                            (rule "true_left" (formula "6"))
                                                            (rule "applyEq" (formula "64") (term "0") (ifseqformula "26"))
                                                            (rule "eqSymm" (formula "64"))
                                                            (rule "close" (formula "64") (ifseqformula "50"))
                                                         )
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                            (rule "concrete_or_4" (formula "38"))
                                                            (rule "notLeft" (formula "38"))
                                                            (rule "inEqSimp_geqRight" (formula "55"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                            (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                                            (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "10") (term "1"))
                                                            (rule "mul_literals" (formula "10") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                                                            (rule "mul_literals" (formula "18") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "18") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                                                            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "18") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                            (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                            (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                            (rule "mul_literals" (formula "38") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "45") (term "0,0"))
                                                            (rule "mul_literals" (formula "45") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "45") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "45"))
                                                            (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "45") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                                                            (rule "mul_literals" (formula "34") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                                            (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "34") (term "1"))
                                                            (rule "mul_literals" (formula "34") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                                                            (rule "mul_literals" (formula "15") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                            (rule "mul_literals" (formula "15") (term "1"))
                                                            (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "15"))
                                                            (rule "leq_literals" (formula "43") (term "0"))
                                                            (rule "concrete_or_1" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                            (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                                            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
                                                            (rule "mul_literals" (formula "5") (term "0,0"))
                                                            (rule "add_zero_left" (formula "5") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                                            (rule "mul_literals" (formula "5") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "47"))
                                                            (rule "mul_literals" (formula "45") (term "0,0"))
                                                            (rule "add_zero_left" (formula "45") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                                            (rule "mul_literals" (formula "45") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "20"))
                                                            (rule "mul_literals" (formula "18") (term "0,0"))
                                                            (rule "add_zero_left" (formula "18") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                                            (rule "mul_literals" (formula "18") (term "1"))
                                                            (rule "allLeft" (formula "29") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                            (rule "eqSymm" (formula "29") (term "1"))
                                                            (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "63"))
                                                            (rule "concrete_or_2" (formula "29") (term "0"))
                                                            (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "71"))
                                                            (rule "concrete_or_4" (formula "29"))
                                                            (rule "applyEq" (formula "22") (term "0,0,2,1,1,0") (ifseqformula "29"))
                                                            (rule "applyEq" (formula "63") (term "0") (ifseqformula "29"))
                                                            (rule "applyEq" (formula "51") (term "0,0,2,0") (ifseqformula "29"))
                                                            (rule "close" (formula "62") (ifseqformula "51"))
                                                         )
                                                      )
                                                      (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                         (rule "concrete_or_2" (formula "36"))
                                                         (rule "notLeft" (formula "36"))
                                                         (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "54"))
                                                         (rule "concrete_not_2" (formula "37") (term "0"))
                                                         (rule "concrete_or_1" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "24") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "24") (term "1"))
                                                         (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "64"))
                                                         (rule "concrete_or_4" (formula "24"))
                                                         (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "56"))
                                                         (rule "concrete_or_2" (formula "24"))
                                                         (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "64") (term "0,2,0") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "33") (term "1") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "64") (term "0,0,2,1") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "38") (term "1") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "56") (term "0") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "17") (term "0,0,2,1,1,0") (ifseqformula "24"))
                                                         (rule "applyEq" (formula "43") (term "0,0,2,0") (ifseqformula "24"))
                                                         (rule "close" (formula "54") (ifseqformula "43"))
                                                      )
                                                   )
                                                   (branch "CUT: i_3 >= 0 FALSE"
                                                      (rule "concrete_or_4" (formula "37"))
                                                      (rule "notLeft" (formula "37"))
                                                      (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "54"))
                                                      (rule "concrete_not_2" (formula "37") (term "0"))
                                                      (rule "concrete_or_1" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "replace_known_right" (formula "36") (term "0,1") (ifseqformula "53"))
                                                      (rule "concrete_not_2" (formula "36") (term "1"))
                                                      (rule "concrete_or_3" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "inEqSimp_geqRight" (formula "53"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "25") (term "1"))
                                                      (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "55"))
                                                      (rule "concrete_or_2" (formula "25") (term "0"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "63"))
                                                      (rule "concrete_or_4" (formula "25"))
                                                      (rule "applyEq" (formula "18") (term "0,0,2,1,1,0") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "21") (term "0,0,2,0") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "38") (term "1") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "34") (term "1") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "63") (term "0,0,2,1") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "7") (term "0,0,2,0") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "55") (term "0") (ifseqformula "25"))
                                                      (rule "applyEq" (formula "43") (term "0,0,2,0") (ifseqformula "25"))
                                                      (rule "close" (formula "54") (ifseqformula "43"))
                                                   )
                                                )
                                                (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(a_0) FALSE"
                                                   (rule "concrete_or_4" (formula "41"))
                                                   (rule "inEqSimp_leqRight" (formula "49"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "mul_literals" (formula "1") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                   (rule "cut_direct" (formula "33") (term "1"))
                                                   (branch "CUT: i_3 >= 0 TRUE"
                                                      (rule "concrete_or_3" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "cut_direct" (formula "32") (term "0"))
                                                      (branch "CUT: self.bidders[i_3] = self.auctionOwner TRUE"
                                                         (rule "concrete_or_1" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "cut_direct" (formula "34") (term "1"))
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 TRUE"
                                                            (rule "concrete_or_3" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "allLeft" (formula "22") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                            (rule "eqSymm" (formula "22") (term "1"))
                                                            (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "51"))
                                                            (rule "concrete_or_2" (formula "22") (term "0"))
                                                            (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "59"))
                                                            (rule "concrete_or_4" (formula "22"))
                                                            (rule "applyEq" (formula "40") (term "0,0,2,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "7") (term "0,0,2,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "51") (term "0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "30") (term "1") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "59") (term "0,0,2,1") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "15") (term "0,0,2,1,1,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "59") (term "0,2,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "36") (term "1") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "7") (term "0") (ifseqformula "45"))
                                                            (rule "qeq_literals" (formula "7"))
                                                            (rule "true_left" (formula "7"))
                                                            (rule "applyEq" (formula "17") (term "0") (ifseqformula "44"))
                                                            (rule "inEqSimp_commuteLeq" (formula "17"))
                                                            (rule "applyEq" (formula "57") (term "0") (ifseqformula "23"))
                                                            (rule "eqSymm" (formula "57"))
                                                            (rule "close" (formula "57") (ifseqformula "43"))
                                                         )
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) >= 1 + i_3 FALSE"
                                                            (rule "concrete_or_4" (formula "34"))
                                                            (rule "notLeft" (formula "34"))
                                                            (rule "inEqSimp_geqRight" (formula "50"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "0,0"))
                                                            (rule "mul_literals" (formula "29") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                                                            (rule "polySimp_mulComm0" (formula "29") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "29") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "29") (term "1,1"))
                                                            (rule "mul_literals" (formula "29") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "29") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                            (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "38") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "38"))
                                                            (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "38") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                            (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                                                            (rule "mul_literals" (formula "14") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                            (rule "mul_literals" (formula "14") (term "1"))
                                                            (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "14"))
                                                            (rule "leq_literals" (formula "37") (term "0"))
                                                            (rule "concrete_or_1" (formula "37"))
                                                            (rule "true_left" (formula "37"))
                                                            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "17") (term "0,0"))
                                                            (rule "mul_literals" (formula "17") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "17") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "17"))
                                                            (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "17") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                                                            (rule "mul_literals" (formula "36") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                                                            (rule "polySimp_mulComm0" (formula "36") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "36") (term "1"))
                                                            (rule "mul_literals" (formula "36") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "36") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "36") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                                                            (rule "mul_literals" (formula "11") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                                            (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "11") (term "1"))
                                                            (rule "mul_literals" (formula "11") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                                                            (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                                            (rule "mul_literals" (formula "5") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                                            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "5") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "19"))
                                                            (rule "mul_literals" (formula "18") (term "0,0"))
                                                            (rule "add_zero_left" (formula "18") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                                            (rule "mul_literals" (formula "18") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "5"))
                                                            (rule "mul_literals" (formula "7") (term "0,0"))
                                                            (rule "add_zero_left" (formula "7") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                                            (rule "mul_literals" (formula "7") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "43"))
                                                            (rule "mul_literals" (formula "42") (term "0,0"))
                                                            (rule "add_zero_left" (formula "42") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "42"))
                                                            (rule "mul_literals" (formula "42") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                                            (rule "mul_literals" (formula "4") (term "0,0"))
                                                            (rule "add_zero_left" (formula "4") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                            (rule "mul_literals" (formula "4") (term "1"))
                                                            (rule "allLeft" (formula "28") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                            (rule "eqSymm" (formula "28") (term "1"))
                                                            (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "59"))
                                                            (rule "concrete_or_2" (formula "28") (term "0"))
                                                            (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "67"))
                                                            (rule "concrete_or_4" (formula "28"))
                                                            (rule "applyEq" (formula "37") (term "1") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "67") (term "0,2,0") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "28"))
                                                            (rule "applyEq" (formula "47") (term "0,0,2,0") (ifseqformula "28"))
                                                            (rule "close" (formula "58") (ifseqformula "47"))
                                                         )
                                                      )
                                                      (branch "CUT: self.bidders[i_3] = self.auctionOwner FALSE"
                                                         (rule "concrete_or_2" (formula "32"))
                                                         (rule "notLeft" (formula "32"))
                                                         (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "49"))
                                                         (rule "concrete_not_2" (formula "33") (term "0"))
                                                         (rule "concrete_or_1" (formula "33"))
                                                         (rule "true_left" (formula "33"))
                                                         (rule "allLeft" (formula "22") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                         (rule "eqSymm" (formula "22") (term "1"))
                                                         (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "51"))
                                                         (rule "concrete_or_2" (formula "22") (term "0"))
                                                         (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "59"))
                                                         (rule "concrete_or_4" (formula "22"))
                                                         (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "22"))
                                                         (rule "applyEq" (formula "59") (term "0,0,2,1") (ifseqformula "22"))
                                                         (rule "applyEq" (formula "7") (term "0,0,2,0") (ifseqformula "22"))
                                                         (rule "applyEq" (formula "59") (term "0,2,0") (ifseqformula "22"))
                                                         (rule "applyEq" (formula "38") (term "0,0,2,0") (ifseqformula "22"))
                                                         (rule "close" (formula "49") (ifseqformula "38"))
                                                      )
                                                   )
                                                   (branch "CUT: i_3 >= 0 FALSE"
                                                      (rule "concrete_or_4" (formula "33"))
                                                      (rule "notLeft" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "49"))
                                                      (rule "concrete_not_2" (formula "33") (term "0"))
                                                      (rule "concrete_or_1" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "0,1") (ifseqformula "48"))
                                                      (rule "concrete_not_2" (formula "32") (term "1"))
                                                      (rule "concrete_or_3" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "inEqSimp_geqRight" (formula "48"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                                      (rule "eqSymm" (formula "23") (term "1"))
                                                      (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "50"))
                                                      (rule "concrete_or_2" (formula "23") (term "0"))
                                                      (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "58"))
                                                      (rule "concrete_or_4" (formula "23"))
                                                      (rule "applyEq" (formula "50") (term "0") (ifseqformula "23"))
                                                      (rule "applyEq" (formula "58") (term "0,0,2,1") (ifseqformula "23"))
                                                      (rule "applyEq" (formula "31") (term "1") (ifseqformula "23"))
                                                      (rule "applyEq" (formula "16") (term "0,0,2,1,1,0") (ifseqformula "23"))
                                                      (rule "applyEq" (formula "19") (term "0,0,2,0") (ifseqformula "23"))
                                                      (rule "applyEq" (formula "34") (term "1") (ifseqformula "23"))
                                                      (rule "applyEq" (formula "58") (term "0,2,0") (ifseqformula "23"))
                                                      (rule "applyEq" (formula "38") (term "0,0,2,0") (ifseqformula "23"))
                                                      (rule "close" (formula "49") (ifseqformula "38"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "hb_0 = a_0 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "all_pull_out1" (formula "11") (term "0,1,1,0"))
                                       (rule "ex_pull_out3" (formula "11") (term "1,0"))
                                       (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1"))
                                       (rule "allLeft" (formula "21") (inst "t=i_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                       (rule "applyEq" (formula "21") (term "0,0,2,0,0,0") (ifseqformula "6"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "21") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "21") (term "1,0"))
                                       (rule "concrete_or_4" (formula "21") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "5"))
                                       (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "21") (term "0,0,1"))
                                       (rule "leq_literals" (formula "21") (term "0,1"))
                                       (rule "concrete_and_2" (formula "21") (term "1"))
                                       (rule "concrete_or_4" (formula "21"))
                                       (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                       (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "25") (term "0,0"))
                                       (rule "add_zero_left" (formula "25") (term "0"))
                                       (rule "allLeft" (formula "26") (inst "t=a_0"))
                                       (rule "allLeft" (formula "22") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                       (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "22") (term "0,0,1"))
                                       (rule "leq_literals" (formula "22") (term "0,1"))
                                       (rule "concrete_and_2" (formula "22") (term "1"))
                                       (rule "concrete_or_4" (formula "22"))
                                       (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "22") (term "0,1"))
                                       (rule "concrete_and_2" (formula "22") (term "1"))
                                       (rule "concrete_or_4" (formula "22"))
                                       (rule "all_pull_out3" (formula "12") (term "0,1,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "1,0,0,1,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,1,0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0,1,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0,0,1,0"))
                                       (rule "commute_or" (formula "12") (term "1,0,0,0,1,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0,0,1,0"))
                                       (rule "commute_and" (formula "1") (term "0,0,0"))
                                       (rule "ex_pull_out3" (formula "12") (term "0"))
                                       (rule "all_pull_out3" (formula "12") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                                       (rule "eq_or_2" (formula "12") (term "0,0,1,0,0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "1,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,1,0,0,0,0"))
                                       (rule "eq_or" (formula "12") (term "0,0,1,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0,0,0,0"))
                                       (rule "eq_or_2" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "commute_and_2" (formula "1") (term "0,0"))
                                       (rule "allLeft" (formula "11") (inst "t=j_0"))
                                       (rule "replaceKnownSelect_taclet11000020000_37" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet11000020000_39" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownSelect_taclet11000020000_44" (formula "11") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet111000020000_50" (formula "11") (term "0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                                       (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
                                       (rule "add_literals" (formula "11") (term "1,0,1"))
                                       (rule "times_zero_1" (formula "11") (term "0,1"))
                                       (rule "qeq_literals" (formula "11") (term "1"))
                                       (rule "concrete_or_3" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "11") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet11000020000_40" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet11000020000_42" (formula "11") (term "0,0,2,0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0,1") (ifseqformula "6"))
                                       (rule "replaceKnownSelect_taclet11000020000_48" (formula "11") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1111000020000_52" (formula "11") (term "0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "3"))
                                       (rule "concrete_or_3" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "20") (inst "t=a_0"))
                                       (rule "exLeft" (formula "20") (inst "sk=i_1"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "eqSymm" (formula "20") (term "0"))
                                       (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "24"))
                                       (rule "concrete_not_1" (formula "20") (term "1"))
                                       (rule "concrete_or_4" (formula "20"))
                                       (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "24"))
                                       (rule "concrete_not_1" (formula "22") (term "0"))
                                       (rule "concrete_or_2" (formula "22"))
                                       (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "24"))
                                       (rule "concrete_not_1" (formula "21") (term "0"))
                                       (rule "concrete_or_2" (formula "21"))
                                       (rule "inEqSimp_homoInEq0" (formula "22"))
                                       (rule "polySimp_addComm1" (formula "22") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                       (rule "polySimp_rightDist" (formula "22") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                       (rule "mul_literals" (formula "22") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                       (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                       (rule "exLeft" (formula "23") (inst "sk=i_2"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "andLeft" (formula "23"))
                                       (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "28"))
                                       (rule "concrete_not_1" (formula "24") (term "0"))
                                       (rule "concrete_or_2" (formula "24"))
                                       (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "28"))
                                       (rule "concrete_not_1" (formula "25") (term "0"))
                                       (rule "concrete_or_2" (formula "25"))
                                       (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "28"))
                                       (rule "concrete_not_1" (formula "23") (term "1"))
                                       (rule "concrete_or_4" (formula "23"))
                                       (rule "inEqSimp_homoInEq0" (formula "25"))
                                       (rule "polySimp_addComm1" (formula "25") (term "0"))
                                       (rule "applyEq" (formula "45") (term "0,2,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "28") (term "0,0,2,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "32") (term "0,0,2,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "45") (term "0,0,2,1") (ifseqformula "23"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "37") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,1,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "23"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                       (rule "polySimp_rightDist" (formula "25") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                       (rule "mul_literals" (formula "25") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "14"))
                                       (rule "mul_literals" (formula "32") (term "0,0"))
                                       (rule "add_zero_left" (formula "32") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1"))
                                       (rule "allLeft" (formula "26") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                       (rule "exLeft" (formula "26") (inst "sk=i_3"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "eqSymm" (formula "26") (term "0"))
                                       (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "31"))
                                       (rule "concrete_not_1" (formula "27") (term "0"))
                                       (rule "concrete_or_2" (formula "27"))
                                       (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "31"))
                                       (rule "concrete_not_1" (formula "28") (term "0"))
                                       (rule "concrete_or_2" (formula "28"))
                                       (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "31"))
                                       (rule "concrete_not_1" (formula "26") (term "1"))
                                       (rule "concrete_or_4" (formula "26"))
                                       (rule "inEqSimp_homoInEq0" (formula "28"))
                                       (rule "polySimp_addComm1" (formula "28") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                       (rule "polySimp_rightDist" (formula "28") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                       (rule "mul_literals" (formula "28") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                       (rule "allLeft" (formula "32") (inst "t=i_1"))
                                       (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
                                       (rule "applyEq" (formula "32") (term "0,0,2,0,0,0") (ifseqformula "20"))
                                       (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "30"))
                                       (rule "concrete_or_1" (formula "32") (term "0"))
                                       (rule "concrete_or_1" (formula "32"))
                                       (rule "true_left" (formula "32"))
                                       (rule "allLeft" (formula "11") (inst "t=i_2"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "concrete_or_2" (formula "11") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "26"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_5"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "eqClose" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "11") (term "0,0"))
                                       (rule "castDel" (formula "11") (term "1,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "intCastEqual" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12"))
                                       (rule "pullOutSelect" (formula "11") (term "0,0,2,2,0") (inst "selectSK=arr_6"))
                                       (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "eqSymm" (formula "12") (term "0,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "11") (term "1,0,0,0") (ifseqformula "47"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,2,2,0") (ifseqformula "11"))
                                       (rule "applyEqReverse" (formula "12") (term "1,0,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "42"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "11"))
                                       (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,0"))
                                       (rule "times_zero_1" (formula "11") (term "0"))
                                       (rule "leq_literals" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "11") (inst "t=j_0"))
                                       (rule "replaceKnownSelect_taclet11000020000_37" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet11000020000_39" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownSelect_taclet11000020000_44" (formula "11") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet111000020000_50" (formula "11") (term "0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0,1") (ifseqformula "24"))
                                       (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                                       (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
                                       (rule "add_literals" (formula "11") (term "1,0,1"))
                                       (rule "times_zero_1" (formula "11") (term "0,1"))
                                       (rule "qeq_literals" (formula "11") (term "1"))
                                       (rule "concrete_or_3" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "11") (inst "t=i_1"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "concrete_or_2" (formula "11") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "23"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0,0,2,0") (inst "selectSK=arr_7"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "11") (term "1,0,0,0") (ifseqformula "46"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,2,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0") (ifseqformula "21"))
                                       (rule "replaceKnownSelect_taclet11000020000_48" (formula "11") (term "0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1111000020000_52" (formula "11") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11"))
                                       (rule "allLeft" (formula "11") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet11000020000_40" (formula "11") (term "0,0,2,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet11000020000_42" (formula "11") (term "0,0,2,0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,0,1") (ifseqformula "6"))
                                       (rule "replaceKnownSelect_taclet11000020000_48" (formula "11") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet1111000020000_52" (formula "11") (term "0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
                                       (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "3"))
                                       (rule "concrete_or_3" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "19") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                       (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "19") (term "1"))
                                       (rule "concrete_or_3" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "allLeft" (formula "19") (inst "t=hb_0"))
                                       (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "17"))
                                       (rule "allLeft" (formula "33") (inst "t=(int)(hb_0)"))
                                       (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                       (rule "allLeft" (formula "16") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "16") (term "0,0"))
                                       (rule "eqSymm" (formula "16") (term "1"))
                                       (rule "eqSymm" (formula "16") (term "1,0"))
                                       (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "42"))
                                       (rule "concrete_or_2" (formula "16") (term "0"))
                                       (rule "allLeft" (formula "35") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                       (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                       (rule "allLeft" (formula "36") (inst "t=(int)(a_0)"))
                                       (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                       (rule "allLeft" (formula "31") (inst "t=hb_0"))
                                       (rule "exLeft" (formula "31") (inst "sk=i_4"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "eqSymm" (formula "31") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "33") (term "1"))
                                       (rule "polySimp_addComm1" (formula "33") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1"))
                                       (rule "mul_literals" (formula "33") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,1"))
                                       (rule "allLeft" (formula "34") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                       (rule "exLeft" (formula "34") (inst "sk=i_5"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "eqSymm" (formula "34") (term "0"))
                                       (rule "inEqSimp_homoInEq0" (formula "36") (term "1"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1"))
                                       (rule "mul_literals" (formula "36") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,1,1"))
                                       (rule "allLeft" (formula "11") (inst "t=i_3"))
                                       (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "31"))
                                       (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "11") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "11") (term "1,0"))
                                       (rule "concrete_or_4" (formula "11") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "30"))
                                       (rule "qeq_literals" (formula "11") (term "0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0"))
                                       (rule "concrete_or_2" (formula "11"))
                                       (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_8"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "eqClose" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "11") (term "0,0"))
                                       (rule "castDel" (formula "11") (term "1,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "intCastEqual" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "12"))
                                       (rule "pullOutSelect" (formula "11") (term "0,0,2,2,0") (inst "selectSK=arr_9"))
                                       (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                       (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "11"))
                                       (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "11") (term "0,0"))
                                       (rule "equalUnique" (formula "11") (term "1,0,0"))
                                       (rule "eqSymm" (formula "12") (term "0,0"))
                                       (rule "eqSymm" (formula "11") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "11") (term "0,0,0,0") (ifseqformula "57"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "11") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "0,0,2,2,0") (ifseqformula "11"))
                                       (rule "applyEqReverse" (formula "12") (term "1,0,0") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,2,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "30"))
                                       (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "53"))
                                       (rule "ifthenelse_false" (formula "11") (term "0"))
                                       (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
                                       (rule "hideAuxiliaryEq" (formula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "11"))
                                       (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                       (rule "add_literals" (formula "11") (term "1,0"))
                                       (rule "times_zero_1" (formula "11") (term "0"))
                                       (rule "leq_literals" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "allLeft" (formula "43") (inst "t=i_3"))
                                       (rule "inEqSimp_commuteGeq" (formula "43") (term "1"))
                                       (rule "applyEq" (formula "43") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                       (rule "replace_known_left" (formula "43") (term "0,0") (ifseqformula "39"))
                                       (rule "concrete_or_1" (formula "43") (term "0"))
                                       (rule "concrete_or_1" (formula "43"))
                                       (rule "true_left" (formula "43"))
                                       (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_2))"))
                                       (rule "eqSymm" (formula "17") (term "1"))
                                       (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "60"))
                                       (rule "concrete_or_4" (formula "17"))
                                       (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "52"))
                                       (rule "concrete_or_2" (formula "17"))
                                       (rule "applyEq" (formula "11") (term "0,0,2,1,1,0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "60") (term "0,0,2,1") (ifseqformula "17"))
                                       (rule "applyEq" (formula "60") (term "0,2,0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "29") (term "1") (ifseqformula "17"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "26") (term "1") (ifseqformula "17"))
                                       (rule "applyEq" (formula "52") (term "0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "40") (term "0,0,2,0") (ifseqformula "17"))
                                       (rule "replace_known_left" (formula "35") (term "0,1") (ifseqformula "40"))
                                       (rule "concrete_not_1" (formula "35") (term "1"))
                                       (rule "concrete_or_4" (formula "35"))
                                       (rule "replace_known_left" (formula "37") (term "0,0") (ifseqformula "40"))
                                       (rule "concrete_not_1" (formula "37") (term "0"))
                                       (rule "concrete_or_2" (formula "37"))
                                       (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "40"))
                                       (rule "concrete_not_1" (formula "36") (term "0"))
                                       (rule "concrete_or_2" (formula "36"))
                                       (rule "applyEq" (formula "47") (term "0,0,2,0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "17"))
                                       (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "45"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "45"))
                                       (rule "inEqSimp_commuteLeq" (formula "14"))
                                       (rule "applyEq" (formula "46") (term "0") (ifseqformula "44"))
                                       (rule "qeq_literals" (formula "46"))
                                       (rule "true_left" (formula "46"))
                                       (rule "applyEq" (formula "58") (term "0") (ifseqformula "19"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "close" (formula "58") (ifseqformula "44"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: exists int i; ( i >= 0 & i < int::select(heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))], self.bidders@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))], arr_length) & self.bidders[i]@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))] = a_0) FALSE"
                           (rule "andRight" (formula "29") (userinteraction))
                           (branch "Case 1"
                              (rule "andRight" (formula "29") (userinteraction))
                              (branch "Case 1"
                                 (rule "andRight" (formula "29") (userinteraction))
                                 (branch "Case 1"
                                    (rule "allLeft" (formula "15") (inst "t=a_0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "1,1,0,0") (userinteraction))
                                    (rule "equalUnique" (formula "22") (term "1,0,0,1,1,0,0") (userinteraction))
                                    (rule "concrete_and_4" (formula "22") (term "0,0,1,1,0,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,1,1,0,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "1,1,0,0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "1,1,0,0") (userinteraction))
                                    (rule "equalUnique" (formula "22") (term "1,0,0,1,1,0,0") (userinteraction))
                                    (rule "concrete_and_4" (formula "22") (term "0,0,1,1,0,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,1,1,0,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "1,1,0,0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "1,1,1,0,0") (userinteraction))
                                    (rule "equalUnique" (formula "22") (term "1,0,0,1,1,1,0,0") (userinteraction))
                                    (rule "concrete_and_4" (formula "22") (term "0,0,1,1,1,0,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,1,1,1,0,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "1,1,1,0,0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "0,1,0") (userinteraction))
                                    (rule "equalUnique" (formula "22") (term "1,0,0,0,1,0") (userinteraction))
                                    (rule "concrete_and_4" (formula "22") (term "0,0,0,1,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,0,1,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "0,1,0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "1,0,1,0") (userinteraction))
                                    (rule "equalUnique" (formula "22") (term "1,0,0,1,0,1,0") (userinteraction))
                                    (rule "concrete_and_4" (formula "22") (term "0,0,1,0,1,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,1,0,1,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "1,0,1,0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "0,1,0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "1,0,0,0,0,1,0") (userinteraction))
                                    (rule "sortsDisjointModuloNull" (formula "22") (term "0,0,0,1,0,0,0,0,1,0") (userinteraction))
                                    (rule "replace_known_right" (formula "22") (term "0,0,0,0,1,0,0,0,0,1,0") (ifseqformula "26") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,0,0,1,0,0,0,0,1,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,0,1,0,0,0,0,1,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,1,0,0,0,0,1,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "1,0,0,0,0,1,0") (userinteraction))
                                    (rule "sortsDisjointModuloNull" (formula "22") (term "0,0,0,0,1,0") (userinteraction))
                                    (rule "replace_known_right" (formula "22") (term "0,0,0,0,0,1,0") (ifseqformula "26") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,0,0,0,1,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,0,0,1,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,0,1,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "0,1,0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "1,0,1,0") (userinteraction))
                                    (rule "equalUnique" (formula "22") (term "1,0,0,1,0,1,0") (userinteraction))
                                    (rule "concrete_and_4" (formula "22") (term "0,0,1,0,1,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,1,0,1,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "1,0,1,0") (userinteraction))
                                    (rule "selectOfStore" (formula "22") (term "1,1,1,0,0") (userinteraction))
                                    (rule "equalUnique" (formula "22") (term "1,0,0,1,1,1,0,0") (userinteraction))
                                    (rule "concrete_and_4" (formula "22") (term "0,0,1,1,1,0,0") (userinteraction))
                                    (rule "concrete_and_2" (formula "22") (term "0,1,1,1,0,0") (userinteraction))
                                    (rule "ifthenelse_false" (formula "22") (term "1,1,1,0,0") (userinteraction))
                                    (rule "nnf_ex2all" (formula "22") (userinteraction))
                                    (rule "exLeft" (formula "16") (inst "sk=i_0") (userinteraction))
                                    (rule "instAll" (formula "16") (term "0,2,1,0,0,0") (ifseqformula "1") (userinteraction))
                                    (rule "andLeft" (formula "17") (userinteraction))
                                    (rule "andLeft" (formula "17") (userinteraction))
                                    (rule "commute_or" (formula "17") (userinteraction))
                                    (rule "nnf_notAnd" (formula "16") (userinteraction))
                                    (rule "nnf_notAnd" (formula "16") (term "0") (userinteraction))
                                    (rule "orLeft" (formula "16") (userinteraction))
                                    (branch " !i_0 >= 0 | !i_0 < int::select(heap, self.bidders, arr_length)"
                                       (rule "orLeft" (formula "16") (userinteraction))
                                       (branch "!i_0 >= 0"
                                          (rule "notLeft" (formula "16") (userinteraction))
                                          (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "25") (userinteraction))
                                          (rule "concrete_or_4" (formula "17") (userinteraction))
                                          (rule "notLeft" (formula "17") (userinteraction))
                                          (rule "instAll" (formula "24") (term "0,0,2,0") (ifseqformula "14") (userinteraction))
                                          (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25") (userinteraction))
                                          (rule "concrete_or_2" (formula "1") (userinteraction))
                                          (rule "allLeft" (formula "12") (inst "t=a_0") (userinteraction))
                                          (rule "instAll" (formula "19") (term "0,0,2,0,0,0") (ifseqformula "16") (userinteraction))
                                          (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "27") (userinteraction))
                                          (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "27") (userinteraction))
                                          (rule "concrete_or_2" (formula "19") (userinteraction))
                                          (rule "instAll" (formula "19") (term "0,0,2,0,0,0") (ifseqformula "13") (userinteraction))
                                          (rule "concrete_not_2" (formula "18") (term "0"))
                                          (rule "concrete_or_1" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,1"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,1"))
                                          (rule "replaceKnownSelect_taclet_32" (formula "6") (term "0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,0"))
                                          (rule "replaceKnownSelect_taclet_32" (formula "4") (term "0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "4") (term "0,0"))
                                          (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,1,1,0"))
                                          (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,0,1,0"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "34") (term "1,0,0,2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,1,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,0,1,0"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,1,1,0,1,0"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,1,1,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "34") (term "1,0,0,2,0"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,0,1,0"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,1,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,1,1,0,1,0"))
                                          (rule "replaceKnownSelect_taclet_32" (formula "8") (term "1,1,0,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "8") (term "1,1,0,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,1,1,0,0"))
                                          (rule "replaceKnownSelect_taclet_32" (formula "7") (term "0,1,1,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "7") (term "0,1,1,0,0"))
                                          (rule "replaceKnownSelect_taclet_5" (formula "8") (term "1,0,1,0,1,0,1,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,0,1,0"))
                                          (rule "replaceKnownSelect_taclet_5" (formula "8") (term "1,1,1,0,1,0,1,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,1,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "8") (term "1,0,1,0,1,0,1,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "8") (term "1,1,1,0,1,0,1,1,0"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                          (rule "replaceKnownSelect_taclet_20" (formula "8") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "8") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                          (rule "eqSymm" (formula "12") (term "0,0"))
                                          (rule "eqSymm" (formula "12") (term "1,0"))
                                          (rule "eqSymm" (formula "12") (term "1"))
                                          (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "25"))
                                          (rule "concrete_not_2" (formula "18") (term "0"))
                                          (rule "concrete_or_1" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "polySimp_elimSub" (formula "6") (term "1"))
                                          (rule "mul_literals" (formula "6") (term "1,1"))
                                          (rule "polySimp_elimSub" (formula "4") (term "0"))
                                          (rule "mul_literals" (formula "4") (term "1,0"))
                                          (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "7") (term "1,1,1,0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "1"))
                                          (rule "polySimp_addComm0" (formula "4") (term "0"))
                                          (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0"))
                                          (rule "inEqSimp_geqRight" (formula "25"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0"))
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1,1,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "8"))
                                          (rule "polySimp_addComm1" (formula "8") (term "0"))
                                          (rule "applyEq" (formula "9") (term "0,2,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,0,1,1,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,2,1,3,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "11") (term "0,2,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,2,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,2,0,0,0,2,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "11") (term "0,0,2,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,2,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,2,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "5"))
                                          (rule "eqSymm" (formula "11") (term "0,0"))
                                          (rule "applyEq" (formula "10") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,1,1,0,1,0,1,1,0"))
                                          (rule "add_literals" (formula "10") (term "1,3,0,1,1,0,1,0,1,1,0"))
                                          (rule "times_zero_1" (formula "10") (term "3,0,1,1,0,1,0,1,1,0"))
                                          (rule "applyEq" (formula "34") (term "1,3,0,0,0,0,0,0,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "34") (term "3,0,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "34") (term "1,3,0,0,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "3,0,0,0,0,0,0,0"))
                                          (rule "applyEq" (formula "34") (term "1,3,0,1,0,0,0,0,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "34") (term "3,0,1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "34") (term "1,3,0,1,0,0,0,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "3,0,1,0,0,0,0,0"))
                                          (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,0,1,0"))
                                          (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,0,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,0,1,0"))
                                          (rule "applyEq" (formula "1") (term "1,3,0,0,0,2,1,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,2,1,0"))
                                          (rule "add_literals" (formula "1") (term "1,3,0,0,0,2,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "3,0,0,0,2,1,0"))
                                          (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                          (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                          (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                          (rule "applyEq" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                          (rule "add_literals" (formula "10") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                          (rule "times_zero_1" (formula "10") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                          (rule "applyEq" (formula "34") (term "1,3,0,0,1,1,0,0,0,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "34") (term "3,0,0,1,1,0,0,0,0"))
                                          (rule "add_literals" (formula "34") (term "1,3,0,0,1,1,0,0,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "3,0,0,1,1,0,0,0,0"))
                                          (rule "applyEq" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                                          (rule "add_literals" (formula "10") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                          (rule "times_zero_1" (formula "10") (term "3,0,0,1,0,1,0,1,1,0"))
                                          (rule "applyEq" (formula "9") (term "1,3,0,1,1,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,1,1,0"))
                                          (rule "add_literals" (formula "9") (term "1,3,0,1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "3,0,1,1,0"))
                                          (rule "applyEq" (formula "34") (term "1,3,0,0,1,0,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "34") (term "3,0,0,1,0,0"))
                                          (rule "add_literals" (formula "34") (term "1,3,0,0,1,0,0"))
                                          (rule "times_zero_1" (formula "34") (term "3,0,0,1,0,0"))
                                          (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "16"))
                                          (rule "polySimp_pullOutFactor2" (formula "11") (term "1,0"))
                                          (rule "add_literals" (formula "11") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "11") (term "1,0"))
                                          (rule "ifthenelse_same_branches" (formula "11") (term "0"))
                                          (rule "applyEqReverse" (formula "34") (term "0,1,0,0,0") (ifseqformula "11"))
                                          (rule "eqClose" (formula "34") (term "1,0,0,0"))
                                          (rule "concrete_and_3" (formula "34") (term "0,0,0"))
                                          (rule "applyEqReverse" (formula "34") (term "0,1,1,0,0") (ifseqformula "11"))
                                          (rule "add_zero_left" (formula "34") (term "1,1,0,0"))
                                          (rule "hideAuxiliaryEq" (formula "11"))
                                          (rule "applyEq" (formula "9") (term "1,3,0,0,1,0") (ifseqformula "15"))
                                          (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,1,0"))
                                          (rule "add_literals" (formula "9") (term "1,3,0,0,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "3,0,0,1,0"))
                                          (rule "applyEq" (formula "1") (term "1,3,0,1,0") (ifseqformula "15"))
                                          (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,0"))
                                          (rule "add_literals" (formula "1") (term "1,3,0,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "3,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "15"))
                                          (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,1,1,0"))
                                          (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,1,1,0"))
                                          (rule "applyEq" (formula "1") (term "1,3,0,0,1,0") (ifseqformula "15"))
                                          (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,1,0"))
                                          (rule "add_literals" (formula "1") (term "1,3,0,0,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "3,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "33") (term "1,3,0,1,1,0,0") (ifseqformula "15"))
                                          (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,1,0,0"))
                                          (rule "add_literals" (formula "33") (term "1,3,0,1,1,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "3,0,1,1,0,0"))
                                          (rule "applyEq" (formula "33") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "15"))
                                          (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,1,1,0,0,0"))
                                          (rule "add_literals" (formula "33") (term "1,3,0,1,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "3,0,1,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                          (rule "mul_literals" (formula "6") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "mul_literals" (formula "2") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "10") (term "1,1,0,1,0"))
                                          (rule "mul_literals" (formula "10") (term "0,1,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                          (rule "polySimp_rightDist" (formula "8") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                          (rule "mul_literals" (formula "8") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "6"))
                                          (rule "leq_literals" (formula "18") (term "0"))
                                          (rule "concrete_or_1" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "pullOutSelect" (formula "9") (term "1,1,0") (inst "selectSK=arr_1"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
                                          (rule "simplifySelectOfStore" (formula "9"))
                                          (rule "equalUnique" (formula "9") (term "1,0,0,0"))
                                          (rule "concrete_and_4" (formula "9") (term "0,0,0"))
                                          (rule "concrete_and_2" (formula "9") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "9") (term "0"))
                                          (rule "simplifySelectOfStore" (formula "9"))
                                          (rule "eqClose" (formula "9") (term "0,0,0,0"))
                                          (rule "concrete_and_1" (formula "9") (term "0,0,0"))
                                          (rule "equalUnique" (formula "9") (term "0,0,0"))
                                          (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "9") (term "0,0"))
                                          (rule "castDel" (formula "9") (term "1,0"))
                                          (rule "eqSymm" (formula "9") (term "0,0"))
                                          (rule "intCastEqual" (formula "9") (term "0,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "1"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "pullOutSelect" (formula "9") (term "0,0,2,2,0") (inst "selectSK=arr_2"))
                                          (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "9"))
                                          (rule "simplifySelectOfStore" (formula "9"))
                                          (rule "equalUnique" (formula "9") (term "1,0,0,0"))
                                          (rule "concrete_and_4" (formula "9") (term "0,0,0"))
                                          (rule "concrete_and_2" (formula "9") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "9") (term "0"))
                                          (rule "simplifySelectOfStore" (formula "9"))
                                          (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "9") (term "0,0"))
                                          (rule "equalUnique" (formula "9") (term "1,0,0"))
                                          (rule "eqSymm" (formula "10") (term "0,0"))
                                          (rule "eqSymm" (formula "9") (term "0,0,0"))
                                          (rule "sortsDisjointModuloNull" (formula "9") (term "0,0,0"))
                                          (rule "replace_known_right" (formula "9") (term "0,0,0,0") (ifseqformula "29"))
                                          (rule "concrete_and_2" (formula "9") (term "0,0,0"))
                                          (rule "concrete_and_2" (formula "9") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "9") (term "0"))
                                          (rule "applyEqReverse" (formula "10") (term "0,0,2,2,0") (ifseqformula "9"))
                                          (rule "applyEqReverse" (formula "10") (term "1,0,0") (ifseqformula "9"))
                                          (rule "hideAuxiliaryEq" (formula "9"))
                                          (rule "eqSymm" (formula "9") (term "0,0"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_3"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "1") (term "0,0"))
                                          (rule "equalUnique" (formula "1") (term "1,0,0"))
                                          (rule "concrete_and_4" (formula "1") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "1") (term "0"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "1") (term "0,0"))
                                          (rule "equalUnique" (formula "1") (term "1,0,0"))
                                          (rule "eqClose" (formula "1") (term "0,0,0"))
                                          (rule "concrete_and_1" (formula "1") (term "0,0"))
                                          (rule "castDel" (formula "1") (term "1,0"))
                                          (rule "intCastEqual" (formula "1") (term "0,0"))
                                          (rule "nnf_ex2all" (formula "34"))
                                          (rule "nnf_imp2or" (formula "13") (term "0,1,0,1,1,0"))
                                          (rule "nnf_notAnd" (formula "6") (term "0"))
                                          (rule "nnf_imp2or" (formula "12") (term "0"))
                                          (rule "nnf_notAll" (formula "1") (term "0"))
                                          (rule "nnf_imp2or" (formula "13") (term "0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0"))
                                          (rule "nnf_notAnd" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
                                          (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
                                          (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                          (rule "nnf_imp2or" (formula "13") (term "1,0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "0,0,1,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,0,0,1,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_notLeq" (formula "13") (term "1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,1,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,1,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,1,0,1,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,1,0"))
                                          (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1,0,1,1,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,1,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,1,1,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,1,1,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,1,1,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,1,1,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
                                          (rule "commute_or_2" (formula "6") (term "0"))
                                          (rule "cut_direct" (formula "16") (term "0,0"))
                                          (branch "CUT: hb_0 = a_0 TRUE"
                                             (rule "concrete_or_1" (formula "17") (term "0"))
                                             (rule "concrete_or_1" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "16"))
                                             (rule "ifthenelse_true" (formula "2") (term "0"))
                                             (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "mul_literals" (formula "2") (term "1,0"))
                                             (rule "add_zero_right" (formula "2") (term "0"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "12") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "28") (term "0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "23") (term "0,0,2,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "14") (term "0,0,2,1,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "12") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "12") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "12") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "10") (term "1,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "12") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "11") (term "0,0,2,0,0,0,1,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "1") (term "0,2,0,1,1,0,0,0,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "11") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "17") (term "0,2,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "12") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "12") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,0,0,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "11") (term "0,2,0,0,1,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,0,0,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "17") (term "0,0,2,1") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "12") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "16") (term "1,0,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "11") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "15"))
                                             (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0,1,0,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "17"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                             (rule "mul_literals" (formula "2") (term "1"))
                                             (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "4"))
                                             (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "23"))
                                             (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                                             (rule "qeq_literals" (formula "24"))
                                             (rule "true_left" (formula "24"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "23"))
                                             (rule "leq_literals" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "applyEq" (formula "16") (term "1") (ifseqformula "22"))
                                             (rule "commute_or" (formula "4") (term "0,0"))
                                             (rule "commute_or_2" (formula "1") (term "0,0"))
                                             (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                             (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                                             (rule "commute_or_2" (formula "11") (term "0,1,0,1,1,0"))
                                             (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                                             (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                                             (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                                             (rule "allLeft" (formula "23") (inst "t=a_0"))
                                             (rule "allLeft" (formula "20") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "20") (term "1,0"))
                                             (rule "concrete_or_4" (formula "20") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                             (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "20") (term "0,0,1"))
                                             (rule "leq_literals" (formula "20") (term "0,1"))
                                             (rule "concrete_and_2" (formula "20") (term "1"))
                                             (rule "concrete_or_4" (formula "20"))
                                             (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                             (rule "all_pull_out1" (formula "11") (term "0,1,1,0"))
                                             (rule "ex_pull_out3" (formula "11") (term "1,0"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "self.bidders[j_0] = a_0 TRUE"
                                                (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "self.bidders[j_0] = a_0 FALSE"
                                                (rule "applyEqReverse" (formula "10") (term "1,1,0") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "2"))
                                                (rule "qeq_literals" (formula "24") (term "0"))
                                                (rule "concrete_and_2" (formula "24"))
                                                (rule "closeFalse" (formula "24"))
                                             )
                                          )
                                          (branch "CUT: hb_0 = a_0 FALSE"
                                             (rule "concrete_or_2" (formula "16") (term "0"))
                                             (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "27"))
                                             (rule "ifthenelse_false" (formula "2") (term "0"))
                                             (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "commute_or_2" (formula "1") (term "0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0"))
                                             (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                             (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                                             (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                                             (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,1,0,1,1,0"))
                                             (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                                             (rule "ifthenelse_split" (formula "10") (term "0"))
                                             (branch "self.bidders[j_0] = hb_0 TRUE"
                                                (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "11"))
                                                (rule "add_literals" (formula "2") (term "1"))
                                                (rule "applyEqReverse" (formula "12") (term "1,1,0") (ifseqformula "11"))
                                                (rule "hideAuxiliaryEq" (formula "11"))
                                                (rule "all_pull_out1" (formula "12") (term "0,1,1,0"))
                                                (rule "ex_pull_out3" (formula "12") (term "1,0"))
                                                (rule "all_pull_out3" (formula "12") (term "0,1,0"))
                                                (rule "cnf_rightDist" (formula "12") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "12") (term "1,0,0,1,0"))
                                                (rule "shift_paren_or" (formula "12") (term "0,1,0,0,1,0"))
                                                (rule "cnf_rightDist" (formula "12") (term "0,0,0,1,0"))
                                                (rule "commute_or" (formula "12") (term "1,0,0,0,1,0"))
                                                (rule "commute_or_2" (formula "12") (term "0,0,0,0,1,0"))
                                                (rule "commute_or" (formula "12") (term "0,0,0,0,0,1,0"))
                                                (rule "ex_pull_out3" (formula "12") (term "0"))
                                                (rule "allLeft" (formula "21") (inst "t=j_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                                (rule "applyEq" (formula "21") (term "0,0,2,0,0,0") (ifseqformula "10"))
                                                (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "21") (term "0,1,0"))
                                                (rule "concrete_and_2" (formula "21") (term "1,0"))
                                                (rule "concrete_or_4" (formula "21") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                                (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "21") (term "0,0,1"))
                                                (rule "leq_literals" (formula "21") (term "0,1"))
                                                (rule "concrete_and_2" (formula "21") (term "1"))
                                                (rule "concrete_or_4" (formula "21"))
                                                (rule "allLeft" (formula "14") (inst "t=a_0"))
                                                (rule "inEqSimp_commuteLeq" (formula "14"))
                                                (rule "all_pull_out3" (formula "12") (term "0,0"))
                                                (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                                                (rule "eq_or_2" (formula "12") (term "0,0,1,0,0,0"))
                                                (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                                                (rule "commute_or_2" (formula "12") (term "1,0,0,0,0"))
                                                (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0"))
                                                (rule "commute_or_2" (formula "12") (term "0,1,0,0,0,0"))
                                                (rule "eq_or" (formula "12") (term "0,0,1,0,0,0,0"))
                                                (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0,0"))
                                                (rule "commute_or" (formula "12") (term "0,0,0,0,0,0,0"))
                                                (rule "eq_or_2" (formula "12") (term "0,0,0,0,0,0"))
                                                (rule "commute_and" (formula "1") (term "0,0,0"))
                                                (rule "allLeft" (formula "5") (inst "t=j_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                                                (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "11"))
                                                (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "29"))
                                                (rule "concrete_not_2" (formula "5") (term "0,0"))
                                                (rule "concrete_or_1" (formula "5") (term "0"))
                                                (rule "concrete_or_1" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "commute_and_2" (formula "1") (term "0,0"))
                                                (rule "allLeft" (formula "11") (inst "t=j_0"))
                                                (rule "replaceKnownSelect_taclet00000100020000_37" (formula "11") (term "0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0100000100020000_45" (formula "11") (term "0,1"))
                                                (rule "leq_literals" (formula "11") (term "1"))
                                                (rule "concrete_or_3" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "allLeft" (formula "21") (inst "t=hb_0"))
                                                (rule "exLeft" (formula "21") (inst "sk=i_1"))
                                                (rule "andLeft" (formula "21"))
                                                (rule "andLeft" (formula "21"))
                                                (rule "eqSymm" (formula "21") (term "0"))
                                                (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "25"))
                                                (rule "concrete_not_1" (formula "21") (term "1"))
                                                (rule "concrete_or_4" (formula "21"))
                                                (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "25"))
                                                (rule "concrete_not_1" (formula "23") (term "0"))
                                                (rule "concrete_or_2" (formula "23"))
                                                (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "25"))
                                                (rule "concrete_not_1" (formula "22") (term "0"))
                                                (rule "concrete_or_2" (formula "22"))
                                                (rule "inEqSimp_homoInEq0" (formula "23"))
                                                (rule "polySimp_addComm1" (formula "23") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1"))
                                                (rule "mul_literals" (formula "23") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                                                (rule "cut_direct" (formula "16") (term "0"))
                                                (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                   (rule "concrete_or_1" (formula "17"))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "19") (term "0,2,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "37") (term "0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "27") (term "0,0,2,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "2") (term "0") (ifseqformula "27"))
                                                   (rule "qeq_literals" (formula "2"))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                   (rule "concrete_or_2" (formula "16"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                                   (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
                                                   (rule "qeq_literals" (formula "4") (term "0"))
                                                   (rule "concrete_and_2" (formula "4"))
                                                   (rule "closeFalse" (formula "4"))
                                                )
                                             )
                                             (branch "self.bidders[j_0] = hb_0 FALSE"
                                                (rule "applyEqReverse" (formula "11") (term "1,1,0") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "all_pull_out1" (formula "11") (term "0,1,1,0"))
                                                (rule "ex_pull_out3" (formula "11") (term "1,0"))
                                                (rule "allLeft" (formula "20") (inst "t=j_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                                (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "20") (term "0,0,1"))
                                                (rule "leq_literals" (formula "20") (term "0,1"))
                                                (rule "concrete_and_2" (formula "20") (term "1"))
                                                (rule "concrete_or_4" (formula "20"))
                                                (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "20") (term "0,1"))
                                                (rule "concrete_and_2" (formula "20") (term "1"))
                                                (rule "concrete_or_4" (formula "20"))
                                                (rule "allLeft" (formula "13") (inst "t=a_0"))
                                                (rule "inEqSimp_commuteLeq" (formula "13"))
                                                (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                                (rule "allLeft" (formula "26") (inst "t=a_0"))
                                                (rule "allLeft" (formula "27") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                                (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "2"))
                                                (rule "mul_literals" (formula "27") (term "0,0"))
                                                (rule "add_zero_left" (formula "27") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                                                (rule "mul_literals" (formula "27") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "27"))
                                                (rule "leq_literals" (formula "26") (term "0"))
                                                (rule "concrete_or_1" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "14"))
                                                (rule "mul_literals" (formula "27") (term "0,0"))
                                                (rule "add_zero_left" (formula "27") (term "0"))
                                                (rule "all_pull_out3" (formula "11") (term "0,1,0"))
                                                (rule "cnf_rightDist" (formula "11") (term "0,0,1,0"))
                                                (rule "commute_or_2" (formula "11") (term "1,0,0,1,0"))
                                                (rule "shift_paren_or" (formula "11") (term "0,1,0,0,1,0"))
                                                (rule "cnf_rightDist" (formula "11") (term "0,0,0,1,0"))
                                                (rule "commute_or" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "commute_or_2" (formula "11") (term "0,0,0,0,1,0"))
                                                (rule "commute_or" (formula "11") (term "0,0,0,0,0,1,0"))
                                                (rule "commute_and" (formula "1") (term "0,0,0"))
                                                (rule "ex_pull_out3" (formula "11") (term "0"))
                                                (rule "allLeft" (formula "5") (inst "t=j_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                                                (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "5") (term "0,0,1"))
                                                (rule "leq_literals" (formula "5") (term "0,1"))
                                                (rule "concrete_and_2" (formula "5") (term "1"))
                                                (rule "concrete_or_4" (formula "5"))
                                                (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "9"))
                                                (rule "qeq_literals" (formula "5") (term "0,1"))
                                                (rule "concrete_and_2" (formula "5") (term "1"))
                                                (rule "concrete_or_4" (formula "5"))
                                                (rule "notLeft" (formula "5"))
                                                (rule "all_pull_out3" (formula "11") (term "0,0"))
                                                (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "11") (term "1,0,0,0"))
                                                (rule "commute_or_2" (formula "11") (term "0,1,0,0,0"))
                                                (rule "eq_or_2" (formula "11") (term "0,0,1,0,0,0"))
                                                (rule "cnf_rightDist" (formula "11") (term "0,0,0,0"))
                                                (rule "commute_or_2" (formula "11") (term "1,0,0,0,0"))
                                                (rule "shift_paren_or" (formula "11") (term "0,0,0,0,0"))
                                                (rule "commute_or_2" (formula "11") (term "0,1,0,0,0,0"))
                                                (rule "eq_or" (formula "11") (term "0,0,1,0,0,0,0"))
                                                (rule "shift_paren_or" (formula "11") (term "0,0,0,0,0,0"))
                                                (rule "commute_or" (formula "11") (term "0,0,0,0,0,0,0"))
                                                (rule "eq_or_2" (formula "11") (term "0,0,0,0,0,0"))
                                                (rule "commute_and_2" (formula "1") (term "0,0"))
                                                (rule "allLeft" (formula "10") (inst "t=j_0"))
                                                (rule "replaceKnownSelect_taclet00000100020000_37" (formula "10") (term "0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet1100000100020000_45" (formula "10") (term "0,1"))
                                                (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "10") (term "1"))
                                                (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1"))
                                                (rule "add_literals" (formula "10") (term "1,0,1"))
                                                (rule "times_zero_1" (formula "10") (term "0,1"))
                                                (rule "qeq_literals" (formula "10") (term "1"))
                                                (rule "concrete_or_3" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                                (rule "exLeft" (formula "21") (inst "sk=i_1"))
                                                (rule "andLeft" (formula "21"))
                                                (rule "andLeft" (formula "21"))
                                                (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "25"))
                                                (rule "concrete_not_1" (formula "22") (term "0"))
                                                (rule "concrete_or_2" (formula "22"))
                                                (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "25"))
                                                (rule "concrete_not_1" (formula "23") (term "0"))
                                                (rule "concrete_or_2" (formula "23"))
                                                (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "25"))
                                                (rule "concrete_not_1" (formula "21") (term "1"))
                                                (rule "concrete_or_4" (formula "21"))
                                                (rule "inEqSimp_homoInEq0" (formula "23"))
                                                (rule "polySimp_addComm1" (formula "23") (term "0"))
                                                (rule "applyEq" (formula "34") (term "0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "10") (term "0,0,2,1,1,0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "25") (term "0,0,2,0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "33") (term "0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "30") (term "0,0,2,0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "2") (term "0,0,2,0") (ifseqformula "21"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1"))
                                                (rule "polySimp_rightDist" (formula "23") (term "1"))
                                                (rule "mul_literals" (formula "23") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "14"))
                                                (rule "mul_literals" (formula "30") (term "0,0"))
                                                (rule "add_zero_left" (formula "30") (term "0"))
                                                (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "2"))
                                                (rule "mul_literals" (formula "30") (term "0,0"))
                                                (rule "add_zero_left" (formula "30") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                                                (rule "mul_literals" (formula "30") (term "1"))
                                                (rule "cut_direct" (formula "16") (term "0"))
                                                (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                   (rule "concrete_or_1" (formula "17"))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "applyEq" (formula "19") (term "0,2,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "27") (term "0,0,2,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "17") (term "1,1,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "41") (term "0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,0,0") (ifseqformula "16"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "19"))
                                                   (rule "leq_literals" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "applyEq" (formula "12") (term "1") (ifseqformula "26"))
                                                   (rule "applyEq" (formula "27") (term "0") (ifseqformula "25"))
                                                   (rule "qeq_literals" (formula "27"))
                                                   (rule "closeFalse" (formula "27"))
                                                )
                                                (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                   (rule "concrete_or_2" (formula "16"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                                   (rule "inEqSimp_contradInEq0" (formula "29") (ifseqformula "4"))
                                                   (rule "qeq_literals" (formula "29") (term "0"))
                                                   (rule "concrete_and_2" (formula "29"))
                                                   (rule "closeFalse" (formula "29"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "!i_0 < int::select(heap, self.bidders, arr_length)"
                                          (rule "notLeft" (formula "16") (userinteraction))
                                          (rule "orLeft" (formula "18") (userinteraction))
                                          (branch "!self.bidded[(int)(a_0)] = TRUE"
                                             (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,0,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,0,0"))
                                             (rule "replaceKnownSelect_taclet_32" (formula "3") (term "0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,1"))
                                             (rule "replaceKnownSelect_taclet_32" (formula "5") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "5") (term "0,1"))
                                             (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,0,1,0"))
                                             (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,0,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "33") (term "1,0,0,2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,1,1,0,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,1,1,0,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "33") (term "1,0,0,2,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,0,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,1,1,0,0"))
                                             (rule "replaceKnownSelect_taclet_32" (formula "6") (term "0,1,1,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "0,1,1,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,1,1,0,1,0"))
                                             (rule "replaceKnownSelect_taclet_32" (formula "7") (term "1,1,0,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "7") (term "1,1,0,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,0,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,0,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,1,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,0,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,1,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "notLeft" (formula "18"))
                                             (rule "eqSymm" (formula "16") (term "1"))
                                             (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "24"))
                                             (rule "concrete_not_2" (formula "16") (term "0"))
                                             (rule "concrete_or_1" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "23"))
                                             (rule "concrete_not_2" (formula "16") (term "0"))
                                             (rule "concrete_or_1" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "polySimp_elimSub" (formula "3") (term "0"))
                                             (rule "mul_literals" (formula "3") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "1,1"))
                                             (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "6") (term "1,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "3") (term "0"))
                                             (rule "polySimp_addComm0" (formula "5") (term "1"))
                                             (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltRight" (formula "23"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_geqRight" (formula "31"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1,1,0"))
                                             (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "7"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,2,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,0,1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "10") (term "0,0,2,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "10") (term "0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "26") (term "0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "4"))
                                             (rule "eqSymm" (formula "10") (term "0,0"))
                                             (rule "applyEq" (formula "32") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,1,0") (ifseqformula "4"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "9") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "32") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,0,2,0,1,0"))
                                             (rule "add_literals" (formula "8") (term "1,3,0,0,0,2,0,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "3,0,0,0,2,0,1,0"))
                                             (rule "applyEq" (formula "32") (term "1,3,0,1,0,0,0,0,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "32") (term "1,3,0,1,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "3,0,1,0,0,0,0,0"))
                                             (rule "applyEq" (formula "1") (term "1,3,0,0,1,0") (ifseqformula "14"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "3,0,0,1,0,0"))
                                             (rule "applyEq" (formula "8") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,0,2,1,1,0"))
                                             (rule "add_literals" (formula "8") (term "1,3,0,0,0,2,1,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "3,0,0,0,2,1,1,0"))
                                             (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "applyEq" (formula "32") (term "1,3,0,0,1,1,0,0,0,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "32") (term "3,0,0,1,1,0,0,0,0"))
                                             (rule "add_literals" (formula "32") (term "1,3,0,0,1,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "32") (term "3,0,0,1,1,0,0,0,0"))
                                             (rule "applyEq" (formula "8") (term "1,3,0,0,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,1,0"))
                                             (rule "add_literals" (formula "8") (term "1,3,0,0,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "3,0,0,1,0"))
                                             (rule "applyEq" (formula "8") (term "1,3,0,1,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,1,1,0"))
                                             (rule "add_literals" (formula "8") (term "1,3,0,1,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "3,0,1,1,0"))
                                             (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "10") (term "1,0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0"))
                                             (rule "ifthenelse_same_branches" (formula "10") (term "0"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0,0") (ifseqformula "10"))
                                             (rule "add_zero_left" (formula "32") (term "1,1,0,0"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,0,0,0") (ifseqformula "10"))
                                             (rule "eqClose" (formula "32") (term "1,0,0,0"))
                                             (rule "concrete_and_3" (formula "32") (term "0,0,0"))
                                             (rule "hideAuxiliaryEq" (formula "10"))
                                             (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "applyEq" (formula "9") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,1,1,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "9") (term "1,3,0,1,1,0,1,0,1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "3,0,1,1,0,1,0,1,1,0"))
                                             (rule "applyEq" (formula "31") (term "1,3,0,0,1,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "1,3,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "3,0,0,1,0,0"))
                                             (rule "applyEq" (formula "9") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,1,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "9") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "3,0,0,1,0,1,0,1,1,0"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "31") (term "1,3,0,0,0,0,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "31") (term "1,3,0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "3,0,0,0,0,0,0"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,0,0,2,1,0") (ifseqformula "4"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "31") (term "1,3,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,1,1,0,0"))
                                             (rule "add_literals" (formula "31") (term "1,3,0,1,1,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "3,0,1,1,0,0"))
                                             (rule "applyEq" (formula "31") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,1,1,1,0,0,0"))
                                             (rule "add_literals" (formula "31") (term "1,3,0,1,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "31") (term "3,0,1,1,1,0,0,0"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,0,1,0") (ifseqformula "4"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "1") (term "1,3,0,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,0"))
                                             (rule "add_literals" (formula "1") (term "1,3,0,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "3,0,1,0"))
                                             (rule "applyEq" (formula "1") (term "1,3,0,0,0,2,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,2,1,0"))
                                             (rule "add_literals" (formula "1") (term "1,3,0,0,0,2,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "3,0,0,0,2,1,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,1,3,0,0,1,0") (ifseqformula "4"))
                                             (rule "polySimp_pullOutFactor1" (formula "1") (term "3,0,0,1,0"))
                                             (rule "add_literals" (formula "1") (term "1,3,0,0,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "3,0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1"))
                                             (rule "mul_literals" (formula "7") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "16") (term "0"))
                                             (rule "concrete_or_1" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "pullOutSelect" (formula "8") (term "0,0,2,1,1,0") (inst "selectSK=arr_1"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0") (ifseqformula "8"))
                                             (rule "simplifySelectOfStore" (formula "8"))
                                             (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "8") (term "0,0"))
                                             (rule "equalUnique" (formula "8") (term "1,0,0"))
                                             (rule "concrete_and_4" (formula "8") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "8") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "8"))
                                             (rule "equalUnique" (formula "8") (term "1,0,0,0"))
                                             (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "8") (term "0,0"))
                                             (rule "eqSymm" (formula "8") (term "0,0,0"))
                                             (rule "sortsDisjointModuloNull" (formula "8") (term "0,0,0"))
                                             (rule "replace_known_right" (formula "8") (term "1,0,0,0") (ifseqformula "27"))
                                             (rule "concrete_and_4" (formula "8") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "8") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "8") (term "0"))
                                             (rule "applyEqReverse" (formula "9") (term "0,0,2,1,1,0") (ifseqformula "8"))
                                             (rule "applyEqReverse" (formula "1") (term "0,0,2,0") (ifseqformula "8"))
                                             (rule "hideAuxiliaryEq" (formula "8"))
                                             (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_2"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                             (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                             (rule "concrete_and_2" (formula "1") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "1") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "1"))
                                             (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                             (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                             (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                             (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "1") (term "0,0"))
                                             (rule "castDel" (formula "1") (term "1,0"))
                                             (rule "intCastEqual" (formula "1") (term "0,0"))
                                             (rule "pullOutSelect" (formula "9") (term "1,1,0") (inst "selectSK=arr_3"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "9"))
                                             (rule "simplifySelectOfStore" (formula "9"))
                                             (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "9") (term "0,0"))
                                             (rule "equalUnique" (formula "9") (term "1,0,0"))
                                             (rule "concrete_and_4" (formula "9") (term "0,0"))
                                             (rule "ifthenelse_false" (formula "9") (term "0"))
                                             (rule "simplifySelectOfStore" (formula "9"))
                                             (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                                             (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                                             (rule "concrete_and_3" (formula "9") (term "0,0"))
                                             (rule "equalUnique" (formula "9") (term "1,0,0"))
                                             (rule "eqClose" (formula "9") (term "0,0,0"))
                                             (rule "concrete_and_1" (formula "9") (term "0,0"))
                                             (rule "castDel" (formula "9") (term "1,0"))
                                             (rule "eqSymm" (formula "9") (term "0,0"))
                                             (rule "intCastEqual" (formula "9") (term "0,0"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
                                             (rule "mul_literals" (formula "6") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                             (rule "mul_literals" (formula "6") (term "1"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
                                             (rule "mul_literals" (formula "8") (term "0,0"))
                                             (rule "add_zero_left" (formula "8") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                             (rule "mul_literals" (formula "8") (term "1"))
                                             (rule "nnf_ex2all" (formula "34"))
                                             (rule "nnf_notAnd" (formula "5") (term "0"))
                                             (rule "nnf_imp2or" (formula "14") (term "0"))
                                             (rule "inEqSimp_notGeq" (formula "14") (term "0,0"))
                                             (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0"))
                                             (rule "mul_literals" (formula "14") (term "1,0,0"))
                                             (rule "nnf_imp2or" (formula "13") (term "0"))
                                             (rule "nnf_notAll" (formula "1") (term "0"))
                                             (rule "nnf_notAnd" (formula "5") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
                                             (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
                                             (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "14") (term "1,0"))
                                             (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                             (rule "nnf_notAnd" (formula "14") (term "0,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "14") (term "0,0,1,0"))
                                             (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,1,0"))
                                             (rule "mul_literals" (formula "14") (term "1,0,0,1,0"))
                                             (rule "inEqSimp_notLeq" (formula "14") (term "1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,1,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,1,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,0,1,0,1,0"))
                                             (rule "add_zero_left" (formula "14") (term "0,0,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,0,1,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "14") (term "0,1,0,1,1,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,1,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,1,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,1,0"))
                                             (rule "commute_or_2" (formula "5") (term "0"))
                                             (rule "commute_or_2" (formula "1") (term "0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0"))
                                             (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                             (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                                             (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                                             (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                                             (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,1,0,1,1,0"))
                                             (rule "ifthenelse_split" (formula "2") (term "0"))
                                             (branch "hb_0 = a_0 TRUE"
                                                (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                                                (rule "add_zero_right" (formula "4") (term "1"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "applyEq" (formula "29") (term "0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,2,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "13") (term "0,0,2,0,0,0,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "14") (term "0,2,0,1,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "17") (term "1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "14") (term "0,2,0,0,0,2,0,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "14") (term "0,0,2,0,0,0,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "2"))
                                                (rule "applyEq" (formula "14") (term "0,0,2,0,0,1,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "14") (term "0,0,2,0,0,0,0,2,0,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "14") (term "0,2,0,0,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "24") (term "0,0,2,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "13") (term "0,2,0,0,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "14") (term "0,2,0,0,0,2,1,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "16") (term "0,0,2,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "18") (term "0,2,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "18") (term "0,0,2,1") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "14") (term "0,0,2,0,0,0,0,2,1,1,0,0,1,0,1,1,0") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "13") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "13") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "2"))
                                                (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "2"))
                                                (rule "allLeft" (formula "20") (inst "t=a_0"))
                                                (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "28"))
                                                (rule "concrete_or_2" (formula "20"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "18"))
                                                (rule "inEqSimp_antiSymm" (formula "25") (ifseqformula "20"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "25"))
                                                (rule "leq_literals" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
                                                (rule "qeq_literals" (formula "25"))
                                                (rule "true_left" (formula "25"))
                                                (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "24"))
                                                (rule "applyEq" (formula "18") (term "1") (ifseqformula "24"))
                                                (rule "allLeft" (formula "25") (inst "t=a_0"))
                                                (rule "allLeft" (formula "26") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                                (rule "allLeft" (formula "22") (inst "t=j_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "11"))
                                                (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                                (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "22") (term "0,0,1"))
                                                (rule "leq_literals" (formula "22") (term "0,1"))
                                                (rule "concrete_and_2" (formula "22") (term "1"))
                                                (rule "concrete_or_4" (formula "22"))
                                                (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "9"))
                                                (rule "qeq_literals" (formula "22") (term "0,1"))
                                                (rule "concrete_and_2" (formula "22") (term "1"))
                                                (rule "concrete_or_4" (formula "22"))
                                                (rule "all_pull_out1" (formula "14") (term "0,1,1,0"))
                                                (rule "ex_pull_out3" (formula "14") (term "1,0"))
                                                (rule "commute_and" (formula "1") (term "0,0,0"))
                                                (rule "allLeft" (formula "5") (inst "t=j_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0") (ifseqformula "10"))
                                                (rule "qeq_literals" (formula "5") (term "0,1,0"))
                                                (rule "concrete_and_2" (formula "5") (term "1,0"))
                                                (rule "concrete_or_4" (formula "5") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "12"))
                                                (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
                                                (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "5") (term "0,0,1"))
                                                (rule "leq_literals" (formula "5") (term "0,1"))
                                                (rule "concrete_and_2" (formula "5") (term "1"))
                                                (rule "concrete_or_4" (formula "5"))
                                                (rule "notLeft" (formula "5"))
                                                (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "30"))
                                                (rule "ifthenelse_false" (formula "12") (term "0"))
                                                (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "12"))
                                                (rule "applyEqReverse" (formula "13") (term "1,1,0") (ifseqformula "12"))
                                                (rule "hideAuxiliaryEq" (formula "12"))
                                                (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "26") (term "0"))
                                                (rule "concrete_and_2" (formula "26"))
                                                (rule "closeFalse" (formula "26"))
                                             )
                                             (branch "hb_0 = a_0 FALSE"
                                                (rule "applyEqReverse" (formula "3") (term "1,1") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                (rule "mul_literals" (formula "2") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                (rule "ifthenelse_split" (formula "11") (term "0"))
                                                (branch "self.bidders[j_0] = hb_0 TRUE"
                                                   (rule "applyEqReverse" (formula "13") (term "1,1,0") (ifseqformula "12"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "12"))
                                                   (rule "add_literals" (formula "2") (term "1"))
                                                   (rule "hideAuxiliaryEq" (formula "12"))
                                                   (rule "all_pull_out1" (formula "13") (term "0,1,1,0"))
                                                   (rule "ex_pull_out3" (formula "13") (term "1,0"))
                                                   (rule "allLeft" (formula "19") (inst "t=a_0"))
                                                   (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "28"))
                                                   (rule "concrete_or_2" (formula "19"))
                                                   (rule "allLeft" (formula "22") (inst "t=j_0"))
                                                   (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                                   (rule "applyEq" (formula "22") (term "0,0,2,0,0,0") (ifseqformula "11"))
                                                   (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "8"))
                                                   (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                                   (rule "concrete_and_2" (formula "22") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "22") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                                                   (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "22") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "22") (term "0,1"))
                                                   (rule "concrete_and_2" (formula "22") (term "1"))
                                                   (rule "concrete_or_4" (formula "22"))
                                                   (rule "all_pull_out3" (formula "13") (term "0,1,0"))
                                                   (rule "cnf_rightDist" (formula "13") (term "0,0,1,0"))
                                                   (rule "commute_or_2" (formula "13") (term "1,0,0,1,0"))
                                                   (rule "shift_paren_or" (formula "13") (term "0,1,0,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "13") (term "0,0,0,1,0"))
                                                   (rule "commute_or_2" (formula "13") (term "0,0,0,0,1,0"))
                                                   (rule "commute_or" (formula "13") (term "1,0,0,0,1,0"))
                                                   (rule "commute_or" (formula "13") (term "0,0,0,0,0,1,0"))
                                                   (rule "allLeft" (formula "15") (inst "t=a_0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15"))
                                                   (rule "ex_pull_out3" (formula "13") (term "0"))
                                                   (rule "commute_and" (formula "1") (term "0,0,0"))
                                                   (rule "all_pull_out3" (formula "13") (term "0,0"))
                                                   (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "13") (term "1,0,0,0"))
                                                   (rule "commute_or_2" (formula "13") (term "0,1,0,0,0"))
                                                   (rule "eq_or_2" (formula "13") (term "0,0,1,0,0,0"))
                                                   (rule "cnf_rightDist" (formula "13") (term "0,0,0,0"))
                                                   (rule "commute_or_2" (formula "13") (term "1,0,0,0,0"))
                                                   (rule "shift_paren_or" (formula "13") (term "0,0,0,0,0"))
                                                   (rule "commute_or_2" (formula "13") (term "0,1,0,0,0,0"))
                                                   (rule "eq_or" (formula "13") (term "0,0,1,0,0,0,0"))
                                                   (rule "shift_paren_or" (formula "13") (term "0,0,0,0,0,0"))
                                                   (rule "commute_or" (formula "13") (term "0,0,0,0,0,0,0"))
                                                   (rule "eq_or_2" (formula "13") (term "0,0,0,0,0,0"))
                                                   (rule "allLeft" (formula "4") (inst "t=j_0"))
                                                   (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "12"))
                                                   (rule "replace_known_right" (formula "4") (term "0,0,0") (ifseqformula "30"))
                                                   (rule "concrete_not_2" (formula "4") (term "0,0"))
                                                   (rule "concrete_or_1" (formula "4") (term "0"))
                                                   (rule "concrete_or_1" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "commute_and_2" (formula "1") (term "0,0"))
                                                   (rule "allLeft" (formula "22") (inst "t=hb_0"))
                                                   (rule "exLeft" (formula "22") (inst "sk=i_1"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "eqSymm" (formula "22") (term "0"))
                                                   (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "26"))
                                                   (rule "concrete_not_1" (formula "24") (term "0"))
                                                   (rule "concrete_or_2" (formula "24"))
                                                   (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "26"))
                                                   (rule "concrete_not_1" (formula "22") (term "1"))
                                                   (rule "concrete_or_4" (formula "22"))
                                                   (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "26"))
                                                   (rule "concrete_not_1" (formula "23") (term "0"))
                                                   (rule "concrete_or_2" (formula "23"))
                                                   (rule "inEqSimp_homoInEq0" (formula "24"))
                                                   (rule "polySimp_addComm1" (formula "24") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                                   (rule "mul_literals" (formula "24") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "3"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "24") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "24"))
                                                   (rule "mul_literals" (formula "23") (term "0,0"))
                                                   (rule "add_zero_left" (formula "23") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                                   (rule "mul_literals" (formula "23") (term "1"))
                                                   (rule "allLeft" (formula "12") (inst "t=j_0"))
                                                   (rule "replaceKnownSelect_taclet010000100020000_37" (formula "12") (term "0,0,2,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010000100020000_39" (formula "12") (term "0,0,2,0,1"))
                                                   (rule "replaceKnownSelect_taclet010000100020000_42" (formula "12") (term "0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000100020000_45" (formula "12") (term "0,1"))
                                                   (rule "leq_literals" (formula "12") (term "1"))
                                                   (rule "concrete_or_3" (formula "12"))
                                                   (rule "true_left" (formula "12"))
                                                   (rule "allLeft" (formula "4") (inst "t=i_1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "23"))
                                                   (rule "replace_known_right" (formula "4") (term "0,0,0") (ifseqformula "34"))
                                                   (rule "concrete_not_2" (formula "4") (term "0,0"))
                                                   (rule "concrete_or_1" (formula "4") (term "0"))
                                                   (rule "concrete_or_1" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "allLeft" (formula "12") (inst "t=i_1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "0,0") (ifseqformula "24"))
                                                   (rule "qeq_literals" (formula "12") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "12") (term "0,0"))
                                                   (rule "concrete_or_2" (formula "12") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "26"))
                                                   (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
                                                   (rule "add_literals" (formula "12") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "12") (term "0,0"))
                                                   (rule "concrete_and_2" (formula "12") (term "0"))
                                                   (rule "concrete_or_2" (formula "12"))
                                                   (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=arr_4"))
                                                   (rule "simplifySelectOfStore" (formula "12"))
                                                   (rule "equalUnique" (formula "12") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "12") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "12") (term "0,0"))
                                                   (rule "equalUnique" (formula "12") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "12") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "12") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "12"))
                                                   (rule "equalUnique" (formula "12") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "12") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "12") (term "0,0"))
                                                   (rule "eqClose" (formula "12") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "12") (term "0,0"))
                                                   (rule "equalUnique" (formula "12") (term "0,0"))
                                                   (rule "castDel" (formula "12") (term "1,0"))
                                                   (rule "eqSymm" (formula "12") (term "0,0"))
                                                   (rule "intCastEqual" (formula "12") (term "0,0"))
                                                   (rule "pullOutSelect" (formula "12") (term "0,0,2,2,0") (inst "selectSK=arr_5"))
                                                   (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "12"))
                                                   (rule "simplifySelectOfStore" (formula "12"))
                                                   (rule "equalUnique" (formula "12") (term "1,0,0,0"))
                                                   (rule "concrete_and_4" (formula "12") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "12") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "12") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "12"))
                                                   (rule "equalUnique" (formula "12") (term "1,0,0,0"))
                                                   (rule "equalUnique" (formula "12") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "12") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "12") (term "0,0"))
                                                   (rule "eqSymm" (formula "13") (term "0,0"))
                                                   (rule "eqSymm" (formula "12") (term "0,0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "12") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "12") (term "1,0,0,0") (ifseqformula "41"))
                                                   (rule "concrete_and_4" (formula "12") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "12") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "12") (term "0"))
                                                   (rule "applyEqReverse" (formula "13") (term "1,0,0") (ifseqformula "12"))
                                                   (rule "applyEqReverse" (formula "13") (term "0,0,2,2,0") (ifseqformula "12"))
                                                   (rule "hideAuxiliaryEq" (formula "12"))
                                                   (rule "eqSymm" (formula "12") (term "0,0"))
                                                   (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "24"))
                                                   (rule "ifthenelse_true" (formula "12") (term "0"))
                                                   (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "12"))
                                                   (rule "leq_literals" (formula "13"))
                                                   (rule "true_left" (formula "13"))
                                                   (rule "hideAuxiliaryEq" (formula "12"))
                                                   (rule "allLeft" (formula "28") (inst "t=i_1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                   (rule "applyEq" (formula "28") (term "0,0,2,0,0,0") (ifseqformula "22"))
                                                   (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "concrete_or_1" (formula "28") (term "0"))
                                                   (rule "concrete_or_1" (formula "28"))
                                                   (rule "true_left" (formula "28"))
                                                   (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                                   (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "19"))
                                                   (rule "leq_literals" (formula "21") (term "1"))
                                                   (rule "concrete_or_3" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "allLeft" (formula "28") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                                   (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                   (rule "allLeft" (formula "29") (inst "t=(int)(hb_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                                                   (rule "allLeft" (formula "17") (inst "t=a_0"))
                                                   (rule "eqSymm" (formula "17") (term "1"))
                                                   (rule "eqSymm" (formula "17") (term "1,0"))
                                                   (rule "eqSymm" (formula "17") (term "0,0"))
                                                   (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "36"))
                                                   (rule "concrete_or_2" (formula "17") (term "0"))
                                                   (rule "allLeft" (formula "31") (inst "t=(int)(a_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                                                   (rule "allLeft" (formula "27") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                                   (rule "exLeft" (formula "27") (inst "sk=i_2"))
                                                   (rule "andLeft" (formula "27"))
                                                   (rule "andLeft" (formula "27"))
                                                   (rule "eqSymm" (formula "27") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
                                                   (rule "polySimp_addComm1" (formula "29") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1"))
                                                   (rule "polySimp_mulComm0" (formula "29") (term "1,1"))
                                                   (rule "polySimp_rightDist" (formula "29") (term "1,1"))
                                                   (rule "mul_literals" (formula "29") (term "0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1"))
                                                   (rule "polySimp_elimOne" (formula "29") (term "1,1,1"))
                                                   (rule "allLeft" (formula "38") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                                                   (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                                                   (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "16"))
                                                   (rule "mul_literals" (formula "39") (term "0,0"))
                                                   (rule "add_zero_left" (formula "39") (term "0"))
                                                   (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(hb_0)))"))
                                                   (rule "allLeft" (formula "41") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(hb_0)))"))
                                                   (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "17"))
                                                   (rule "mul_literals" (formula "41") (term "0,0"))
                                                   (rule "add_zero_left" (formula "41") (term "0"))
                                                   (rule "allLeft" (formula "18") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(a_0)))"))
                                                   (rule "allLeft" (formula "43") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(a_0)))"))
                                                   (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "18"))
                                                   (rule "mul_literals" (formula "43") (term "0,0"))
                                                   (rule "add_zero_left" (formula "43") (term "0"))
                                                   (rule "allLeft" (formula "4") (inst "t=(int)(hb_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                                                   (rule "allLeft" (formula "5") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                                   (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                                                   (rule "allLeft" (formula "6") (inst "t=(int)(a_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "6") (term "1"))
                                                   (rule "allLeft" (formula "15") (inst "t=(int)(a_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "15") (term "1,0"))
                                                   (rule "pullOutSelect" (formula "15") (term "0,1") (inst "selectSK=arr_6"))
                                                   (rule "simplifySelectOfStore" (formula "15"))
                                                   (rule "equalUnique" (formula "15") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "15") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "15") (term "0,0"))
                                                   (rule "equalUnique" (formula "15") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "15") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "15") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "15"))
                                                   (rule "equalUnique" (formula "15") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "15") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "15") (term "0,0"))
                                                   (rule "eqClose" (formula "15") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "15") (term "0,0"))
                                                   (rule "equalUnique" (formula "15") (term "0,0"))
                                                   (rule "castDel" (formula "15") (term "1,0"))
                                                   (rule "eqSymm" (formula "15") (term "0,0"))
                                                   (rule "intCastEqual" (formula "15") (term "0,0"))
                                                   (rule "pullOutSelect" (formula "15") (term "0,0,2,2,0") (inst "selectSK=arr_7"))
                                                   (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "15"))
                                                   (rule "simplifySelectOfStore" (formula "15"))
                                                   (rule "equalUnique" (formula "15") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "15") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "15") (term "0,0"))
                                                   (rule "equalUnique" (formula "15") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "15") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "15") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "15"))
                                                   (rule "equalUnique" (formula "15") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "15") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "15") (term "0,0"))
                                                   (rule "equalUnique" (formula "15") (term "1,0,0"))
                                                   (rule "eqSymm" (formula "16") (term "0,0"))
                                                   (rule "eqSymm" (formula "15") (term "0,0,0"))
                                                   (rule "intCastEqual" (formula "15") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "15") (term "1,0,0") (ifseqformula "52"))
                                                   (rule "concrete_and_4" (formula "15") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "15") (term "0"))
                                                   (rule "applyEqReverse" (formula "16") (term "1,0,0") (ifseqformula "15"))
                                                   (rule "applyEqReverse" (formula "16") (term "0,0,2,2,0") (ifseqformula "15"))
                                                   (rule "hideAuxiliaryEq" (formula "15"))
                                                   (rule "eqSymm" (formula "15") (term "0,0"))
                                                   (rule "commute_or_2" (formula "16"))
                                                   (rule "commute_or" (formula "16") (term "0"))
                                                   (rule "allLeft" (formula "17") (inst "t=(int)(hb_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                                                   (rule "pullOutSelect" (formula "17") (term "0,0,2,0,1") (inst "selectSK=arr_8"))
                                                   (rule "simplifySelectOfStore" (formula "17"))
                                                   (rule "equalUnique" (formula "17") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "17") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "17") (term "0,0"))
                                                   (rule "equalUnique" (formula "17") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "17") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "17") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "17"))
                                                   (rule "equalUnique" (formula "17") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "17") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "17") (term "0,0"))
                                                   (rule "eqClose" (formula "17") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "17") (term "0,0"))
                                                   (rule "eqSymm" (formula "17") (term "0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "17") (term "0,0"))
                                                   (rule "replace_known_right" (formula "17") (term "0,0,0") (ifseqformula "57"))
                                                   (rule "concrete_and_2" (formula "17") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "17") (term "0"))
                                                   (rule "applyEqReverse" (formula "18") (term "0,0,2,0,1") (ifseqformula "17"))
                                                   (rule "hideAuxiliaryEq" (formula "17"))
                                                   (rule "pullOutSelect" (formula "17") (term "0,1") (inst "selectSK=arr_9"))
                                                   (rule "simplifySelectOfStore" (formula "17"))
                                                   (rule "equalUnique" (formula "17") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "17") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "17") (term "0,0"))
                                                   (rule "equalUnique" (formula "17") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "17") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "17") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "17"))
                                                   (rule "equalUnique" (formula "17") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "17") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "17") (term "0,0"))
                                                   (rule "equalUnique" (formula "17") (term "1,0,0"))
                                                   (rule "eqClose" (formula "17") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "17") (term "0,0"))
                                                   (rule "castDel" (formula "17") (term "1,0"))
                                                   (rule "eqSymm" (formula "17") (term "0,0"))
                                                   (rule "intCastEqual" (formula "17") (term "0,0"))
                                                   (rule "commute_or_2" (formula "18"))
                                                   (rule "commute_or" (formula "18") (term "0"))
                                                   (rule "allLeft" (formula "19") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                                   (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                                                   (rule "pullOutSelect" (formula "19") (term "0,1") (inst "selectSK=arr_10"))
                                                   (rule "simplifySelectOfStore" (formula "19"))
                                                   (rule "equalUnique" (formula "19") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "19") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "19") (term "0,0"))
                                                   (rule "equalUnique" (formula "19") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "19") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "19") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "19"))
                                                   (rule "equalUnique" (formula "19") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "19") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "19") (term "0,0"))
                                                   (rule "eqClose" (formula "19") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "19") (term "0,0"))
                                                   (rule "equalUnique" (formula "19") (term "0,0"))
                                                   (rule "castDel" (formula "19") (term "1,0"))
                                                   (rule "eqSymm" (formula "19") (term "0,0"))
                                                   (rule "intCastEqual" (formula "19") (term "0,0"))
                                                   (rule "pullOutSelect" (formula "19") (term "0,0,2,2,0") (inst "selectSK=arr_11"))
                                                   (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "19"))
                                                   (rule "simplifySelectOfStore" (formula "19"))
                                                   (rule "equalUnique" (formula "19") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "19") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "19") (term "0,0"))
                                                   (rule "equalUnique" (formula "19") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "19") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "19") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "19"))
                                                   (rule "equalUnique" (formula "19") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "19") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "19") (term "0,0"))
                                                   (rule "equalUnique" (formula "19") (term "1,0,0"))
                                                   (rule "eqSymm" (formula "20") (term "0,0"))
                                                   (rule "eqSymm" (formula "19") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "19") (term "1,0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "19") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "19") (term "1,0,0,0") (ifseqformula "61"))
                                                   (rule "concrete_and_4" (formula "19") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "19") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "19") (term "0"))
                                                   (rule "applyEqReverse" (formula "20") (term "1,0,0") (ifseqformula "19"))
                                                   (rule "applyEqReverse" (formula "20") (term "0,0,2,2,0") (ifseqformula "19"))
                                                   (rule "hideAuxiliaryEq" (formula "19"))
                                                   (rule "eqSymm" (formula "19") (term "0,0"))
                                                   (rule "commute_or_2" (formula "20"))
                                                   (rule "commute_or" (formula "20") (term "0"))
                                                   (rule "cut_direct" (formula "44") (term "1,0"))
                                                   (branch "CUT: (int)self.auctionOwner <= -1 TRUE"
                                                      (rule "concrete_or_3" (formula "45") (term "0"))
                                                      (rule "concrete_or_1" (formula "45"))
                                                      (rule "true_left" (formula "45"))
                                                      (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "44"))
                                                      (rule "concrete_or_3" (formula "5") (term "0"))
                                                      (rule "concrete_or_1" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "43"))
                                                      (rule "concrete_or_3" (formula "19") (term "0"))
                                                      (rule "concrete_or_1" (formula "19"))
                                                      (rule "true_left" (formula "19"))
                                                      (rule "cut_direct" (formula "43") (term "1,0"))
                                                      (branch "CUT: (int)(hb_0) <= -1 TRUE"
                                                         (rule "concrete_or_3" (formula "44") (term "0"))
                                                         (rule "concrete_or_1" (formula "44"))
                                                         (rule "true_left" (formula "44"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0") (ifseqformula "43"))
                                                         (rule "concrete_or_3" (formula "4") (term "0"))
                                                         (rule "concrete_or_1" (formula "4"))
                                                         (rule "true_left" (formula "4"))
                                                         (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "42"))
                                                         (rule "concrete_or_3" (formula "16") (term "0"))
                                                         (rule "concrete_or_1" (formula "16"))
                                                         (rule "true_left" (formula "16"))
                                                         (rule "cut_direct" (formula "25") (term "0"))
                                                         (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                            (rule "concrete_or_1" (formula "26"))
                                                            (rule "true_left" (formula "26"))
                                                            (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,0,0") (ifseqformula "25"))
                                                            (rule "applyEq" (formula "16") (term "0,0,2,0,0,0") (ifseqformula "25"))
                                                            (rule "applyEq" (formula "35") (term "0,0,2,0,0,1") (ifseqformula "25"))
                                                            (rule "replace_known_right" (formula "35") (term "0,1") (ifseqformula "52"))
                                                            (rule "concrete_not_2" (formula "35") (term "1"))
                                                            (rule "concrete_or_3" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "applyEq" (formula "45") (term "0,0,2,0,0,2,0") (ifseqformula "25"))
                                                            (rule "applyEq" (formula "35") (term "0,0,2,0,0,0") (ifseqformula "25"))
                                                            (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "50"))
                                                            (rule "concrete_not_2" (formula "35") (term "0"))
                                                            (rule "concrete_or_1" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "applyEq" (formula "35") (term "0,0,2,0,0,0") (ifseqformula "25"))
                                                            (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "49"))
                                                            (rule "concrete_not_2" (formula "35") (term "0"))
                                                            (rule "concrete_or_1" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "25"))
                                                            (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "37"))
                                                            (rule "concrete_or_3" (formula "14") (term "0"))
                                                            (rule "concrete_or_1" (formula "14"))
                                                            (rule "true_left" (formula "14"))
                                                            (rule "replace_known_left" (formula "38") (term "1,0") (ifseqformula "36"))
                                                            (rule "concrete_or_3" (formula "38") (term "0"))
                                                            (rule "concrete_or_1" (formula "38"))
                                                            (rule "true_left" (formula "38"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0") (ifseqformula "36"))
                                                            (rule "concrete_or_3" (formula "4") (term "0"))
                                                            (rule "concrete_or_1" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "applyEq" (formula "19") (term "0,0,2,0,0,2,0") (ifseqformula "23"))
                                                            (rule "applyEq" (formula "49") (term "0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "25") (term "0,2,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "23") (term "1,1,0,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "37") (term "0,0,2,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "14") (term "0,0,2,0,0,2,2,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "18") (term "1") (ifseqformula "37"))
                                                            (rule "applyEq" (formula "2") (term "0") (ifseqformula "36"))
                                                            (rule "qeq_literals" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                            (rule "concrete_or_2" (formula "25"))
                                                            (rule "applyEq" (formula "29") (term "0") (ifseqformula "25"))
                                                            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                                                            (rule "qeq_literals" (formula "2") (term "0"))
                                                            (rule "concrete_and_2" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                      (branch "CUT: (int)(hb_0) <= -1 FALSE"
                                                         (rule "concrete_or_4" (formula "43") (term "0"))
                                                         (rule "replace_known_right" (formula "17") (term "1,0") (ifseqformula "53"))
                                                         (rule "concrete_or_4" (formula "17") (term "0"))
                                                         (rule "replace_known_right" (formula "4") (term "1,0") (ifseqformula "53"))
                                                         (rule "concrete_or_4" (formula "4") (term "0"))
                                                         (rule "inEqSimp_leqRight" (formula "53"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "cut_direct" (formula "44") (term "1"))
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(hb_0) TRUE"
                                                            (rule "concrete_or_3" (formula "45"))
                                                            (rule "true_left" (formula "45"))
                                                            (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "44"))
                                                            (rule "concrete_or_3" (formula "18"))
                                                            (rule "true_left" (formula "18"))
                                                            (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "43"))
                                                            (rule "concrete_or_3" (formula "5"))
                                                            (rule "true_left" (formula "5"))
                                                            (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "42"))
                                                            (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                                                            (rule "mul_literals" (formula "35") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                                                            (rule "polySimp_mulComm0" (formula "35") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "35") (term "1"))
                                                            (rule "mul_literals" (formula "35") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "35") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "43"))
                                                            (rule "mul_literals" (formula "9") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                                            (rule "mul_literals" (formula "9") (term "1"))
                                                            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "9"))
                                                            (rule "leq_literals" (formula "1") (term "0"))
                                                            (rule "concrete_or_1" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "43"))
                                                            (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                                            (rule "mul_literals" (formula "12") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                            (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "12") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                                            (rule "mul_literals" (formula "12") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                                            (rule "cut_direct" (formula "27") (term "0"))
                                                            (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                               (rule "concrete_or_1" (formula "28"))
                                                               (rule "true_left" (formula "28"))
                                                               (rule "applyEq" (formula "18") (term "0,0,2,0,0,2,2,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "39") (term "0,0,2,0,0,0") (ifseqformula "27"))
                                                               (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "55"))
                                                               (rule "concrete_not_2" (formula "39") (term "0"))
                                                               (rule "concrete_or_1" (formula "39"))
                                                               (rule "true_left" (formula "39"))
                                                               (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "27"))
                                                               (rule "replace_known_left" (formula "44") (term "1,0") (ifseqformula "42"))
                                                               (rule "concrete_or_3" (formula "44") (term "0"))
                                                               (rule "concrete_or_1" (formula "44"))
                                                               (rule "true_left" (formula "44"))
                                                               (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "42"))
                                                               (rule "concrete_or_3" (formula "16") (term "0"))
                                                               (rule "concrete_or_1" (formula "16"))
                                                               (rule "true_left" (formula "16"))
                                                               (rule "replace_known_left" (formula "4") (term "1,0") (ifseqformula "41"))
                                                               (rule "concrete_or_3" (formula "4") (term "0"))
                                                               (rule "concrete_or_1" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEq" (formula "21") (term "0,0,2,0,0,2,0") (ifseqformula "25"))
                                                               (rule "applyEq" (formula "27") (term "0,2,0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "36") (term "0,0,2,0,0,0") (ifseqformula "24"))
                                                               (rule "replace_known_right" (formula "36") (term "0,0") (ifseqformula "50"))
                                                               (rule "concrete_not_2" (formula "36") (term "0"))
                                                               (rule "concrete_or_1" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "applyEq" (formula "43") (term "0,0,2,0,0,2,0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "25") (term "1,1,0,0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "35") (term "0,0,2,0,0,1") (ifseqformula "24"))
                                                               (rule "replace_known_right" (formula "35") (term "0,1") (ifseqformula "48"))
                                                               (rule "concrete_not_2" (formula "35") (term "1"))
                                                               (rule "concrete_or_3" (formula "35"))
                                                               (rule "true_left" (formula "35"))
                                                               (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,0,0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "16") (term "0,0,2,0,0,0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "52") (term "0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "40") (term "0,0,2,0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
                                                               (rule "hideAuxiliaryEq" (formula "16"))
                                                               (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
                                                               (rule "leq_literals" (formula "27"))
                                                               (rule "true_left" (formula "27"))
                                                               (rule "applyEq" (formula "19") (term "1") (ifseqformula "38"))
                                                               (rule "applyEq" (formula "2") (term "0") (ifseqformula "37"))
                                                               (rule "qeq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                            (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                               (rule "concrete_or_2" (formula "27"))
                                                               (rule "applyEq" (formula "31") (term "0") (ifseqformula "27"))
                                                               (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
                                                               (rule "qeq_literals" (formula "31") (term "0"))
                                                               (rule "concrete_and_2" (formula "31"))
                                                               (rule "closeFalse" (formula "31"))
                                                            )
                                                         )
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(hb_0) FALSE"
                                                            (rule "concrete_or_4" (formula "44"))
                                                            (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "54"))
                                                            (rule "concrete_or_4" (formula "18"))
                                                            (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "54"))
                                                            (rule "concrete_or_4" (formula "5"))
                                                            (rule "notLeft" (formula "5"))
                                                            (rule "inEqSimp_leqRight" (formula "54"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                            (rule "mul_literals" (formula "1") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "5"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                            (rule "mul_literals" (formula "3") (term "0,0"))
                                                            (rule "add_zero_left" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                            (rule "mul_literals" (formula "3") (term "1"))
                                                            (rule "cut_direct" (formula "29") (term "0"))
                                                            (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                               (rule "concrete_or_1" (formula "30"))
                                                               (rule "true_left" (formula "30"))
                                                               (rule "applyEq" (formula "39") (term "0,0,2,0,0,1") (ifseqformula "29"))
                                                               (rule "replace_known_right" (formula "39") (term "0,1") (ifseqformula "57"))
                                                               (rule "concrete_not_2" (formula "39") (term "1"))
                                                               (rule "concrete_or_3" (formula "39"))
                                                               (rule "true_left" (formula "39"))
                                                               (rule "applyEq" (formula "4") (term "1,0,0,0,0,0,0,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "47") (term "0,0,2,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "49") (term "0,0,2,0,0,2,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "60") (term "0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "43") (term "0,0") (ifseqformula "29"))
                                                               (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "43"))
                                                               (rule "concrete_or_3" (formula "7") (term "0"))
                                                               (rule "concrete_or_1" (formula "7"))
                                                               (rule "true_left" (formula "7"))
                                                               (rule "replace_known_left" (formula "44") (term "1,0") (ifseqformula "42"))
                                                               (rule "concrete_or_3" (formula "44") (term "0"))
                                                               (rule "concrete_or_1" (formula "44"))
                                                               (rule "true_left" (formula "44"))
                                                               (rule "replace_known_left" (formula "16") (term "1,0") (ifseqformula "42"))
                                                               (rule "concrete_or_3" (formula "16") (term "0"))
                                                               (rule "concrete_or_1" (formula "16"))
                                                               (rule "true_left" (formula "16"))
                                                               (rule "applyEq" (formula "38") (term "0,0,2,0,0,0") (ifseqformula "27"))
                                                               (rule "replace_known_right" (formula "38") (term "0,0") (ifseqformula "52"))
                                                               (rule "concrete_not_2" (formula "38") (term "0"))
                                                               (rule "concrete_or_1" (formula "38"))
                                                               (rule "true_left" (formula "38"))
                                                               (rule "applyEq" (formula "23") (term "0,0,2,0,0,2,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "18") (term "0,0,2,0,0,2,2,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "36") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                                               (rule "replace_known_right" (formula "36") (term "0,0") (ifseqformula "50"))
                                                               (rule "concrete_not_2" (formula "36") (term "0"))
                                                               (rule "concrete_or_1" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "applyEq" (formula "27") (term "1,1,0,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "29") (term "0,2,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                                                               (rule "hideAuxiliaryEq" (formula "15"))
                                                               (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                                                               (rule "leq_literals" (formula "29"))
                                                               (rule "true_left" (formula "29"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "39"))
                                                               (rule "qeq_literals" (formula "5"))
                                                               (rule "closeFalse" (formula "5"))
                                                            )
                                                            (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                               (rule "concrete_or_2" (formula "29"))
                                                               (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                                                               (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "33"))
                                                               (rule "qeq_literals" (formula "5") (term "0"))
                                                               (rule "concrete_and_2" (formula "5"))
                                                               (rule "closeFalse" (formula "5"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: (int)self.auctionOwner <= -1 FALSE"
                                                      (rule "concrete_or_4" (formula "44") (term "0"))
                                                      (rule "replace_known_right" (formula "5") (term "1,0") (ifseqformula "55"))
                                                      (rule "concrete_or_4" (formula "5") (term "0"))
                                                      (rule "replace_known_right" (formula "20") (term "1,0") (ifseqformula "55"))
                                                      (rule "concrete_or_4" (formula "20") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "55"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "cut_direct" (formula "45") (term "1"))
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner TRUE"
                                                         (rule "concrete_or_3" (formula "46"))
                                                         (rule "true_left" (formula "46"))
                                                         (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "45"))
                                                         (rule "concrete_or_3" (formula "6"))
                                                         (rule "true_left" (formula "6"))
                                                         (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "44"))
                                                         (rule "concrete_or_3" (formula "20"))
                                                         (rule "true_left" (formula "20"))
                                                         (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "43"))
                                                         (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                                         (rule "mul_literals" (formula "13") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                                         (rule "polySimp_mulComm0" (formula "13") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "13") (term "1"))
                                                         (rule "mul_literals" (formula "13") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "44"))
                                                         (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                         (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                         (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                         (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                         (rule "mul_literals" (formula "38") (term "0,1"))
                                                         (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "45"))
                                                         (rule "mul_literals" (formula "10") (term "0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                                         (rule "mul_literals" (formula "10") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "1") (term "0"))
                                                         (rule "concrete_or_1" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "cut_direct" (formula "46") (term "1,0"))
                                                         (branch "CUT: (int)(hb_0) <= -1 TRUE"
                                                            (rule "concrete_or_3" (formula "47") (term "0"))
                                                            (rule "concrete_or_1" (formula "47"))
                                                            (rule "true_left" (formula "47"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0") (ifseqformula "46"))
                                                            (rule "concrete_or_3" (formula "4") (term "0"))
                                                            (rule "concrete_or_1" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "45"))
                                                            (rule "concrete_or_3" (formula "18") (term "0"))
                                                            (rule "concrete_or_1" (formula "18"))
                                                            (rule "true_left" (formula "18"))
                                                            (rule "cut_direct" (formula "27") (term "0"))
                                                            (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                               (rule "concrete_or_1" (formula "28"))
                                                               (rule "true_left" (formula "28"))
                                                               (rule "applyEq" (formula "60") (term "0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,0,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "49") (term "0,0,2,0,0,2,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "30") (term "0,2,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "47") (term "0,0,2,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "38") (term "0,0,2,0,0,1") (ifseqformula "27"))
                                                               (rule "replace_known_right" (formula "38") (term "0,1") (ifseqformula "54"))
                                                               (rule "concrete_not_2" (formula "38") (term "1"))
                                                               (rule "concrete_or_3" (formula "38"))
                                                               (rule "true_left" (formula "38"))
                                                               (rule "applyEq" (formula "38") (term "0,0,2,0,0,0") (ifseqformula "27"))
                                                               (rule "replace_known_right" (formula "38") (term "0,0") (ifseqformula "53"))
                                                               (rule "concrete_not_2" (formula "38") (term "0"))
                                                               (rule "concrete_or_1" (formula "38"))
                                                               (rule "true_left" (formula "38"))
                                                               (rule "applyEq" (formula "23") (term "0,0,2,0,0,2,0") (ifseqformula "27"))
                                                               (rule "applyEq" (formula "37") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                                               (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "51"))
                                                               (rule "concrete_not_2" (formula "37") (term "0"))
                                                               (rule "concrete_or_1" (formula "37"))
                                                               (rule "true_left" (formula "37"))
                                                               (rule "applyEq" (formula "39") (term "0,1") (ifseqformula "26"))
                                                               (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "39"))
                                                               (rule "concrete_or_3" (formula "41"))
                                                               (rule "true_left" (formula "41"))
                                                               (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "39"))
                                                               (rule "concrete_or_3" (formula "16"))
                                                               (rule "true_left" (formula "16"))
                                                               (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "38"))
                                                               (rule "concrete_or_3" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "16") (term "0,0,2,0,0,2,2,0") (ifseqformula "24"))
                                                               (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
                                                               (rule "hideAuxiliaryEq" (formula "16"))
                                                               (rule "applyEq" (formula "2") (term "0") (ifseqformula "39"))
                                                               (rule "qeq_literals" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                            (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                               (rule "concrete_or_2" (formula "27"))
                                                               (rule "applyEq" (formula "31") (term "0") (ifseqformula "27"))
                                                               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "31"))
                                                               (rule "qeq_literals" (formula "2") (term "0"))
                                                               (rule "concrete_and_2" (formula "2"))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                         (branch "CUT: (int)(hb_0) <= -1 FALSE"
                                                            (rule "concrete_or_4" (formula "46") (term "0"))
                                                            (rule "replace_known_right" (formula "4") (term "1,0") (ifseqformula "56"))
                                                            (rule "concrete_or_4" (formula "4") (term "0"))
                                                            (rule "replace_known_right" (formula "19") (term "1,0") (ifseqformula "56"))
                                                            (rule "concrete_or_4" (formula "19") (term "0"))
                                                            (rule "inEqSimp_leqRight" (formula "56"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "cut_direct" (formula "47") (term "1"))
                                                            (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(hb_0) TRUE"
                                                               (rule "concrete_or_3" (formula "48"))
                                                               (rule "true_left" (formula "48"))
                                                               (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "47"))
                                                               (rule "concrete_or_3" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "46"))
                                                               (rule "concrete_or_3" (formula "19"))
                                                               (rule "true_left" (formula "19"))
                                                               (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "45"))
                                                               (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                               (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                               (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                               (rule "mul_literals" (formula "38") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "46"))
                                                               (rule "mul_literals" (formula "10") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                                                               (rule "mul_literals" (formula "10") (term "1"))
                                                               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "10"))
                                                               (rule "leq_literals" (formula "1") (term "0"))
                                                               (rule "concrete_or_1" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "46"))
                                                               (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                                               (rule "mul_literals" (formula "14") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                               (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "14") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                                               (rule "mul_literals" (formula "14") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                                               (rule "cut_direct" (formula "29") (term "0"))
                                                               (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                  (rule "concrete_or_1" (formula "30"))
                                                                  (rule "true_left" (formula "30"))
                                                                  (rule "applyEq" (formula "25") (term "0,0,2,0,0,2,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "51") (term "0,0,2,0,0,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "42") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "42") (term "0,0") (ifseqformula "56"))
                                                                  (rule "concrete_not_2" (formula "42") (term "0"))
                                                                  (rule "concrete_or_1" (formula "42"))
                                                                  (rule "true_left" (formula "42"))
                                                                  (rule "applyEq" (formula "41") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "41") (term "0,0") (ifseqformula "55"))
                                                                  (rule "concrete_not_2" (formula "41") (term "0"))
                                                                  (rule "concrete_or_1" (formula "41"))
                                                                  (rule "true_left" (formula "41"))
                                                                  (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "20") (term "0,0,2,0,0,2,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "31") (term "0,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "59") (term "0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "40") (term "0,0,2,0,0,1") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "40") (term "0,1") (ifseqformula "54"))
                                                                  (rule "concrete_not_2" (formula "40") (term "1"))
                                                                  (rule "concrete_or_3" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "42") (term "0,1") (ifseqformula "28"))
                                                                  (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "42"))
                                                                  (rule "concrete_or_3" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "41"))
                                                                  (rule "concrete_or_3" (formula "17"))
                                                                  (rule "true_left" (formula "17"))
                                                                  (rule "replace_known_left" (formula "42") (term "1") (ifseqformula "40"))
                                                                  (rule "concrete_or_3" (formula "42"))
                                                                  (rule "true_left" (formula "42"))
                                                                  (rule "applyEq" (formula "43") (term "0,0,2,0") (ifseqformula "26"))
                                                                  (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                                                  (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                                                                  (rule "leq_literals" (formula "30"))
                                                                  (rule "true_left" (formula "30"))
                                                                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "18"))
                                                                  (rule "hideAuxiliaryEq" (formula "16"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "41"))
                                                                  (rule "qeq_literals" (formula "2"))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                               (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                  (rule "concrete_or_2" (formula "29"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "2"))
                                                                  (rule "qeq_literals" (formula "33") (term "0"))
                                                                  (rule "concrete_and_2" (formula "33"))
                                                                  (rule "closeFalse" (formula "33"))
                                                               )
                                                            )
                                                            (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(hb_0) FALSE"
                                                               (rule "concrete_or_4" (formula "47"))
                                                               (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "57"))
                                                               (rule "concrete_or_4" (formula "5"))
                                                               (rule "notLeft" (formula "5"))
                                                               (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "57"))
                                                               (rule "concrete_or_4" (formula "19"))
                                                               (rule "inEqSimp_leqRight" (formula "57"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                               (rule "mul_literals" (formula "1") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "5"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                               (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "47"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                               (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                               (rule "mul_literals" (formula "2") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                                               (rule "times_zero_1" (formula "4") (term "0,0"))
                                                               (rule "add_zero_left" (formula "4") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                               (rule "mul_literals" (formula "4") (term "1"))
                                                               (rule "cut_direct" (formula "32") (term "0"))
                                                               (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                  (rule "concrete_or_1" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "28") (term "0,0,2,0,0,2,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "65") (term "0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "23") (term "0,0,2,0,0,2,2,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "43") (term "0,0,2,0,0,0") (ifseqformula "31"))
                                                                  (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "60"))
                                                                  (rule "concrete_not_2" (formula "43") (term "0"))
                                                                  (rule "concrete_or_1" (formula "43"))
                                                                  (rule "true_left" (formula "43"))
                                                                  (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "50") (term "0,0,2,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "46") (term "0,1") (ifseqformula "31"))
                                                                  (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "46"))
                                                                  (rule "concrete_or_3" (formula "8"))
                                                                  (rule "true_left" (formula "8"))
                                                                  (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "45"))
                                                                  (rule "concrete_or_3" (formula "19"))
                                                                  (rule "true_left" (formula "19"))
                                                                  (rule "replace_known_left" (formula "46") (term "1") (ifseqformula "44"))
                                                                  (rule "concrete_or_3" (formula "46"))
                                                                  (rule "true_left" (formula "46"))
                                                                  (rule "applyEq" (formula "32") (term "0,2,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "49") (term "0,0,2,0,0,2,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "41") (term "0,0,2,0,0,0") (ifseqformula "29"))
                                                                  (rule "replace_known_right" (formula "41") (term "0,0") (ifseqformula "55"))
                                                                  (rule "concrete_not_2" (formula "41") (term "0"))
                                                                  (rule "concrete_or_1" (formula "41"))
                                                                  (rule "true_left" (formula "41"))
                                                                  (rule "applyEq" (formula "21") (term "0,0,2,0,0,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "29"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "2"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                  (rule "applyEq" (formula "40") (term "0,0,2,0,0,1") (ifseqformula "29"))
                                                                  (rule "replace_known_right" (formula "40") (term "0,1") (ifseqformula "54"))
                                                                  (rule "concrete_not_2" (formula "40") (term "1"))
                                                                  (rule "concrete_or_3" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "45"))
                                                                  (rule "qeq_literals" (formula "6"))
                                                                  (rule "closeFalse" (formula "6"))
                                                               )
                                                               (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                  (rule "concrete_or_2" (formula "32"))
                                                                  (rule "applyEq" (formula "36") (term "0") (ifseqformula "32"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                                  (rule "qeq_literals" (formula "6") (term "0"))
                                                                  (rule "concrete_and_2" (formula "6"))
                                                                  (rule "closeFalse" (formula "6"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner FALSE"
                                                         (rule "concrete_or_4" (formula "45"))
                                                         (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "56"))
                                                         (rule "concrete_or_4" (formula "6"))
                                                         (rule "notLeft" (formula "6"))
                                                         (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "56"))
                                                         (rule "concrete_or_4" (formula "20"))
                                                         (rule "inEqSimp_leqRight" (formula "56"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                         (rule "mul_literals" (formula "1") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "5"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                         (rule "mul_literals" (formula "3") (term "0,0"))
                                                         (rule "add_zero_left" (formula "3") (term "0"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                         (rule "mul_literals" (formula "3") (term "1"))
                                                         (rule "cut_direct" (formula "47") (term "1,0"))
                                                         (branch "CUT: (int)(hb_0) <= -1 TRUE"
                                                            (rule "concrete_or_3" (formula "48") (term "0"))
                                                            (rule "concrete_or_1" (formula "48"))
                                                            (rule "true_left" (formula "48"))
                                                            (rule "replace_known_left" (formula "7") (term "1,0") (ifseqformula "47"))
                                                            (rule "concrete_or_3" (formula "7") (term "0"))
                                                            (rule "concrete_or_1" (formula "7"))
                                                            (rule "true_left" (formula "7"))
                                                            (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "46"))
                                                            (rule "concrete_or_3" (formula "19") (term "0"))
                                                            (rule "concrete_or_1" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "cut_direct" (formula "29") (term "0"))
                                                            (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                               (rule "concrete_or_1" (formula "30"))
                                                               (rule "true_left" (formula "30"))
                                                               (rule "applyEq" (formula "62") (term "0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "39") (term "0,0,2,0,0,1") (ifseqformula "29"))
                                                               (rule "replace_known_right" (formula "39") (term "0,1") (ifseqformula "57"))
                                                               (rule "concrete_not_2" (formula "39") (term "1"))
                                                               (rule "concrete_or_3" (formula "39"))
                                                               (rule "true_left" (formula "39"))
                                                               (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "19") (term "0,0,2,0,0,2,2,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "40") (term "0,0,2,0,0,0") (ifseqformula "29"))
                                                               (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "56"))
                                                               (rule "concrete_not_2" (formula "40") (term "0"))
                                                               (rule "concrete_or_1" (formula "40"))
                                                               (rule "true_left" (formula "40"))
                                                               (rule "applyEq" (formula "4") (term "1,0,0,0,0,0,0,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "19") (term "0,0,2,0,0,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "42") (term "0,0,2,0,0,2,0") (ifseqformula "29"))
                                                               (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "42"))
                                                               (rule "concrete_or_1" (formula "44") (term "0"))
                                                               (rule "concrete_or_1" (formula "44"))
                                                               (rule "true_left" (formula "44"))
                                                               (rule "applyEq" (formula "32") (term "0,2,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "52") (term "0,0,2,0") (ifseqformula "29"))
                                                               (rule "replace_known_right" (formula "7") (term "0,0,0") (ifseqformula "52"))
                                                               (rule "concrete_not_2" (formula "7") (term "0,0"))
                                                               (rule "concrete_or_1" (formula "7") (term "0"))
                                                               (rule "concrete_or_1" (formula "7"))
                                                               (rule "true_left" (formula "7"))
                                                               (rule "applyEq" (formula "38") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                                               (rule "replace_known_right" (formula "38") (term "0,0") (ifseqformula "53"))
                                                               (rule "concrete_not_2" (formula "38") (term "0"))
                                                               (rule "concrete_or_1" (formula "38"))
                                                               (rule "true_left" (formula "38"))
                                                               (rule "applyEq" (formula "45") (term "0,0,2,0,0,2,0") (ifseqformula "28"))
                                                               (rule "applyEq" (formula "43") (term "0,0,2,0") (ifseqformula "28"))
                                                               (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "28"))
                                                               (rule "applyEq" (formula "24") (term "0,0,2,0,0,2,0") (ifseqformula "28"))
                                                               (rule "applyEq" (formula "18") (term "0") (ifseqformula "15"))
                                                               (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "18"))
                                                               (rule "hideAuxiliaryEq" (formula "18"))
                                                               (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "18"))
                                                               (rule "concrete_or_1" (formula "16") (term "0"))
                                                               (rule "concrete_or_1" (formula "16"))
                                                               (rule "true_left" (formula "16"))
                                                               (rule "applyEq" (formula "21") (term "1") (ifseqformula "40"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "39"))
                                                               (rule "qeq_literals" (formula "5"))
                                                               (rule "closeFalse" (formula "5"))
                                                            )
                                                            (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                               (rule "concrete_or_2" (formula "29"))
                                                               (rule "applyEq" (formula "33") (term "0") (ifseqformula "29"))
                                                               (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "5"))
                                                               (rule "qeq_literals" (formula "33") (term "0"))
                                                               (rule "concrete_and_2" (formula "33"))
                                                               (rule "closeFalse" (formula "33"))
                                                            )
                                                         )
                                                         (branch "CUT: (int)(hb_0) <= -1 FALSE"
                                                            (rule "concrete_or_4" (formula "47") (term "0"))
                                                            (rule "replace_known_right" (formula "20") (term "1,0") (ifseqformula "57"))
                                                            (rule "concrete_or_4" (formula "20") (term "0"))
                                                            (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "57"))
                                                            (rule "concrete_or_4" (formula "7") (term "0"))
                                                            (rule "inEqSimp_leqRight" (formula "57"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "cut_direct" (formula "48") (term "1"))
                                                            (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(hb_0) TRUE"
                                                               (rule "concrete_or_3" (formula "49"))
                                                               (rule "true_left" (formula "49"))
                                                               (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "48"))
                                                               (rule "concrete_or_3" (formula "21"))
                                                               (rule "true_left" (formula "21"))
                                                               (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "47"))
                                                               (rule "concrete_or_3" (formula "8"))
                                                               (rule "true_left" (formula "8"))
                                                               (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "46"))
                                                               (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                                                               (rule "mul_literals" (formula "39") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                               (rule "polySimp_mulComm0" (formula "39") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "39") (term "1"))
                                                               (rule "mul_literals" (formula "39") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "39") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "39") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "47"))
                                                               (rule "mul_literals" (formula "12") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                               (rule "mul_literals" (formula "12") (term "1"))
                                                               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "12"))
                                                               (rule "leq_literals" (formula "1") (term "0"))
                                                               (rule "concrete_or_1" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "47"))
                                                               (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                                               (rule "mul_literals" (formula "15") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                               (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "15") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                                               (rule "mul_literals" (formula "15") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "48"))
                                                               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                               (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                                               (rule "times_zero_1" (formula "4") (term "0,0"))
                                                               (rule "add_zero_left" (formula "4") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                               (rule "mul_literals" (formula "4") (term "1"))
                                                               (rule "cut_direct" (formula "32") (term "0"))
                                                               (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                  (rule "concrete_or_1" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "32"))
                                                                  (rule "inEqSimp_homoInEq0" (formula "2"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                  (rule "applyEq" (formula "22") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "48") (term "0,0,2,0,0,2,0") (ifseqformula "32"))
                                                                  (rule "replace_known_left" (formula "50") (term "0,0") (ifseqformula "48"))
                                                                  (rule "concrete_or_1" (formula "50") (term "0"))
                                                                  (rule "concrete_or_1" (formula "50"))
                                                                  (rule "true_left" (formula "50"))
                                                                  (rule "applyEq" (formula "51") (term "0,0,2,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "65") (term "0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "53") (term "0,0,2,0,0,2,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "43") (term "0,0,2,0,0,1") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "43") (term "0,1") (ifseqformula "59"))
                                                                  (rule "concrete_not_2" (formula "43") (term "1"))
                                                                  (rule "concrete_or_3" (formula "43"))
                                                                  (rule "true_left" (formula "43"))
                                                                  (rule "applyEq" (formula "43") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "58"))
                                                                  (rule "concrete_not_2" (formula "43") (term "0"))
                                                                  (rule "concrete_or_1" (formula "43"))
                                                                  (rule "true_left" (formula "43"))
                                                                  (rule "applyEq" (formula "43") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "57"))
                                                                  (rule "concrete_not_2" (formula "43") (term "0"))
                                                                  (rule "concrete_or_1" (formula "43"))
                                                                  (rule "true_left" (formula "43"))
                                                                  (rule "applyEq" (formula "54") (term "0,0,2,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "54"))
                                                                  (rule "concrete_not_2" (formula "8") (term "0,0"))
                                                                  (rule "concrete_or_1" (formula "8") (term "0"))
                                                                  (rule "concrete_or_1" (formula "8"))
                                                                  (rule "true_left" (formula "8"))
                                                                  (rule "applyEq" (formula "21") (term "0,0,2,0,0,2,2,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "27") (term "0,0,2,0,0,2,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "33") (term "0,2,0") (ifseqformula "30"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0,0") (ifseqformula "30"))
                                                                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "46"))
                                                                  (rule "qeq_literals" (formula "6"))
                                                                  (rule "closeFalse" (formula "6"))
                                                               )
                                                               (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                  (rule "concrete_or_2" (formula "32"))
                                                                  (rule "applyEq" (formula "36") (term "0") (ifseqformula "32"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                                  (rule "qeq_literals" (formula "36") (term "0"))
                                                                  (rule "concrete_and_2" (formula "36"))
                                                                  (rule "closeFalse" (formula "36"))
                                                               )
                                                            )
                                                            (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(hb_0) FALSE"
                                                               (rule "concrete_or_4" (formula "48"))
                                                               (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "58"))
                                                               (rule "concrete_or_4" (formula "8"))
                                                               (rule "notLeft" (formula "8"))
                                                               (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "58"))
                                                               (rule "concrete_or_4" (formula "20"))
                                                               (rule "inEqSimp_leqRight" (formula "58"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                               (rule "mul_literals" (formula "1") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                               (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                               (rule "times_zero_1" (formula "3") (term "0,0"))
                                                               (rule "add_zero_left" (formula "3") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                               (rule "mul_literals" (formula "3") (term "1"))
                                                               (rule "cut_direct" (formula "33") (term "0"))
                                                               (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                  (rule "concrete_or_1" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "applyEq" (formula "36") (term "0,2,0") (ifseqformula "33"))
                                                                  (rule "applyEq" (formula "29") (term "0,0,2,0,0,2,0") (ifseqformula "33"))
                                                                  (rule "applyEq" (formula "47") (term "0,0,2,0,0,2,0") (ifseqformula "32"))
                                                                  (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "47"))
                                                                  (rule "concrete_or_1" (formula "49") (term "0"))
                                                                  (rule "concrete_or_1" (formula "49"))
                                                                  (rule "true_left" (formula "49"))
                                                                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "33") (term "1,1,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "44") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "44") (term "0,0") (ifseqformula "60"))
                                                                  (rule "concrete_not_2" (formula "44") (term "0"))
                                                                  (rule "concrete_or_1" (formula "44"))
                                                                  (rule "true_left" (formula "44"))
                                                                  (rule "applyEq" (formula "23") (term "0,0,2,0,0,2,2,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "7") (term "1,0,0,0,0,0,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "42") (term "0,0,2,0,0,1") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "42") (term "0,1") (ifseqformula "59"))
                                                                  (rule "concrete_not_2" (formula "42") (term "1"))
                                                                  (rule "concrete_or_3" (formula "42"))
                                                                  (rule "true_left" (formula "42"))
                                                                  (rule "applyEq" (formula "63") (term "0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "50") (term "0,0,2,0,0,2,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "42") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "42") (term "0,0") (ifseqformula "57"))
                                                                  (rule "concrete_not_2" (formula "42") (term "0"))
                                                                  (rule "concrete_or_1" (formula "42"))
                                                                  (rule "true_left" (formula "42"))
                                                                  (rule "applyEq" (formula "23") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "54") (term "0,0,2,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "54"))
                                                                  (rule "concrete_not_2" (formula "10") (term "0,0"))
                                                                  (rule "concrete_or_1" (formula "10") (term "0"))
                                                                  (rule "concrete_or_1" (formula "10"))
                                                                  (rule "true_left" (formula "10"))
                                                                  (rule "applyEq" (formula "46") (term "0,0,2,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "34"))
                                                                  (rule "leq_literals" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "22"))
                                                                  (rule "applyEqReverse" (formula "19") (term "0,0,0") (ifseqformula "18"))
                                                                  (rule "hideAuxiliaryEq" (formula "18"))
                                                                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "22"))
                                                                  (rule "concrete_or_1" (formula "18") (term "0"))
                                                                  (rule "concrete_or_1" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "applyEq" (formula "25") (term "1") (ifseqformula "43"))
                                                                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "42"))
                                                                  (rule "qeq_literals" (formula "8"))
                                                                  (rule "closeFalse" (formula "8"))
                                                               )
                                                               (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                  (rule "concrete_or_2" (formula "33"))
                                                                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "33"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "8"))
                                                                  (rule "qeq_literals" (formula "37") (term "0"))
                                                                  (rule "concrete_and_2" (formula "37"))
                                                                  (rule "closeFalse" (formula "37"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "self.bidders[j_0] = hb_0 FALSE"
                                                   (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "11"))
                                                   (rule "applyEqReverse" (formula "12") (term "1,1,0") (ifseqformula "11"))
                                                   (rule "hideAuxiliaryEq" (formula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "2"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "2") (term "1"))
                                                   (rule "mul_literals" (formula "2") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                                   (rule "all_pull_out1" (formula "12") (term "0,1,1,0"))
                                                   (rule "ex_pull_out3" (formula "12") (term "1,0"))
                                                   (rule "allLeft" (formula "18") (inst "t=a_0"))
                                                   (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "28"))
                                                   (rule "concrete_or_2" (formula "18"))
                                                   (rule "allLeft" (formula "21") (inst "t=j_0"))
                                                   (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                                   (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "21") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "21") (term "0,1"))
                                                   (rule "concrete_and_2" (formula "21") (term "1"))
                                                   (rule "concrete_or_4" (formula "21"))
                                                   (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "8"))
                                                   (rule "qeq_literals" (formula "21") (term "0,1"))
                                                   (rule "concrete_and_2" (formula "21") (term "1"))
                                                   (rule "concrete_or_4" (formula "21"))
                                                   (rule "allLeft" (formula "25") (inst "t=a_0"))
                                                   (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                                   (rule "allLeft" (formula "27") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                                   (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "14"))
                                                   (rule "mul_literals" (formula "27") (term "0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "2"))
                                                   (rule "mul_literals" (formula "27") (term "0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                                                   (rule "mul_literals" (formula "27") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "27"))
                                                   (rule "leq_literals" (formula "26") (term "0"))
                                                   (rule "concrete_or_1" (formula "26"))
                                                   (rule "true_left" (formula "26"))
                                                   (rule "allLeft" (formula "15") (inst "t=a_0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15"))
                                                   (rule "all_pull_out3" (formula "12") (term "0,1,0"))
                                                   (rule "cnf_rightDist" (formula "12") (term "0,0,1,0"))
                                                   (rule "commute_or_2" (formula "12") (term "1,0,0,1,0"))
                                                   (rule "shift_paren_or" (formula "12") (term "0,1,0,0,1,0"))
                                                   (rule "cnf_rightDist" (formula "12") (term "0,0,0,1,0"))
                                                   (rule "commute_or" (formula "12") (term "1,0,0,0,1,0"))
                                                   (rule "commute_or_2" (formula "12") (term "0,0,0,0,1,0"))
                                                   (rule "commute_or" (formula "12") (term "0,0,0,0,0,1,0"))
                                                   (rule "commute_and" (formula "1") (term "0,0,0"))
                                                   (rule "ex_pull_out3" (formula "12") (term "0"))
                                                   (rule "allLeft" (formula "4") (inst "t=j_0"))
                                                   (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "4") (term "0,1,0"))
                                                   (rule "concrete_and_2" (formula "4") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "4") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
                                                   (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "4") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "4") (term "0,1"))
                                                   (rule "concrete_and_2" (formula "4") (term "1"))
                                                   (rule "concrete_or_4" (formula "4"))
                                                   (rule "notLeft" (formula "4"))
                                                   (rule "all_pull_out3" (formula "12") (term "0,0"))
                                                   (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "12") (term "1,0,0,0"))
                                                   (rule "commute_or_2" (formula "12") (term "0,1,0,0,0"))
                                                   (rule "eq_or_2" (formula "12") (term "0,0,1,0,0,0"))
                                                   (rule "cnf_rightDist" (formula "12") (term "0,0,0,0"))
                                                   (rule "commute_or_2" (formula "12") (term "1,0,0,0,0"))
                                                   (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0"))
                                                   (rule "commute_or_2" (formula "12") (term "0,1,0,0,0,0"))
                                                   (rule "eq_or" (formula "12") (term "0,0,1,0,0,0,0"))
                                                   (rule "shift_paren_or" (formula "12") (term "0,0,0,0,0,0"))
                                                   (rule "commute_or" (formula "12") (term "0,0,0,0,0,0,0"))
                                                   (rule "eq_or_2" (formula "12") (term "0,0,0,0,0,0"))
                                                   (rule "commute_and_2" (formula "1") (term "0,0"))
                                                   (rule "allLeft" (formula "11") (inst "t=j_0"))
                                                   (rule "replaceKnownSelect_taclet010000100020000_37" (formula "11") (term "0,0,2,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010000100020000_39" (formula "11") (term "0,0,2,0,1"))
                                                   (rule "replaceKnownSelect_taclet010000100020000_42" (formula "11") (term "0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet11010000100020000_45" (formula "11") (term "0,1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                                                   (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
                                                   (rule "add_literals" (formula "11") (term "1,0,1"))
                                                   (rule "times_zero_1" (formula "11") (term "0,1"))
                                                   (rule "qeq_literals" (formula "11") (term "1"))
                                                   (rule "concrete_or_3" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "allLeft" (formula "22") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                                   (rule "exLeft" (formula "22") (inst "sk=i_1"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "andLeft" (formula "22"))
                                                   (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "26"))
                                                   (rule "concrete_not_1" (formula "22") (term "1"))
                                                   (rule "concrete_or_4" (formula "22"))
                                                   (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "26"))
                                                   (rule "concrete_not_1" (formula "24") (term "0"))
                                                   (rule "concrete_or_2" (formula "24"))
                                                   (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "26"))
                                                   (rule "concrete_not_1" (formula "23") (term "0"))
                                                   (rule "concrete_or_2" (formula "23"))
                                                   (rule "inEqSimp_homoInEq0" (formula "24"))
                                                   (rule "polySimp_addComm1" (formula "24") (term "0"))
                                                   (rule "applyEq" (formula "35") (term "0") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "26") (term "0,0,2,0") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "34") (term "0") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "11") (term "0,0,2,1,1,0") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "2") (term "0,0,2,0") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "22"))
                                                   (rule "applyEq" (formula "31") (term "0,0,2,0") (ifseqformula "22"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                                   (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                                   (rule "mul_literals" (formula "24") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "14"))
                                                   (rule "mul_literals" (formula "31") (term "0,0"))
                                                   (rule "add_zero_left" (formula "31") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "2"))
                                                   (rule "mul_literals" (formula "31") (term "0,0"))
                                                   (rule "add_zero_left" (formula "31") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                                   (rule "mul_literals" (formula "31") (term "1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "3"))
                                                   (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                                                   (rule "mul_literals" (formula "24") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "24") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                                   (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "24") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "24"))
                                                   (rule "mul_literals" (formula "23") (term "0,0"))
                                                   (rule "add_zero_left" (formula "23") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                                                   (rule "mul_literals" (formula "23") (term "1"))
                                                   (rule "allLeft" (formula "26") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_1))"))
                                                   (rule "exLeft" (formula "26") (inst "sk=i_2"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "andLeft" (formula "26"))
                                                   (rule "eqSymm" (formula "26") (term "0"))
                                                   (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "30"))
                                                   (rule "concrete_not_1" (formula "27") (term "0"))
                                                   (rule "concrete_or_2" (formula "27"))
                                                   (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "30"))
                                                   (rule "concrete_not_1" (formula "28") (term "0"))
                                                   (rule "concrete_or_2" (formula "28"))
                                                   (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "30"))
                                                   (rule "concrete_not_1" (formula "26") (term "1"))
                                                   (rule "concrete_or_4" (formula "26"))
                                                   (rule "inEqSimp_homoInEq0" (formula "28"))
                                                   (rule "polySimp_addComm1" (formula "28") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                                                   (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "28") (term "1"))
                                                   (rule "mul_literals" (formula "28") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "28") (term "1,1"))
                                                   (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "3"))
                                                   (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                                                   (rule "mul_literals" (formula "28") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "28") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                                                   (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "28") (term "0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "28"))
                                                   (rule "mul_literals" (formula "27") (term "0,0"))
                                                   (rule "add_zero_left" (formula "27") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                                                   (rule "mul_literals" (formula "27") (term "1"))
                                                   (rule "allLeft" (formula "11") (inst "t=j_0"))
                                                   (rule "replaceKnownSelect_taclet010000100020000_37" (formula "11") (term "0,0,2,0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet010000100020000_39" (formula "11") (term "0,0,2,0,1"))
                                                   (rule "replaceKnownSelect_taclet010000100020000_42" (formula "11") (term "0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet11010000100020000_45" (formula "11") (term "0,1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                                   (rule "applyEq" (formula "11") (term "0,0,2,0,1") (ifseqformula "23"))
                                                   (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                                                   (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
                                                   (rule "add_literals" (formula "11") (term "1,0,1"))
                                                   (rule "times_zero_1" (formula "11") (term "0,1"))
                                                   (rule "qeq_literals" (formula "11") (term "1"))
                                                   (rule "concrete_or_3" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "allLeft" (formula "11") (inst "t=i_1"))
                                                   (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "24"))
                                                   (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "11") (term "0,0"))
                                                   (rule "concrete_or_2" (formula "11") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "26"))
                                                   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,0"))
                                                   (rule "add_literals" (formula "11") (term "1,1,0,0,0"))
                                                   (rule "times_zero_1" (formula "11") (term "1,0,0,0"))
                                                   (rule "add_zero_right" (formula "11") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "11") (term "0,0"))
                                                   (rule "concrete_and_2" (formula "11") (term "0"))
                                                   (rule "concrete_or_2" (formula "11"))
                                                   (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_4"))
                                                   (rule "simplifySelectOfStore" (formula "11"))
                                                   (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "11") (term "0,0"))
                                                   (rule "equalUnique" (formula "11") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "11") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "11") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "11"))
                                                   (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                                   (rule "eqClose" (formula "11") (term "0,0,0,0"))
                                                   (rule "concrete_and_1" (formula "11") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "11") (term "0,0"))
                                                   (rule "castDel" (formula "11") (term "1,0"))
                                                   (rule "eqSymm" (formula "11") (term "0,0"))
                                                   (rule "intCastEqual" (formula "11") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "12"))
                                                   (rule "pullOutSelect" (formula "11") (term "0,0,2,2,0") (inst "selectSK=arr_5"))
                                                   (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                                   (rule "simplifySelectOfStore" (formula "11"))
                                                   (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                                   (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "11") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "11") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "11"))
                                                   (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                                   (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "11") (term "0,0"))
                                                   (rule "eqSymm" (formula "12") (term "0,0"))
                                                   (rule "eqSymm" (formula "11") (term "0,0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "11") (term "1,0,0,0") (ifseqformula "49"))
                                                   (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "11") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "11") (term "0"))
                                                   (rule "applyEqReverse" (formula "12") (term "0,0,2,2,0") (ifseqformula "11"))
                                                   (rule "applyEqReverse" (formula "12") (term "1,0,0") (ifseqformula "11"))
                                                   (rule "hideAuxiliaryEq" (formula "11"))
                                                   (rule "eqSymm" (formula "11") (term "0,0"))
                                                   (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "42"))
                                                   (rule "ifthenelse_false" (formula "11") (term "0"))
                                                   (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
                                                   (rule "hideAuxiliaryEq" (formula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "11"))
                                                   (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                                   (rule "add_literals" (formula "11") (term "1,0"))
                                                   (rule "times_zero_1" (formula "11") (term "0"))
                                                   (rule "leq_literals" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "allLeft" (formula "21") (inst "t=hb_0"))
                                                   (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "18"))
                                                   (rule "allLeft" (formula "22") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                                   (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "19"))
                                                   (rule "leq_literals" (formula "22") (term "1"))
                                                   (rule "concrete_or_3" (formula "22"))
                                                   (rule "true_left" (formula "22"))
                                                   (rule "allLeft" (formula "33") (inst "t=(int)(hb_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                                   (rule "allLeft" (formula "34") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                                   (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                   (rule "allLeft" (formula "17") (inst "t=a_0"))
                                                   (rule "eqSymm" (formula "17") (term "1,0"))
                                                   (rule "eqSymm" (formula "17") (term "1"))
                                                   (rule "eqSymm" (formula "17") (term "0,0"))
                                                   (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "45"))
                                                   (rule "concrete_or_2" (formula "17") (term "0"))
                                                   (rule "allLeft" (formula "36") (inst "t=(int)(a_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "allLeft" (formula "4") (inst "t=i_2"))
                                                   (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "29"))
                                                   (rule "replace_known_right" (formula "4") (term "0,0,0") (ifseqformula "45"))
                                                   (rule "concrete_not_2" (formula "4") (term "0,0"))
                                                   (rule "concrete_or_1" (formula "4") (term "0"))
                                                   (rule "concrete_or_1" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "allLeft" (formula "11") (inst "t=i_2"))
                                                   (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "32"))
                                                   (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                                                   (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                                                   (rule "add_literals" (formula "11") (term "0,0,1,0"))
                                                   (rule "leq_literals" (formula "11") (term "0,1,0"))
                                                   (rule "concrete_and_2" (formula "11") (term "1,0"))
                                                   (rule "concrete_or_4" (formula "11") (term "0"))
                                                   (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "30"))
                                                   (rule "qeq_literals" (formula "11") (term "0,0"))
                                                   (rule "concrete_and_2" (formula "11") (term "0"))
                                                   (rule "concrete_or_2" (formula "11"))
                                                   (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_6"))
                                                   (rule "simplifySelectOfStore" (formula "11"))
                                                   (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "11") (term "0,0"))
                                                   (rule "equalUnique" (formula "11") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "11") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "11") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "11"))
                                                   (rule "eqClose" (formula "11") (term "0,0,0,0"))
                                                   (rule "concrete_and_1" (formula "11") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "11") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "11") (term "0,0"))
                                                   (rule "castDel" (formula "11") (term "1,0"))
                                                   (rule "eqSymm" (formula "11") (term "0,0"))
                                                   (rule "intCastEqual" (formula "11") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "12"))
                                                   (rule "pullOutSelect" (formula "11") (term "0,0,2,2,0") (inst "selectSK=arr_7"))
                                                   (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "11"))
                                                   (rule "simplifySelectOfStore" (formula "11"))
                                                   (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                                   (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "11") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "11") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "11"))
                                                   (rule "equalUnique" (formula "11") (term "1,0,0,0"))
                                                   (rule "equalUnique" (formula "11") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "11") (term "0,0"))
                                                   (rule "eqSymm" (formula "12") (term "0,0"))
                                                   (rule "eqSymm" (formula "11") (term "0,0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "11") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "11") (term "1,0,0,0") (ifseqformula "54"))
                                                   (rule "concrete_and_4" (formula "11") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "11") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "11") (term "0"))
                                                   (rule "applyEqReverse" (formula "12") (term "0,0,2,2,0") (ifseqformula "11"))
                                                   (rule "applyEqReverse" (formula "12") (term "1,0,0") (ifseqformula "11"))
                                                   (rule "hideAuxiliaryEq" (formula "11"))
                                                   (rule "eqSymm" (formula "11") (term "0,0"))
                                                   (rule "applyEq" (formula "11") (term "0,0,2,2,0") (ifseqformula "30"))
                                                   (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "30"))
                                                   (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "47"))
                                                   (rule "ifthenelse_false" (formula "11") (term "0"))
                                                   (rule "applyEqReverse" (formula "12") (term "1") (ifseqformula "11"))
                                                   (rule "hideAuxiliaryEq" (formula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "11"))
                                                   (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                                   (rule "add_literals" (formula "11") (term "1,0"))
                                                   (rule "times_zero_1" (formula "11") (term "0"))
                                                   (rule "leq_literals" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_2"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "applyEq" (formula "37") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0") (ifseqformula "33"))
                                                   (rule "concrete_or_1" (formula "37") (term "0"))
                                                   (rule "concrete_or_1" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "32") (inst "t=hb_0"))
                                                   (rule "exLeft" (formula "32") (inst "sk=i_3"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "andLeft" (formula "32"))
                                                   (rule "eqSymm" (formula "32") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "34") (term "1"))
                                                   (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,1"))
                                                   (rule "polySimp_rightDist" (formula "34") (term "1,1"))
                                                   (rule "mul_literals" (formula "34") (term "0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1"))
                                                   (rule "polySimp_elimOne" (formula "34") (term "1,1,1"))
                                                   (rule "allLeft" (formula "35") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                                   (rule "exLeft" (formula "35") (inst "sk=i_4"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "eqSymm" (formula "35") (term "0"))
                                                   (rule "inEqSimp_homoInEq0" (formula "37") (term "1"))
                                                   (rule "polySimp_addComm1" (formula "37") (term "0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1"))
                                                   (rule "polySimp_mulComm0" (formula "37") (term "1,1"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,1"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,1"))
                                                   (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "1,1,1"))
                                                   (rule "allLeft" (formula "4") (inst "t=(int)(a_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
                                                   (rule "allLeft" (formula "5") (inst "t=(int)(hb_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
                                                   (rule "allLeft" (formula "6") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                                   (rule "inEqSimp_commuteGeq" (formula "6") (term "1"))
                                                   (rule "allLeft" (formula "21") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_1))"))
                                                   (rule "eqSymm" (formula "21") (term "1"))
                                                   (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "55"))
                                                   (rule "concrete_or_2" (formula "21") (term "0"))
                                                   (rule "allLeft" (formula "14") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                                   (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0"))
                                                   (rule "pullOutSelect" (formula "14") (term "0,1") (inst "selectSK=arr_8"))
                                                   (rule "simplifySelectOfStore" (formula "14"))
                                                   (rule "equalUnique" (formula "14") (term "1,0,0,0"))
                                                   (rule "concrete_and_4" (formula "14") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "14") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "14") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "14"))
                                                   (rule "equalUnique" (formula "14") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "14") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "14") (term "0,0"))
                                                   (rule "eqClose" (formula "14") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "14") (term "0,0"))
                                                   (rule "equalUnique" (formula "14") (term "0,0"))
                                                   (rule "castDel" (formula "14") (term "1,0"))
                                                   (rule "eqSymm" (formula "14") (term "0,0"))
                                                   (rule "intCastEqual" (formula "14") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "15") (term "1"))
                                                   (rule "pullOutSelect" (formula "14") (term "0,0,2,2,0") (inst "selectSK=arr_9"))
                                                   (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "14"))
                                                   (rule "simplifySelectOfStore" (formula "14"))
                                                   (rule "equalUnique" (formula "14") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "14") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "14") (term "0,0"))
                                                   (rule "equalUnique" (formula "14") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "14") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "14") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "14"))
                                                   (rule "equalUnique" (formula "14") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "14") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "14") (term "0,0"))
                                                   (rule "equalUnique" (formula "14") (term "1,0,0"))
                                                   (rule "eqSymm" (formula "15") (term "0,0"))
                                                   (rule "eqSymm" (formula "14") (term "0,0,0"))
                                                   (rule "eqSymm" (formula "14") (term "1,0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "14") (term "0,0,0"))
                                                   (rule "replace_known_right" (formula "14") (term "1,0,0,0") (ifseqformula "64"))
                                                   (rule "concrete_and_4" (formula "14") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "14") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "14") (term "0"))
                                                   (rule "applyEqReverse" (formula "15") (term "0,0,2,2,0") (ifseqformula "14"))
                                                   (rule "applyEqReverse" (formula "15") (term "1,0,0") (ifseqformula "14"))
                                                   (rule "hideAuxiliaryEq" (formula "14"))
                                                   (rule "eqSymm" (formula "14") (term "0,0"))
                                                   (rule "allLeft" (formula "16") (inst "t=(int)(hb_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "16") (term "1,0"))
                                                   (rule "pullOutSelect" (formula "16") (term "0,1") (inst "selectSK=arr_10"))
                                                   (rule "simplifySelectOfStore" (formula "16"))
                                                   (rule "equalUnique" (formula "16") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "16") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "16") (term "0,0"))
                                                   (rule "equalUnique" (formula "16") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "16") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "16") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "16"))
                                                   (rule "eqClose" (formula "16") (term "0,0,0,0"))
                                                   (rule "concrete_and_1" (formula "16") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "16") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "16") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "16") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "16") (term "0,0"))
                                                   (rule "castDel" (formula "16") (term "1,0"))
                                                   (rule "eqSymm" (formula "16") (term "0,0"))
                                                   (rule "intCastEqual" (formula "16") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "17") (term "1"))
                                                   (rule "pullOutSelect" (formula "16") (term "0,0,2,2,0") (inst "selectSK=arr_11"))
                                                   (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "16"))
                                                   (rule "simplifySelectOfStore" (formula "16"))
                                                   (rule "equalUnique" (formula "16") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "16") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "16") (term "0,0"))
                                                   (rule "equalUnique" (formula "16") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "16") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "16") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "16"))
                                                   (rule "eqClose" (formula "16") (term "1,0,0,0"))
                                                   (rule "concrete_and_3" (formula "16") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "16") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "16") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "16") (term "0,0"))
                                                   (rule "eqSymm" (formula "17") (term "0,0"))
                                                   (rule "eqSymm" (formula "16") (term "0,0"))
                                                   (rule "sortsDisjointModuloNull" (formula "16") (term "0,0"))
                                                   (rule "replace_known_right" (formula "16") (term "0,0,0") (ifseqformula "65"))
                                                   (rule "concrete_and_2" (formula "16") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "16") (term "0"))
                                                   (rule "applyEqReverse" (formula "17") (term "0,0,2,2,0") (ifseqformula "16"))
                                                   (rule "applyEqReverse" (formula "17") (term "1,0,0") (ifseqformula "16"))
                                                   (rule "hideAuxiliaryEq" (formula "16"))
                                                   (rule "eqSymm" (formula "16") (term "0,0"))
                                                   (rule "allLeft" (formula "51") (inst "t=(int)(java.lang.Address::select(heap,
                                java.lang.Address[]::select(heap,
                                                            self,
                                                            MultiAuctionImpl::$bidders),
                                arr(i_1)))"))
                                                   (rule "allLeft" (formula "18") (inst "t=(int)(a_0)"))
                                                   (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                                                   (rule "pullOutSelect" (formula "18") (term "0,0,2,0,1") (inst "selectSK=arr_12"))
                                                   (rule "simplifySelectOfStore" (formula "18"))
                                                   (rule "equalUnique" (formula "18") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "18") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "18") (term "0,0"))
                                                   (rule "equalUnique" (formula "18") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "18") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "18") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "18"))
                                                   (rule "equalUnique" (formula "18") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "18") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "18") (term "0,0"))
                                                   (rule "equalUnique" (formula "18") (term "1,0,0"))
                                                   (rule "eqSymm" (formula "18") (term "0,0,0"))
                                                   (rule "intCastEqual" (formula "18") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "18") (term "1,0,0") (ifseqformula "63"))
                                                   (rule "concrete_and_4" (formula "18") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "18") (term "0"))
                                                   (rule "applyEqReverse" (formula "19") (term "0,0,2,0,1") (ifseqformula "18"))
                                                   (rule "hideAuxiliaryEq" (formula "18"))
                                                   (rule "pullOutSelect" (formula "18") (term "0,1") (inst "selectSK=arr_13"))
                                                   (rule "simplifySelectOfStore" (formula "18"))
                                                   (rule "equalUnique" (formula "18") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "18") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "18") (term "0,0"))
                                                   (rule "equalUnique" (formula "18") (term "1,0,0"))
                                                   (rule "concrete_and_4" (formula "18") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "18") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "18"))
                                                   (rule "eqClose" (formula "18") (term "0,0,0,0"))
                                                   (rule "concrete_and_1" (formula "18") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "18") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "18") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "18") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "18") (term "0,0"))
                                                   (rule "castDel" (formula "18") (term "1,0"))
                                                   (rule "eqSymm" (formula "18") (term "0,0"))
                                                   (rule "intCastEqual" (formula "18") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "19") (term "1"))
                                                   (rule "allLeft" (formula "20") (inst "t=(int)(java.lang.Address::select(heap,
                                java.lang.Address[]::select(heap,
                                                            self,
                                                            MultiAuctionImpl::$bidders),
                                arr(i_1)))"))
                                                   (rule "pullOutSelect" (formula "20") (term "0,1") (inst "selectSK=arr_14"))
                                                   (rule "simplifySelectOfStore" (formula "20"))
                                                   (rule "equalUnique" (formula "20") (term "1,0,0,0"))
                                                   (rule "concrete_and_4" (formula "20") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "20") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "20") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "20"))
                                                   (rule "eqClose" (formula "20") (term "0,0,0,0"))
                                                   (rule "concrete_and_1" (formula "20") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "20") (term "0,0,0"))
                                                   (rule "equalUnique" (formula "20") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "20") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "20") (term "0,0"))
                                                   (rule "castDel" (formula "20") (term "1,0"))
                                                   (rule "eqSymm" (formula "20") (term "0,0"))
                                                   (rule "intCastEqual" (formula "20") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "21") (term "1"))
                                                   (rule "pullOutSelect" (formula "20") (term "0,0,2,2,0") (inst "selectSK=arr_15"))
                                                   (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "20"))
                                                   (rule "simplifySelectOfStore" (formula "20"))
                                                   (rule "equalUnique" (formula "20") (term "1,0,0,0"))
                                                   (rule "concrete_and_4" (formula "20") (term "0,0,0"))
                                                   (rule "concrete_and_2" (formula "20") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "20") (term "0"))
                                                   (rule "simplifySelectOfStore" (formula "20"))
                                                   (rule "equalUnique" (formula "20") (term "1,0,0,0"))
                                                   (rule "equalUnique" (formula "20") (term "0,1,0,0"))
                                                   (rule "concrete_not_2" (formula "20") (term "1,0,0"))
                                                   (rule "concrete_and_3" (formula "20") (term "0,0"))
                                                   (rule "eqSymm" (formula "21") (term "0,0"))
                                                   (rule "eqSymm" (formula "20") (term "1,0,0"))
                                                   (rule "eqSymm" (formula "20") (term "0,0,0"))
                                                   (rule "intCastEqual" (formula "20") (term "1,0,0"))
                                                   (rule "replace_known_right" (formula "20") (term "1,0,0") (ifseqformula "65"))
                                                   (rule "concrete_and_4" (formula "20") (term "0,0"))
                                                   (rule "ifthenelse_false" (formula "20") (term "0"))
                                                   (rule "applyEqReverse" (formula "21") (term "0,0,2,2,0") (ifseqformula "20"))
                                                   (rule "applyEqReverse" (formula "21") (term "1,0,0") (ifseqformula "20"))
                                                   (rule "hideAuxiliaryEq" (formula "20"))
                                                   (rule "eqSymm" (formula "20") (term "0,0"))
                                                   (rule "allLeft" (formula "7") (inst "t=(int)(java.lang.Address::select(heap,
                                java.lang.Address[]::select(heap,
                                                            self,
                                                            MultiAuctionImpl::$bidders),
                                arr(i_1)))"))
                                                   (rule "cut_direct" (formula "35") (term "1"))
                                                   (branch "CUT: self.balances[(int)(hb_0)] <= 0 TRUE"
                                                      (rule "concrete_or_3" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "inEqSimp_antiSymm" (formula "59") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "35") (term "0") (ifseqformula "59"))
                                                      (rule "leq_literals" (formula "35"))
                                                      (rule "true_left" (formula "35"))
                                                      (rule "applyEq" (formula "59") (term "0") (ifseqformula "58"))
                                                      (rule "qeq_literals" (formula "59"))
                                                      (rule "true_left" (formula "59"))
                                                      (rule "applyEq" (formula "27") (term "0") (ifseqformula "58"))
                                                      (rule "inEqSimp_commuteGeq" (formula "27"))
                                                      (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "58"))
                                                      (rule "applyEq" (formula "26") (term "1") (ifseqformula "58"))
                                                      (rule "applyEq" (formula "32") (term "1") (ifseqformula "58"))
                                                      (rule "inEqSimp_contradInEq0" (formula "59") (ifseqformula "27"))
                                                      (rule "qeq_literals" (formula "59") (term "0"))
                                                      (rule "concrete_and_2" (formula "59"))
                                                      (rule "closeFalse" (formula "59"))
                                                   )
                                                   (branch "CUT: self.balances[(int)(hb_0)] <= 0 FALSE"
                                                      (rule "concrete_or_4" (formula "35"))
                                                      (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "35"))
                                                      (rule "concrete_not_1" (formula "47") (term "0"))
                                                      (rule "concrete_or_2" (formula "47"))
                                                      (rule "replace_known_left" (formula "45") (term "0,1") (ifseqformula "35"))
                                                      (rule "concrete_not_1" (formula "45") (term "1"))
                                                      (rule "concrete_or_4" (formula "45"))
                                                      (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "35"))
                                                      (rule "concrete_not_1" (formula "46") (term "0"))
                                                      (rule "concrete_or_2" (formula "46"))
                                                      (rule "inEqSimp_leqRight" (formula "64"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                      (rule "mul_literals" (formula "1") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "60") (ifseqformula "1"))
                                                      (rule "leq_literals" (formula "60") (term "0"))
                                                      (rule "concrete_or_1" (formula "60"))
                                                      (rule "true_left" (formula "60"))
                                                      (rule "inEqSimp_exactShadow3" (formula "48") (ifseqformula "4"))
                                                      (rule "polySimp_rightDist" (formula "48") (term "0,0"))
                                                      (rule "mul_literals" (formula "48") (term "0,0,0"))
                                                      (rule "polySimp_addComm1" (formula "48") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "48"))
                                                      (rule "polySimp_mulLiterals" (formula "48") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "48") (term "0"))
                                                      (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "48"))
                                                      (rule "mul_literals" (formula "47") (term "0,0"))
                                                      (rule "add_zero_left" (formula "47") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "47"))
                                                      (rule "mul_literals" (formula "47") (term "1"))
                                                      (rule "cut_direct" (formula "55") (term "1,0"))
                                                      (branch "CUT: (int)(hb_0) <= -1 TRUE"
                                                         (rule "concrete_or_3" (formula "56") (term "0"))
                                                         (rule "concrete_or_1" (formula "56"))
                                                         (rule "true_left" (formula "56"))
                                                         (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "55"))
                                                         (rule "concrete_or_1" (formula "19") (term "0"))
                                                         (rule "concrete_or_1" (formula "19"))
                                                         (rule "true_left" (formula "19"))
                                                         (rule "replace_known_left" (formula "6") (term "1,0") (ifseqformula "54"))
                                                         (rule "concrete_or_3" (formula "6") (term "0"))
                                                         (rule "concrete_or_1" (formula "6"))
                                                         (rule "true_left" (formula "6"))
                                                         (rule "cut_direct" (formula "54") (term "1,0"))
                                                         (branch "CUT: (int)self.auctionOwner <= -1 TRUE"
                                                            (rule "concrete_or_3" (formula "55") (term "0"))
                                                            (rule "concrete_or_1" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "54"))
                                                            (rule "concrete_or_1" (formula "16") (term "0"))
                                                            (rule "concrete_or_1" (formula "16"))
                                                            (rule "true_left" (formula "16"))
                                                            (rule "replace_known_left" (formula "6") (term "1,0") (ifseqformula "53"))
                                                            (rule "concrete_or_3" (formula "6") (term "0"))
                                                            (rule "concrete_or_1" (formula "6"))
                                                            (rule "true_left" (formula "6"))
                                                            (rule "cut_direct" (formula "26") (term "0"))
                                                            (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                               (rule "concrete_or_1" (formula "27"))
                                                               (rule "true_left" (formula "27"))
                                                               (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "14") (term "0,0,2,0,0,2,2,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "14") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "56") (term "0,0,2,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "69") (term "0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "26"))
                                                               (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "61"))
                                                               (rule "concrete_or_2" (formula "27"))
                                                               (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "30") (term "0,2,0") (ifseqformula "26"))
                                                               (rule "applyEq" (formula "52") (term "0,0") (ifseqformula "26"))
                                                               (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "52"))
                                                               (rule "concrete_or_3" (formula "5") (term "0"))
                                                               (rule "concrete_or_1" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "51"))
                                                               (rule "concrete_or_3" (formula "52") (term "0"))
                                                               (rule "concrete_or_1" (formula "52"))
                                                               (rule "true_left" (formula "52"))
                                                               (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "51"))
                                                               (rule "concrete_or_1" (formula "16") (term "0"))
                                                               (rule "concrete_or_1" (formula "16"))
                                                               (rule "true_left" (formula "16"))
                                                               (rule "applyEq" (formula "44") (term "0,0,2,0,0,1") (ifseqformula "24"))
                                                               (rule "replace_known_right" (formula "44") (term "0,1") (ifseqformula "61"))
                                                               (rule "concrete_not_2" (formula "44") (term "1"))
                                                               (rule "concrete_or_3" (formula "44"))
                                                               (rule "true_left" (formula "44"))
                                                               (rule "applyEq" (formula "45") (term "0,0,2,0,0,0") (ifseqformula "24"))
                                                               (rule "replace_known_right" (formula "45") (term "0,0") (ifseqformula "60"))
                                                               (rule "concrete_not_2" (formula "45") (term "0"))
                                                               (rule "concrete_or_1" (formula "45"))
                                                               (rule "true_left" (formula "45"))
                                                               (rule "applyEq" (formula "44") (term "0,0,2,0,0,0") (ifseqformula "24"))
                                                               (rule "replace_known_right" (formula "44") (term "0,0") (ifseqformula "59"))
                                                               (rule "concrete_not_2" (formula "44") (term "0"))
                                                               (rule "concrete_or_1" (formula "44"))
                                                               (rule "true_left" (formula "44"))
                                                               (rule "applyEq" (formula "15") (term "0") (ifseqformula "13"))
                                                               (rule "hideAuxiliaryEq" (formula "15"))
                                                               (rule "applyEq" (formula "50") (term "0") (ifseqformula "49"))
                                                               (rule "qeq_literals" (formula "50"))
                                                               (rule "closeFalse" (formula "50"))
                                                            )
                                                            (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                               (rule "concrete_or_2" (formula "26"))
                                                               (rule "applyEq" (formula "31") (term "0") (ifseqformula "26"))
                                                               (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "57"))
                                                               (rule "qeq_literals" (formula "31") (term "0"))
                                                               (rule "concrete_and_2" (formula "31"))
                                                               (rule "closeFalse" (formula "31"))
                                                            )
                                                         )
                                                         (branch "CUT: (int)self.auctionOwner <= -1 FALSE"
                                                            (rule "concrete_or_4" (formula "54") (term "0"))
                                                            (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "63"))
                                                            (rule "concrete_or_4" (formula "6") (term "0"))
                                                            (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "63"))
                                                            (rule "concrete_or_2" (formula "16") (term "0"))
                                                            (rule "inEqSimp_leqRight" (formula "63"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "cut_direct" (formula "55") (term "1"))
                                                            (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner TRUE"
                                                               (rule "concrete_or_3" (formula "56"))
                                                               (rule "true_left" (formula "56"))
                                                               (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "55"))
                                                               (rule "concrete_or_1" (formula "17"))
                                                               (rule "true_left" (formula "17"))
                                                               (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "54"))
                                                               (rule "concrete_or_3" (formula "7"))
                                                               (rule "true_left" (formula "7"))
                                                               (rule "inEqSimp_exactShadow3" (formula "46") (ifseqformula "53"))
                                                               (rule "polySimp_rightDist" (formula "46") (term "0,0"))
                                                               (rule "mul_literals" (formula "46") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "46"))
                                                               (rule "polySimp_mulComm0" (formula "46") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "46") (term "1"))
                                                               (rule "mul_literals" (formula "46") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "46") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "46") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "54"))
                                                               (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                               (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                               (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                               (rule "mul_literals" (formula "38") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "43") (ifseqformula "55"))
                                                               (rule "polySimp_rightDist" (formula "43") (term "0,0"))
                                                               (rule "mul_literals" (formula "43") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "43"))
                                                               (rule "polySimp_mulComm0" (formula "43") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "43") (term "1"))
                                                               (rule "mul_literals" (formula "43") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "43") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "43") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "56"))
                                                               (rule "mul_literals" (formula "11") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                                               (rule "mul_literals" (formula "11") (term "1"))
                                                               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "11"))
                                                               (rule "leq_literals" (formula "1") (term "0"))
                                                               (rule "concrete_or_1" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "56"))
                                                               (rule "polySimp_rightDist" (formula "14") (term "0,0"))
                                                               (rule "mul_literals" (formula "14") (term "0,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                                               (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "14") (term "1"))
                                                               (rule "mul_literals" (formula "14") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                                               (rule "cut_direct" (formula "28") (term "0"))
                                                               (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                  (rule "concrete_or_1" (formula "29"))
                                                                  (rule "true_left" (formula "29"))
                                                                  (rule "applyEq" (formula "52") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "52") (term "0,0") (ifseqformula "69"))
                                                                  (rule "concrete_not_2" (formula "52") (term "0"))
                                                                  (rule "concrete_or_1" (formula "52"))
                                                                  (rule "true_left" (formula "52"))
                                                                  (rule "applyEq" (formula "30") (term "1,1,0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "65"))
                                                                  (rule "concrete_or_2" (formula "29"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "51") (term "0,0,2,0,0,1") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "51") (term "0,1") (ifseqformula "68"))
                                                                  (rule "concrete_not_2" (formula "51") (term "1"))
                                                                  (rule "concrete_or_3" (formula "51"))
                                                                  (rule "true_left" (formula "51"))
                                                                  (rule "applyEq" (formula "32") (term "0,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "44") (term "0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "59") (term "0,0,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "51") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "51") (term "0,0") (ifseqformula "67"))
                                                                  (rule "concrete_not_2" (formula "51") (term "0"))
                                                                  (rule "concrete_or_1" (formula "51"))
                                                                  (rule "true_left" (formula "51"))
                                                                  (rule "applyEq" (formula "71") (term "0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,2,0,0,2,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "54") (term "0,1") (ifseqformula "28"))
                                                                  (rule "replace_known_left" (formula "55") (term "1") (ifseqformula "54"))
                                                                  (rule "concrete_or_3" (formula "55"))
                                                                  (rule "true_left" (formula "55"))
                                                                  (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "54"))
                                                                  (rule "concrete_or_3" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "53"))
                                                                  (rule "concrete_or_3" (formula "18") (term "0"))
                                                                  (rule "concrete_or_1" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                                                  (rule "leq_literals" (formula "31"))
                                                                  (rule "true_left" (formula "31"))
                                                                  (rule "applyEq" (formula "55") (term "0") (ifseqformula "54"))
                                                                  (rule "qeq_literals" (formula "55"))
                                                                  (rule "closeFalse" (formula "55"))
                                                               )
                                                               (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                  (rule "concrete_or_2" (formula "28"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "28"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "62"))
                                                                  (rule "qeq_literals" (formula "33") (term "0"))
                                                                  (rule "concrete_and_2" (formula "33"))
                                                                  (rule "closeFalse" (formula "33"))
                                                               )
                                                            )
                                                            (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner FALSE"
                                                               (rule "concrete_or_4" (formula "55"))
                                                               (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "64"))
                                                               (rule "concrete_or_2" (formula "17"))
                                                               (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "64"))
                                                               (rule "concrete_or_4" (formula "7"))
                                                               (rule "notLeft" (formula "7"))
                                                               (rule "inEqSimp_leqRight" (formula "64"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                               (rule "mul_literals" (formula "1") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "5"))
                                                               (rule "polySimp_mulComm0" (formula "17") (term "0,0"))
                                                               (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                                               (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                                                               (rule "polySimp_mulComm0" (formula "17") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "17") (term "1"))
                                                               (rule "mul_literals" (formula "17") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "27"))
                                                               (rule "polySimp_mulComm0" (formula "18") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                                               (rule "polySimp_mulLiterals" (formula "18") (term "1"))
                                                               (rule "polySimp_elimOne" (formula "18") (term "1"))
                                                               (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
                                                               (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                               (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                               (rule "mul_literals" (formula "3") (term "0,0"))
                                                               (rule "add_zero_left" (formula "3") (term "0"))
                                                               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                               (rule "mul_literals" (formula "3") (term "1"))
                                                               (rule "cut_direct" (formula "32") (term "0"))
                                                               (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                  (rule "concrete_or_1" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "58") (term "0,0,2,0,0,2,0") (ifseqformula "32"))
                                                                  (rule "replace_known_left" (formula "59") (term "0,0") (ifseqformula "58"))
                                                                  (rule "concrete_or_1" (formula "59") (term "0"))
                                                                  (rule "concrete_or_1" (formula "59"))
                                                                  (rule "true_left" (formula "59"))
                                                                  (rule "applyEq" (formula "53") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "53") (term "0,0") (ifseqformula "70"))
                                                                  (rule "concrete_not_2" (formula "53") (term "0"))
                                                                  (rule "concrete_or_1" (formula "53"))
                                                                  (rule "true_left" (formula "53"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "74") (term "0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "65") (term "0,0,2,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "65"))
                                                                  (rule "concrete_not_2" (formula "8") (term "0,0"))
                                                                  (rule "concrete_or_1" (formula "8") (term "0"))
                                                                  (rule "concrete_or_1" (formula "8"))
                                                                  (rule "true_left" (formula "8"))
                                                                  (rule "applyEq" (formula "59") (term "0,0,2,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "52") (term "0,0,2,0,0,0") (ifseqformula "31"))
                                                                  (rule "replace_known_right" (formula "52") (term "0,0") (ifseqformula "68"))
                                                                  (rule "concrete_not_2" (formula "52") (term "0"))
                                                                  (rule "concrete_or_1" (formula "52"))
                                                                  (rule "true_left" (formula "52"))
                                                                  (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "51") (term "0,0,2,0,0,1") (ifseqformula "31"))
                                                                  (rule "replace_known_right" (formula "51") (term "0,1") (ifseqformula "67"))
                                                                  (rule "concrete_not_2" (formula "51") (term "1"))
                                                                  (rule "concrete_or_3" (formula "51"))
                                                                  (rule "true_left" (formula "51"))
                                                                  (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "31"))
                                                                  (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "63"))
                                                                  (rule "concrete_or_2" (formula "32"))
                                                                  (rule "applyEq" (formula "35") (term "0,2,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,2,0,0,2,2,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,2,0,0,0") (ifseqformula "31"))
                                                                  (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "57"))
                                                                  (rule "add_zero_right" (formula "6") (term "1"))
                                                                  (rule "applyEq" (formula "36") (term "0") (ifseqformula "35"))
                                                                  (rule "leq_literals" (formula "36"))
                                                                  (rule "true_left" (formula "36"))
                                                                  (rule "applyEq" (formula "57") (term "0") (ifseqformula "56"))
                                                                  (rule "qeq_literals" (formula "57"))
                                                                  (rule "closeFalse" (formula "57"))
                                                               )
                                                               (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                  (rule "concrete_or_2" (formula "32"))
                                                                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "32"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "63"))
                                                                  (rule "qeq_literals" (formula "37") (term "0"))
                                                                  (rule "concrete_and_2" (formula "37"))
                                                                  (rule "closeFalse" (formula "37"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: (int)(hb_0) <= -1 FALSE"
                                                         (rule "concrete_or_4" (formula "55") (term "0"))
                                                         (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "65"))
                                                         (rule "concrete_or_4" (formula "6") (term "0"))
                                                         (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "65"))
                                                         (rule "concrete_or_2" (formula "19") (term "0"))
                                                         (rule "inEqSimp_leqRight" (formula "65"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "cut_direct" (formula "56") (term "1"))
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(hb_0) TRUE"
                                                            (rule "concrete_or_3" (formula "57"))
                                                            (rule "true_left" (formula "57"))
                                                            (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "56"))
                                                            (rule "concrete_or_3" (formula "7"))
                                                            (rule "true_left" (formula "7"))
                                                            (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "55"))
                                                            (rule "concrete_or_1" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "54"))
                                                            (rule "polySimp_rightDist" (formula "44") (term "0,0"))
                                                            (rule "mul_literals" (formula "44") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                                                            (rule "polySimp_mulComm0" (formula "44") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "44") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "44") (term "1,1"))
                                                            (rule "mul_literals" (formula "44") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "44") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "55"))
                                                            (rule "mul_literals" (formula "12") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                            (rule "mul_literals" (formula "12") (term "1"))
                                                            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "12"))
                                                            (rule "leq_literals" (formula "1") (term "0"))
                                                            (rule "concrete_or_1" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "55"))
                                                            (rule "polySimp_rightDist" (formula "40") (term "0,0"))
                                                            (rule "mul_literals" (formula "40") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                                                            (rule "polySimp_mulComm0" (formula "40") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "40") (term "1"))
                                                            (rule "mul_literals" (formula "40") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "40") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "40") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "50") (ifseqformula "56"))
                                                            (rule "polySimp_rightDist" (formula "50") (term "0,0"))
                                                            (rule "mul_literals" (formula "50") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "50"))
                                                            (rule "polySimp_mulComm0" (formula "50") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "50") (term "1"))
                                                            (rule "mul_literals" (formula "50") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "50") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "50") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "57"))
                                                            (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                                                            (rule "mul_literals" (formula "15") (term "0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                            (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "15") (term "1"))
                                                            (rule "mul_literals" (formula "15") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                                            (rule "cut_direct" (formula "59") (term "1,0"))
                                                            (branch "CUT: (int)self.auctionOwner <= -1 TRUE"
                                                               (rule "concrete_or_3" (formula "60") (term "0"))
                                                               (rule "concrete_or_1" (formula "60"))
                                                               (rule "true_left" (formula "60"))
                                                               (rule "replace_known_left" (formula "6") (term "1,0") (ifseqformula "59"))
                                                               (rule "concrete_or_3" (formula "6") (term "0"))
                                                               (rule "concrete_or_1" (formula "6"))
                                                               (rule "true_left" (formula "6"))
                                                               (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "58"))
                                                               (rule "concrete_or_1" (formula "17") (term "0"))
                                                               (rule "concrete_or_1" (formula "17"))
                                                               (rule "true_left" (formula "17"))
                                                               (rule "cut_direct" (formula "28") (term "0"))
                                                               (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                  (rule "concrete_or_1" (formula "29"))
                                                                  (rule "true_left" (formula "29"))
                                                                  (rule "applyEq" (formula "51") (term "0,0,2,0,0,1") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "51") (term "0,1") (ifseqformula "69"))
                                                                  (rule "concrete_not_2" (formula "51") (term "1"))
                                                                  (rule "concrete_or_3" (formula "51"))
                                                                  (rule "true_left" (formula "51"))
                                                                  (rule "applyEq" (formula "32") (term "0,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "73") (term "0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "60") (term "0,0,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "16") (term "0,0,2,0,0,2,2,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "28"))
                                                                  (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                                                                  (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "65"))
                                                                  (rule "concrete_or_2" (formula "29"))
                                                                  (rule "applyEq" (formula "56") (term "0,0") (ifseqformula "28"))
                                                                  (rule "replace_known_left" (formula "5") (term "1,0") (ifseqformula "56"))
                                                                  (rule "concrete_or_3" (formula "5") (term "0"))
                                                                  (rule "concrete_or_1" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "replace_known_left" (formula "56") (term "1,0") (ifseqformula "55"))
                                                                  (rule "concrete_or_3" (formula "56") (term "0"))
                                                                  (rule "concrete_or_1" (formula "56"))
                                                                  (rule "true_left" (formula "56"))
                                                                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "55"))
                                                                  (rule "concrete_or_1" (formula "18") (term "0"))
                                                                  (rule "concrete_or_1" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "applyEq" (formula "50") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                                                  (rule "replace_known_right" (formula "50") (term "0,0") (ifseqformula "65"))
                                                                  (rule "concrete_not_2" (formula "50") (term "0"))
                                                                  (rule "concrete_or_1" (formula "50"))
                                                                  (rule "true_left" (formula "50"))
                                                                  (rule "applyEq" (formula "15") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                                                  (rule "applyEq" (formula "49") (term "0,0,2,0,0,0") (ifseqformula "26"))
                                                                  (rule "replace_known_right" (formula "49") (term "0,0") (ifseqformula "64"))
                                                                  (rule "concrete_not_2" (formula "49") (term "0"))
                                                                  (rule "concrete_or_1" (formula "49"))
                                                                  (rule "true_left" (formula "49"))
                                                                  (rule "applyEq" (formula "28") (term "1,1,0,0") (ifseqformula "26"))
                                                                  (rule "applyEq" (formula "56") (term "0") (ifseqformula "55"))
                                                                  (rule "qeq_literals" (formula "56"))
                                                                  (rule "closeFalse" (formula "56"))
                                                               )
                                                               (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                  (rule "concrete_or_2" (formula "28"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "28"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "62") (ifseqformula "33"))
                                                                  (rule "qeq_literals" (formula "62") (term "0"))
                                                                  (rule "concrete_and_2" (formula "62"))
                                                                  (rule "closeFalse" (formula "62"))
                                                               )
                                                            )
                                                            (branch "CUT: (int)self.auctionOwner <= -1 FALSE"
                                                               (rule "concrete_or_4" (formula "59") (term "0"))
                                                               (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "68"))
                                                               (rule "concrete_or_4" (formula "6") (term "0"))
                                                               (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "68"))
                                                               (rule "concrete_or_2" (formula "18") (term "0"))
                                                               (rule "inEqSimp_leqRight" (formula "68"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "cut_direct" (formula "60") (term "1"))
                                                               (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner TRUE"
                                                                  (rule "concrete_or_3" (formula "61"))
                                                                  (rule "true_left" (formula "61"))
                                                                  (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "60"))
                                                                  (rule "concrete_or_3" (formula "7"))
                                                                  (rule "true_left" (formula "7"))
                                                                  (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "59"))
                                                                  (rule "concrete_or_1" (formula "18"))
                                                                  (rule "true_left" (formula "18"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "51") (ifseqformula "58"))
                                                                  (rule "polySimp_rightDist" (formula "51") (term "0,0"))
                                                                  (rule "mul_literals" (formula "51") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "51"))
                                                                  (rule "polySimp_mulComm0" (formula "51") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "51") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "51") (term "1,1"))
                                                                  (rule "mul_literals" (formula "51") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "51") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "46") (ifseqformula "59"))
                                                                  (rule "polySimp_rightDist" (formula "46") (term "0,0"))
                                                                  (rule "mul_literals" (formula "46") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "46"))
                                                                  (rule "polySimp_mulComm0" (formula "46") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "46") (term "1"))
                                                                  (rule "mul_literals" (formula "46") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "46") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "46") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "60"))
                                                                  (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                                                                  (rule "mul_literals" (formula "16") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                                                  (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "16") (term "1"))
                                                                  (rule "mul_literals" (formula "16") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "61"))
                                                                  (rule "polySimp_rightDist" (formula "42") (term "0,0"))
                                                                  (rule "mul_literals" (formula "42") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "42"))
                                                                  (rule "polySimp_mulComm0" (formula "42") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "42") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "42") (term "1,1"))
                                                                  (rule "mul_literals" (formula "42") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "42") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "62"))
                                                                  (rule "mul_literals" (formula "12") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                                  (rule "mul_literals" (formula "12") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "12"))
                                                                  (rule "leq_literals" (formula "1") (term "0"))
                                                                  (rule "concrete_or_1" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "cut_direct" (formula "30") (term "0"))
                                                                  (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                     (rule "concrete_or_1" (formula "31"))
                                                                     (rule "true_left" (formula "31"))
                                                                     (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "57") (term "0,0,2,0,0,0") (ifseqformula "30"))
                                                                     (rule "replace_known_right" (formula "57") (term "0,0") (ifseqformula "74"))
                                                                     (rule "concrete_not_2" (formula "57") (term "0"))
                                                                     (rule "concrete_or_1" (formula "57"))
                                                                     (rule "true_left" (formula "57"))
                                                                     (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "56") (term "1,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "18") (term "0,0,2,0,0,2,2,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "34") (term "0,2,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "30"))
                                                                     (rule "applyEq" (formula "56") (term "0,0,2,0,0,1") (ifseqformula "30"))
                                                                     (rule "replace_known_right" (formula "56") (term "0,1") (ifseqformula "73"))
                                                                     (rule "concrete_not_2" (formula "56") (term "1"))
                                                                     (rule "concrete_or_3" (formula "56"))
                                                                     (rule "true_left" (formula "56"))
                                                                     (rule "applyEq" (formula "60") (term "0,1") (ifseqformula "30"))
                                                                     (rule "replace_known_left" (formula "61") (term "1") (ifseqformula "60"))
                                                                     (rule "concrete_or_3" (formula "61"))
                                                                     (rule "true_left" (formula "61"))
                                                                     (rule "replace_known_left" (formula "21") (term "1,0") (ifseqformula "60"))
                                                                     (rule "concrete_or_3" (formula "21") (term "0"))
                                                                     (rule "concrete_or_1" (formula "21"))
                                                                     (rule "true_left" (formula "21"))
                                                                     (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "59"))
                                                                     (rule "concrete_or_3" (formula "5"))
                                                                     (rule "true_left" (formula "5"))
                                                                     (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "28"))
                                                                     (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "66"))
                                                                     (rule "concrete_or_2" (formula "29"))
                                                                     (rule "applyEq" (formula "74") (term "0") (ifseqformula "28"))
                                                                     (rule "applyEq" (formula "54") (term "0,0,2,0,0,0") (ifseqformula "28"))
                                                                     (rule "replace_known_right" (formula "54") (term "0,0") (ifseqformula "69"))
                                                                     (rule "concrete_not_2" (formula "54") (term "0"))
                                                                     (rule "concrete_or_1" (formula "54"))
                                                                     (rule "true_left" (formula "54"))
                                                                     (rule "applyEq" (formula "60") (term "0,0,2,0") (ifseqformula "28"))
                                                                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "28"))
                                                                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "17"))
                                                                     (rule "hideAuxiliaryEq" (formula "19"))
                                                                     (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "59"))
                                                                     (rule "add_literals" (formula "3") (term "1"))
                                                                     (rule "applyEq" (formula "32") (term "0") (ifseqformula "31"))
                                                                     (rule "leq_literals" (formula "32"))
                                                                     (rule "true_left" (formula "32"))
                                                                     (rule "applyEq" (formula "25") (term "1") (ifseqformula "58"))
                                                                     (rule "applyEq" (formula "59") (term "0") (ifseqformula "58"))
                                                                     (rule "qeq_literals" (formula "59"))
                                                                     (rule "closeFalse" (formula "59"))
                                                                  )
                                                                  (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                     (rule "concrete_or_2" (formula "30"))
                                                                     (rule "applyEq" (formula "35") (term "0") (ifseqformula "30"))
                                                                     (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "67"))
                                                                     (rule "qeq_literals" (formula "35") (term "0"))
                                                                     (rule "concrete_and_2" (formula "35"))
                                                                     (rule "closeFalse" (formula "35"))
                                                                  )
                                                               )
                                                               (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner FALSE"
                                                                  (rule "concrete_or_4" (formula "60"))
                                                                  (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "69"))
                                                                  (rule "concrete_or_4" (formula "7"))
                                                                  (rule "notLeft" (formula "7"))
                                                                  (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "69"))
                                                                  (rule "concrete_or_2" (formula "18"))
                                                                  (rule "inEqSimp_leqRight" (formula "69"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                                  (rule "mul_literals" (formula "1") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "28"))
                                                                  (rule "polySimp_mulComm0" (formula "19") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                                                  (rule "polySimp_mulLiterals" (formula "19") (term "1"))
                                                                  (rule "polySimp_elimOne" (formula "19") (term "1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "5"))
                                                                  (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "20") (term "0"))
                                                                  (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                                                  (rule "polySimp_mulComm0" (formula "20") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "20") (term "1"))
                                                                  (rule "mul_literals" (formula "20") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "61"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "7"))
                                                                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                                                  (rule "mul_literals" (formula "4") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "4") (term "0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                                  (rule "mul_literals" (formula "4") (term "1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                                                  (rule "mul_literals" (formula "4") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "4") (term "0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                                  (rule "mul_literals" (formula "4") (term "1"))
                                                                  (rule "cut_direct" (formula "35") (term "0"))
                                                                  (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                     (rule "concrete_or_1" (formula "36"))
                                                                     (rule "true_left" (formula "36"))
                                                                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "64") (term "0,0,2,0,0,2,0") (ifseqformula "35"))
                                                                     (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "64"))
                                                                     (rule "concrete_or_1" (formula "65") (term "0"))
                                                                     (rule "concrete_or_1" (formula "65"))
                                                                     (rule "true_left" (formula "65"))
                                                                     (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "73"))
                                                                     (rule "concrete_or_2" (formula "36"))
                                                                     (rule "applyEq" (formula "20") (term "0,0,2,0,0,2,2,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "39") (term "0,2,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "35"))
                                                                     (rule "inEqSimp_homoInEq0" (formula "1"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "58") (term "0,0,2,0,0,1") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "58") (term "0,1") (ifseqformula "76"))
                                                                     (rule "concrete_not_2" (formula "58") (term "1"))
                                                                     (rule "concrete_or_3" (formula "58"))
                                                                     (rule "true_left" (formula "58"))
                                                                     (rule "applyEq" (formula "6") (term "1,0,0,0,0,0,0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "80") (term "0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "58") (term "0,0,2,0,0,0") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "58") (term "0,0") (ifseqformula "75"))
                                                                     (rule "concrete_not_2" (formula "58") (term "0"))
                                                                     (rule "concrete_or_1" (formula "58"))
                                                                     (rule "true_left" (formula "58"))
                                                                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "20") (term "0,0,2,0,0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "58") (term "0,0,2,0,0,0") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "58") (term "0,0") (ifseqformula "74"))
                                                                     (rule "concrete_not_2" (formula "58") (term "0"))
                                                                     (rule "concrete_or_1" (formula "58"))
                                                                     (rule "true_left" (formula "58"))
                                                                     (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "64") (term "0,0,2,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "69") (term "0,0,2,0") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "9") (term "0,0,0") (ifseqformula "69"))
                                                                     (rule "concrete_not_2" (formula "9") (term "0,0"))
                                                                     (rule "concrete_or_1" (formula "9") (term "0"))
                                                                     (rule "concrete_or_1" (formula "9"))
                                                                     (rule "true_left" (formula "9"))
                                                                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "24"))
                                                                     (rule "applyEqReverse" (formula "21") (term "1,1") (ifseqformula "19"))
                                                                     (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "19"))
                                                                     (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "19"))
                                                                     (rule "hideAuxiliaryEq" (formula "19"))
                                                                     (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "21"))
                                                                     (rule "concrete_or_3" (formula "24"))
                                                                     (rule "true_left" (formula "24"))
                                                                     (rule "applyEq" (formula "30") (term "1") (ifseqformula "61"))
                                                                     (rule "applyEq" (formula "62") (term "0") (ifseqformula "61"))
                                                                     (rule "qeq_literals" (formula "62"))
                                                                     (rule "closeFalse" (formula "62"))
                                                                  )
                                                                  (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                     (rule "concrete_or_2" (formula "35"))
                                                                     (rule "applyEq" (formula "40") (term "0") (ifseqformula "35"))
                                                                     (rule "inEqSimp_contradInEq1" (formula "40") (ifseqformula "69"))
                                                                     (rule "qeq_literals" (formula "40") (term "0"))
                                                                     (rule "concrete_and_2" (formula "40"))
                                                                     (rule "closeFalse" (formula "40"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)(hb_0) FALSE"
                                                            (rule "concrete_or_4" (formula "56"))
                                                            (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "66"))
                                                            (rule "concrete_or_2" (formula "20"))
                                                            (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "66"))
                                                            (rule "concrete_or_4" (formula "7"))
                                                            (rule "notLeft" (formula "7"))
                                                            (rule "inEqSimp_leqRight" (formula "66"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                            (rule "mul_literals" (formula "1") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "28"))
                                                            (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                                            (rule "polySimp_mulLiterals" (formula "20") (term "1"))
                                                            (rule "polySimp_elimOne" (formula "20") (term "1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "5"))
                                                            (rule "polySimp_mulComm0" (formula "21") (term "0,0"))
                                                            (rule "polySimp_addAssoc" (formula "21") (term "0"))
                                                            (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                                            (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "21") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                                            (rule "mul_literals" (formula "21") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                                                            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                            (rule "mul_literals" (formula "3") (term "0,0"))
                                                            (rule "add_zero_left" (formula "3") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                            (rule "mul_literals" (formula "3") (term "1"))
                                                            (rule "cut_direct" (formula "60") (term "1,0"))
                                                            (branch "CUT: (int)self.auctionOwner <= -1 TRUE"
                                                               (rule "concrete_or_3" (formula "61") (term "0"))
                                                               (rule "concrete_or_1" (formula "61"))
                                                               (rule "true_left" (formula "61"))
                                                               (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "60"))
                                                               (rule "concrete_or_3" (formula "9") (term "0"))
                                                               (rule "concrete_or_1" (formula "9"))
                                                               (rule "true_left" (formula "9"))
                                                               (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "59"))
                                                               (rule "concrete_or_1" (formula "18") (term "0"))
                                                               (rule "concrete_or_1" (formula "18"))
                                                               (rule "true_left" (formula "18"))
                                                               (rule "cut_direct" (formula "32") (term "0"))
                                                               (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                  (rule "concrete_or_1" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "applyEq" (formula "17") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "54") (term "0,0,2,0,0,0") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "54") (term "0,0") (ifseqformula "71"))
                                                                  (rule "concrete_not_2" (formula "54") (term "0"))
                                                                  (rule "concrete_or_1" (formula "54"))
                                                                  (rule "true_left" (formula "54"))
                                                                  (rule "applyEq" (formula "17") (term "0,0,2,0,0,2,2,0") (ifseqformula "32"))
                                                                  (rule "applyEq" (formula "52") (term "0,0,2,0,0,1") (ifseqformula "32"))
                                                                  (rule "replace_known_right" (formula "52") (term "0,1") (ifseqformula "70"))
                                                                  (rule "concrete_not_2" (formula "52") (term "1"))
                                                                  (rule "concrete_or_3" (formula "52"))
                                                                  (rule "true_left" (formula "52"))
                                                                  (rule "applyEq" (formula "56") (term "0,0") (ifseqformula "32"))
                                                                  (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "56"))
                                                                  (rule "concrete_or_1" (formula "23") (term "0"))
                                                                  (rule "concrete_or_1" (formula "23"))
                                                                  (rule "true_left" (formula "23"))
                                                                  (rule "replace_known_left" (formula "56") (term "1,0") (ifseqformula "55"))
                                                                  (rule "concrete_or_3" (formula "56") (term "0"))
                                                                  (rule "concrete_or_1" (formula "56"))
                                                                  (rule "true_left" (formula "56"))
                                                                  (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "55"))
                                                                  (rule "concrete_or_3" (formula "8") (term "0"))
                                                                  (rule "concrete_or_1" (formula "8"))
                                                                  (rule "true_left" (formula "8"))
                                                                  (rule "applyEq" (formula "50") (term "0,0,2,0,0,0") (ifseqformula "30"))
                                                                  (rule "replace_known_right" (formula "50") (term "0,0") (ifseqformula "66"))
                                                                  (rule "concrete_not_2" (formula "50") (term "0"))
                                                                  (rule "concrete_or_1" (formula "50"))
                                                                  (rule "true_left" (formula "50"))
                                                                  (rule "applyEq" (formula "34") (term "0,2,0") (ifseqformula "30"))
                                                                  (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "30"))
                                                                  (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "62"))
                                                                  (rule "concrete_or_2" (formula "31"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0,0") (ifseqformula "30"))
                                                                  (rule "applyEq" (formula "56") (term "0,0,2,0") (ifseqformula "30"))
                                                                  (rule "applyEq" (formula "32") (term "1,1,0,0") (ifseqformula "30"))
                                                                  (rule "applyEq" (formula "70") (term "0") (ifseqformula "30"))
                                                                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "21"))
                                                                  (rule "hideAuxiliaryEq" (formula "16"))
                                                                  (rule "applyEq" (formula "56") (term "0") (ifseqformula "55"))
                                                                  (rule "qeq_literals" (formula "56"))
                                                                  (rule "closeFalse" (formula "56"))
                                                               )
                                                               (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                  (rule "concrete_or_2" (formula "32"))
                                                                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "32"))
                                                                  (rule "inEqSimp_contradInEq0" (formula "63") (ifseqformula "37"))
                                                                  (rule "qeq_literals" (formula "63") (term "0"))
                                                                  (rule "concrete_and_2" (formula "63"))
                                                                  (rule "closeFalse" (formula "63"))
                                                               )
                                                            )
                                                            (branch "CUT: (int)self.auctionOwner <= -1 FALSE"
                                                               (rule "concrete_or_4" (formula "60") (term "0"))
                                                               (rule "replace_known_right" (formula "9") (term "1,0") (ifseqformula "69"))
                                                               (rule "concrete_or_4" (formula "9") (term "0"))
                                                               (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "69"))
                                                               (rule "concrete_or_2" (formula "19") (term "0"))
                                                               (rule "inEqSimp_leqRight" (formula "69"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "cut_direct" (formula "61") (term "1"))
                                                               (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner TRUE"
                                                                  (rule "concrete_or_3" (formula "62"))
                                                                  (rule "true_left" (formula "62"))
                                                                  (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "61"))
                                                                  (rule "concrete_or_1" (formula "20"))
                                                                  (rule "true_left" (formula "20"))
                                                                  (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "60"))
                                                                  (rule "concrete_or_3" (formula "10"))
                                                                  (rule "true_left" (formula "10"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "59"))
                                                                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                                                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                                                                  (rule "mul_literals" (formula "3") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "49") (ifseqformula "60"))
                                                                  (rule "polySimp_rightDist" (formula "49") (term "0,0"))
                                                                  (rule "mul_literals" (formula "49") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "49"))
                                                                  (rule "polySimp_mulComm0" (formula "49") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "49") (term "1"))
                                                                  (rule "mul_literals" (formula "49") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "49") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "49") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "61"))
                                                                  (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                                                                  (rule "mul_literals" (formula "18") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                                                  (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "18") (term "1"))
                                                                  (rule "mul_literals" (formula "18") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "55") (ifseqformula "62"))
                                                                  (rule "polySimp_rightDist" (formula "55") (term "0,0"))
                                                                  (rule "mul_literals" (formula "55") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                                  (rule "polySimp_mulComm0" (formula "55") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "55") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "55") (term "1,1"))
                                                                  (rule "mul_literals" (formula "55") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "55") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "63"))
                                                                  (rule "mul_literals" (formula "15") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                                  (rule "mul_literals" (formula "15") (term "1"))
                                                                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "15"))
                                                                  (rule "leq_literals" (formula "1") (term "0"))
                                                                  (rule "concrete_or_1" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "46") (ifseqformula "63"))
                                                                  (rule "polySimp_rightDist" (formula "46") (term "0,0"))
                                                                  (rule "mul_literals" (formula "46") (term "0,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "46"))
                                                                  (rule "polySimp_mulComm0" (formula "46") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "46") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "46") (term "1,1"))
                                                                  (rule "mul_literals" (formula "46") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "46") (term "1,1"))
                                                                  (rule "cut_direct" (formula "35") (term "0"))
                                                                  (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                     (rule "concrete_or_1" (formula "36"))
                                                                     (rule "true_left" (formula "36"))
                                                                     (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "20") (term "0,0,2,0,0,2,2,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "82") (term "0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "39") (term "0,2,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "59") (term "0,0,2,0,0,0") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "59") (term "0,0") (ifseqformula "77"))
                                                                     (rule "concrete_not_2" (formula "59") (term "0"))
                                                                     (rule "concrete_or_1" (formula "59"))
                                                                     (rule "true_left" (formula "59"))
                                                                     (rule "applyEq" (formula "6") (term "1,0,0,0,0,0,0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "20") (term "0,0,2,0,0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "56") (term "0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "73"))
                                                                     (rule "concrete_or_2" (formula "36"))
                                                                     (rule "applyEq" (formula "59") (term "0,0,2,0,0,0") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "59") (term "0,0") (ifseqformula "76"))
                                                                     (rule "concrete_not_2" (formula "59") (term "0"))
                                                                     (rule "concrete_or_1" (formula "59"))
                                                                     (rule "true_left" (formula "59"))
                                                                     (rule "applyEq" (formula "58") (term "0,0,2,0,0,1") (ifseqformula "35"))
                                                                     (rule "replace_known_right" (formula "58") (term "0,1") (ifseqformula "75"))
                                                                     (rule "concrete_not_2" (formula "58") (term "1"))
                                                                     (rule "concrete_or_3" (formula "58"))
                                                                     (rule "true_left" (formula "58"))
                                                                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "35"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "2"))
                                                                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                     (rule "applyEq" (formula "37") (term "1,1,0,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "65") (term "0,0,2,0") (ifseqformula "35"))
                                                                     (rule "applyEq" (formula "61") (term "0,1") (ifseqformula "35"))
                                                                     (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "61"))
                                                                     (rule "concrete_or_3" (formula "9"))
                                                                     (rule "true_left" (formula "9"))
                                                                     (rule "replace_known_left" (formula "61") (term "1") (ifseqformula "60"))
                                                                     (rule "concrete_or_3" (formula "61"))
                                                                     (rule "true_left" (formula "61"))
                                                                     (rule "replace_known_left" (formula "25") (term "1,0") (ifseqformula "60"))
                                                                     (rule "concrete_or_3" (formula "25") (term "0"))
                                                                     (rule "concrete_or_1" (formula "25"))
                                                                     (rule "true_left" (formula "25"))
                                                                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "62"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "22"))
                                                                     (rule "mul_literals" (formula "22") (term "1,0"))
                                                                     (rule "add_zero_right" (formula "22") (term "0"))
                                                                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "24"))
                                                                     (rule "hideAuxiliaryEq" (formula "19"))
                                                                     (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "61"))
                                                                     (rule "add_literals" (formula "7") (term "1"))
                                                                     (rule "applyEq" (formula "37") (term "0") (ifseqformula "36"))
                                                                     (rule "leq_literals" (formula "37"))
                                                                     (rule "true_left" (formula "37"))
                                                                     (rule "applyEq" (formula "61") (term "0") (ifseqformula "60"))
                                                                     (rule "qeq_literals" (formula "61"))
                                                                     (rule "closeFalse" (formula "61"))
                                                                  )
                                                                  (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                     (rule "concrete_or_2" (formula "35"))
                                                                     (rule "applyEq" (formula "40") (term "0") (ifseqformula "35"))
                                                                     (rule "inEqSimp_contradInEq0" (formula "69") (ifseqformula "40"))
                                                                     (rule "qeq_literals" (formula "69") (term "0"))
                                                                     (rule "concrete_and_2" (formula "69"))
                                                                     (rule "closeFalse" (formula "69"))
                                                                  )
                                                               )
                                                               (branch "CUT: int::select(heap, self.bidders, arr_length) <= (int)self.auctionOwner FALSE"
                                                                  (rule "concrete_or_4" (formula "61"))
                                                                  (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "70"))
                                                                  (rule "concrete_or_4" (formula "10"))
                                                                  (rule "notLeft" (formula "10"))
                                                                  (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "70"))
                                                                  (rule "concrete_or_2" (formula "19"))
                                                                  (rule "inEqSimp_leqRight" (formula "70"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                                  (rule "mul_literals" (formula "1") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "32"))
                                                                  (rule "polySimp_mulComm0" (formula "20") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                                                  (rule "polySimp_mulLiterals" (formula "20") (term "1"))
                                                                  (rule "polySimp_elimOne" (formula "20") (term "1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "8"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "0,0"))
                                                                  (rule "polySimp_addAssoc" (formula "21") (term "0"))
                                                                  (rule "polySimp_addComm0" (formula "21") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                                                  (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "21") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                                                  (rule "mul_literals" (formula "21") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                                                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                                                  (rule "mul_literals" (formula "3") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "3") (term "0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                                  (rule "mul_literals" (formula "3") (term "1"))
                                                                  (rule "cut_direct" (formula "38") (term "0"))
                                                                  (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                                     (rule "concrete_or_1" (formula "39"))
                                                                     (rule "true_left" (formula "39"))
                                                                     (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "38"))
                                                                     (rule "applyEq" (formula "73") (term "0,0,2,0") (ifseqformula "38"))
                                                                     (rule "replace_known_right" (formula "11") (term "0,0,0") (ifseqformula "73"))
                                                                     (rule "concrete_not_2" (formula "11") (term "0,0"))
                                                                     (rule "concrete_or_1" (formula "11") (term "0"))
                                                                     (rule "concrete_or_1" (formula "11"))
                                                                     (rule "true_left" (formula "11"))
                                                                     (rule "applyEq" (formula "82") (term "0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "37"))
                                                                     (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "74"))
                                                                     (rule "concrete_or_2" (formula "38"))
                                                                     (rule "applyEq" (formula "41") (term "0,2,0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "19") (term "0,0,2,0,0,2,2,0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "8") (term "1,0,0,0,0,0,0,0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "63") (term "0,0,2,0,0,2,0") (ifseqformula "37"))
                                                                     (rule "replace_known_left" (formula "64") (term "0,0") (ifseqformula "63"))
                                                                     (rule "concrete_or_1" (formula "64") (term "0"))
                                                                     (rule "concrete_or_1" (formula "64"))
                                                                     (rule "true_left" (formula "64"))
                                                                     (rule "applyEq" (formula "58") (term "0,0,2,0,0,0") (ifseqformula "37"))
                                                                     (rule "replace_known_right" (formula "58") (term "0,0") (ifseqformula "76"))
                                                                     (rule "concrete_not_2" (formula "58") (term "0"))
                                                                     (rule "concrete_or_1" (formula "58"))
                                                                     (rule "true_left" (formula "58"))
                                                                     (rule "applyEq" (formula "65") (term "0,0,2,0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "39") (term "1,1,0,0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "57") (term "1,0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "58") (term "0,0,2,0,0,0") (ifseqformula "37"))
                                                                     (rule "replace_known_right" (formula "58") (term "0,0") (ifseqformula "75"))
                                                                     (rule "concrete_not_2" (formula "58") (term "0"))
                                                                     (rule "concrete_or_1" (formula "58"))
                                                                     (rule "true_left" (formula "58"))
                                                                     (rule "applyEq" (formula "57") (term "0,0,2,0,0,1") (ifseqformula "37"))
                                                                     (rule "replace_known_right" (formula "57") (term "0,1") (ifseqformula "74"))
                                                                     (rule "concrete_not_2" (formula "57") (term "1"))
                                                                     (rule "concrete_or_3" (formula "57"))
                                                                     (rule "true_left" (formula "57"))
                                                                     (rule "applyEq" (formula "19") (term "0,0,2,0,0,0") (ifseqformula "37"))
                                                                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "63"))
                                                                     (rule "inEqSimp_homoInEq1" (formula "21"))
                                                                     (rule "mul_literals" (formula "21") (term "1,0"))
                                                                     (rule "add_zero_right" (formula "21") (term "0"))
                                                                     (rule "applyEq" (formula "42") (term "0") (ifseqformula "41"))
                                                                     (rule "leq_literals" (formula "42"))
                                                                     (rule "true_left" (formula "42"))
                                                                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "27"))
                                                                     (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "19"))
                                                                     (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "19"))
                                                                     (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "19"))
                                                                     (rule "hideAuxiliaryEq" (formula "19"))
                                                                     (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "21"))
                                                                     (rule "concrete_or_3" (formula "27"))
                                                                     (rule "true_left" (formula "27"))
                                                                     (rule "applyEq" (formula "61") (term "0") (ifseqformula "60"))
                                                                     (rule "qeq_literals" (formula "61"))
                                                                     (rule "closeFalse" (formula "61"))
                                                                  )
                                                                  (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                                     (rule "concrete_or_2" (formula "38"))
                                                                     (rule "applyEq" (formula "43") (term "0") (ifseqformula "38"))
                                                                     (rule "inEqSimp_contradInEq1" (formula "43") (ifseqformula "69"))
                                                                     (rule "qeq_literals" (formula "43") (term "0"))
                                                                     (rule "concrete_and_2" (formula "43"))
                                                                     (rule "closeFalse" (formula "43"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "i_0 <= -1 + int::select(heap, self.bidders, arr_length)"
                                             (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,0,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,0,0"))
                                             (rule "replaceKnownSelect_taclet_32" (formula "3") (term "0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,1"))
                                             (rule "replaceKnownSelect_taclet_32" (formula "5") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "5") (term "0,1"))
                                             (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,0,1,0"))
                                             (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,0,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "33") (term "1,0,0,2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,1,1,0,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,1,1,0,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "33") (term "1,0,0,2,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,0,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,1,1,0,0"))
                                             (rule "replaceKnownSelect_taclet_32" (formula "6") (term "0,1,1,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "0,1,1,0,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,1,1,0,1,0"))
                                             (rule "replaceKnownSelect_taclet_32" (formula "7") (term "1,1,0,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "7") (term "1,1,0,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,0,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,0,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,1,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,0,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,1,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "eqSymm" (formula "16") (term "1"))
                                             (rule "polySimp_elimSub" (formula "3") (term "0"))
                                             (rule "mul_literals" (formula "3") (term "1,0"))
                                             (rule "polySimp_elimSub" (formula "5") (term "1"))
                                             (rule "mul_literals" (formula "5") (term "1,1"))
                                             (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "6") (term "1,1,1,0,0"))
                                             (rule "polySimp_addComm0" (formula "3") (term "0"))
                                             (rule "polySimp_addComm0" (formula "5") (term "1"))
                                             (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0"))
                                             (rule "inEqSimp_ltRight" (formula "25"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
                                             (rule "inEqSimp_geqRight" (formula "33"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,1,0,1,1,0"))
                                             (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "20"))
                                             (rule "polySimp_addComm1" (formula "20") (term "0"))
                                             (rule "inEqSimp_homoInEq0" (formula "7"))
                                             (rule "polySimp_addComm1" (formula "7") (term "0"))
                                             (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "10") (term "0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "28") (term "0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,0,1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "10") (term "0,0,2,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,0,0,2,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "4"))
                                             (rule "eqSymm" (formula "10") (term "0,0"))
                                             (rule "applyEq" (formula "34") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,2,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "1") (term "0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "9") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,0,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "4"))
                                             (rule "applyEq" (formula "8") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,0,2,1,1,0"))
                                             (rule "add_literals" (formula "8") (term "1,3,0,0,0,2,1,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "3,0,0,0,2,1,1,0"))
                                             (rule "applyEq" (formula "9") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,1,1,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "9") (term "1,3,0,1,1,0,1,0,1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "3,0,1,1,0,1,0,1,1,0"))
                                             (rule "applyEq" (formula "1") (term "1,3,0,0,0,2,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,2,1,0"))
                                             (rule "add_literals" (formula "1") (term "1,3,0,0,0,2,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "3,0,0,0,2,1,0"))
                                             (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                             (rule "applyEq" (formula "8") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,0,2,0,1,0"))
                                             (rule "add_literals" (formula "8") (term "1,3,0,0,0,2,0,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "3,0,0,0,2,0,1,0"))
                                             (rule "applyEq" (formula "8") (term "1,3,0,0,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,1,0"))
                                             (rule "add_literals" (formula "8") (term "1,3,0,0,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "3,0,0,1,0"))
                                             (rule "applyEq" (formula "10") (term "1,1,0") (ifseqformula "14"))
                                             (rule "polySimp_pullOutFactor2" (formula "10") (term "1,0"))
                                             (rule "add_literals" (formula "10") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "10") (term "1,0"))
                                             (rule "ifthenelse_same_branches" (formula "10") (term "0"))
                                             (rule "applyEqReverse" (formula "34") (term "0,1,0,0,0") (ifseqformula "10"))
                                             (rule "eqClose" (formula "34") (term "1,0,0,0"))
                                             (rule "concrete_and_3" (formula "34") (term "0,0,0"))
                                             (rule "applyEqReverse" (formula "34") (term "0,1,1,0,0") (ifseqformula "10"))
                                             (rule "add_zero_left" (formula "34") (term "1,1,0,0"))
                                             (rule "hideAuxiliaryEq" (formula "10"))
                                             (rule "applyEq" (formula "8") (term "1,3,0,1,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,1,1,0"))
                                             (rule "add_literals" (formula "8") (term "1,3,0,1,1,0"))
                                             (rule "times_zero_1" (formula "8") (term "3,0,1,1,0"))
                                             (rule "applyEq" (formula "1") (term "1,3,0,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,0"))
                                             (rule "add_literals" (formula "1") (term "1,3,0,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "3,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "33") (term "1,3,0,0,1,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "1,3,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "3,0,0,1,0,0"))
                                             (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "9") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                             (rule "applyEq" (formula "9") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "9") (term "3,0,0,1,0,1,0,1,1,0"))
                                             (rule "add_literals" (formula "9") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "3,0,0,1,0,1,0,1,1,0"))
                                             (rule "applyEq" (formula "33") (term "1,3,0,0,1,1,0,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,1,1,0,0,0"))
                                             (rule "add_literals" (formula "33") (term "1,3,0,0,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "3,0,0,1,1,0,0,0"))
                                             (rule "applyEq" (formula "33") (term "1,3,0,1,0,0,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,0,0,0,0"))
                                             (rule "add_literals" (formula "33") (term "1,3,0,1,0,0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "3,0,1,0,0,0,0"))
                                             (rule "applyEq" (formula "33") (term "1,3,0,0,0,0,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "33") (term "1,3,0,0,0,0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "3,0,0,0,0,0,0"))
                                             (rule "applyEq" (formula "1") (term "1,3,0,0,1,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,1,0"))
                                             (rule "add_literals" (formula "1") (term "1,3,0,0,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "3,0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "33") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,1,1,0,0,0"))
                                             (rule "add_literals" (formula "33") (term "1,3,0,1,1,1,0,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "3,0,1,1,1,0,0,0"))
                                             (rule "applyEq" (formula "33") (term "1,3,0,1,1,0,0") (ifseqformula "13"))
                                             (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,1,0,0"))
                                             (rule "add_literals" (formula "33") (term "1,3,0,1,1,0,0"))
                                             (rule "times_zero_1" (formula "33") (term "3,0,1,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
                                             (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "9") (term "1,1,0,1,0"))
                                             (rule "mul_literals" (formula "9") (term "0,1,1,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                             (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                             (rule "polySimp_rightDist" (formula "19") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                             (rule "mul_literals" (formula "19") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                             (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                             (rule "polySimp_rightDist" (formula "7") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                             (rule "mul_literals" (formula "7") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                             (rule "mul_literals" (formula "1") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                             (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "5"))
                                             (rule "leq_literals" (formula "16") (term "0"))
                                             (rule "concrete_or_1" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "18"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "2") (term "1,0"))
                                             (rule "add_literals" (formula "2") (term "0"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                       )
                                    )
                                    (branch "!self.bidders[i_0] = a_0"
                                       (rule "notLeft" (formula "16") (userinteraction))
                                       (rule "eqSymm" (formula "16") (term "1") (userinteraction))
                                       (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "25") (userinteraction))
                                       (rule "concrete_or_4" (formula "16") (userinteraction))
                                       (rule "instAll" (formula "17") (term "0,0,2,0,0,0") (ifseqformula "14") (userinteraction))
                                       (rule "notLeft" (formula "16") (userinteraction))
                                       (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "25") (userinteraction))
                                       (rule "concrete_or_2" (formula "16") (userinteraction))
                                       (rule "instAll" (formula "16") (term "0,2,0") (ifseqformula "11") (userinteraction))
                                       (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,0,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,0,0"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "3") (term "0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,1"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "5") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "5") (term "0,1"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,0,1,0"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,0,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "35") (term "1,0,0,2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,1,1,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "35") (term "1,0,0,2,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,0,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "6") (term "0,1,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "0,1,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,1,1,0,1,0"))
                                       (rule "replaceKnownSelect_taclet_32" (formula "7") (term "1,1,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "7") (term "1,1,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,0,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_5" (formula "7") (term "1,1,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,0,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "7") (term "1,1,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownSelect_taclet_20" (formula "7") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "7") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "eqSymm" (formula "16") (term "0,0"))
                                       (rule "eqSymm" (formula "16") (term "1,0"))
                                       (rule "eqSymm" (formula "16") (term "1"))
                                       (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "26"))
                                       (rule "concrete_not_2" (formula "19") (term "0"))
                                       (rule "concrete_or_1" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "25"))
                                       (rule "concrete_not_2" (formula "18") (term "0"))
                                       (rule "concrete_or_1" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "polySimp_elimSub" (formula "3") (term "0"))
                                       (rule "mul_literals" (formula "3") (term "1,0"))
                                       (rule "polySimp_elimSub" (formula "5") (term "1"))
                                       (rule "mul_literals" (formula "5") (term "1,1"))
                                       (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "6") (term "1,1,1,0,0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0"))
                                       (rule "polySimp_addComm0" (formula "5") (term "1"))
                                       (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_geqRight" (formula "33"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,1,1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "6"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "28") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,2,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,0,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,2,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "9") (term "0,2,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "3"))
                                       (rule "eqSymm" (formula "9") (term "0,0"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,2,1,0") (ifseqformula "3"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "34") (term "0,2,0,1,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "8") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "1,3,0,0,1,1,0,0,0,0") (ifseqformula "13"))
                                       (rule "polySimp_pullOutFactor2" (formula "34") (term "3,0,0,1,1,0,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "1,3,0,0,1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "34") (term "3,0,0,1,1,0,0,0,0"))
                                       (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "13"))
                                       (rule "polySimp_pullOutFactor2" (formula "9") (term "1,0"))
                                       (rule "add_literals" (formula "9") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "9") (term "1,0"))
                                       (rule "ifthenelse_same_branches" (formula "9") (term "0"))
                                       (rule "applyEqReverse" (formula "34") (term "0,1,0,0,0") (ifseqformula "9"))
                                       (rule "eqClose" (formula "34") (term "1,0,0,0"))
                                       (rule "concrete_and_3" (formula "34") (term "0,0,0"))
                                       (rule "applyEqReverse" (formula "34") (term "0,1,1,0,0") (ifseqformula "9"))
                                       (rule "add_zero_left" (formula "34") (term "1,1,0,0"))
                                       (rule "hideAuxiliaryEq" (formula "9"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0") (ifseqformula "3"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "7") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "7") (term "3,0,0,0,2,0,1,0"))
                                       (rule "add_literals" (formula "7") (term "1,3,0,0,0,2,0,1,0"))
                                       (rule "times_zero_1" (formula "7") (term "3,0,0,0,2,0,1,0"))
                                       (rule "applyEq" (formula "8") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,1,1,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "8") (term "1,3,0,1,1,0,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "8") (term "3,0,1,1,0,1,0,1,1,0"))
                                       (rule "applyEq" (formula "7") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "7") (term "3,0,0,0,2,1,1,0"))
                                       (rule "add_literals" (formula "7") (term "1,3,0,0,0,2,1,1,0"))
                                       (rule "times_zero_1" (formula "7") (term "3,0,0,0,2,1,1,0"))
                                       (rule "applyEq" (formula "8") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,1,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "8") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "8") (term "3,0,0,1,0,1,0,1,1,0"))
                                       (rule "applyEq" (formula "7") (term "1,3,0,1,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "7") (term "3,0,1,1,0"))
                                       (rule "add_literals" (formula "7") (term "1,3,0,1,1,0"))
                                       (rule "times_zero_1" (formula "7") (term "3,0,1,1,0"))
                                       (rule "applyEq" (formula "33") (term "1,3,0,0,1,0,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,1,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,3,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "3,0,0,1,0,0"))
                                       (rule "applyEq" (formula "7") (term "1,3,0,0,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "7") (term "3,0,0,1,0"))
                                       (rule "add_literals" (formula "7") (term "1,3,0,0,1,0"))
                                       (rule "times_zero_1" (formula "7") (term "3,0,0,1,0"))
                                       (rule "applyEq" (formula "8") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "8") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "8") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                       (rule "applyEq" (formula "8") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "8") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "add_literals" (formula "8") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "times_zero_1" (formula "8") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0,0,2,1,0") (ifseqformula "3"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "33") (term "1,3,0,0,0,0,0,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,3,0,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "3,0,0,0,0,0,0"))
                                       (rule "applyEq" (formula "33") (term "1,3,0,1,0,0,0,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,0,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,3,0,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "3,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "33") (term "1,3,0,1,1,0,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,1,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,3,0,1,1,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "3,0,1,1,0,0"))
                                       (rule "applyEq" (formula "33") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "33") (term "3,0,1,1,1,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "1,3,0,1,1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "3,0,1,1,1,0,0,0"))
                                       (rule "applyEq" (formula "1") (term "0,2,0,0,1,0") (ifseqformula "3"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "1") (term "1,3,0,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,0"))
                                       (rule "add_literals" (formula "1") (term "1,3,0,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "3,0,1,0"))
                                       (rule "applyEq" (formula "1") (term "1,3,0,0,0,2,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,2,1,0"))
                                       (rule "add_literals" (formula "1") (term "1,3,0,0,0,2,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "3,0,0,0,2,1,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "1") (term "1,3,0,0,1,0") (ifseqformula "12"))
                                       (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,1,0"))
                                       (rule "add_literals" (formula "1") (term "1,3,0,0,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "3,0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,1,0,1,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                       (rule "polySimp_rightDist" (formula "6") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                       (rule "mul_literals" (formula "6") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "15") (term "0"))
                                       (rule "concrete_or_1" (formula "15"))
                                       (rule "true_left" (formula "15"))
                                       (rule "pullOutSelect" (formula "7") (term "0,0,2,1,1,0") (inst "selectSK=arr_1"))
                                       (rule "applyEq" (formula "1") (term "0,0,2,0") (ifseqformula "7"))
                                       (rule "simplifySelectOfStore" (formula "7"))
                                       (rule "equalUnique" (formula "7") (term "1,0,0,0"))
                                       (rule "concrete_and_4" (formula "7") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "7") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "7") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "7"))
                                       (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "7") (term "0,0"))
                                       (rule "equalUnique" (formula "7") (term "1,0,0"))
                                       (rule "eqSymm" (formula "7") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "7") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "7") (term "1,0,0,0") (ifseqformula "29"))
                                       (rule "concrete_and_4" (formula "7") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "7") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "7") (term "0"))
                                       (rule "applyEqReverse" (formula "8") (term "0,0,2,1,1,0") (ifseqformula "7"))
                                       (rule "applyEqReverse" (formula "1") (term "0,0,2,0") (ifseqformula "7"))
                                       (rule "hideAuxiliaryEq" (formula "7"))
                                       (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=arr_2"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                       (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "1"))
                                       (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                       (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "1") (term "0,0"))
                                       (rule "eqClose" (formula "1") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "1") (term "0,0"))
                                       (rule "castDel" (formula "1") (term "1,0"))
                                       (rule "intCastEqual" (formula "1") (term "0,0"))
                                       (rule "pullOutSelect" (formula "8") (term "1,1,0") (inst "selectSK=arr_3"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "8"))
                                       (rule "simplifySelectOfStore" (formula "8"))
                                       (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "8") (term "0,0"))
                                       (rule "equalUnique" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "8") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "8") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "8"))
                                       (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "8") (term "0,0"))
                                       (rule "eqClose" (formula "8") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "8") (term "0,0"))
                                       (rule "equalUnique" (formula "8") (term "0,0"))
                                       (rule "castDel" (formula "8") (term "1,0"))
                                       (rule "eqSymm" (formula "8") (term "0,0"))
                                       (rule "intCastEqual" (formula "8") (term "0,0"))
                                       (rule "nnf_ex2all" (formula "34"))
                                       (rule "nnf_notAnd" (formula "4") (term "0"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0"))
                                       (rule "nnf_imp2or" (formula "10") (term "0"))
                                       (rule "nnf_notAll" (formula "1") (term "0"))
                                       (rule "nnf_notAnd" (formula "4") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
                                       (rule "times_zero_1" (formula "4") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
                                       (rule "nnf_imp2or" (formula "11") (term "1,0"))
                                       (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                       (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                       (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,1,0"))
                                       (rule "inEqSimp_notLeq" (formula "11") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,1,0,1,0"))
                                       (rule "add_zero_left" (formula "11") (term "0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "0,0,1,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,1,0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
                                       (rule "nnf_imp2or" (formula "11") (term "0,1,0,1,1,0"))
                                       (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
                                       (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,1,0,1,1,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0,1,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,1,1,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,1,1,0"))
                                       (rule "commute_or_2" (formula "4") (term "0"))
                                       (rule "cut_direct" (formula "18") (term "0,0"))
                                       (branch "CUT: hb_0 = a_0 TRUE"
                                          (rule "concrete_or_1" (formula "19") (term "0"))
                                          (rule "concrete_or_1" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "18"))
                                          (rule "ifthenelse_true" (formula "2") (term "0"))
                                          (rule "applyEqReverse" (formula "3") (term "1,1") (ifseqformula "2"))
                                          (rule "add_literals" (formula "3") (term "1"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "applyEqRigid" (formula "10") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,0,0,0,1,0,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "9") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "4") (term "1") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0,1,0,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "13") (term "1,0,0,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,0,2,0,0,0,0,0,0,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,0,0,0,0,0,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "10") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "9") (term "0,2,0,0,1,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,0,0,0,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "8") (term "1,0,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "14") (term "0,0,2,1") (ifseqformula "17"))
                                          (rule "applyEq" (formula "22") (term "0,0,2,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "10") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "28") (term "0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "10") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "10") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "14") (term "0,2,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "10") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "12") (term "0,0,2,1,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "10") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "17"))
                                          (rule "applyEqRigid" (formula "1") (term "0,2,0,1,1,0,0,0,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "18") (term "0") (ifseqformula "14"))
                                          (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "18"))
                                          (rule "applyEq" (formula "18") (term "0") (ifseqformula "22"))
                                          (rule "leq_literals" (formula "18"))
                                          (rule "true_left" (formula "18"))
                                          (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "applyEq" (formula "14") (term "1") (ifseqformula "21"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "commute_or_2" (formula "1") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                          (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                                          (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                                          (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                                          (rule "commute_or_2" (formula "10") (term "0,1,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                                          (rule "allLeft" (formula "22") (inst "t=a_0"))
                                          (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                          (rule "allLeft" (formula "19") (inst "t=j_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "6"))
                                          (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                          (rule "concrete_and_2" (formula "19") (term "1,0"))
                                          (rule "concrete_or_4" (formula "19") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                                          (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "19") (term "0,0,1"))
                                          (rule "leq_literals" (formula "19") (term "0,1"))
                                          (rule "concrete_and_2" (formula "19") (term "1"))
                                          (rule "concrete_or_4" (formula "19"))
                                          (rule "all_pull_out1" (formula "10") (term "0,1,1,0"))
                                          (rule "ex_pull_out3" (formula "10") (term "1,0"))
                                          (rule "ifthenelse_split" (formula "8") (term "0"))
                                          (branch "self.bidders[j_0] = a_0 TRUE"
                                             (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "self.bidders[j_0] = a_0 FALSE"
                                             (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "8"))
                                             (rule "applyEqReverse" (formula "9") (term "1,1,0") (ifseqformula "8"))
                                             (rule "hideAuxiliaryEq" (formula "8"))
                                             (rule "inEqSimp_contradInEq0" (formula "23") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "23") (term "0"))
                                             (rule "concrete_and_2" (formula "23"))
                                             (rule "closeFalse" (formula "23"))
                                          )
                                       )
                                       (branch "CUT: hb_0 = a_0 FALSE"
                                          (rule "concrete_or_2" (formula "18") (term "0"))
                                          (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "26"))
                                          (rule "ifthenelse_false" (formula "2") (term "0"))
                                          (rule "applyEqReverse" (formula "3") (term "1,1") (ifseqformula "2"))
                                          (rule "hideAuxiliaryEq" (formula "2"))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                          (rule "commute_or_2" (formula "1") (term "0,0"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                          (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                                          (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                                          (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                                          (rule "commute_or_2" (formula "10") (term "0,1,0,1,1,0"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                                          (rule "ifthenelse_split" (formula "8") (term "0"))
                                          (branch "self.bidders[j_0] = hb_0 TRUE"
                                             (rule "applyEqReverse" (formula "10") (term "1,1,0") (ifseqformula "9"))
                                             (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "9"))
                                             (rule "add_literals" (formula "2") (term "1"))
                                             (rule "hideAuxiliaryEq" (formula "9"))
                                             (rule "all_pull_out1" (formula "10") (term "0,1,1,0"))
                                             (rule "ex_pull_out3" (formula "10") (term "1,0"))
                                             (rule "allLeft" (formula "20") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                                             (rule "applyEq" (formula "20") (term "0,0,2,0,0,0") (ifseqformula "8"))
                                             (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "20") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "20") (term "1,0"))
                                             (rule "concrete_or_4" (formula "20") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                                             (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "20") (term "0,0,1"))
                                             (rule "leq_literals" (formula "20") (term "0,1"))
                                             (rule "concrete_and_2" (formula "20") (term "1"))
                                             (rule "concrete_or_4" (formula "20"))
                                             (rule "allLeft" (formula "12") (inst "t=a_0"))
                                             (rule "inEqSimp_commuteLeq" (formula "12"))
                                             (rule "all_pull_out3" (formula "10") (term "0,1,0"))
                                             (rule "cnf_rightDist" (formula "10") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "10") (term "1,0,0,1,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,1,0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "10") (term "0,0,0,1,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0,0,1,0"))
                                             (rule "commute_or" (formula "10") (term "1,0,0,0,1,0"))
                                             (rule "commute_or" (formula "10") (term "0,0,0,0,0,1,0"))
                                             (rule "ex_pull_out3" (formula "10") (term "0"))
                                             (rule "commute_and" (formula "1") (term "0,0,0"))
                                             (rule "all_pull_out3" (formula "10") (term "0,0"))
                                             (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,1,0,0,0"))
                                             (rule "eq_or_2" (formula "10") (term "0,0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "10") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,1,0,0,0,0"))
                                             (rule "eq_or" (formula "10") (term "0,0,1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "10") (term "0,0,0,0,0,0,0"))
                                             (rule "eq_or_2" (formula "10") (term "0,0,0,0,0,0"))
                                             (rule "commute_and_2" (formula "1") (term "0,0"))
                                             (rule "allLeft" (formula "3") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                                             (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "9"))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "28"))
                                             (rule "concrete_not_2" (formula "3") (term "0,0"))
                                             (rule "concrete_or_1" (formula "3") (term "0"))
                                             (rule "concrete_or_1" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "allLeft" (formula "20") (inst "t=hb_0"))
                                             (rule "exLeft" (formula "20") (inst "sk=i_1"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "eqSymm" (formula "20") (term "0"))
                                             (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "20") (term "1"))
                                             (rule "concrete_or_4" (formula "20"))
                                             (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "22") (term "0"))
                                             (rule "concrete_or_2" (formula "22"))
                                             (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "21") (term "0"))
                                             (rule "concrete_or_2" (formula "21"))
                                             (rule "inEqSimp_homoInEq0" (formula "22"))
                                             (rule "polySimp_addComm1" (formula "22") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                             (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                             (rule "polySimp_rightDist" (formula "22") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                             (rule "mul_literals" (formula "22") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                             (rule "allLeft" (formula "9") (inst "t=j_0"))
                                             (rule "replaceKnownSelect_taclet1000100020000_37" (formula "9") (term "0,0,2,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet1000100020000_39" (formula "9") (term "0,0,2,0,1"))
                                             (rule "replaceKnownSelect_taclet1000100020000_42" (formula "9") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet011000100020000_45" (formula "9") (term "0,1"))
                                             (rule "leq_literals" (formula "9") (term "1"))
                                             (rule "concrete_or_3" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "cut_direct" (formula "18") (term "0"))
                                             (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                (rule "concrete_or_1" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,0,0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "37") (term "0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "26") (term "0,0,2,0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "16") (term "0,2,0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "16"))
                                                (rule "leq_literals" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "25"))
                                                (rule "qeq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                (rule "concrete_or_2" (formula "18"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                                                (rule "qeq_literals" (formula "19") (term "0"))
                                                (rule "concrete_and_2" (formula "19"))
                                                (rule "closeFalse" (formula "19"))
                                             )
                                          )
                                          (branch "self.bidders[j_0] = hb_0 FALSE"
                                             (rule "applyEqReverse" (formula "9") (term "1,1,0") (ifseqformula "8"))
                                             (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "8"))
                                             (rule "hideAuxiliaryEq" (formula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "all_pull_out1" (formula "9") (term "0,1,1,0"))
                                             (rule "ex_pull_out3" (formula "9") (term "1,0"))
                                             (rule "allLeft" (formula "11") (inst "t=a_0"))
                                             (rule "inEqSimp_commuteLeq" (formula "11"))
                                             (rule "allLeft" (formula "12") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                             (rule "allLeft" (formula "21") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                                             (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "21") (term "0,0,1"))
                                             (rule "leq_literals" (formula "21") (term "0,1"))
                                             (rule "concrete_and_2" (formula "21") (term "1"))
                                             (rule "concrete_or_4" (formula "21"))
                                             (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "6"))
                                             (rule "qeq_literals" (formula "21") (term "0,1"))
                                             (rule "concrete_and_2" (formula "21") (term "1"))
                                             (rule "concrete_or_4" (formula "21"))
                                             (rule "allLeft" (formula "25") (inst "t=a_0"))
                                             (rule "allLeft" (formula "26") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                             (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "12"))
                                             (rule "mul_literals" (formula "26") (term "0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "2"))
                                             (rule "mul_literals" (formula "26") (term "0,0"))
                                             (rule "add_zero_left" (formula "26") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                                             (rule "mul_literals" (formula "26") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "26"))
                                             (rule "leq_literals" (formula "25") (term "0"))
                                             (rule "concrete_or_1" (formula "25"))
                                             (rule "true_left" (formula "25"))
                                             (rule "all_pull_out3" (formula "9") (term "0,1,0"))
                                             (rule "cnf_rightDist" (formula "9") (term "0,0,1,0"))
                                             (rule "commute_or_2" (formula "9") (term "1,0,0,1,0"))
                                             (rule "shift_paren_or" (formula "9") (term "0,1,0,0,1,0"))
                                             (rule "cnf_rightDist" (formula "9") (term "0,0,0,1,0"))
                                             (rule "commute_or_2" (formula "9") (term "0,0,0,0,1,0"))
                                             (rule "commute_or" (formula "9") (term "1,0,0,0,1,0"))
                                             (rule "commute_or" (formula "9") (term "0,0,0,0,0,1,0"))
                                             (rule "commute_and" (formula "1") (term "0,0,0"))
                                             (rule "ex_pull_out3" (formula "9") (term "0"))
                                             (rule "all_pull_out3" (formula "9") (term "0,0"))
                                             (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "9") (term "0,1,0,0,0"))
                                             (rule "eq_or_2" (formula "9") (term "0,0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "9") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "9") (term "1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "9") (term "0,1,0,0,0,0"))
                                             (rule "eq_or" (formula "9") (term "0,0,1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0,0"))
                                             (rule "commute_or" (formula "9") (term "0,0,0,0,0,0,0"))
                                             (rule "eq_or_2" (formula "9") (term "0,0,0,0,0,0"))
                                             (rule "commute_and_2" (formula "1") (term "0,0"))
                                             (rule "allLeft" (formula "3") (inst "t=j_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0") (ifseqformula "7"))
                                             (rule "qeq_literals" (formula "3") (term "0,1,0"))
                                             (rule "concrete_and_2" (formula "3") (term "1,0"))
                                             (rule "concrete_or_4" (formula "3") (term "0"))
                                             (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
                                             (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "3") (term "0,0,1"))
                                             (rule "leq_literals" (formula "3") (term "0,1"))
                                             (rule "concrete_and_2" (formula "3") (term "1"))
                                             (rule "concrete_or_4" (formula "3"))
                                             (rule "notLeft" (formula "3"))
                                             (rule "allLeft" (formula "8") (inst "t=j_0"))
                                             (rule "replaceKnownSelect_taclet1000100020000_37" (formula "8") (term "0,0,2,0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet1000100020000_39" (formula "8") (term "0,0,2,0,1"))
                                             (rule "replaceKnownSelect_taclet1000100020000_42" (formula "8") (term "0,1"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet111000100020000_45" (formula "8") (term "0,1"))
                                             (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "8") (term "1"))
                                             (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1"))
                                             (rule "add_literals" (formula "8") (term "1,0,1"))
                                             (rule "times_zero_1" (formula "8") (term "0,1"))
                                             (rule "qeq_literals" (formula "8") (term "1"))
                                             (rule "concrete_or_3" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "allLeft" (formula "20") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                             (rule "exLeft" (formula "20") (inst "sk=i_1"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "21") (term "0"))
                                             (rule "concrete_or_2" (formula "21"))
                                             (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "22") (term "0"))
                                             (rule "concrete_or_2" (formula "22"))
                                             (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "24"))
                                             (rule "concrete_not_1" (formula "20") (term "1"))
                                             (rule "concrete_or_4" (formula "20"))
                                             (rule "inEqSimp_homoInEq0" (formula "22"))
                                             (rule "polySimp_addComm1" (formula "22") (term "0"))
                                             (rule "applyEq" (formula "32") (term "0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "12") (term "0,0,2,0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "24") (term "0,0,2,0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "29") (term "0,0,2,0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "33") (term "0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "2") (term "0,0,2,0") (ifseqformula "20"))
                                             (rule "applyEq" (formula "8") (term "0,0,2,1,1,0") (ifseqformula "20"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                             (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                             (rule "polySimp_rightDist" (formula "22") (term "1"))
                                             (rule "mul_literals" (formula "22") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                             (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                             (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "12"))
                                             (rule "mul_literals" (formula "29") (term "0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0"))
                                             (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "2"))
                                             (rule "mul_literals" (formula "29") (term "0,0"))
                                             (rule "add_zero_left" (formula "29") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                                             (rule "mul_literals" (formula "29") (term "1"))
                                             (rule "cut_direct" (formula "18") (term "0"))
                                             (branch "CUT: self.auctionOwner = a_0 TRUE"
                                                (rule "concrete_or_1" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "applyEq" (formula "16") (term "0,2,0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "26") (term "0,0,2,0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "1") (term "1,0,0,0,0,0,0,0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "14") (term "1,1,0,0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "41") (term "0") (ifseqformula "18"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "16"))
                                                (rule "leq_literals" (formula "19"))
                                                (rule "true_left" (formula "19"))
                                                (rule "applyEq" (formula "27") (term "0") (ifseqformula "25"))
                                                (rule "qeq_literals" (formula "27"))
                                                (rule "closeFalse" (formula "27"))
                                             )
                                             (branch "CUT: self.auctionOwner = a_0 FALSE"
                                                (rule "concrete_or_2" (formula "18"))
                                                (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "28"))
                                                (rule "qeq_literals" (formula "19") (term "0"))
                                                (rule "concrete_and_2" (formula "19"))
                                                (rule "closeFalse" (formula "19"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,0"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "2") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,1"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "4") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "4") (term "0,1"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "5") (term "1,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "5") (term "1,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "29") (term "1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "5") (term "1,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,1,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "5") (term "1,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "29") (term "1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,1,1,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,1,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "21") (term "1,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "21") (term "1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,0,2,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,0,2,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,1,1,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "6") (term "1,1,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "1,1,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_32" (formula "5") (term "0,1,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "5") (term "0,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,1,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,0,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,0,2,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,0,2,0,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,1,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,0,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "orRight" (formula "29"))
                                    (rule "orRight" (formula "29"))
                                    (rule "eqSymm" (formula "31"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "polySimp_elimSub" (formula "2") (term "0"))
                                    (rule "mul_literals" (formula "2") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "4") (term "1"))
                                    (rule "mul_literals" (formula "4") (term "1,1"))
                                    (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "5") (term "1,1,1,0,0"))
                                    (rule "polySimp_addComm0" (formula "2") (term "0"))
                                    (rule "polySimp_addComm0" (formula "4") (term "1"))
                                    (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "4"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "31") (term "0,2,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "31"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "29") (term "0,0,2,0,0,3,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,0,0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "21") (term "0,2,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "7") (term "0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "21") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "21") (term "0,2,1,3,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "29") (term "0,2,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "29") (term "0,2,1,3,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "32") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "21") (term "0,0,2,0,0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "29") (term "0,0,2,0,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "11"))
                                    (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,0,0,2,0,1,0"))
                                    (rule "add_literals" (formula "5") (term "1,3,0,0,0,2,0,1,0"))
                                    (rule "times_zero_1" (formula "5") (term "3,0,0,0,2,0,1,0"))
                                    (rule "applyEq" (formula "6") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "11"))
                                    (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,1,1,0,1,0,1,1,0"))
                                    (rule "add_literals" (formula "6") (term "1,3,0,1,1,0,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "3,0,1,1,0,1,0,1,1,0"))
                                    (rule "applyEq" (formula "31") (term "0,0,2,0,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "31"))
                                    (rule "applyEq" (formula "29") (term "1,3,0,0") (ifseqformula "11"))
                                    (rule "polySimp_pullOutFactor2" (formula "29") (term "3,0,0"))
                                    (rule "add_literals" (formula "29") (term "1,3,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "3,0,0"))
                                    (rule "applyEq" (formula "6") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "11"))
                                    (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                    (rule "add_literals" (formula "6") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                    (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "11"))
                                    (rule "polySimp_pullOutFactor2" (formula "7") (term "1,0"))
                                    (rule "add_literals" (formula "7") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "7") (term "1,0"))
                                    (rule "ifthenelse_same_branches" (formula "7") (term "0"))
                                    (rule "applyEqReverse" (formula "32") (term "0,1,1,0,0") (ifseqformula "7"))
                                    (rule "add_zero_left" (formula "32") (term "1,1,0,0"))
                                    (rule "applyEqReverse" (formula "32") (term "0,1,0,0,0") (ifseqformula "7"))
                                    (rule "eqClose" (formula "32") (term "1,0,0,0"))
                                    (rule "concrete_and_3" (formula "32") (term "0,0,0"))
                                    (rule "hideAuxiliaryEq" (formula "7"))
                                    (rule "applyEq" (formula "20") (term "1,3,0,0,1,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "20") (term "3,0,0,1,0"))
                                    (rule "add_literals" (formula "20") (term "1,3,0,0,1,0"))
                                    (rule "times_zero_1" (formula "20") (term "3,0,0,1,0"))
                                    (rule "applyEq" (formula "31") (term "1,3,0,0,1,0,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,1,0,0"))
                                    (rule "add_literals" (formula "31") (term "1,3,0,0,1,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "3,0,0,1,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,1,1,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,1,1,0"))
                                    (rule "add_literals" (formula "5") (term "1,3,0,1,1,0"))
                                    (rule "times_zero_1" (formula "5") (term "3,0,1,1,0"))
                                    (rule "applyEq" (formula "6") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,1,0,1,0,1,1,0"))
                                    (rule "add_literals" (formula "6") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "3,0,0,1,0,1,0,1,1,0"))
                                    (rule "applyEq" (formula "6") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "add_literals" (formula "6") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,1,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,0,1,0"))
                                    (rule "add_literals" (formula "5") (term "1,3,0,0,1,0"))
                                    (rule "times_zero_1" (formula "5") (term "3,0,0,1,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,0,0,2,1,1,0"))
                                    (rule "add_literals" (formula "5") (term "1,3,0,0,0,2,1,1,0"))
                                    (rule "times_zero_1" (formula "5") (term "3,0,0,0,2,1,1,0"))
                                    (rule "applyEq" (formula "30") (term "0,2,1,3,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "30") (term "0,2,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "31") (term "1,3,0,0,1,1,0,0,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,1,1,0,0,0"))
                                    (rule "add_literals" (formula "31") (term "1,3,0,0,1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "3,0,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "30") (term "0,0,2,0,0,3,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "30") (term "0,2,1,3,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "30") (term "0,0,2,0,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "applyEq" (formula "31") (term "1,3,0,0,0,0,0,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "31") (term "1,3,0,0,0,0,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "3,0,0,0,0,0,0"))
                                    (rule "applyEq" (formula "31") (term "1,3,0,1,0,0,0,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,1,0,0,0,0"))
                                    (rule "add_literals" (formula "31") (term "1,3,0,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "3,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "31") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,1,1,1,0,0,0"))
                                    (rule "add_literals" (formula "31") (term "1,3,0,1,1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "3,0,1,1,1,0,0,0"))
                                    (rule "applyEq" (formula "31") (term "1,3,0,1,1,0,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "31") (term "3,0,1,1,0,0"))
                                    (rule "add_literals" (formula "31") (term "1,3,0,1,1,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "3,0,1,1,0,0"))
                                    (rule "applyEq" (formula "30") (term "0,0,2,0,0,3,0,0") (ifseqformula "1"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "applyEq" (formula "30") (term "1,3,0,0") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "polySimp_pullOutFactor2" (formula "30") (term "3,0,1"))
                                    (rule "add_literals" (formula "30") (term "1,3,0,1"))
                                    (rule "times_zero_1" (formula "30") (term "3,0,1"))
                                    (rule "applyEq" (formula "30") (term "1,3,0,0") (ifseqformula "10"))
                                    (rule "polySimp_pullOutFactor2" (formula "30") (term "3,0,0"))
                                    (rule "add_literals" (formula "30") (term "1,3,0,0"))
                                    (rule "times_zero_1" (formula "30") (term "3,0,0"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "mul_literals" (formula "2") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,0"))
                                    (rule "mul_literals" (formula "6") (term "0,1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                    (rule "mul_literals" (formula "4") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "2"))
                                    (rule "leq_literals" (formula "13") (term "0"))
                                    (rule "concrete_or_1" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,1,1,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                    (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                    (rule "concrete_and_2" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "1") (term "0"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                    (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "eqSymm" (formula "1") (term "0,0,0"))
                                    (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                    (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "24"))
                                    (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                    (rule "concrete_and_2" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "1") (term "0"))
                                    (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "6") (term "0,0,2,1,1,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=address_4"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "eqClose" (formula "1") (term "0,0,0"))
                                    (rule "concrete_and_1" (formula "1") (term "0,0"))
                                    (rule "equalUnique" (formula "1") (term "0,0"))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "pullOutSelect" (formula "6") (term "1,1,0") (inst "selectSK=arr_2"))
                                    (rule "simplifySelectOfStore" (formula "6"))
                                    (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "6") (term "0,0"))
                                    (rule "equalUnique" (formula "6") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "6") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "6") (term "0"))
                                    (rule "simplifySelectOfStore" (formula "6"))
                                    (rule "eqClose" (formula "6") (term "0,0,0,0"))
                                    (rule "concrete_and_1" (formula "6") (term "0,0,0"))
                                    (rule "equalUnique" (formula "6") (term "0,0,0"))
                                    (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "6") (term "0,0"))
                                    (rule "castDel" (formula "6") (term "1,0"))
                                    (rule "eqSymm" (formula "6") (term "0,0"))
                                    (rule "intCastEqual" (formula "6") (term "0,0"))
                                    (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=address_5"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "equalUnique" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "1") (term "0"))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=arr_3"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "equalUnique" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "1") (term "0"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                    (rule "eqClose" (formula "1") (term "0,0,0,0"))
                                    (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                                    (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "intCastEqual" (formula "1") (term "0,0"))
                                    (rule "nnf_ex2all" (formula "33"))
                                    (rule "nnf_ex2all" (formula "23"))
                                    (rule "nnf_imp2or" (formula "11") (term "0,1,0,1,1,0"))
                                    (rule "nnf_imp2or" (formula "10") (term "0"))
                                    (rule "nnf_notAll" (formula "2") (term "0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0"))
                                    (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                    (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "11") (term "1,0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,1,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,1,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,1,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,1,0,1,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,1,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,1,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,1,0"))
                                    (rule "nnf_notOr" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,1,0,1,1,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0,1,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0,1,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0,1,1,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0,1,1,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0,1,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0,1,1,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0,1,1,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                    (rule "commute_or_2" (formula "2") (term "0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                    (rule "shift_paren_or" (formula "2") (term "1,0,0"))
                                    (rule "applyEq_or_int2" (formula "2") (term "0,0,0,0"))
                                    (rule "applyEq_or_int3" (formula "2") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "2") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "2") (term "0,0,0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,1,0,1,1,0"))
                                    (rule "ifthenelse_split" (formula "9") (term "0"))
                                    (branch "self.bidders[j_0] = hb_0 TRUE"
                                       (rule "applyEqReverse" (formula "11") (term "1,1,0") (ifseqformula "10"))
                                       (rule "hideAuxiliaryEq" (formula "10"))
                                       (rule "applyEq" (formula "31") (term "0") (ifseqformula "9"))
                                       (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "31"))
                                       (rule "ifthenelse_false" (formula "4") (term "0"))
                                       (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "eqSymm" (formula "32"))
                                       (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "30"))
                                       (rule "ifthenelse_false" (formula "3") (term "0"))
                                       (rule "applyEqReverse" (formula "32") (term "1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "all_pull_out1" (formula "9") (term "0,1,1,0"))
                                       (rule "ex_pull_out3" (formula "9") (term "1,0"))
                                       (rule "all_pull_out3" (formula "9") (term "0,1,0"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,0,1,0"))
                                       (rule "commute_or_2" (formula "9") (term "1,0,0,1,0"))
                                       (rule "shift_paren_or" (formula "9") (term "0,1,0,0,1,0"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,0,0,1,0"))
                                       (rule "commute_or" (formula "9") (term "1,0,0,0,1,0"))
                                       (rule "commute_or_2" (formula "9") (term "0,0,0,0,1,0"))
                                       (rule "commute_or" (formula "9") (term "0,0,0,0,0,1,0"))
                                       (rule "ex_pull_out3" (formula "9") (term "0"))
                                       (rule "allLeft" (formula "11") (inst "t=a_0"))
                                       (rule "inEqSimp_commuteLeq" (formula "11"))
                                       (rule "allLeft" (formula "18") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                       (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "7"))
                                       (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "18") (term "0,0,1"))
                                       (rule "leq_literals" (formula "18") (term "0,1"))
                                       (rule "concrete_and_2" (formula "18") (term "1"))
                                       (rule "concrete_or_4" (formula "18"))
                                       (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "18") (term "0,1"))
                                       (rule "concrete_and_2" (formula "18") (term "1"))
                                       (rule "concrete_or_4" (formula "18"))
                                       (rule "allLeft" (formula "22") (inst "t=a_0"))
                                       (rule "all_pull_out3" (formula "9") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "9") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "9") (term "0,1,0,0,0"))
                                       (rule "eq_or_2" (formula "9") (term "0,0,1,0,0,0"))
                                       (rule "cnf_rightDist" (formula "9") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "9") (term "1,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "9") (term "0,1,0,0,0,0"))
                                       (rule "eq_or" (formula "9") (term "0,0,1,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0,0"))
                                       (rule "commute_or" (formula "9") (term "0,0,0,0,0,0,0"))
                                       (rule "eq_or_2" (formula "9") (term "0,0,0,0,0,0"))
                                       (rule "commute_and" (formula "2") (term "0,0,0"))
                                       (rule "allLeft" (formula "1") (inst "t=j_0"))
                                       (rule "replaceKnownSelect_taclet100100020000_37" (formula "1") (term "0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100020000_39" (formula "1") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                       (rule "applyEq" (formula "1") (term "0,0,0,0") (ifseqformula "8"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "33"))
                                       (rule "concrete_not_2" (formula "1") (term "0,0"))
                                       (rule "concrete_or_1" (formula "1") (term "0"))
                                       (rule "concrete_or_1" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "commute_and_2" (formula "2") (term "0,0"))
                                       (rule "allLeft" (formula "8") (inst "t=j_0"))
                                       (rule "replaceKnownSelect_taclet100100020000_37" (formula "8") (term "0,0,2,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100100020000_39" (formula "8") (term "0,0,2,0,1"))
                                       (rule "replaceKnownSelect_taclet100100020000_41" (formula "8") (term "0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100100020000_47" (formula "8") (term "0,1"))
                                       (rule "leq_literals" (formula "8") (term "1"))
                                       (rule "concrete_or_3" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "allLeft" (formula "17") (inst "t=hb_0"))
                                       (rule "exLeft" (formula "17") (inst "sk=i_0"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "eqSymm" (formula "17") (term "0"))
                                       (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "21"))
                                       (rule "concrete_not_1" (formula "18") (term "0"))
                                       (rule "concrete_or_2" (formula "18"))
                                       (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "21"))
                                       (rule "concrete_not_1" (formula "19") (term "0"))
                                       (rule "concrete_or_2" (formula "19"))
                                       (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "21"))
                                       (rule "concrete_not_1" (formula "17") (term "1"))
                                       (rule "concrete_or_4" (formula "17"))
                                       (rule "inEqSimp_homoInEq0" (formula "19"))
                                       (rule "polySimp_addComm1" (formula "19") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1"))
                                       (rule "mul_literals" (formula "19") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                       (rule "allLeft" (formula "22") (inst "t=i_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                       (rule "applyEq" (formula "22") (term "0,0,2,0,0,0") (ifseqformula "17"))
                                       (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "21"))
                                       (rule "concrete_or_1" (formula "22") (term "0"))
                                       (rule "concrete_or_1" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "allLeft" (formula "8") (inst "t=i_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0") (ifseqformula "20"))
                                       (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,0,1,0"))
                                       (rule "add_literals" (formula "8") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "8") (term "0,1,0"))
                                       (rule "concrete_and_2" (formula "8") (term "1,0"))
                                       (rule "concrete_or_4" (formula "8") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "8") (term "0,0"))
                                       (rule "concrete_and_2" (formula "8") (term "0"))
                                       (rule "concrete_or_2" (formula "8"))
                                       (rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=arr_4"))
                                       (rule "simplifySelectOfStore" (formula "8"))
                                       (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "8") (term "0,0"))
                                       (rule "equalUnique" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "8") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "8") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "8"))
                                       (rule "equalUnique" (formula "8") (term "1,0,0,0"))
                                       (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "8") (term "0,0"))
                                       (rule "eqClose" (formula "8") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "8") (term "0,0"))
                                       (rule "castDel" (formula "8") (term "1,0"))
                                       (rule "eqSymm" (formula "8") (term "0,0"))
                                       (rule "intCastEqual" (formula "8") (term "0,0"))
                                       (rule "pullOutSelect" (formula "8") (term "0,0,2,2,0") (inst "selectSK=arr_5"))
                                       (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "8"))
                                       (rule "simplifySelectOfStore" (formula "8"))
                                       (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "8") (term "0,0"))
                                       (rule "equalUnique" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_4" (formula "8") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "8") (term "0"))
                                       (rule "simplifySelectOfStore" (formula "8"))
                                       (rule "equalUnique" (formula "8") (term "0,1,0,0"))
                                       (rule "concrete_not_2" (formula "8") (term "1,0,0"))
                                       (rule "concrete_and_3" (formula "8") (term "0,0"))
                                       (rule "equalUnique" (formula "8") (term "1,0,0"))
                                       (rule "eqSymm" (formula "9") (term "0,0"))
                                       (rule "eqSymm" (formula "8") (term "0,0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "8") (term "0,0,0"))
                                       (rule "replace_known_right" (formula "8") (term "0,0,0,0") (ifseqformula "33"))
                                       (rule "concrete_and_2" (formula "8") (term "0,0,0"))
                                       (rule "concrete_and_2" (formula "8") (term "0,0"))
                                       (rule "ifthenelse_false" (formula "8") (term "0"))
                                       (rule "applyEqReverse" (formula "9") (term "0,0,2,2,0") (ifseqformula "8"))
                                       (rule "applyEqReverse" (formula "9") (term "1,0,0") (ifseqformula "8"))
                                       (rule "hideAuxiliaryEq" (formula "8"))
                                       (rule "eqSymm" (formula "8") (term "0,0"))
                                       (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "19"))
                                       (rule "ifthenelse_true" (formula "8") (term "0"))
                                       (rule "applyEqReverse" (formula "9") (term "0") (ifseqformula "8"))
                                       (rule "leq_literals" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "hideAuxiliaryEq" (formula "8"))
                                       (rule "allLeft" (formula "1") (inst "t=i_0"))
                                       (rule "replaceKnownSelect_taclet0100100020000_52" (formula "1") (term "0,0,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0100100020000_54" (formula "1") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                       (rule "applyEq" (formula "1") (term "0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                       (rule "concrete_not_2" (formula "1") (term "0,0"))
                                       (rule "concrete_or_1" (formula "1") (term "0"))
                                       (rule "concrete_or_1" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                       (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "15"))
                                       (rule "leq_literals" (formula "16") (term "1"))
                                       (rule "concrete_or_3" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "allLeft" (formula "16") (inst "t=a_0"))
                                       (rule "allLeft" (formula "13") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "13") (term "0,0"))
                                       (rule "eqSymm" (formula "13") (term "1,0"))
                                       (rule "eqSymm" (formula "13") (term "1"))
                                       (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "37"))
                                       (rule "concrete_or_2" (formula "13") (term "0"))
                                       (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "38"))
                                       (rule "concrete_or_2" (formula "13"))
                                       (rule "close" (formula "39") (ifseqformula "13"))
                                    )
                                    (branch "self.bidders[j_0] = hb_0 FALSE"
                                       (rule "applyEqReverse" (formula "10") (term "1,1,0") (ifseqformula "9"))
                                       (rule "hideAuxiliaryEq" (formula "9"))
                                       (rule "ifthenelse_split" (formula "4") (term "0"))
                                       (branch "hb_0 = a_0 TRUE"
                                          (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "5"))
                                          (rule "hideAuxiliaryEq" (formula "5"))
                                          (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "4"))
                                          (rule "ifthenelse_true" (formula "3") (term "0"))
                                          (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "3"))
                                          (rule "eqClose" (formula "33"))
                                          (rule "closeTrue" (formula "33"))
                                       )
                                       (branch "hb_0 = a_0 FALSE"
                                          (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "eqSymm" (formula "33"))
                                          (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "22"))
                                          (rule "ifthenelse_false" (formula "3") (term "0"))
                                          (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "all_pull_out1" (formula "8") (term "0,1,1,0"))
                                          (rule "ex_pull_out3" (formula "8") (term "1,0"))
                                          (rule "all_pull_out3" (formula "8") (term "0,1,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0,1,0"))
                                          (rule "commute_or_2" (formula "8") (term "1,0,0,1,0"))
                                          (rule "shift_paren_or" (formula "8") (term "0,1,0,0,1,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0,0,1,0"))
                                          (rule "commute_or" (formula "8") (term "1,0,0,0,1,0"))
                                          (rule "commute_or_2" (formula "8") (term "0,0,0,0,1,0"))
                                          (rule "commute_or" (formula "8") (term "0,0,0,0,0,1,0"))
                                          (rule "ex_pull_out3" (formula "8") (term "0"))
                                          (rule "allLeft" (formula "19") (inst "t=a_0"))
                                          (rule "allLeft" (formula "10") (inst "t=a_0"))
                                          (rule "inEqSimp_commuteLeq" (formula "10"))
                                          (rule "allLeft" (formula "17") (inst "t=j_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "6"))
                                          (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                          (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "17") (term "0,0,1"))
                                          (rule "leq_literals" (formula "17") (term "0,1"))
                                          (rule "concrete_and_2" (formula "17") (term "1"))
                                          (rule "concrete_or_4" (formula "17"))
                                          (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "5"))
                                          (rule "qeq_literals" (formula "17") (term "0,1"))
                                          (rule "concrete_and_2" (formula "17") (term "1"))
                                          (rule "concrete_or_4" (formula "17"))
                                          (rule "allLeft" (formula "11") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                          (rule "all_pull_out3" (formula "8") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
                                          (rule "commute_or_2" (formula "8") (term "0,1,0,0,0"))
                                          (rule "eq_or_2" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "8") (term "1,0,0,0,0"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
                                          (rule "commute_or_2" (formula "8") (term "0,1,0,0,0,0"))
                                          (rule "eq_or" (formula "8") (term "0,0,1,0,0,0,0"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0"))
                                          (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0"))
                                          (rule "eq_or_2" (formula "8") (term "0,0,0,0,0,0"))
                                          (rule "commute_and" (formula "2") (term "0,0,0"))
                                          (rule "allLeft" (formula "1") (inst "t=j_0"))
                                          (rule "replaceKnownSelect_taclet100100020000_37" (formula "1") (term "0,0,0,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet100100020000_39" (formula "1") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "35"))
                                          (rule "concrete_not_2" (formula "1") (term "0,0"))
                                          (rule "concrete_or_1" (formula "1") (term "0"))
                                          (rule "concrete_or_1" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "commute_and_2" (formula "2") (term "0,0"))
                                          (rule "allLeft" (formula "7") (inst "t=j_0"))
                                          (rule "replaceKnownSelect_taclet100100020000_37" (formula "7") (term "0,0,2,0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet100100020000_39" (formula "7") (term "0,0,2,0,1"))
                                          (rule "replaceKnownSelect_taclet100100020000_41" (formula "7") (term "0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet1100100020000_47" (formula "7") (term "0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                          (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                                          (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1"))
                                          (rule "add_literals" (formula "7") (term "1,0,1"))
                                          (rule "times_zero_1" (formula "7") (term "0,1"))
                                          (rule "qeq_literals" (formula "7") (term "1"))
                                          (rule "concrete_or_3" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                          (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "11"))
                                          (rule "times_zero_1" (formula "23") (term "0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0"))
                                          (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                          (rule "exLeft" (formula "17") (inst "sk=i_0"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "andLeft" (formula "17"))
                                          (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "21"))
                                          (rule "concrete_not_1" (formula "18") (term "0"))
                                          (rule "concrete_or_2" (formula "18"))
                                          (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "21"))
                                          (rule "concrete_not_1" (formula "19") (term "0"))
                                          (rule "concrete_or_2" (formula "19"))
                                          (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "21"))
                                          (rule "concrete_not_1" (formula "17") (term "1"))
                                          (rule "concrete_or_4" (formula "17"))
                                          (rule "inEqSimp_homoInEq0" (formula "19"))
                                          (rule "polySimp_addComm1" (formula "19") (term "0"))
                                          (rule "applyEq" (formula "30") (term "0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "21") (term "0,0,2,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "7") (term "0,0,2,1,1,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "11") (term "0,0,2,0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "38") (term "0") (ifseqformula "17"))
                                          (rule "applyEq" (formula "26") (term "0,0,2,0") (ifseqformula "17"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                          (rule "mul_literals" (formula "19") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                          (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "11"))
                                          (rule "mul_literals" (formula "26") (term "0,0"))
                                          (rule "add_zero_left" (formula "26") (term "0"))
                                          (rule "allLeft" (formula "7") (inst "t=j_0"))
                                          (rule "replaceKnownSelect_taclet100100020000_37" (formula "7") (term "0,0,2,0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet100100020000_39" (formula "7") (term "0,0,2,0,1"))
                                          (rule "replaceKnownSelect_taclet100100020000_41" (formula "7") (term "0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet1100100020000_47" (formula "7") (term "0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                          (rule "applyEq" (formula "7") (term "0,0,2,0,1") (ifseqformula "18"))
                                          (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                                          (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1"))
                                          (rule "add_literals" (formula "7") (term "1,0,1"))
                                          (rule "times_zero_1" (formula "7") (term "0,1"))
                                          (rule "qeq_literals" (formula "7") (term "1"))
                                          (rule "concrete_or_3" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "allLeft" (formula "20") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_0))"))
                                          (rule "exLeft" (formula "20") (inst "sk=i_1"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "andLeft" (formula "20"))
                                          (rule "eqSymm" (formula "20") (term "0"))
                                          (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "24"))
                                          (rule "concrete_not_1" (formula "21") (term "0"))
                                          (rule "concrete_or_2" (formula "21"))
                                          (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "24"))
                                          (rule "concrete_not_1" (formula "22") (term "0"))
                                          (rule "concrete_or_2" (formula "22"))
                                          (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "24"))
                                          (rule "concrete_not_1" (formula "20") (term "1"))
                                          (rule "concrete_or_4" (formula "20"))
                                          (rule "inEqSimp_homoInEq0" (formula "22"))
                                          (rule "polySimp_addComm1" (formula "22") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                                          (rule "mul_literals" (formula "22") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                                          (rule "allLeft" (formula "1") (inst "t=i_0"))
                                          (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "20"))
                                          (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "1") (term "0,0,1"))
                                          (rule "leq_literals" (formula "1") (term "0,1"))
                                          (rule "concrete_and_2" (formula "1") (term "1"))
                                          (rule "concrete_or_4" (formula "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "19"))
                                          (rule "qeq_literals" (formula "1") (term "0,1"))
                                          (rule "concrete_and_2" (formula "1") (term "1"))
                                          (rule "concrete_or_4" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_4"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                          (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                          (rule "concrete_and_2" (formula "1") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "1") (term "0"))
                                          (rule "simplifySelectOfStore" (formula "1"))
                                          (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "1") (term "0,0"))
                                          (rule "equalUnique" (formula "1") (term "1,0,0"))
                                          (rule "eqSymm" (formula "1") (term "0,0,0"))
                                          (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "39"))
                                          (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                          (rule "concrete_and_2" (formula "1") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "1") (term "0"))
                                          (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "allLeft" (formula "7") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11100100020000_50" (formula "7") (term "0,0,2,0,1"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet11100100020000_52" (formula "7") (term "0,0,2,0,1"))
                                          (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "20"))
                                          (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                                          (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                                          (rule "add_literals" (formula "7") (term "0,0,1,0"))
                                          (rule "leq_literals" (formula "7") (term "0,1,0"))
                                          (rule "concrete_and_2" (formula "7") (term "1,0"))
                                          (rule "concrete_or_4" (formula "7") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "19"))
                                          (rule "qeq_literals" (formula "7") (term "0,0"))
                                          (rule "concrete_and_2" (formula "7") (term "0"))
                                          (rule "concrete_or_2" (formula "7"))
                                          (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=arr_5"))
                                          (rule "simplifySelectOfStore" (formula "7"))
                                          (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "7") (term "0,0"))
                                          (rule "equalUnique" (formula "7") (term "1,0,0"))
                                          (rule "concrete_and_4" (formula "7") (term "0,0"))
                                          (rule "ifthenelse_false" (formula "7") (term "0"))
                                          (rule "simplifySelectOfStore" (formula "7"))
                                          (rule "equalUnique" (formula "7") (term "1,0,0,0"))
                                          (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                          (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                          (rule "concrete_and_3" (formula "7") (term "0,0"))
                                          (rule "eqClose" (formula "7") (term "0,0,0"))
                                          (rule "concrete_and_1" (formula "7") (term "0,0"))
                                          (rule "castDel" (formula "7") (term "1,0"))
                                          (rule "eqSymm" (formula "7") (term "0,0"))
                                          (rule "intCastEqual" (formula "7") (term "0,0"))
                                          (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "35"))
                                          (rule "ifthenelse_false" (formula "7") (term "0"))
                                          (rule "applyEqReverse" (formula "8") (term "0") (ifseqformula "7"))
                                          (rule "hideAuxiliaryEq" (formula "7"))
                                          (rule "inEqSimp_homoInEq0" (formula "7"))
                                          (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "1,0"))
                                          (rule "times_zero_1" (formula "7") (term "0"))
                                          (rule "qeq_literals" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "allLeft" (formula "16") (inst "t=hb_0"))
                                          (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "14"))
                                          (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                          (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "15"))
                                          (rule "leq_literals" (formula "17") (term "1"))
                                          (rule "concrete_or_3" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "allLeft" (formula "17") (inst "t=a_0"))
                                          (rule "allLeft" (formula "27") (inst "t=(int)(hb_0)"))
                                          (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                                          (rule "allLeft" (formula "13") (inst "t=a_0"))
                                          (rule "eqSymm" (formula "13") (term "1"))
                                          (rule "eqSymm" (formula "13") (term "0,0"))
                                          (rule "eqSymm" (formula "13") (term "1,0"))
                                          (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "47"))
                                          (rule "concrete_or_4" (formula "13"))
                                          (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "46"))
                                          (rule "concrete_or_4" (formula "13"))
                                          (rule "close" (formula "36") (ifseqformula "13"))
                                       )
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,0"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "2") (term "0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,1"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "4") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "4") (term "0,1"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "5") (term "1,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "5") (term "1,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "5") (term "1,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "5") (term "1,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,1,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,1,1,0,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,1,1,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,1,1,0,0"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "21") (term "1,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "21") (term "1,1,0,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,0,2,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,0,2,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,1,1,0,0"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "5") (term "0,1,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "5") (term "0,1,1,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,1,1,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_32" (formula "6") (term "1,1,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "1,1,0,1,0"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,0,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,1,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,0,2,0,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,0,2,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,0,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,1,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                                 (rule "replace_known_right" (formula "30") (term "1,0,0,0") (ifseqformula "29"))
                                 (rule "concrete_and_4" (formula "30") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "30") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "2") (term "0"))
                                 (rule "mul_literals" (formula "2") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "4") (term "1"))
                                 (rule "mul_literals" (formula "4") (term "1,1"))
                                 (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "5") (term "1,1,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0"))
                                 (rule "polySimp_addComm0" (formula "4") (term "1"))
                                 (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,0,1,1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "4"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "21") (term "0,2,1,3,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "21") (term "0,0,2,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "21") (term "0,2,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "7") (term "0,0"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "21") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "7") (term "0,2,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "21") (term "1,3,0,0,1,0") (ifseqformula "11"))
                                 (rule "polySimp_pullOutFactor2" (formula "21") (term "3,0,0,1,0"))
                                 (rule "add_literals" (formula "21") (term "1,3,0,0,1,0"))
                                 (rule "times_zero_1" (formula "21") (term "3,0,0,1,0"))
                                 (rule "applyEq" (formula "6") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "11"))
                                 (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                                 (rule "applyEq" (formula "6") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "11"))
                                 (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,1,0,1,0,1,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,3,0,0,1,0,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "3,0,0,1,0,1,0,1,1,0"))
                                 (rule "applyEq" (formula "5") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "11"))
                                 (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,0,0,2,0,1,0"))
                                 (rule "add_literals" (formula "5") (term "1,3,0,0,0,2,0,1,0"))
                                 (rule "times_zero_1" (formula "5") (term "3,0,0,0,2,0,1,0"))
                                 (rule "applyEq" (formula "6") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "11"))
                                 (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,1,1,0,1,0,1,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,3,0,1,1,0,1,0,1,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "3,0,1,1,0,1,0,1,1,0"))
                                 (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "11"))
                                 (rule "polySimp_pullOutFactor2" (formula "7") (term "1,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0"))
                                 (rule "ifthenelse_same_branches" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "7"))
                                 (rule "eqClose" (formula "29"))
                                 (rule "closeTrue" (formula "29"))
                              )
                           )
                           (branch "Case 2"
                              (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "4") (term "1,0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,0"))
                              (rule "replaceKnownSelect_taclet_32" (formula "2") (term "0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "4") (term "1,0,1"))
                              (rule "replaceKnownSelect_taclet_32" (formula "4") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "4") (term "0,1"))
                              (rule "replaceKnownSelect_taclet_5" (formula "5") (term "1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_5" (formula "5") (term "1,1,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "5") (term "1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "29") (term "1,0,0,2,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "21") (term "1,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "29") (term "1,0,2,1,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "5") (term "1,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,1,1,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "29") (term "1,0,0,2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "21") (term "1,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_32" (formula "21") (term "1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "21") (term "1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "29") (term "1,0,2,1,1"))
                              (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,0,2,0,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "5") (term "1,0,0,2,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_32" (formula "5") (term "0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "5") (term "0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,1,1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_32" (formula "6") (term "1,1,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "6") (term "1,1,0,1,0"))
                              (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,1,1,0,1,0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_5" (formula "6") (term "1,0,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,0,2,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "5") (term "1,0,0,2,1,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_20" (formula "6") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,1,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "6") (term "1,0,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "6") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "0"))
                              (rule "mul_literals" (formula "2") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "5") (term "1,1,1,0,0"))
                              (rule "polySimp_addComm0" (formula "2") (term "0"))
                              (rule "polySimp_addComm0" (formula "4") (term "1"))
                              (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "4"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "applyEq" (formula "29") (term "0,2,1,3,0,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "0,0,2,0,0,3,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "21") (term "0,2,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "7") (term "0,2,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "21") (term "0,0,2,0,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "0,0,2,0,0,3,0,0,0,2,0") (ifseqformula "1"))
                              (rule "polySimp_homoEq" (formula "29"))
                              (rule "polySimp_addComm1" (formula "29") (term "0"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,3,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,1,3,0,1,1,1,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,2,0,0,0,2,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,2,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,2,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,3,0,1,1,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,2,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,2,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,1,3,0,1,1,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,0,1,1,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,0,1,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,1,3,0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,1,1,1,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "5") (term "0,2,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "7") (term "0,0"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,1,3,0,1,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,3,0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "21") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,0,1,1,1,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,3,0,1,0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,0,2,0,0,1,1,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,1,3,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "21") (term "0,2,1,3,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "30") (term "0,2,0,0,1,1,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,1,1,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "6") (term "1,3,0,1,1,0,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "6") (term "3,0,1,1,0,1,0,1,1,0"))
                              (rule "applyEq" (formula "30") (term "1,3,0,0,1,1,0,0,0,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "30") (term "3,0,0,1,1,0,0,0,0"))
                              (rule "add_literals" (formula "30") (term "1,3,0,0,1,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "30") (term "3,0,0,1,1,0,0,0,0"))
                              (rule "applyEq" (formula "30") (term "1,3,0,0,0,0,0,0,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "30") (term "3,0,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "30") (term "1,3,0,0,0,0,0,0,0"))
                              (rule "times_zero_1" (formula "30") (term "3,0,0,0,0,0,0,0"))
                              (rule "applyEq" (formula "29") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "0,2,1,3,0,0,0,2,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,1,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "6") (term "1,3,0,0,1,0,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "6") (term "3,0,0,1,0,1,0,1,1,0"))
                              (rule "applyEq" (formula "29") (term "0,2,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "0,0,2,0,0,3,0,0,2,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "6") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "6") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                              (rule "applyEq" (formula "30") (term "1,3,0,0,1,0,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "30") (term "3,0,0,1,0,0"))
                              (rule "add_literals" (formula "30") (term "1,3,0,0,1,0,0"))
                              (rule "times_zero_1" (formula "30") (term "3,0,0,1,0,0"))
                              (rule "applyEq" (formula "29") (term "0,2,0,0,2,1,0") (ifseqformula "1"))
                              (rule "polySimp_addComm1" (formula "29") (term "0"))
                              (rule "applyEq" (formula "21") (term "1,3,0,0,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "21") (term "3,0,0,1,0"))
                              (rule "add_literals" (formula "21") (term "1,3,0,0,1,0"))
                              (rule "times_zero_1" (formula "21") (term "3,0,0,1,0"))
                              (rule "applyEq" (formula "5") (term "1,3,0,0,0,2,1,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,0,0,2,1,1,0"))
                              (rule "add_literals" (formula "5") (term "1,3,0,0,0,2,1,1,0"))
                              (rule "times_zero_1" (formula "5") (term "3,0,0,0,2,1,1,0"))
                              (rule "applyEq" (formula "5") (term "1,3,0,0,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,0,1,0"))
                              (rule "add_literals" (formula "5") (term "1,3,0,0,1,0"))
                              (rule "times_zero_1" (formula "5") (term "3,0,0,1,0"))
                              (rule "applyEq" (formula "5") (term "1,3,0,1,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,1,1,0"))
                              (rule "add_literals" (formula "5") (term "1,3,0,1,1,0"))
                              (rule "times_zero_1" (formula "5") (term "3,0,1,1,0"))
                              (rule "applyEq" (formula "5") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "5") (term "3,0,0,0,2,0,1,0"))
                              (rule "add_literals" (formula "5") (term "1,3,0,0,0,2,0,1,0"))
                              (rule "times_zero_1" (formula "5") (term "3,0,0,0,2,0,1,0"))
                              (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "11"))
                              (rule "polySimp_pullOutFactor2" (formula "7") (term "1,0"))
                              (rule "add_literals" (formula "7") (term "1,1,0"))
                              (rule "times_zero_1" (formula "7") (term "1,0"))
                              (rule "ifthenelse_same_branches" (formula "7") (term "0"))
                              (rule "applyEqReverse" (formula "29") (term "0,0,0") (ifseqformula "7"))
                              (rule "add_zero_left" (formula "29") (term "0,0"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,0,0,0") (ifseqformula "7"))
                              (rule "eqClose" (formula "30") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "30") (term "0,0,0"))
                              (rule "applyEqReverse" (formula "30") (term "0,1,1,0,0") (ifseqformula "7"))
                              (rule "add_zero_left" (formula "30") (term "1,1,0,0"))
                              (rule "hideAuxiliaryEq" (formula "7"))
                              (rule "applyEq" (formula "6") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "6") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "times_zero_1" (formula "6") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                              (rule "applyEq" (formula "28") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "1"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "29") (term "1,3,0,1,0,0,0,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2" (formula "29") (term "3,0,1,0,0,0,0"))
                              (rule "add_literals" (formula "29") (term "1,3,0,1,0,0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "3,0,1,0,0,0,0"))
                              (rule "applyEq" (formula "29") (term "1,3,0,1,1,1,0,0,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2" (formula "29") (term "3,0,1,1,1,0,0,0"))
                              (rule "add_literals" (formula "29") (term "1,3,0,1,1,1,0,0,0"))
                              (rule "times_zero_1" (formula "29") (term "3,0,1,1,1,0,0,0"))
                              (rule "applyEq" (formula "29") (term "1,3,0,1,1,0,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2" (formula "29") (term "3,0,1,1,0,0"))
                              (rule "add_literals" (formula "29") (term "1,3,0,1,1,0,0"))
                              (rule "times_zero_1" (formula "29") (term "3,0,1,1,0,0"))
                              (rule "applyEq" (formula "28") (term "0,2,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "0,0,2,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "0,0,2,0,0,3,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "0,2,1,3,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "1,3,0,1,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2" (formula "28") (term "3,0,1,0"))
                              (rule "add_literals" (formula "28") (term "1,3,0,1,0"))
                              (rule "times_zero_1" (formula "28") (term "3,0,1,0"))
                              (rule "applyEq" (formula "28") (term "0,2,0,0,0,2,0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "0,0,2,0,0,0,2,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "28") (term "0,2,1,3,0,0,2,1,0") (ifseqformula "1"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "28") (term "1,3,0,0,1,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2" (formula "28") (term "3,0,0,1,0"))
                              (rule "add_literals" (formula "28") (term "1,3,0,0,1,0"))
                              (rule "times_zero_1" (formula "28") (term "3,0,0,1,0"))
                              (rule "applyEq" (formula "28") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2" (formula "28") (term "3,0,0,0,2,0,1,0"))
                              (rule "add_literals" (formula "28") (term "1,3,0,0,0,2,0,1,0"))
                              (rule "times_zero_1" (formula "28") (term "3,0,0,0,2,0,1,0"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "applyEq" (formula "28") (term "1,3,0,0,2,1,0") (ifseqformula "10"))
                              (rule "polySimp_pullOutFactor2" (formula "28") (term "3,0,0,2,1,0"))
                              (rule "add_literals" (formula "28") (term "1,3,0,0,2,1,0"))
                              (rule "times_zero_1" (formula "28") (term "3,0,0,2,1,0"))
                              (rule "polySimp_addComm0" (formula "28") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,1,0,1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "polySimp_sepNegMonomial" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "2"))
                              (rule "leq_literals" (formula "13") (term "0"))
                              (rule "concrete_or_1" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "pullOutSelect" (formula "5") (term "0,0,2,1,1,0") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "28") (term "0,0,2,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "28") (term "0,2,1") (ifseqformula "5"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "equalUnique" (formula "5") (term "1,0,0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "eqSymm" (formula "5") (term "0,0,0"))
                              (rule "sortsDisjointModuloNull" (formula "5") (term "0,0,0"))
                              (rule "replace_known_right" (formula "5") (term "1,0,0,0") (ifseqformula "24"))
                              (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "applyEqReverse" (formula "28") (term "0,2,0") (ifseqformula "5"))
                              (rule "applyEqReverse" (formula "28") (term "0,0,2,1") (ifseqformula "5"))
                              (rule "applyEqReverse" (formula "6") (term "0,0,2,1,1,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=address_4"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "eqClose" (formula "1") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "1") (term "0,0"))
                              (rule "equalUnique" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "28"))
                              (rule "eqSymm" (formula "1") (term "0,0"))
                              (rule "pullOutSelect" (formula "6") (term "1,1,0") (inst "selectSK=arr_2"))
                              (rule "applyEq" (formula "29") (term "0") (ifseqformula "6"))
                              (rule "simplifySelectOfStore" (formula "6"))
                              (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "6") (term "0,0"))
                              (rule "equalUnique" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "simplifySelectOfStore" (formula "6"))
                              (rule "eqClose" (formula "6") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "6") (term "0,0,0"))
                              (rule "equalUnique" (formula "6") (term "0,0,0"))
                              (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "6") (term "0,0"))
                              (rule "castDel" (formula "6") (term "1,0"))
                              (rule "eqSymm" (formula "6") (term "0,0"))
                              (rule "intCastEqual" (formula "6") (term "0,0"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "nnf_ex2all" (formula "30"))
                              (rule "nnf_ex2all" (formula "22"))
                              (rule "nnf_imp2or" (formula "10") (term "0,1,0,1,1,0"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_notAll" (formula "2") (term "0"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "nnf_imp2or" (formula "10") (term "0"))
                              (rule "inEqSimp_notGeq" (formula "10") (term "0,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "2") (term "0,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                              (rule "nnf_imp2or" (formula "10") (term "1,0"))
                              (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "10") (term "0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "10") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,1,0,1,0"))
                              (rule "add_zero_left" (formula "10") (term "0,0,1,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "10") (term "0,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,1,0"))
                              (rule "nnf_notOr" (formula "2") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "10") (term "0,0,1,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,1,0,1,1,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,1,1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,1,1,0"))
                              (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0"))
                              (rule "commute_or_2" (formula "1") (term "0"))
                              (rule "commute_or_2" (formula "2") (term "0,0"))
                              (rule "commute_or" (formula "1") (term "0,0"))
                              (rule "cnf_rightDist" (formula "2") (term "0,0"))
                              (rule "shift_paren_or" (formula "2") (term "1,0,0"))
                              (rule "applyEq_or_int2" (formula "2") (term "0,0,0,0"))
                              (rule "applyEq_or_int3" (formula "2") (term "1,0,0"))
                              (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                              (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "2") (term "1,0,0,0"))
                              (rule "commute_or" (formula "2") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "10") (term "0,1,0,1,1,0"))
                              (rule "ifthenelse_split" (formula "8") (term "0"))
                              (branch "self.bidders[j_0] = hb_0 TRUE"
                                 (rule "applyEqReverse" (formula "10") (term "1,1,0") (ifseqformula "9"))
                                 (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "9"))
                                 (rule "hideAuxiliaryEq" (formula "9"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "8"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "3"))
                                 (rule "eqClose" (formula "30"))
                                 (rule "closeTrue" (formula "30"))
                              )
                              (branch "self.bidders[j_0] = hb_0 FALSE"
                                 (rule "applyEqReverse" (formula "9") (term "1,1,0") (ifseqformula "8"))
                                 (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "8"))
                                 (rule "hideAuxiliaryEq" (formula "8"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "22"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "all_pull_out1" (formula "8") (term "0,1,1,0"))
                                 (rule "ex_pull_out3" (formula "8") (term "1,0"))
                                 (rule "all_pull_out3" (formula "8") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "8") (term "1,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "8") (term "1,0,0,0,1,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "8") (term "0,0,0,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "8") (term "0"))
                                 (rule "allLeft" (formula "19") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                 (rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                 (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "10"))
                                 (rule "mul_literals" (formula "20") (term "0,0"))
                                 (rule "add_zero_left" (formula "20") (term "0"))
                                 (rule "allLeft" (formula "17") (inst "t=j_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "17") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "17") (term "1,0"))
                                 (rule "concrete_or_4" (formula "17") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                 (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "17") (term "0,0,1"))
                                 (rule "leq_literals" (formula "17") (term "0,1"))
                                 (rule "concrete_and_2" (formula "17") (term "1"))
                                 (rule "concrete_or_4" (formula "17"))
                                 (rule "all_pull_out3" (formula "8") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,1,0,0,0"))
                                 (rule "eq_or_2" (formula "8") (term "0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,1,0,0,0,0"))
                                 (rule "eq_or" (formula "8") (term "0,0,1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0"))
                                 (rule "eq_or_2" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "commute_and" (formula "2") (term "0,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet1100020000_37" (formula "1") (term "0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1100020000_39" (formula "1") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,1"))
                                 (rule "leq_literals" (formula "1") (term "0,1"))
                                 (rule "concrete_and_2" (formula "1") (term "1"))
                                 (rule "concrete_or_4" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "1") (term "0,1"))
                                 (rule "concrete_and_2" (formula "1") (term "1"))
                                 (rule "concrete_or_4" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "commute_and_2" (formula "2") (term "0,0"))
                                 (rule "allLeft" (formula "7") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet1100020000_37" (formula "7") (term "0,0,2,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1100020000_39" (formula "7") (term "0,0,2,0,1"))
                                 (rule "replaceKnownSelect_taclet1100020000_41" (formula "7") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100020000_45" (formula "7") (term "0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1"))
                                 (rule "add_literals" (formula "7") (term "1,0,1"))
                                 (rule "times_zero_1" (formula "7") (term "0,1"))
                                 (rule "qeq_literals" (formula "7") (term "1"))
                                 (rule "concrete_or_3" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                 (rule "exLeft" (formula "16") (inst "sk=i_0"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "17") (term "0"))
                                 (rule "concrete_or_2" (formula "17"))
                                 (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "18") (term "0"))
                                 (rule "concrete_or_2" (formula "18"))
                                 (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "16") (term "1"))
                                 (rule "concrete_or_4" (formula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "18"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "24") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "36") (term "0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,1,1,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "36") (term "0,0,2,1") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                 (rule "mul_literals" (formula "18") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "10"))
                                 (rule "mul_literals" (formula "24") (term "0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0"))
                                 (rule "allLeft" (formula "7") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet1100020000_37" (formula "7") (term "0,0,2,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1100020000_39" (formula "7") (term "0,0,2,0,1"))
                                 (rule "replaceKnownSelect_taclet1100020000_41" (formula "7") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100020000_45" (formula "7") (term "0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,1") (ifseqformula "17"))
                                 (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1"))
                                 (rule "add_literals" (formula "7") (term "1,0,1"))
                                 (rule "times_zero_1" (formula "7") (term "0,1"))
                                 (rule "qeq_literals" (formula "7") (term "1"))
                                 (rule "concrete_or_3" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "1") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "1") (term "1,0"))
                                 (rule "concrete_or_4" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "19"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,1"))
                                 (rule "leq_literals" (formula "1") (term "0,1"))
                                 (rule "concrete_and_2" (formula "1") (term "1"))
                                 (rule "concrete_or_4" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_3"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0"))
                                 (rule "eqSymm" (formula "1") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "33"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "allLeft" (formula "7") (inst "t=i_0"))
                                 (rule "replaceKnownSelect_taclet11100020000_47" (formula "7") (term "0,0,2,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100020000_49" (formula "7") (term "0,0,2,0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "concrete_or_2" (formula "7") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "19"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "0,0,0"))
                                 (rule "leq_literals" (formula "7") (term "0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0"))
                                 (rule "concrete_or_2" (formula "7"))
                                 (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=arr_4"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "eqClose" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "7") (term "0,0"))
                                 (rule "equalUnique" (formula "7") (term "0,0"))
                                 (rule "castDel" (formula "7") (term "1,0"))
                                 (rule "eqSymm" (formula "7") (term "0,0"))
                                 (rule "intCastEqual" (formula "7") (term "0,0"))
                                 (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "30"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "inEqSimp_homoInEq0" (formula "7"))
                                 (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                                 (rule "add_literals" (formula "7") (term "1,0"))
                                 (rule "times_zero_1" (formula "7") (term "0"))
                                 (rule "qeq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "allLeft" (formula "19") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_0))"))
                                 (rule "exLeft" (formula "19") (inst "sk=i_1"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "eqSymm" (formula "19") (term "0"))
                                 (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "23"))
                                 (rule "concrete_not_1" (formula "20") (term "0"))
                                 (rule "concrete_or_2" (formula "20"))
                                 (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "23"))
                                 (rule "concrete_not_1" (formula "21") (term "0"))
                                 (rule "concrete_or_2" (formula "21"))
                                 (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "23"))
                                 (rule "concrete_not_1" (formula "19") (term "1"))
                                 (rule "concrete_or_4" (formula "19"))
                                 (rule "inEqSimp_homoInEq0" (formula "21"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1"))
                                 (rule "mul_literals" (formula "21") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                                 (rule "allLeft" (formula "15") (inst "t=hb_0"))
                                 (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "13"))
                                 (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                 (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "16") (term "1"))
                                 (rule "concrete_or_3" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "allLeft" (formula "25") (inst "t=(int)(hb_0)"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "allLeft" (formula "26") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                 (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                 (rule "allLeft" (formula "23") (inst "t=hb_0"))
                                 (rule "exLeft" (formula "23") (inst "sk=i_2"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "eqSymm" (formula "23") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "25") (term "1"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1"))
                                 (rule "mul_literals" (formula "25") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "25") (term "1,1,1"))
                                 (rule "allLeft" (formula "26") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                 (rule "exLeft" (formula "26") (inst "sk=i_3"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "andLeft" (formula "26"))
                                 (rule "eqSymm" (formula "26") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                                 (rule "mul_literals" (formula "28") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                                 (rule "allLeft" (formula "1") (inst "t=(int)(hb_0)"))
                                 (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                 (rule "pullOutSelect" (formula "1") (term "0,0,0,0") (inst "selectSK=arr_5"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "1"))
                                 (rule "eqClose" (formula "1") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                 (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "1") (term "0,0"))
                                 (rule "eqSymm" (formula "1") (term "0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "45"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "allLeft" (formula "2") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                 (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                                 (rule "pullOutSelect" (formula "2") (term "0,0,0,0") (inst "selectSK=arr_6"))
                                 (rule "simplifySelectOfStore" (formula "2"))
                                 (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0"))
                                 (rule "equalUnique" (formula "2") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "2"))
                                 (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0"))
                                 (rule "equalUnique" (formula "2") (term "1,0,0"))
                                 (rule "eqSymm" (formula "2") (term "0,0,0"))
                                 (rule "eqSymm" (formula "2") (term "1,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "2") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0,0") (ifseqformula "47"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "allLeft" (formula "35") (inst "t=i_1"))
                                 (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                 (rule "applyEq" (formula "35") (term "0,0,2,0,0,0") (ifseqformula "22"))
                                 (rule "replace_known_left" (formula "35") (term "0,0") (ifseqformula "32"))
                                 (rule "concrete_or_1" (formula "35") (term "0"))
                                 (rule "concrete_or_1" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "allLeft" (formula "9") (inst "t=i_1"))
                                 (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "9") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "9") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "9") (term "1,0"))
                                 (rule "concrete_or_4" (formula "9") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "24"))
                                 (rule "qeq_literals" (formula "9") (term "0,0"))
                                 (rule "concrete_and_2" (formula "9") (term "0"))
                                 (rule "concrete_or_2" (formula "9"))
                                 (rule "pullOutSelect" (formula "9") (term "0,0,2,0") (inst "selectSK=arr_7"))
                                 (rule "simplifySelectOfStore" (formula "9"))
                                 (rule "equalUnique" (formula "9") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "9") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "9") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "9") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "9"))
                                 (rule "equalUnique" (formula "9") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "9") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "9") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "9") (term "0,0"))
                                 (rule "eqSymm" (formula "9") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "9") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "9") (term "0,0,0,0") (ifseqformula "47"))
                                 (rule "concrete_and_2" (formula "9") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "9") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "9") (term "0"))
                                 (rule "applyEqReverse" (formula "10") (term "0,0,2,0") (ifseqformula "9"))
                                 (rule "hideAuxiliaryEq" (formula "9"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0") (ifseqformula "23"))
                                 (rule "replaceKnownSelect_taclet11100020000_50" (formula "9") (term "0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100020000_52" (formula "9") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "9"))
                                 (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                                 (rule "add_literals" (formula "9") (term "1,0"))
                                 (rule "times_zero_1" (formula "9") (term "0"))
                                 (rule "qeq_literals" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "allLeft" (formula "3") (inst "t=i_1"))
                                 (rule "replaceKnownSelect_taclet11100020000_59" (formula "3") (term "0,0,0,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11100020000_61" (formula "3") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                                 (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "23"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "42"))
                                 (rule "concrete_not_2" (formula "3") (term "0,0"))
                                 (rule "concrete_or_1" (formula "3") (term "0"))
                                 (rule "concrete_or_1" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "allLeft" (formula "39") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                                 (rule "allLeft" (formula "40") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(hb_0)))"))
                                 (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                                 (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "13"))
                                 (rule "mul_literals" (formula "40") (term "0,0"))
                                 (rule "add_zero_left" (formula "40") (term "0"))
                                 (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(hb_0)))"))
                                 (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "14"))
                                 (rule "mul_literals" (formula "42") (term "0,0"))
                                 (rule "add_zero_left" (formula "42") (term "0"))
                                 (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_0))"))
                                 (rule "eqSymm" (formula "16") (term "1"))
                                 (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "55"))
                                 (rule "concrete_or_4" (formula "16"))
                                 (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "47"))
                                 (rule "concrete_or_2" (formula "16"))
                                 (rule "applyEq" (formula "41") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "22") (term "1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "35") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "35"))
                                 (rule "concrete_not_1" (formula "32") (term "0"))
                                 (rule "concrete_or_2" (formula "32"))
                                 (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "35"))
                                 (rule "concrete_not_1" (formula "31") (term "1"))
                                 (rule "concrete_or_4" (formula "31"))
                                 (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "35"))
                                 (rule "concrete_not_1" (formula "33") (term "0"))
                                 (rule "concrete_or_2" (formula "33"))
                                 (rule "applyEq" (formula "55") (term "0,0,2,1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "55") (term "0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "47") (term "0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,1,1,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "46") (term "0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "25") (term "1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "12") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "41") (term "0") (ifseqformula "39"))
                                 (rule "qeq_literals" (formula "41"))
                                 (rule "true_left" (formula "41"))
                                 (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "39"))
                                 (rule "applyEq" (formula "54") (term "0") (ifseqformula "19"))
                                 (rule "eqSymm" (formula "54"))
                                 (rule "close" (formula "54") (ifseqformula "39"))
                              )
                           )
                        )
                     )
                     (branch "CUT: msg.sender = hb_0 FALSE"
                        (rule "instEx" (formula "18") (term "1") (ifseqformula "26") (userinteraction))
                        (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0"))
                        (rule "replaceKnownSelect_taclet_32" (formula "1") (term "0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "1") (term "0,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "2") (term "1,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "2") (term "1,1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet_32" (formula "2") (term "0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "2") (term "1,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "2") (term "1,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_32" (formula "3") (term "1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "3") (term "1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,1,1,0,0,1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "3") (term "1,0,1,0,1,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,0,2,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_5" (formula "3") (term "1,1,1,0,1,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "2") (term "1,0,0,2,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,1,1,0,0,1,0"))
                        (rule "replaceKnownSelect_taclet_32" (formula "2") (term "0,1,1,0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "2") (term "0,1,1,0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "3") (term "1,0,1,0,1,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,0,2,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "3") (term "1,1,1,0,1,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "2") (term "1,0,0,2,1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                        (rule "replaceKnownSelect_taclet_20" (formula "3") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "3") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                        (rule "allRight" (formula "18") (inst "sk=a_0"))
                        (rule "exLeft" (formula "2") (inst "sk=j_0"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "eqSymm" (formula "20") (term "1,1,0,0"))
                        (rule "eqSymm" (formula "20") (term "1,0,1,0,0"))
                        (rule "polySimp_elimSub" (formula "1") (term "0"))
                        (rule "mul_literals" (formula "1") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "20") (term "1"))
                        (rule "polySimp_elimSub" (formula "4") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "1"))
                        (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "20") (term "1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "0,1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "5") (term "1,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,1,0"))
                        (rule "mul_literals" (formula "5") (term "0,1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                        (rule "leq_literals" (formula "13") (term "0"))
                        (rule "concrete_or_1" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "pullOutSelect" (formula "19") (term "1,0,0,0") (inst "selectSK=arr_1"))
                        (rule "applyEq" (formula "20") (term "1,1,1,0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "eqClose" (formula "1") (term "0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "intCastEqual" (formula "1") (term "0,0"))
                        (rule "pullOutSelect" (formula "20") (term "0,0,0,0") (inst "selectSK=arr_2"))
                        (rule "applyEq" (formula "21") (term "1,1,1") (ifseqformula "1"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                        (rule "eqClose" (formula "1") (term "0,0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "intCastEqual" (formula "1") (term "0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "21") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "21") (term "1,1,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "20") (term "0,1,1,0,0") (inst "selectSK=address_4"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "eqClose" (formula "1") (term "0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "21") (term "1,1,0,0"))
                        (rule "pullOutSelect" (formula "6") (term "0,0,2,1,1,0") (inst "selectSK=arr_3"))
                        (rule "simplifySelectOfStore" (formula "6"))
                        (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                        (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "ifthenelse_false" (formula "6") (term "0"))
                        (rule "simplifySelectOfStore" (formula "6"))
                        (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "6") (term "0,0"))
                        (rule "equalUnique" (formula "6") (term "1,0,0"))
                        (rule "eqSymm" (formula "6") (term "0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "6") (term "0,0,0"))
                        (rule "replace_known_right" (formula "6") (term "1,0,0,0") (ifseqformula "27"))
                        (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "6") (term "0,0"))
                        (rule "ifthenelse_false" (formula "6") (term "0"))
                        (rule "applyEqReverse" (formula "7") (term "0,0,2,1,1,0") (ifseqformula "6"))
                        (rule "hideAuxiliaryEq" (formula "6"))
                        (rule "pullOutSelect" (formula "21") (term "0,1") (inst "selectSK=address_5"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "eqClose" (formula "1") (term "0,0,0"))
                        (rule "concrete_and_1" (formula "1") (term "0,0"))
                        (rule "castDel" (formula "1") (term "1,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "22") (term "0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "12"))
                        (rule "polySimp_homoEq" (formula "21") (term "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,1"))
                        (rule "add_literals" (formula "21") (term "1,1,0,1"))
                        (rule "times_zero_1" (formula "21") (term "1,0,1"))
                        (rule "add_zero_right" (formula "21") (term "0,1"))
                        (rule "polySimp_invertEq" (formula "21") (term "1"))
                        (rule "times_zero_2" (formula "21") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "21") (term "0,1"))
                        (rule "eq_and_2" (formula "21"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=address_6"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "pullOutSelect" (formula "6") (term "1,1,0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfStore" (formula "6"))
                        (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "6") (term "0,0"))
                        (rule "equalUnique" (formula "6") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "6") (term "0,0"))
                        (rule "ifthenelse_false" (formula "6") (term "0"))
                        (rule "simplifySelectOfStore" (formula "6"))
                        (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                        (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "6") (term "0,0"))
                        (rule "eqClose" (formula "6") (term "0,0,0"))
                        (rule "concrete_and_1" (formula "6") (term "0,0"))
                        (rule "castDel" (formula "6") (term "1,0"))
                        (rule "eqSymm" (formula "6") (term "0,0"))
                        (rule "intCastEqual" (formula "6") (term "0,0"))
                        (rule "nnf_ex2all" (formula "31"))
                        (rule "nnf_imp2or" (formula "9") (term "0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0"))
                        (rule "nnf_imp2or" (formula "8") (term "0"))
                        (rule "nnf_notAll" (formula "1") (term "0"))
                        (rule "nnf_imp2or" (formula "9") (term "1,0"))
                        (rule "nnf_notAnd" (formula "8") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "8") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "8") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "8") (term "0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "8") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                        (rule "mul_literals" (formula "8") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "9") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,1,0"))
                        (rule "add_literals" (formula "9") (term "0,0,0,1,0,1,0"))
                        (rule "add_zero_left" (formula "9") (term "0,0,1,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,0,1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                        (rule "nnf_imp2or" (formula "9") (term "0,1,0,1,1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
                        (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,1,1,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,1,1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0,1,1,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,1,0,1,1,0"))
                        (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0,1,1,0"))
                        (rule "mul_literals" (formula "9") (term "1,0,0,0,1,0,1,1,0"))
                        (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
                        (rule "commute_and_2" (formula "23"))
                        (rule "ifthenelse_split" (formula "10") (term "0"))
                        (branch "msg.sender = self.auctionOwner TRUE"
                           (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "11"))
                           (rule "applyEqReverse" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "11"))
                           (rule "applyEqReverse" (formula "1") (term "0,0,1,0,0,0") (ifseqformula "11"))
                           (rule "hideAuxiliaryEq" (formula "11"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,0,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                           (rule "applyEq" (formula "2") (term "0,0,2,0,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,1,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "10"))
                           (rule "applyEq" (formula "8") (term "0,2,0,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,0,1,1,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,0,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "7") (term "1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,0,1,1,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "23") (term "0,0,2,0,0,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,1,0,1,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,1,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "2") (term "0,2,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,1,0,0,1,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "23") (term "0,2,1,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "9") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,0,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,0,1,1,0,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,1,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,1,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,0,1,0,0") (ifseqformula "10"))
                           (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,1,0,0,0,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "1") (term "3,0,0,0,1,1,0,0,0,0"))
                           (rule "applyEq" (formula "23") (term "1,0,1,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "23") (term "0,1,0"))
                           (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,0"))
                           (rule "applyEq" (formula "1") (term "1,3,0,1,1,0,0,0,0,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "1") (term "3,0,1,1,0,0,0,0,0"))
                           (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "2") (term "1,0"))
                           (rule "applyEq" (formula "1") (term "1,0,0,1,0,0,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "applyEq" (formula "9") (term "1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "9") (term "3,0,1,1,0,1,0,1,1,0"))
                           (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "9") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                           (rule "applyEq" (formula "8") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "8") (term "3,0,0,0,2,0,1,0"))
                           (rule "applyEq" (formula "8") (term "1,3,0,0,1,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "8") (term "3,0,0,1,0"))
                           (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "1") (term "3,0,0,0,1,0,0"))
                           (rule "applyEq" (formula "9") (term "1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "9") (term "3,0,0,1,0,1,0,1,1,0"))
                           (rule "applyEq" (formula "9") (term "1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "9") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                           (rule "applyEq" (formula "1") (term "1,3,0,1,0,1,1,0,0,0,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "1") (term "3,0,1,0,1,1,0,0,0,0"))
                           (rule "applyEq" (formula "1") (term "1,3,0,1,1,0,1,0,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "1") (term "3,0,1,1,0,1,0,0"))
                           (rule "applyEq" (formula "1") (term "1,0,1,0,1,0,0") (ifseqformula "15"))
                           (rule "add_zero_right" (formula "1") (term "0,1,0,1,0,0"))
                           (rule "applyEq" (formula "1") (term "0,3,0,0,0,0,0,0,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "1") (term "3,0,0,0,0,0,0,0"))
                           (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "23") (term "0,1,0"))
                           (rule "eqClose" (formula "23") (term "1,0"))
                           (rule "concrete_and_3" (formula "23") (term "0"))
                           (rule "applyEq" (formula "1") (term "0,3,0,0,0,1,1,0,0,0,0") (ifseqformula "19"))
                           (rule "times_zero_2" (formula "1") (term "3,0,0,0,1,1,0,0,0,0"))
                           (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "2") (term "1,0"))
                           (rule "applyEq" (formula "1") (term "0,3,0,1,1,0,0,0,0,0") (ifseqformula "19"))
                           (rule "times_zero_2" (formula "1") (term "3,0,1,1,0,0,0,0,0"))
                           (rule "applyEq" (formula "9") (term "0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "9") (term "3,0,0,0,2,1,1,0,1,0,1,1,0"))
                           (rule "applyEq" (formula "8") (term "0,3,0,0,0,2,0,1,0") (ifseqformula "19"))
                           (rule "times_zero_2" (formula "8") (term "3,0,0,0,2,0,1,0"))
                           (rule "applyEq" (formula "1") (term "0,3,0,0,0,1,0,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "1") (term "3,0,0,0,1,0,0"))
                           (rule "applyEq" (formula "9") (term "0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "9") (term "3,0,0,0,2,0,1,0,1,0,1,1,0"))
                           (rule "applyEq" (formula "8") (term "0,3,0,0,1,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "8") (term "3,0,0,1,0"))
                           (rule "applyEq" (formula "9") (term "0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "9") (term "3,0,0,1,0,1,0,1,1,0"))
                           (rule "applyEq" (formula "9") (term "0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "19"))
                           (rule "times_zero_2" (formula "9") (term "3,0,1,1,0,1,0,1,1,0"))
                           (rule "applyEq" (formula "1") (term "0,0,0,1,0,0,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "eqClose" (formula "1") (term "0,1,0,0,0"))
                           (rule "concrete_not_1" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                           (rule "applyEq" (formula "1") (term "0,3,0,1,1,0,1,0,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "1") (term "3,0,1,1,0,1,0,0"))
                           (rule "applyEq" (formula "1") (term "0,3,0,1,0,1,1,0,0,0") (ifseqformula "19"))
                           (rule "times_zero_2" (formula "1") (term "3,0,1,0,1,1,0,0,0"))
                           (rule "applyEq" (formula "1") (term "0,0,1,0,1,0,0") (ifseqformula "19"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0"))
                           (rule "add_zero_left" (formula "1") (term "1,0,1,0,0"))
                           (rule "commute_or_2" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0"))
                           (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                           (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                           (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                           (rule "commute_or_2" (formula "9") (term "0,1,0,1,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                           (rule "allLeft" (formula "21") (inst "t=a_0"))
                           (rule "allLeft" (formula "18") (inst "t=j_0"))
                           (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "18") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "18") (term "1,0"))
                           (rule "concrete_or_4" (formula "18") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                           (rule "add_literals" (formula "18") (term "0,0,1"))
                           (rule "leq_literals" (formula "18") (term "0,1"))
                           (rule "concrete_and_2" (formula "18") (term "1"))
                           (rule "concrete_or_4" (formula "18"))
                           (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                           (rule "allLeft" (formula "12") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                           (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "12"))
                           (rule "mul_literals" (formula "24") (term "0,0"))
                           (rule "add_zero_left" (formula "24") (term "0"))
                           (rule "allLeft" (formula "13") (inst "t=a_0"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "self.auctionOwner = a_0 TRUE"
                              (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "29") (term "0,1,1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "eqSymm" (formula "28") (term "1,1"))
                              (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "3"))
                              (rule "ifthenelse_true" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "28") (term "0,1,1") (ifseqformula "2"))
                              (rule "eqClose" (formula "28") (term "1,1"))
                              (rule "concrete_or_3" (formula "28") (term "1"))
                              (rule "concrete_and_3" (formula "28"))
                              (rule "close" (formula "28") (ifseqformula "23"))
                           )
                           (branch "self.auctionOwner = a_0 FALSE"
                              (rule "applyEqReverse" (formula "29") (term "0,1,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "27"))
                              (rule "ifthenelse_false" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "28") (term "1,1,1") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "eqSymm" (formula "27") (term "1,1"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "11"))
                              (rule "concrete_and_1" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "ifthenelse_split" (formula "5") (term "0"))
                              (branch "self.bidders[j_0] = self.auctionOwner TRUE"
                                 (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "23") (term "0,0,2,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "10") (term "0") (ifseqformula "20"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "all_pull_out1" (formula "7") (term "0,1,1,0"))
                                 (rule "ex_pull_out3" (formula "7") (term "1,0"))
                                 (rule "commute_and" (formula "1") (term "0,0,0"))
                                 (rule "all_pull_out3" (formula "7") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "7") (term "1,0,0,0,1,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "7") (term "0,0,0,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "7") (term "0"))
                                 (rule "all_pull_out3" (formula "7") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,1,0,0,0"))
                                 (rule "eq_or_2" (formula "7") (term "0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,1,0,0,0,0"))
                                 (rule "eq_or" (formula "7") (term "0,0,1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0"))
                                 (rule "eq_or_2" (formula "7") (term "0,0,0,0,0,0"))
                                 (rule "commute_and_2" (formula "1") (term "0,0"))
                                 (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                 (rule "exLeft" (formula "16") (inst "sk=i_0"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "eqSymm" (formula "16") (term "0"))
                                 (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "16") (term "1"))
                                 (rule "concrete_or_4" (formula "16"))
                                 (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "18") (term "0"))
                                 (rule "concrete_or_2" (formula "18"))
                                 (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "17") (term "0"))
                                 (rule "concrete_or_2" (formula "17"))
                                 (rule "inEqSimp_homoInEq0" (formula "18"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                 (rule "mul_literals" (formula "18") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                 (rule "allLeft" (formula "15") (inst "t=hb_0"))
                                 (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "13"))
                                 (rule "allLeft" (formula "16") (inst "t=a_0"))
                                 (rule "allLeft" (formula "12") (inst "t=a_0"))
                                 (rule "eqSymm" (formula "12") (term "1,0"))
                                 (rule "eqSymm" (formula "12") (term "0,0"))
                                 (rule "eqSymm" (formula "12") (term "1"))
                                 (rule "replace_known_right" (formula "12") (term "1,0") (ifseqformula "30"))
                                 (rule "concrete_or_4" (formula "12") (term "0"))
                                 (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "31"))
                                 (rule "concrete_or_2" (formula "12"))
                                 (rule "close" (formula "32") (ifseqformula "12"))
                              )
                              (branch "self.bidders[j_0] = self.auctionOwner FALSE"
                                 (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "all_pull_out1" (formula "6") (term "0,1,1,0"))
                                 (rule "ex_pull_out3" (formula "6") (term "1,0"))
                                 (rule "commute_and" (formula "1") (term "0,0,0"))
                                 (rule "all_pull_out3" (formula "6") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "6") (term "1,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "6") (term "0,1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,0,1,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "6") (term "1,0,0,0,1,0"))
                                 (rule "commute_or" (formula "6") (term "0,0,0,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "6") (term "0"))
                                 (rule "all_pull_out3" (formula "6") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,1,0,0,0"))
                                 (rule "eq_or_2" (formula "6") (term "0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,1,0,0,0,0"))
                                 (rule "eq_or" (formula "6") (term "0,0,1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
                                 (rule "eq_or_2" (formula "6") (term "0,0,0,0,0,0"))
                                 (rule "commute_and_2" (formula "1") (term "0,0"))
                                 (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                 (rule "exLeft" (formula "16") (inst "sk=i_0"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "16") (term "1"))
                                 (rule "concrete_or_4" (formula "16"))
                                 (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "18") (term "0"))
                                 (rule "concrete_or_2" (formula "18"))
                                 (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "17") (term "0"))
                                 (rule "concrete_or_2" (formula "17"))
                                 (rule "inEqSimp_homoInEq0" (formula "18"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "25") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,1,1,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                 (rule "mul_literals" (formula "18") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "9"))
                                 (rule "times_zero_1" (formula "25") (term "0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0"))
                                 (rule "allLeft" (formula "15") (inst "t=hb_0"))
                                 (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "13"))
                                 (rule "allLeft" (formula "16") (inst "t=a_0"))
                                 (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                 (rule "applyEq" (formula "17") (term "0,1") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "17") (term "1"))
                                 (rule "concrete_or_3" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "allLeft" (formula "23") (inst "t=(int)(hb_0)"))
                                 (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                 (rule "allLeft" (formula "24") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                 (rule "allLeft" (formula "25") (inst "t=(int)(a_0)"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "allLeft" (formula "12") (inst "t=a_0"))
                                 (rule "eqSymm" (formula "12") (term "1,0"))
                                 (rule "eqSymm" (formula "12") (term "1"))
                                 (rule "eqSymm" (formula "12") (term "0,0"))
                                 (rule "replace_known_right" (formula "12") (term "1,0") (ifseqformula "35"))
                                 (rule "concrete_or_4" (formula "12") (term "0"))
                                 (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "36"))
                                 (rule "concrete_or_2" (formula "12"))
                                 (rule "close" (formula "37") (ifseqformula "12"))
                              )
                           )
                        )
                        (branch "msg.sender = self.auctionOwner FALSE"
                           (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "10"))
                           (rule "eqClose" (formula "24") (term "1,0"))
                           (rule "concrete_and_3" (formula "24") (term "0"))
                           (rule "applyEqReverse" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "10"))
                           (rule "add_zero_left" (formula "1") (term "1,0,1,0,0"))
                           (rule "applyEqReverse" (formula "1") (term "0,0,1,0,0,0") (ifseqformula "10"))
                           (rule "eqClose" (formula "1") (term "0,1,0,0,0"))
                           (rule "concrete_not_1" (formula "1") (term "1,0,0,0"))
                           (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                           (rule "hideAuxiliaryEq" (formula "10"))
                           (rule "commute_or_2" (formula "1") (term "0,0"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "msg.sender = a_0 TRUE"
                              (rule "applyEqReverse" (formula "24") (term "0,1,1") (ifseqformula "4"))
                              (rule "applyEqReverse" (formula "24") (term "1,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "eqSymm" (formula "23") (term "1,1"))
                              (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "3"))
                              (rule "ifthenelse_true" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "23") (term "0,1,1") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "18"))
                              (rule "concrete_and_1" (formula "22"))
                              (rule "orRight" (formula "22"))
                              (rule "orRight" (formula "22"))
                              (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,2,0,1,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "2"))
                              (rule "eqSymm" (formula "25"))
                              (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "7") (term "0,2,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,2,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,2,0,0,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "2"))
                              (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "7") (term "0,2,0,0,0,2,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "21") (term "0") (ifseqformula "2"))
                              (rule "eqSymm" (formula "21"))
                              (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,0,1,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,0,2,0,0,1,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,2,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,0,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,0,1,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "23") (term "0,2,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,0,1,1,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "23") (term "0,0,2,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,1,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,2,0,0,0,2,1,1,0,1,0,1,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,2,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,0,0") (ifseqformula "2"))
                              (rule "polySimp_sepPosMonomial" (formula "23"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1"))
                              (rule "commute_and" (formula "1") (term "0,1,0,0"))
                              (rule "cnf_rightDist" (formula "1") (term "0,0"))
                              (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                              (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                              (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                              (rule "commute_or_2" (formula "8") (term "0,1,0,1,1,0"))
                              (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                              (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                              (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                              (rule "allLeft" (formula "19") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                              (rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                              (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "10"))
                              (rule "mul_literals" (formula "20") (term "0,0"))
                              (rule "add_zero_left" (formula "20") (term "0"))
                              (rule "allLeft" (formula "21") (inst "t=a_0"))
                              (rule "allLeft" (formula "17") (inst "t=j_0"))
                              (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "17") (term "0,1,0"))
                              (rule "concrete_and_2" (formula "17") (term "1,0"))
                              (rule "concrete_or_4" (formula "17") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "5"))
                              (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                              (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                              (rule "add_literals" (formula "17") (term "0,0,1"))
                              (rule "leq_literals" (formula "17") (term "0,1"))
                              (rule "concrete_and_2" (formula "17") (term "1"))
                              (rule "concrete_or_4" (formula "17"))
                              (rule "allLeft" (formula "11") (inst "t=a_0"))
                              (rule "inEqSimp_commuteLeq" (formula "11"))
                              (rule "all_pull_out1" (formula "8") (term "0,1,1,0"))
                              (rule "ex_pull_out3" (formula "8") (term "1,0"))
                              (rule "ifthenelse_split" (formula "6") (term "0"))
                              (branch "self.bidders[j_0] = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "8") (term "1,1,0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "applyEq" (formula "17") (term "0,0,2,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "21") (term "0,0,2,0") (ifseqformula "6"))
                                 (rule "commute_and_2" (formula "1") (term "0,0"))
                                 (rule "all_pull_out3" (formula "8") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "8") (term "1,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "8") (term "1,0,0,0,1,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "8") (term "0,0,0,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "8") (term "0"))
                                 (rule "all_pull_out3" (formula "8") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,1,0,0,0"))
                                 (rule "eq_or_2" (formula "8") (term "0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "8") (term "0,1,0,0,0,0"))
                                 (rule "eq_or" (formula "8") (term "0,0,1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "8") (term "0,0,0,0,0,0,0"))
                                 (rule "eq_or_2" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "allLeft" (formula "16") (inst "t=a_0"))
                                 (rule "exLeft" (formula "16") (inst "sk=i_0"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "eqSymm" (formula "16") (term "0"))
                                 (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "17") (term "0"))
                                 (rule "concrete_or_2" (formula "17"))
                                 (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "18") (term "0"))
                                 (rule "concrete_or_2" (formula "18"))
                                 (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "16") (term "1"))
                                 (rule "concrete_or_4" (formula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "18"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                 (rule "mul_literals" (formula "18") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                 (rule "allLeft" (formula "7") (inst "t=j_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "7") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "7") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "7") (term "1,0"))
                                 (rule "concrete_or_4" (formula "7") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "7") (term "0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0"))
                                 (rule "concrete_or_2" (formula "7"))
                                 (rule "pullOutSelect" (formula "7") (term "0,0,2,0") (inst "selectSK=arr_5"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "eqSymm" (formula "7") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "7") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "34"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "0,0,2,0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0") (ifseqformula "6"))
                                 (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=arr_6"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "eqClose" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "eqClose" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "7") (term "0"))
                                 (rule "castDel" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "0") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "allLeft" (formula "7") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0,0") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "concrete_or_2" (formula "7") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "19"))
                                 (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "0,0,0"))
                                 (rule "leq_literals" (formula "7") (term "0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0"))
                                 (rule "concrete_or_2" (formula "7"))
                                 (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=arr_7"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0"))
                                 (rule "eqClose" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "7") (term "0,0"))
                                 (rule "castDel" (formula "7") (term "1,0"))
                                 (rule "eqSymm" (formula "7") (term "0,0"))
                                 (rule "intCastEqual" (formula "7") (term "0,0"))
                                 (rule "pullOutSelect" (formula "7") (term "0,0,2,2,0") (inst "selectSK=arr_8"))
                                 (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "7") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "7") (term "0,0"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0"))
                                 (rule "eqSymm" (formula "7") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "7") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "35"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "0,0,2,2,0") (ifseqformula "7"))
                                 (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "18"))
                                 (rule "ifthenelse_true" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "0") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "allLeft" (formula "21") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                 (rule "applyEq" (formula "21") (term "0,0,2,0,0,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_or_1" (formula "21") (term "0"))
                                 (rule "concrete_or_1" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "allLeft" (formula "15") (inst "t=hb_0"))
                                 (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "13"))
                                 (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                 (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "16") (term "1"))
                                 (rule "concrete_or_3" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "allLeft" (formula "12") (inst "t=a_0"))
                                 (rule "eqSymm" (formula "12") (term "1"))
                                 (rule "eqSymm" (formula "12") (term "1,0"))
                                 (rule "eqSymm" (formula "12") (term "0,0"))
                                 (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "31"))
                                 (rule "concrete_or_4" (formula "12"))
                                 (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "30"))
                                 (rule "concrete_or_4" (formula "12"))
                                 (rule "close" (formula "29") (ifseqformula "12"))
                              )
                              (branch "self.bidders[j_0] = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "commute_and_2" (formula "1") (term "0,0"))
                                 (rule "all_pull_out3" (formula "7") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0,1,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "7") (term "1,0,0,0,1,0"))
                                 (rule "commute_or" (formula "7") (term "0,0,0,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "7") (term "0"))
                                 (rule "all_pull_out3" (formula "7") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,1,0,0,0"))
                                 (rule "eq_or_2" (formula "7") (term "0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,1,0,0,0,0"))
                                 (rule "eq_or" (formula "7") (term "0,0,1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0"))
                                 (rule "eq_or_2" (formula "7") (term "0,0,0,0,0,0"))
                                 (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                 (rule "exLeft" (formula "16") (inst "sk=i_0"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "17") (term "0"))
                                 (rule "concrete_or_2" (formula "17"))
                                 (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "18") (term "0"))
                                 (rule "concrete_or_2" (formula "18"))
                                 (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "20"))
                                 (rule "concrete_not_1" (formula "16") (term "1"))
                                 (rule "concrete_or_4" (formula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "18"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "24") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,1,1,0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "28") (term "0") (ifseqformula "16"))
                                 (rule "applyEq" (formula "9") (term "0,0,2,0") (ifseqformula "16"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                 (rule "mul_literals" (formula "18") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "9"))
                                 (rule "mul_literals" (formula "24") (term "0,0"))
                                 (rule "add_zero_left" (formula "24") (term "0"))
                                 (rule "allLeft" (formula "6") (inst "t=j_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "concrete_or_2" (formula "6") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,0"))
                                 (rule "leq_literals" (formula "6") (term "0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0"))
                                 (rule "concrete_or_2" (formula "6"))
                                 (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_5"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "eqClose" (formula "6") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "6") (term "0,0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "castDel" (formula "6") (term "1,0"))
                                 (rule "eqSymm" (formula "6") (term "0,0"))
                                 (rule "intCastEqual" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "7"))
                                 (rule "pullOutSelect" (formula "6") (term "0,0,2,2,0") (inst "selectSK=arr_6"))
                                 (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "eqSymm" (formula "6") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "6") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "6") (term "1,0,0,0") (ifseqformula "38"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,2,2,0") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,2,0") (ifseqformula "18"))
                                 (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "30"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "1") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "6"))
                                 (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "1,0"))
                                 (rule "times_zero_1" (formula "6") (term "0"))
                                 (rule "leq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "allLeft" (formula "6") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "19"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "6") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "6") (term "1,0"))
                                 (rule "concrete_or_4" (formula "6") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "6") (term "0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0"))
                                 (rule "concrete_or_2" (formula "6"))
                                 (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_7"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "eqClose" (formula "6") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "6") (term "0,0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "castDel" (formula "6") (term "1,0"))
                                 (rule "eqSymm" (formula "6") (term "0,0"))
                                 (rule "intCastEqual" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "7"))
                                 (rule "pullOutSelect" (formula "6") (term "0,0,2,2,0") (inst "selectSK=arr_8"))
                                 (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "eqSymm" (formula "6") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "6") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "6") (term "1,0,0,0") (ifseqformula "38"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,2,2,0") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "30"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "1") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "inEqSimp_homoInEq1" (formula "6"))
                                 (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                                 (rule "add_literals" (formula "6") (term "1,0"))
                                 (rule "times_zero_1" (formula "6") (term "0"))
                                 (rule "leq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "allLeft" (formula "19") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_0))"))
                                 (rule "exLeft" (formula "19") (inst "sk=i_1"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "eqSymm" (formula "19") (term "0"))
                                 (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "23"))
                                 (rule "concrete_not_1" (formula "20") (term "0"))
                                 (rule "concrete_or_2" (formula "20"))
                                 (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "23"))
                                 (rule "concrete_not_1" (formula "21") (term "0"))
                                 (rule "concrete_or_2" (formula "21"))
                                 (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "23"))
                                 (rule "concrete_not_1" (formula "19") (term "1"))
                                 (rule "concrete_or_4" (formula "19"))
                                 (rule "inEqSimp_homoInEq0" (formula "21"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                 (rule "mul_literals" (formula "21") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                                 (rule "allLeft" (formula "15") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                 (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "15") (term "1"))
                                 (rule "concrete_or_3" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "allLeft" (formula "15") (inst "t=hb_0"))
                                 (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "13"))
                                 (rule "allLeft" (formula "16") (inst "t=a_0"))
                                 (rule "allLeft" (formula "12") (inst "t=a_0"))
                                 (rule "eqSymm" (formula "12") (term "0,0"))
                                 (rule "eqSymm" (formula "12") (term "1"))
                                 (rule "eqSymm" (formula "12") (term "1,0"))
                                 (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "35"))
                                 (rule "concrete_or_2" (formula "12") (term "0"))
                                 (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "36"))
                                 (rule "concrete_or_2" (formula "12"))
                                 (rule "close" (formula "37") (ifseqformula "12"))
                              )
                           )
                           (branch "msg.sender = a_0 FALSE"
                              (rule "applyEqReverse" (formula "24") (term "1,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "24") (term "0,1,1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "21"))
                              (rule "ifthenelse_false" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "23") (term "1,1,1") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "eqSymm" (formula "22") (term "1,1"))
                              (rule "cnf_rightDist" (formula "1") (term "0,0"))
                              (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                              (rule "commute_or_2" (formula "7") (term "0,1,0,1,1,0"))
                              (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
                              (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
                              (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                              (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                              (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
                              (rule "ifthenelse_split" (formula "5") (term "0"))
                              (branch "self.bidders[j_0] = msg.sender TRUE"
                                 (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "all_pull_out1" (formula "7") (term "0,1,1,0"))
                                 (rule "ex_pull_out3" (formula "7") (term "1,0"))
                                 (rule "allLeft" (formula "18") (inst "t=a_0"))
                                 (rule "allLeft" (formula "15") (inst "t=j_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                 (rule "applyEq" (formula "15") (term "0,0,2,0,0,0") (ifseqformula "5"))
                                 (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                 (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                 (rule "leq_literals" (formula "15") (term "0,1"))
                                 (rule "concrete_and_2" (formula "15") (term "1"))
                                 (rule "concrete_or_4" (formula "15"))
                                 (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "15") (term "0,1"))
                                 (rule "concrete_and_2" (formula "15") (term "1"))
                                 (rule "concrete_or_4" (formula "15"))
                                 (rule "allLeft" (formula "9") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                                 (rule "allLeft" (formula "10") (inst "t=a_0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "10"))
                                 (rule "concrete_and_1" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "all_pull_out3" (formula "7") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0,1,0"))
                                 (rule "commute_or" (formula "7") (term "1,0,0,0,1,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "7") (term "0,0,0,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "7") (term "0"))
                                 (rule "commute_and" (formula "1") (term "0,0,0"))
                                 (rule "all_pull_out3" (formula "7") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,1,0,0,0"))
                                 (rule "eq_or_2" (formula "7") (term "0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "7") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "7") (term "0,1,0,0,0,0"))
                                 (rule "eq_or" (formula "7") (term "0,0,1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "7") (term "0,0,0,0,0,0,0"))
                                 (rule "eq_or_2" (formula "7") (term "0,0,0,0,0,0"))
                                 (rule "commute_and_2" (formula "1") (term "0,0"))
                                 (rule "allLeft" (formula "12") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                                 (rule "eqSymm" (formula "12") (term "1"))
                                 (rule "replace_known_right" (formula "12") (term "1,0") (ifseqformula "26"))
                                 (rule "concrete_or_4" (formula "12") (term "0"))
                                 (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "30"))
                                 (rule "concrete_or_2" (formula "12"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,1,1,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,1,1,1,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,1,1,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,1,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,1,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,1,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,1,1,1,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,1,1,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,0,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,0,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,1,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "7") (term "1,3,0,1,1,0,0,0,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "7") (term "3,0,1,1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,3,0,1,1,0,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "3,0,1,1,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "1,3,0,0,0,2,0,1,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,0,2,0,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,3,0,0,0,2,0,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "3,0,0,0,2,0,1,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,1,1,1,0,1,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,1,1,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,1,1,1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,1,1,1,0,1,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,1,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,0,1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,0,1,1,0,0"))
                                 (rule "applyEq" (formula "7") (term "1,3,0,0,0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "7") (term "3,0,0,0,2,0,1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,3,0,0,0,2,0,1,0,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "3,0,0,0,2,0,1,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "1,3,0,0,1,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "6") (term "3,0,0,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,3,0,0,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "3,0,0,1,0"))
                                 (rule "applyEq" (formula "7") (term "1,3,0,0,0,2,1,1,0,0,0,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "7") (term "3,0,0,0,2,1,1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,3,0,0,0,2,1,1,0,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "3,0,0,0,2,1,1,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,1,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,0,1,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,0,1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,0,1,0,1,0,0"))
                                 (rule "applyEq" (formula "7") (term "1,3,0,0,1,0,0,0,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "7") (term "3,0,0,1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "7") (term "1,3,0,0,1,0,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "7") (term "3,0,0,1,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,1,0,1,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,1,0,1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,1,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,1,0,1,1,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,0,1,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,1,0,1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,1,0,1,1,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,1,0,1,0,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,1,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,1,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "12"))
                                 (rule "polySimp_pullOutFactor2" (formula "1") (term "3,0,1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,3,0,1,0,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "3,0,1,0,0,0,1,0,0,0"))
                                 (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                                 (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "9"))
                                 (rule "mul_literals" (formula "23") (term "0,0"))
                                 (rule "add_zero_left" (formula "23") (term "0"))
                                 (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                                 (rule "exLeft" (formula "17") (inst "sk=i_0"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "eqSymm" (formula "17") (term "0"))
                                 (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "21"))
                                 (rule "concrete_not_1" (formula "18") (term "0"))
                                 (rule "concrete_or_2" (formula "18"))
                                 (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "21"))
                                 (rule "concrete_not_1" (formula "19") (term "0"))
                                 (rule "concrete_or_2" (formula "19"))
                                 (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "21"))
                                 (rule "concrete_not_1" (formula "17") (term "1"))
                                 (rule "concrete_or_4" (formula "17"))
                                 (rule "inEqSimp_homoInEq0" (formula "19"))
                                 (rule "polySimp_addComm1" (formula "19") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                 (rule "mul_literals" (formula "19") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                 (rule "allLeft" (formula "6") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "20"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "6") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "6") (term "1,0"))
                                 (rule "concrete_or_4" (formula "6") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "6") (term "0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0"))
                                 (rule "concrete_or_2" (formula "6"))
                                 (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_5"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "eqClose" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "6") (term "0,0"))
                                 (rule "castDel" (formula "6") (term "1,0"))
                                 (rule "eqSymm" (formula "6") (term "0,0"))
                                 (rule "intCastEqual" (formula "6") (term "0,0"))
                                 (rule "pullOutSelect" (formula "6") (term "0,0,2,2,0") (inst "selectSK=arr_6"))
                                 (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "eqSymm" (formula "7") (term "0,0"))
                                 (rule "eqSymm" (formula "6") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "6") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "6") (term "1,0,0,0") (ifseqformula "41"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,2,2,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "eqSymm" (formula "6") (term "0,0"))
                                 (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "19"))
                                 (rule "ifthenelse_true" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "0") (ifseqformula "6"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "allLeft" (formula "6") (inst "t=j_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "6") (term "0,1,0"))
                                 (rule "concrete_and_2" (formula "6") (term "1,0"))
                                 (rule "concrete_or_4" (formula "6") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "6") (term "0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0"))
                                 (rule "concrete_or_2" (formula "6"))
                                 (rule "pullOutSelect" (formula "6") (term "0,0,2,0") (inst "selectSK=arr_7"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "replaceKnownSelect_taclet10020000_43" (formula "6") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10020000_44" (formula "6") (term "2,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,2,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "5"))
                                 (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=arr_8"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "eqClose" (formula "6") (term "1,0,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0,0"))
                                 (rule "eqClose" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_true" (formula "6") (term "0"))
                                 (rule "castDel" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "0") (ifseqformula "6"))
                                 (rule "leq_literals" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "allLeft" (formula "22") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                 (rule "applyEq" (formula "22") (term "0,0,2,0,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "21"))
                                 (rule "concrete_or_1" (formula "22") (term "0"))
                                 (rule "concrete_or_1" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                 (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "15"))
                                 (rule "leq_literals" (formula "16") (term "1"))
                                 (rule "concrete_or_3" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "allLeft" (formula "16") (inst "t=hb_0"))
                                 (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "14"))
                                 (rule "allLeft" (formula "17") (inst "t=a_0"))
                                 (rule "allLeft" (formula "24") (inst "t=(int)(hb_0)"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                 (rule "allLeft" (formula "25") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "allLeft" (formula "26") (inst "t=(int)(java.lang.Address::select(heap,
                                msg,
                                java.lang.Message::$sender))"))
                                 (rule "allLeft" (formula "13") (inst "t=a_0"))
                                 (rule "eqSymm" (formula "13") (term "1,0"))
                                 (rule "eqSymm" (formula "13") (term "1"))
                                 (rule "eqSymm" (formula "13") (term "0,0"))
                                 (rule "replace_known_right" (formula "13") (term "1,0") (ifseqformula "38"))
                                 (rule "concrete_or_4" (formula "13") (term "0"))
                                 (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "37"))
                                 (rule "concrete_or_2" (formula "13"))
                                 (rule "close" (formula "39") (ifseqformula "13"))
                              )
                              (branch "self.bidders[j_0] = msg.sender FALSE"
                                 (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "all_pull_out1" (formula "6") (term "0,1,1,0"))
                                 (rule "ex_pull_out3" (formula "6") (term "1,0"))
                                 (rule "allLeft" (formula "8") (inst "t=a_0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8"))
                                 (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "8"))
                                 (rule "concrete_and_1" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "allLeft" (formula "18") (inst "t=a_0"))
                                 (rule "allLeft" (formula "15") (inst "t=j_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                 (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "15") (term "0,0,1"))
                                 (rule "leq_literals" (formula "15") (term "0,1"))
                                 (rule "concrete_and_2" (formula "15") (term "1"))
                                 (rule "concrete_or_4" (formula "15"))
                                 (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "15") (term "0,1"))
                                 (rule "concrete_and_2" (formula "15") (term "1"))
                                 (rule "concrete_or_4" (formula "15"))
                                 (rule "all_pull_out3" (formula "6") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,1,0"))
                                 (rule "commute_or_2" (formula "6") (term "1,0,0,1,0"))
                                 (rule "shift_paren_or" (formula "6") (term "0,1,0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,0,1,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,0,0,0,1,0"))
                                 (rule "commute_or" (formula "6") (term "1,0,0,0,1,0"))
                                 (rule "commute_or" (formula "6") (term "0,0,0,0,0,1,0"))
                                 (rule "ex_pull_out3" (formula "6") (term "0"))
                                 (rule "commute_and" (formula "1") (term "0,0,0"))
                                 (rule "all_pull_out3" (formula "6") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,1,0,0,0"))
                                 (rule "eq_or_2" (formula "6") (term "0,0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "6") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "6") (term "0,1,0,0,0,0"))
                                 (rule "eq_or" (formula "6") (term "0,0,1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
                                 (rule "eq_or_2" (formula "6") (term "0,0,0,0,0,0"))
                                 (rule "commute_and_2" (formula "1") (term "0,0"))
                                 (rule "allLeft" (formula "5") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet10020000_42" (formula "5") (term "0,0,2,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10020000_44" (formula "5") (term "0,0,2,0,1"))
                                 (rule "replaceKnownSelect_taclet10020000_50" (formula "5") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11110020000_55" (formula "5") (term "0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0,1"))
                                 (rule "add_literals" (formula "5") (term "1,0,1"))
                                 (rule "times_zero_1" (formula "5") (term "0,1"))
                                 (rule "qeq_literals" (formula "5") (term "1"))
                                 (rule "concrete_or_3" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(j_0))"))
                                 (rule "exLeft" (formula "14") (inst "sk=i_0"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "andLeft" (formula "14"))
                                 (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "18"))
                                 (rule "concrete_not_1" (formula "16") (term "0"))
                                 (rule "concrete_or_2" (formula "16"))
                                 (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "18"))
                                 (rule "concrete_not_1" (formula "14") (term "1"))
                                 (rule "concrete_or_4" (formula "14"))
                                 (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "18"))
                                 (rule "concrete_not_1" (formula "15") (term "0"))
                                 (rule "concrete_or_2" (formula "15"))
                                 (rule "inEqSimp_homoInEq0" (formula "16"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,1,1,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "14"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "14"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1"))
                                 (rule "mul_literals" (formula "16") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                 (rule "allLeft" (formula "9") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_0))"))
                                 (rule "allLeft" (formula "18") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_0))"))
                                 (rule "exLeft" (formula "18") (inst "sk=i_1"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "eqSymm" (formula "18") (term "0"))
                                 (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "22"))
                                 (rule "concrete_not_1" (formula "20") (term "0"))
                                 (rule "concrete_or_2" (formula "20"))
                                 (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "22"))
                                 (rule "concrete_not_1" (formula "18") (term "1"))
                                 (rule "concrete_or_4" (formula "18"))
                                 (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "22"))
                                 (rule "concrete_not_1" (formula "19") (term "0"))
                                 (rule "concrete_or_2" (formula "19"))
                                 (rule "inEqSimp_homoInEq0" (formula "20"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                                 (rule "mul_literals" (formula "20") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                                 (rule "allLeft" (formula "5") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet10020000_42" (formula "5") (term "0,0,2,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10020000_44" (formula "5") (term "0,0,2,0,1"))
                                 (rule "replaceKnownSelect_taclet10020000_50" (formula "5") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet11110020000_55" (formula "5") (term "0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,1") (ifseqformula "16"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0,1"))
                                 (rule "add_literals" (formula "5") (term "1,0,1"))
                                 (rule "times_zero_1" (formula "5") (term "0,1"))
                                 (rule "qeq_literals" (formula "5") (term "1"))
                                 (rule "concrete_or_3" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "5") (inst "t=i_0"))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "concrete_or_2" (formula "5") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "18"))
                                 (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "leq_literals" (formula "5") (term "0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0"))
                                 (rule "concrete_or_2" (formula "5"))
                                 (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "eqClose" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "eqSymm" (formula "5") (term "0,0"))
                                 (rule "intCastEqual" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6"))
                                 (rule "pullOutSelect" (formula "5") (term "0,0,2,2,0") (inst "selectSK=arr_6"))
                                 (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0"))
                                 (rule "eqSymm" (formula "6") (term "0,0"))
                                 (rule "eqSymm" (formula "5") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "5") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "5") (term "1,0,0,0") (ifseqformula "42"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0,2,2,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "eqSymm" (formula "5") (term "0,0"))
                                 (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "31"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,0"))
                                 (rule "times_zero_1" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "27") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr(i_0))"))
                                 (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "9"))
                                 (rule "mul_literals" (formula "27") (term "0,0"))
                                 (rule "add_zero_left" (formula "27") (term "0"))
                                 (rule "allLeft" (formula "5") (inst "t=i_1"))
                                 (rule "inEqSimp_commuteGeq" (formula "5") (term "1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0,0") (ifseqformula "20"))
                                 (rule "qeq_literals" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "concrete_or_2" (formula "5") (term "0"))
                                 (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "21"))
                                 (rule "inEqSimp_homoInEq1" (formula "5") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "leq_literals" (formula "5") (term "0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0"))
                                 (rule "concrete_or_2" (formula "5"))
                                 (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_7"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "eqClose" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "eqSymm" (formula "5") (term "0,0"))
                                 (rule "intCastEqual" (formula "5") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "6"))
                                 (rule "pullOutSelect" (formula "5") (term "0,0,2,2,0") (inst "selectSK=arr_8"))
                                 (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0"))
                                 (rule "eqSymm" (formula "6") (term "0,0"))
                                 (rule "eqSymm" (formula "5") (term "0,0,0"))
                                 (rule "sortsDisjointModuloNull" (formula "5") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "5") (term "1,0,0,0") (ifseqformula "43"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0,2,2,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "eqSymm" (formula "5") (term "0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,2,0") (ifseqformula "20"))
                                 (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "20"))
                                 (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "32"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,0"))
                                 (rule "times_zero_1" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "allLeft" (formula "23") (inst "t=i_1"))
                                 (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                 (rule "applyEq" (formula "23") (term "0,0,2,0,0,0") (ifseqformula "18"))
                                 (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "22"))
                                 (rule "concrete_or_1" (formula "23") (term "0"))
                                 (rule "concrete_or_1" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                 (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "14") (term "1"))
                                 (rule "concrete_or_3" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "allLeft" (formula "14") (inst "t=hb_0"))
                                 (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "12"))
                                 (rule "allLeft" (formula "15") (inst "t=a_0"))
                                 (rule "allLeft" (formula "25") (inst "t=(int)(hb_0)"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "allLeft" (formula "26") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                                 (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                                 (rule "allLeft" (formula "11") (inst "t=a_0"))
                                 (rule "eqSymm" (formula "11") (term "1"))
                                 (rule "eqSymm" (formula "11") (term "1,0"))
                                 (rule "eqSymm" (formula "11") (term "0,0"))
                                 (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "40"))
                                 (rule "concrete_or_4" (formula "11"))
                                 (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "38"))
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "close" (formula "39") (ifseqformula "11"))
                              )
                           )
                        )
                     )
                  )
                  (branch "CUT: 1 + -1 * int::select(heap, self.bidders, arr_length) + (-1 + int::select(heap, self.bidders, arr_length)) <= 0 FALSE"
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0"))
                     (rule "polySimp_addComm1" (formula "18") (term "0,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0"))
                     (rule "polySimp_pullOutFactor2" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,0"))
                     (rule "times_zero_1" (formula "18") (term "0"))
                     (rule "leq_literals" (formula "18"))
                     (rule "closeTrue" (formula "18"))
                  )
               )
               (branch "CUT: int::select(heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))], self.bidders@heap[self.balances[(int)msg.sender] := 0] [net[msg.sender] := self.balances[(int)msg.sender] * -1 + int::select(heap, net, address(msg.sender))], arr_length) - 1 >= 0 FALSE"
                  (rule "concrete_impl_2" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "replaceKnownSelect_taclet_20" (formula "16") (term "1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "16") (term "1,0,0"))
                  (rule "replaceKnownSelect_taclet_32" (formula "16") (term "0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "16") (term "0,0"))
                  (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,1,1,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,1,1,0,1,0"))
                  (rule "replaceKnownSelect_taclet_32" (formula "1") (term "1,1,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_34" (formula "1") (term "1,1,0,1,0"))
                  (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,0,1,0,1,0,1,1,0"))
                  (rule "replaceKnownSelect_taclet_5" (formula "1") (term "1,1,1,0,1,0,1,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,0,1,0,1,0,1,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "1,1,1,0,1,0,1,1,0"))
                  (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                  (rule "replaceKnownSelect_taclet_20" (formula "1") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,1,1,0,1,0,1,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet_22" (formula "1") (term "1,0,0,2,0,1,0,1,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "16") (term "0"))
                  (rule "mul_literals" (formula "16") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,0"))
                  (rule "inEqSimp_geqRight" (formula "16"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1,0,1,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,1,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,1,0"))
                  (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                  (rule "applyEq" (formula "13") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "2") (term "1,1,1,0,1,0") (ifseqformula "10"))
                  (rule "add_literals" (formula "2") (term "1,1,0,1,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "11") (term "1,1,1,1,0,0") (ifseqformula "9"))
                  (rule "add_literals" (formula "11") (term "1,1,1,0,0"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                  (rule "qeq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "inEqSimp_or_tautInEq1" (formula "11") (term "0"))
                  (rule "add_literals" (formula "11") (term "1,1,0"))
                  (rule "qeq_literals" (formula "11") (term "1,0"))
                  (rule "concrete_or_3" (formula "11") (term "0"))
                  (rule "all_unused" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "nnf_ex2all" (formula "22"))
                  (rule "nnf_imp2or" (formula "2") (term "0"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "nnf_notAll" (formula "1") (term "0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "2") (term "0,0,1,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,1,0"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,1,0"))
                  (rule "neq_or" (formula "2") (term "0,1,0"))
                  (rule "concrete_or_1" (formula "2") (term "1,0"))
                  (rule "concrete_or_3" (formula "2") (term "0"))
                  (rule "all_unused" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0"))
                  (rule "shift_paren_or" (formula "1") (term "1,0,0"))
                  (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,0,0,0"))
                  (rule "applyEq_or_int2" (formula "1") (term "1,0,1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,1,0,0"))
                  (rule "commute_and" (formula "1") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,1,0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "1") (term "0,1,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0,0,0"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch "msg.sender = self.auctionOwner TRUE"
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,1,0,0,1,0,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,1,0,0,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,0,0,0,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,1,1,0,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,1,0,0,1,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,0,1,0,0,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,0,1,0,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,1,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,1,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0,1,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,2,1,0,1,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,0,1,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,0,1,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,1,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,1,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,1,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,0,0,1,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,1,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,1,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,1,1,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,0,0,1,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,0,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,1,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,1,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,3,0,1,1,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,1,1,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "1,0,0,1,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1,1,1,0,0,1,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,1,1,1,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0,0,1,0,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0,0,1,1,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1,1,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,1,1,1,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,0,1,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,1,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,1,0,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,1,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1,1,1,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,1,1,1,0,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1,0,0,0,0,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,1,0,0,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1,1,0,1,0,1,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,1,1,0,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1,1,0,1,0,0,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,1,1,0,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0,1,1,0,0,1,0,0,0") (ifseqformula "7"))
                     (rule "times_zero_2" (formula "1") (term "1,0,1,1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,1,1,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0,1,1,0,0,1,0,0") (ifseqformula "7"))
                     (rule "times_zero_2" (formula "1") (term "1,0,1,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,1,1,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "times_zero_2" (formula "1") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,1,1,0,1,0,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "3,0,1,1,0,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0,1,0,1,0,1,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "0,1,0,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0,1,0,1,0,0,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "0,1,0,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0,1,0,1,0,1,0,0,0") (ifseqformula "7"))
                     (rule "add_zero_right" (formula "1") (term "0,1,0,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,1,1,1,0,0,1,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,1,1,1,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0"))
                     (rule "eqClose" (formula "1") (term "0,1,1,0,0"))
                     (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                     (rule "concrete_or_4" (formula "1") (term "1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,0,0,1,0,0,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,0,0,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,0,0,1,1,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "0,0,1,1,0,0,0"))
                     (rule "eqClose" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "concrete_not_1" (formula "1") (term "1,1,0,0,0"))
                     (rule "concrete_or_4" (formula "1") (term "1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,0,0,1,0,0,0,0") (ifseqformula "11"))
                     (rule "times_zero_2" (formula "1") (term "0,0,1,0,0,0,0"))
                     (rule "eqClose" (formula "1") (term "0,1,0,0,0,0"))
                     (rule "concrete_not_1" (formula "1") (term "1,0,0,0,0"))
                     (rule "concrete_or_4" (formula "1") (term "0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,0,1,0,1,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,0,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,0,0,1,1,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,0,0,1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,0,1,0,0,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,0,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,0,0,0,0,1,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,0,0,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,1,1,1,0,1,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,1,1,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,0,0,1,1,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,0,0,1,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,1,1,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,0,1,0,1,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,0,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,1,1,0,1,1,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,1,1,0,1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,1,1,0,1,1,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,1,1,0,1,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,1,0,0,0,1,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,1,0,0,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0,1,1,0,1,0,0,0") (ifseqformula "11"))
                     (rule "add_literals" (formula "1") (term "0,1,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0,1,1,0,1,0,0") (ifseqformula "11"))
                     (rule "add_zero_right" (formula "1") (term "0,1,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "0,0,1,0,1,1,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0,0"))
                     (rule "add_zero_left" (formula "1") (term "1,0,1,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,0,1,1,0,0,0,0,0") (ifseqformula "11"))
                     (rule "add_zero_right" (formula "1") (term "0,1,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,3,0,1,1,0,1,0,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "3,0,1,1,0,1,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,0,1,0,1,1,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "0,0,1,0,1,0,0,0,0") (ifseqformula "11"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,1,0,0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "1,0,1,0,0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "8") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                     (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "7"))
                     (rule "leq_literals" (formula "8") (term "1"))
                     (rule "concrete_or_3" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "allLeft" (formula "8") (inst "t=hb_0"))
                     (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "6"))
                     (rule "cut_direct" (formula "8") (term "1"))
                     (branch "CUT: self.balances[(int)(hb_0)] <= 0 TRUE"
                        (rule "concrete_or_3" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "8"))
                        (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                        (rule "qeq_literals" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "13"))
                        (rule "leq_literals" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "6") (term "1") (ifseqformula "12"))
                        (rule "allLeft" (formula "4") (inst "t=hb_0"))
                        (rule "allLeft" (formula "5") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "13"))
                        (rule "leq_literals" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "allLeft" (formula "11") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                        (rule "exLeft" (formula "11") (inst "sk=i_0"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "eqSymm" (formula "11") (term "0"))
                        (rule "cut_direct" (formula "13") (term "1"))
                        (branch "CUT: i_0 <= -1 TRUE"
                           (rule "concrete_or_3" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "12") (term "0,1"))
                           (rule "concrete_and_2" (formula "12") (term "1"))
                           (rule "concrete_or_4" (formula "12"))
                           (rule "notLeft" (formula "12"))
                           (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "18"))
                           (rule "concrete_not_2" (formula "11") (term "1"))
                           (rule "concrete_or_3" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "allLeft" (formula "12") (inst "t=hb_0"))
                           (rule "exLeft" (formula "12") (inst "sk=i_1"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "eqSymm" (formula "12") (term "0"))
                           (rule "cut_direct" (formula "14") (term "1"))
                           (branch "CUT: i_1 <= -1 TRUE"
                              (rule "concrete_or_3" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "inEqSimp_contradInEq0" (formula "13") (term "1") (ifseqformula "14"))
                              (rule "qeq_literals" (formula "13") (term "0,1"))
                              (rule "concrete_and_2" (formula "13") (term "1"))
                              (rule "concrete_or_4" (formula "13"))
                              (rule "notLeft" (formula "13"))
                              (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "19"))
                              (rule "concrete_not_2" (formula "12") (term "1"))
                              (rule "concrete_or_3" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "1") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                              (rule "exLeft" (formula "1") (inst "sk=a_0"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "2") (term "0,1,0") (inst "selectSK=address_4"))
                              (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "eqClose" (formula "2") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                              (rule "eqClose" (formula "2") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "2") (term "0,0"))
                              (rule "equalUnique" (formula "2") (term "0,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "0,0"))
                              (rule "ifthenelse_true" (formula "2") (term "0"))
                              (rule "castDel" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "1") (term "0,0,1") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "1") (term "0,1,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "eqSymm" (formula "1") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0"))
                              (rule "times_zero_2" (formula "1") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,0"))
                              (rule "pullOutSelect" (formula "1") (term "0,0,0,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                              (rule "eqClose" (formula "1") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "eqSymm" (formula "2") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "2") (term "0,0,1") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "2"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "equalUnique" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "2") (term "0,0"))
                              (rule "ifthenelse_false" (formula "2") (term "0"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "eqClose" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "eqClose" (formula "2") (term "0,0"))
                              (rule "ifthenelse_true" (formula "2") (term "0"))
                              (rule "castDel" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "2"))
                              (rule "eqClose" (formula "4") (term "0,1"))
                              (rule "concrete_not_1" (formula "4") (term "1"))
                              (rule "concrete_or_4" (formula "4"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "2"))
                              (rule "eqClose" (formula "3") (term "0,1"))
                              (rule "concrete_not_1" (formula "3") (term "1"))
                              (rule "concrete_or_4" (formula "3"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=address_6"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "3") (term "0,1") (inst "selectSK=arr_2"))
                              (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "2") (term "0,1") (ifseqformula "3"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "3") (term "0,0"))
                              (rule "ifthenelse_false" (formula "3") (term "0"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "1,0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0"))
                              (rule "castDel" (formula "3") (term "1,0"))
                              (rule "intCastEqual" (formula "3") (term "0,0"))
                              (rule "commute_or" (formula "2"))
                              (rule "applyEq_or_int0" (formula "2"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "self.auctionOwner = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (rule "concrete_or_2" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                 (rule "ifthenelse_true" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "2"))
                                 (rule "eqClose" (formula "21"))
                                 (rule "closeTrue" (formula "21"))
                              )
                              (branch "self.auctionOwner = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "1") (term "0,1"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "21"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "0,1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_2" (formula "2") (term "0"))
                                 (rule "concrete_or_1" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq_or_int0" (formula "1"))
                                 (rule "allLeft" (formula "6") (inst "t=a_0"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "allLeft" (formula "17") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "5"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                 (rule "allLeft" (formula "1") (inst "t=hb_0"))
                                 (rule "exLeft" (formula "1") (inst "sk=a_1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "eqSymm" (formula "1") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,0,0"))
                                 (rule "eqSymm" (formula "1") (term "0,0,0"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "pullOutSelect" (formula "3") (term "1,1,1,0") (inst "selectSK=arr_3"))
                                 (rule "applyEq" (formula "1") (term "1,1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "1,1,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "1,0,0,0") (ifseqformula "3"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "eqClose" (formula "3") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "3") (term "0,0,0"))
                                 (rule "equalUnique" (formula "3") (term "0,0,0"))
                                 (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "castDel" (formula "3") (term "1,0"))
                                 (rule "intCastEqual" (formula "3") (term "0,0"))
                                 (rule "pullOutSelect" (formula "4") (term "0,1,0") (inst "selectSK=address_7"))
                                 (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "eqClose" (formula "4") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "castDel" (formula "4") (term "1,0"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "eqSymm" (formula "1") (term "0,1"))
                                 (rule "eqSymm" (formula "5") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "pullOutSelect" (formula "2") (term "0,0,0,0") (inst "selectSK=address_8"))
                                 (rule "simplifySelectOfStore" (formula "2"))
                                 (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0"))
                                 (rule "eqClose" (formula "2") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "2") (term "0,0"))
                                 (rule "equalUnique" (formula "2") (term "0,0"))
                                 (rule "castDel" (formula "2") (term "1,0"))
                                 (rule "eqSymm" (formula "3") (term "0,0,0"))
                                 (rule "pullOutSelect" (formula "5") (term "2,0") (inst "selectSK=address_9"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "13"))
                                 (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "1") (term "1,1,1,0") (ifseqformula "5"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "3") (term "1,1,1,0") (ifseqformula "5"))
                                 (rule "add_literals" (formula "3") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "1,1,1,0") (ifseqformula "5"))
                                 (rule "add_zero_right" (formula "6") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "1") (term "1,0,1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "pullOutSelect" (formula "3") (term "0,0,1") (inst "selectSK=arr_4"))
                                 (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "3"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "equalUnique" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "eqClose" (formula "3") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "3") (term "0,0"))
                                 (rule "equalUnique" (formula "3") (term "0,0"))
                                 (rule "castDel" (formula "3") (term "1,0"))
                                 (rule "intCastEqual" (formula "3") (term "0,0"))
                                 (rule "applyEq" (formula "3") (term "2,0") (ifseqformula "21"))
                                 (rule "ifthenelse_same_branches" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                 (rule "eqClose" (formula "4") (term "0,1"))
                                 (rule "concrete_not_1" (formula "4") (term "1"))
                                 (rule "concrete_or_4" (formula "4"))
                                 (rule "applyEqReverse" (formula "1") (term "0,0,1") (ifseqformula "3"))
                                 (rule "eqClose" (formula "1") (term "0,1"))
                                 (rule "concrete_not_1" (formula "1") (term "1"))
                                 (rule "concrete_or_4" (formula "1"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0,1") (ifseqformula "3"))
                                 (rule "eqClose" (formula "6") (term "0,1"))
                                 (rule "concrete_not_1" (formula "6") (term "1"))
                                 (rule "concrete_or_4" (formula "6"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=address_10"))
                                 (rule "simplifySelectOfStore" (formula "2"))
                                 (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "applyEq_or_int0" (formula "3"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "self.auctionOwner = a_1 TRUE"
                                    (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "6") (term "1"))
                                    (rule "concrete_or_4" (formula "6"))
                                    (rule "notLeft" (formula "6"))
                                    (rule "applyEqReverse" (formula "1") (term "0,1") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "close" (formula "23") (ifseqformula "3"))
                                 )
                                 (branch "self.auctionOwner = a_1 FALSE"
                                    (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "5") (term "0,1") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "1") (term "0,1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "23"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "2"))
                                    (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "eqSymm" (formula "2") (term "0,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                                    (rule "concrete_not_2" (formula "1") (term "0"))
                                    (rule "concrete_or_1" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq_or_int0" (formula "1"))
                                    (rule "allLeft" (formula "7") (inst "t=a_1"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "1") (term "0,0"))
                                    (rule "concrete_and_2" (formula "1") (term "0"))
                                    (rule "concrete_or_2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "1") (term "0,1"))
                                    (rule "concrete_and_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "allLeft" (formula "18") (inst "t=a_1"))
                                    (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "5"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "applyEq" (formula "21") (term "1") (ifseqformula "17"))
                                    (rule "allLeft" (formula "9") (inst "t=a_0"))
                                    (rule "allLeft" (formula "6") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "6") (term "1"))
                                    (rule "eqSymm" (formula "6") (term "1,0"))
                                    (rule "eqSymm" (formula "6") (term "0,0"))
                                    (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "26"))
                                    (rule "concrete_or_4" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "18"))
                                    (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "25"))
                                    (rule "concrete_or_4" (formula "6"))
                                    (rule "applyEqRigid" (formula "8") (term "0,2,0") (ifseqformula "6"))
                                    (rule "close" (formula "25") (ifseqformula "8"))
                                 )
                              )
                           )
                           (branch "CUT: i_1 <= -1 FALSE"
                              (rule "concrete_or_4" (formula "14"))
                              (rule "notLeft" (formula "14"))
                              (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "19"))
                              (rule "concrete_not_2" (formula "13") (term "0"))
                              (rule "concrete_or_1" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "18"))
                              (rule "concrete_not_2" (formula "12") (term "1"))
                              (rule "concrete_or_3" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "inEqSimp_leqRight" (formula "18"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "allLeft" (formula "2") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                              (rule "exLeft" (formula "2") (inst "sk=a_0"))
                              (rule "andLeft" (formula "2"))
                              (rule "andLeft" (formula "2"))
                              (rule "eqSymm" (formula "4") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,0,0"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "0,0,0"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=address_4"))
                              (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "eqClose" (formula "3") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "0,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "0,0"))
                              (rule "ifthenelse_true" (formula "3") (term "0"))
                              (rule "castDel" (formula "3") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "2") (term "0,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "3") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                              (rule "times_zero_2" (formula "2") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "1,1,0"))
                              (rule "pullOutSelect" (formula "2") (term "0,0,0,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                              (rule "eqClose" (formula "2") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "castDel" (formula "2") (term "1,0"))
                              (rule "eqSymm" (formula "3") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "4") (term "0,0,1") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "4"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "equalUnique" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "4") (term "0,0"))
                              (rule "ifthenelse_false" (formula "4") (term "0"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "eqClose" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "eqClose" (formula "4") (term "0,0"))
                              (rule "ifthenelse_true" (formula "4") (term "0"))
                              (rule "castDel" (formula "4") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "4"))
                              (rule "eqClose" (formula "3") (term "0,1"))
                              (rule "concrete_not_1" (formula "3") (term "1"))
                              (rule "concrete_or_4" (formula "3"))
                              (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "4"))
                              (rule "eqClose" (formula "5") (term "0,1"))
                              (rule "concrete_not_1" (formula "5") (term "1"))
                              (rule "concrete_or_4" (formula "5"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=address_6"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "equalUnique" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "2") (term "0,0"))
                              (rule "ifthenelse_false" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "pullOutSelect" (formula "3") (term "0,0,0") (inst "selectSK=arr_2"))
                              (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "3"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "3") (term "0,0"))
                              (rule "ifthenelse_false" (formula "3") (term "0"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "1,0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0"))
                              (rule "castDel" (formula "3") (term "1,0"))
                              (rule "intCastEqual" (formula "3") (term "0,0"))
                              (rule "commute_or" (formula "4"))
                              (rule "applyEq_or_int0" (formula "4"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "self.auctionOwner = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "5") (term "1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (rule "concrete_or_2" (formula "5"))
                                 (rule "notLeft" (formula "5"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "3"))
                                 (rule "eqClose" (formula "21"))
                                 (rule "closeTrue" (formula "21"))
                              )
                              (branch "self.auctionOwner = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "21"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "4") (term "0,1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_2" (formula "3") (term "0"))
                                 (rule "concrete_or_1" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEq_or_int0" (formula "2"))
                                 (rule "allLeft" (formula "7") (inst "t=a_0"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "allLeft" (formula "17") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "6"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                 (rule "qeq_literals" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                 (rule "allLeft" (formula "2") (inst "t=hb_0"))
                                 (rule "exLeft" (formula "2") (inst "sk=a_1"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,0,0"))
                                 (rule "eqSymm" (formula "3") (term "0,0,0"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "pullOutSelect" (formula "4") (term "1,1,1,0") (inst "selectSK=arr_3"))
                                 (rule "applyEq" (formula "3") (term "1,1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "2") (term "1,1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "3") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "eqClose" (formula "4") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "castDel" (formula "4") (term "1,0"))
                                 (rule "intCastEqual" (formula "4") (term "0,0"))
                                 (rule "pullOutSelect" (formula "5") (term "0,1,0") (inst "selectSK=address_7"))
                                 (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "eqClose" (formula "5") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "eqSymm" (formula "6") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "pullOutSelect" (formula "3") (term "0,0,0,0") (inst "selectSK=address_8"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "eqClose" (formula "3") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "3") (term "0,0"))
                                 (rule "equalUnique" (formula "3") (term "0,0"))
                                 (rule "castDel" (formula "3") (term "1,0"))
                                 (rule "eqSymm" (formula "4") (term "0,0,0"))
                                 (rule "pullOutSelect" (formula "6") (term "2,0") (inst "selectSK=address_9"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "14"))
                                 (rule "ifthenelse_same_branches" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "1,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "4") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_literals" (formula "4") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "7") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_literals" (formula "7") (term "1,1,0"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "pullOutSelect" (formula "6") (term "0,0,1") (inst "selectSK=arr_4"))
                                 (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "eqClose" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,0"))
                                 (rule "castDel" (formula "6") (term "1,0"))
                                 (rule "intCastEqual" (formula "6") (term "0,0"))
                                 (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "21"))
                                 (rule "ifthenelse_same_branches" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "2") (term "0,1"))
                                 (rule "concrete_not_1" (formula "2") (term "1"))
                                 (rule "concrete_or_4" (formula "2"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "4") (term "0,1"))
                                 (rule "concrete_not_1" (formula "4") (term "1"))
                                 (rule "concrete_or_4" (formula "4"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "7") (term "0,1"))
                                 (rule "concrete_not_1" (formula "7") (term "1"))
                                 (rule "concrete_or_4" (formula "7"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=address_10"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "applyEq_or_int0" (formula "4"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch "self.auctionOwner = a_1 TRUE"
                                    (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "2") (term "1"))
                                    (rule "concrete_or_4" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "close" (formula "24") (ifseqformula "4"))
                                 )
                                 (branch "self.auctionOwner = a_1 FALSE"
                                    (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "23"))
                                    (rule "ifthenelse_false" (formula "3") (term "0"))
                                    (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "eqSymm" (formula "3") (term "0,1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "22"))
                                    (rule "concrete_not_2" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq_or_int0" (formula "2"))
                                    (rule "allLeft" (formula "19") (inst "t=a_1"))
                                    (rule "allLeft" (formula "8") (inst "t=a_1"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "2") (term "0,0"))
                                    (rule "concrete_and_2" (formula "2") (term "0"))
                                    (rule "concrete_or_2" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (term "1") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "2") (term "0,1"))
                                    (rule "concrete_and_2" (formula "2") (term "1"))
                                    (rule "concrete_or_4" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "6"))
                                    (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                                    (rule "qeq_literals" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "applyEq" (formula "21") (term "1") (ifseqformula "17"))
                                    (rule "allLeft" (formula "10") (inst "t=a_0"))
                                    (rule "allLeft" (formula "7") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "7") (term "0,0"))
                                    (rule "eqSymm" (formula "7") (term "1"))
                                    (rule "eqSymm" (formula "7") (term "1,0"))
                                    (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "26"))
                                    (rule "concrete_or_4" (formula "7") (term "0"))
                                    (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "18"))
                                    (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "25"))
                                    (rule "concrete_or_4" (formula "7"))
                                    (rule "applyEq" (formula "27") (term "0,0,2,0") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "27"))
                                    (rule "concrete_or_2" (formula "11"))
                                    (rule "applyEq" (formula "8") (term "1,0,0,0") (ifseqformula "7"))
                                    (rule "applyEqRigid" (formula "17") (term "0,0,2,0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "7"))
                                    (rule "eqSymm" (formula "21"))
                                    (rule "applyEqRigid" (formula "9") (term "0,2,0") (ifseqformula "7"))
                                    (rule "close" (formula "24") (ifseqformula "9"))
                                 )
                              )
                           )
                        )
                        (branch "CUT: i_0 <= -1 FALSE"
                           (rule "concrete_or_4" (formula "13"))
                           (rule "notLeft" (formula "13"))
                           (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "18"))
                           (rule "concrete_not_2" (formula "12") (term "0"))
                           (rule "concrete_or_1" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "17"))
                           (rule "concrete_not_2" (formula "11") (term "1"))
                           (rule "concrete_or_3" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_leqRight" (formula "17"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "allLeft" (formula "12") (inst "t=hb_0"))
                           (rule "exLeft" (formula "12") (inst "sk=i_1"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "eqSymm" (formula "12") (term "0"))
                           (rule "cut_direct" (formula "14") (term "1"))
                           (branch "CUT: i_1 <= -1 TRUE"
                              (rule "concrete_or_3" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "inEqSimp_contradInEq0" (formula "13") (term "1") (ifseqformula "14"))
                              (rule "qeq_literals" (formula "13") (term "0,1"))
                              (rule "concrete_and_2" (formula "13") (term "1"))
                              (rule "concrete_or_4" (formula "13"))
                              (rule "notLeft" (formula "13"))
                              (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "19"))
                              (rule "concrete_not_2" (formula "12") (term "1"))
                              (rule "concrete_or_3" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "2") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                              (rule "exLeft" (formula "2") (inst "sk=a_0"))
                              (rule "andLeft" (formula "2"))
                              (rule "andLeft" (formula "2"))
                              (rule "eqSymm" (formula "4") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,0,0"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "0,0,0"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "pullOutSelect" (formula "3") (term "0,1,0") (inst "selectSK=address_4"))
                              (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "eqClose" (formula "3") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "0,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "0,0"))
                              (rule "ifthenelse_true" (formula "3") (term "0"))
                              (rule "castDel" (formula "3") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "2") (term "0,0,1") (ifseqformula "3"))
                              (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "3") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                              (rule "times_zero_2" (formula "2") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "2") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "1,1,0"))
                              (rule "pullOutSelect" (formula "2") (term "0,0,0,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                              (rule "eqClose" (formula "2") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "castDel" (formula "2") (term "1,0"))
                              (rule "eqSymm" (formula "3") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "4") (term "0,0,1") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "4"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "equalUnique" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "4") (term "0,0"))
                              (rule "ifthenelse_false" (formula "4") (term "0"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "eqClose" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "eqClose" (formula "4") (term "0,0"))
                              (rule "ifthenelse_true" (formula "4") (term "0"))
                              (rule "castDel" (formula "4") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "4"))
                              (rule "eqClose" (formula "3") (term "0,1"))
                              (rule "concrete_not_1" (formula "3") (term "1"))
                              (rule "concrete_or_4" (formula "3"))
                              (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "4"))
                              (rule "eqClose" (formula "5") (term "0,1"))
                              (rule "concrete_not_1" (formula "5") (term "1"))
                              (rule "concrete_or_4" (formula "5"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=address_6"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "equalUnique" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "2") (term "0,0"))
                              (rule "ifthenelse_false" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "pullOutSelect" (formula "3") (term "0,0,0") (inst "selectSK=arr_2"))
                              (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "3"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "3") (term "0,0"))
                              (rule "ifthenelse_false" (formula "3") (term "0"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "1,0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0"))
                              (rule "castDel" (formula "3") (term "1,0"))
                              (rule "intCastEqual" (formula "3") (term "0,0"))
                              (rule "commute_or" (formula "4"))
                              (rule "applyEq_or_int0" (formula "4"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "self.auctionOwner = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "5") (term "1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "5") (term "0"))
                                 (rule "concrete_or_2" (formula "5"))
                                 (rule "notLeft" (formula "5"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "3"))
                                 (rule "eqClose" (formula "21"))
                                 (rule "closeTrue" (formula "21"))
                              )
                              (branch "self.auctionOwner = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "21"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "4") (term "0,1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "20"))
                                 (rule "concrete_not_2" (formula "3") (term "0"))
                                 (rule "concrete_or_1" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEq_or_int0" (formula "2"))
                                 (rule "allLeft" (formula "17") (inst "t=a_0"))
                                 (rule "allLeft" (formula "7") (inst "t=a_0"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "6"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                 (rule "allLeft" (formula "2") (inst "t=hb_0"))
                                 (rule "exLeft" (formula "2") (inst "sk=a_1"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,0,0"))
                                 (rule "eqSymm" (formula "3") (term "0,0,0"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "pullOutSelect" (formula "4") (term "1,1,1,0") (inst "selectSK=arr_3"))
                                 (rule "applyEq" (formula "3") (term "1,1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "2") (term "1,1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "3") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "eqClose" (formula "4") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "castDel" (formula "4") (term "1,0"))
                                 (rule "intCastEqual" (formula "4") (term "0,0"))
                                 (rule "pullOutSelect" (formula "5") (term "0,1,0") (inst "selectSK=address_7"))
                                 (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "eqClose" (formula "5") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "eqSymm" (formula "6") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "pullOutSelect" (formula "3") (term "0,0,0,0") (inst "selectSK=address_8"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "eqClose" (formula "3") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "3") (term "0,0"))
                                 (rule "equalUnique" (formula "3") (term "0,0"))
                                 (rule "castDel" (formula "3") (term "1,0"))
                                 (rule "eqSymm" (formula "4") (term "0,0,0"))
                                 (rule "pullOutSelect" (formula "6") (term "2,0") (inst "selectSK=address_9"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "14"))
                                 (rule "ifthenelse_same_branches" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "2") (term "1,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "2") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "1,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "4") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_literals" (formula "4") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "7") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_literals" (formula "7") (term "1,1,0"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "pullOutSelect" (formula "6") (term "0,0,1") (inst "selectSK=arr_4"))
                                 (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "eqClose" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,0"))
                                 (rule "castDel" (formula "6") (term "1,0"))
                                 (rule "intCastEqual" (formula "6") (term "0,0"))
                                 (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "21"))
                                 (rule "ifthenelse_same_branches" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "2") (term "0,1"))
                                 (rule "concrete_not_1" (formula "2") (term "1"))
                                 (rule "concrete_or_4" (formula "2"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "4") (term "0,1"))
                                 (rule "concrete_not_1" (formula "4") (term "1"))
                                 (rule "concrete_or_4" (formula "4"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "7") (term "0,1"))
                                 (rule "concrete_not_1" (formula "7") (term "1"))
                                 (rule "concrete_or_4" (formula "7"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=address_10"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "commute_or" (formula "4"))
                                 (rule "applyEq_or_int0" (formula "4"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch "self.auctionOwner = a_1 TRUE"
                                    (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "2") (term "1"))
                                    (rule "concrete_or_4" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "close" (formula "24") (ifseqformula "4"))
                                 )
                                 (branch "self.auctionOwner = a_1 FALSE"
                                    (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "23"))
                                    (rule "ifthenelse_false" (formula "3") (term "0"))
                                    (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "eqSymm" (formula "3") (term "0,1"))
                                    (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "22"))
                                    (rule "concrete_not_2" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq_or_int0" (formula "2"))
                                    (rule "allLeft" (formula "8") (inst "t=a_1"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "2") (term "0,0"))
                                    (rule "concrete_and_2" (formula "2") (term "0"))
                                    (rule "concrete_or_2" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (term "1") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "2") (term "0,1"))
                                    (rule "concrete_and_2" (formula "2") (term "1"))
                                    (rule "concrete_or_4" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "allLeft" (formula "18") (inst "t=a_1"))
                                    (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "6"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "applyEq" (formula "21") (term "1") (ifseqformula "17"))
                                    (rule "allLeft" (formula "10") (inst "t=a_0"))
                                    (rule "allLeft" (formula "7") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "7") (term "0,0"))
                                    (rule "eqSymm" (formula "7") (term "1"))
                                    (rule "eqSymm" (formula "7") (term "1,0"))
                                    (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "26"))
                                    (rule "concrete_or_4" (formula "7") (term "0"))
                                    (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "18"))
                                    (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "25"))
                                    (rule "concrete_or_4" (formula "7"))
                                    (rule "applyEq" (formula "8") (term "1,0,0,0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "27") (term "0,0,2,0") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "27"))
                                    (rule "concrete_or_2" (formula "11"))
                                    (rule "applyEqRigid" (formula "9") (term "0,2,0") (ifseqformula "7"))
                                    (rule "close" (formula "25") (ifseqformula "9"))
                                 )
                              )
                           )
                           (branch "CUT: i_1 <= -1 FALSE"
                              (rule "concrete_or_4" (formula "14"))
                              (rule "notLeft" (formula "14"))
                              (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "19"))
                              (rule "concrete_not_2" (formula "13") (term "0"))
                              (rule "concrete_or_1" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "18"))
                              (rule "concrete_not_2" (formula "12") (term "1"))
                              (rule "concrete_or_3" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "inEqSimp_leqRight" (formula "18"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "allLeft" (formula "3") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                              (rule "exLeft" (formula "3") (inst "sk=a_0"))
                              (rule "andLeft" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "eqSymm" (formula "5") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "0,0,0"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "4") (term "1,1,1,0") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "3") (term "1,1,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "3") (term "1,0,0,0") (ifseqformula "4"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "equalUnique" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "4") (term "0,0"))
                              (rule "ifthenelse_false" (formula "4") (term "0"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                              (rule "eqClose" (formula "4") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "castDel" (formula "4") (term "1,0"))
                              (rule "intCastEqual" (formula "4") (term "0,0"))
                              (rule "pullOutSelect" (formula "5") (term "0,1,0") (inst "selectSK=address_4"))
                              (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "5"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "eqClose" (formula "5") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "5") (term "0,0"))
                              (rule "equalUnique" (formula "5") (term "0,0"))
                              (rule "eqClose" (formula "5") (term "0,0"))
                              (rule "ifthenelse_true" (formula "5") (term "0"))
                              (rule "castDel" (formula "5") (term "0"))
                              (rule "applyEqReverse" (formula "6") (term "0,1,0") (ifseqformula "5"))
                              (rule "applyEqReverse" (formula "6") (term "0,0,1") (ifseqformula "5"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "5"))
                              (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "eqSymm" (formula "5") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0"))
                              (rule "mul_literals" (formula "5") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "5") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "1,0,1,0"))
                              (rule "add_zero_right" (formula "3") (term "0,1,0"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "18"))
                              (rule "leq_literals" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0"))
                              (rule "mul_literals" (formula "5") (term "1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "1,1,0"))
                              (rule "pullOutSelect" (formula "3") (term "0,0,0,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0,0"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "castDel" (formula "3") (term "1,0"))
                              (rule "eqSymm" (formula "4") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "6") (term "0,0,1") (inst "selectSK=arr_2"))
                              (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "6"))
                              (rule "simplifySelectOfStore" (formula "6"))
                              (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "6") (term "0,0"))
                              (rule "equalUnique" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "simplifySelectOfStore" (formula "6"))
                              (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "6") (term "0,0"))
                              (rule "eqClose" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "6") (term "0,0"))
                              (rule "eqClose" (formula "6") (term "0,0"))
                              (rule "ifthenelse_true" (formula "6") (term "0"))
                              (rule "castDel" (formula "6") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "6"))
                              (rule "eqClose" (formula "4") (term "0,1"))
                              (rule "concrete_not_1" (formula "4") (term "1"))
                              (rule "concrete_or_4" (formula "4"))
                              (rule "applyEqReverse" (formula "7") (term "0,0,1") (ifseqformula "6"))
                              (rule "eqClose" (formula "7") (term "0,1"))
                              (rule "concrete_not_1" (formula "7") (term "1"))
                              (rule "concrete_or_4" (formula "7"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=address_6"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "3") (term "0,0"))
                              (rule "ifthenelse_false" (formula "3") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "commute_or" (formula "4"))
                              (rule "applyEq_or_int0" (formula "4"))
                              (rule "ifthenelse_split" (formula "5") (term "0"))
                              (branch "self.auctionOwner = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "0,1") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "7") (term "1"))
                                 (rule "concrete_or_4" (formula "7"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "close" (formula "21") (ifseqformula "5"))
                              )
                              (branch "self.auctionOwner = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "20"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "19"))
                                 (rule "concrete_not_2" (formula "4") (term "0"))
                                 (rule "concrete_or_1" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq_or_int0" (formula "3"))
                                 (rule "allLeft" (formula "7") (inst "t=a_0"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (term "0") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "3") (term "0,0"))
                                 (rule "concrete_and_2" (formula "3") (term "0"))
                                 (rule "concrete_or_2" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "allLeft" (formula "16") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "6"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                 (rule "qeq_literals" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "18") (term "1") (ifseqformula "15"))
                                 (rule "allLeft" (formula "3") (inst "t=hb_0"))
                                 (rule "exLeft" (formula "3") (inst "sk=a_1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "eqSymm" (formula "5") (term "0,1"))
                                 (rule "eqSymm" (formula "4") (term "0,0,0"))
                                 (rule "eqSymm" (formula "3") (term "0,0,0"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "pullOutSelect" (formula "5") (term "0,1,0") (inst "selectSK=address_7"))
                                 (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "eqClose" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "eqSymm" (formula "6") (term "0,1"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                                 (rule "pullOutSelect" (formula "4") (term "0,0,0,0") (inst "selectSK=address_8"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "eqClose" (formula "4") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "castDel" (formula "4") (term "1,0"))
                                 (rule "eqSymm" (formula "5") (term "0,0,0"))
                                 (rule "pullOutSelect" (formula "6") (term "2,0") (inst "selectSK=address_9"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "13"))
                                 (rule "ifthenelse_same_branches" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_zero_right" (formula "3") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "7") (term "1,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "5") (term "1,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "7") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_literals" (formula "7") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "5") (term "1,1,1,0") (ifseqformula "6"))
                                 (rule "add_literals" (formula "5") (term "1,1,0"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "pullOutSelect" (formula "6") (term "0,0,1") (inst "selectSK=arr_3"))
                                 (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "5") (term "0,0,1") (ifseqformula "6"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "eqClose" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "0,0"))
                                 (rule "castDel" (formula "6") (term "1,0"))
                                 (rule "intCastEqual" (formula "6") (term "0,0"))
                                 (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "19"))
                                 (rule "ifthenelse_same_branches" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "5") (term "0,1"))
                                 (rule "concrete_not_1" (formula "5") (term "1"))
                                 (rule "concrete_or_4" (formula "5"))
                                 (rule "applyEqReverse" (formula "7") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "7") (term "0,1"))
                                 (rule "concrete_not_1" (formula "7") (term "1"))
                                 (rule "concrete_or_4" (formula "7"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "6"))
                                 (rule "eqClose" (formula "3") (term "0,1"))
                                 (rule "concrete_not_1" (formula "3") (term "1"))
                                 (rule "concrete_or_4" (formula "3"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "pullOutSelect" (formula "4") (term "2,0") (inst "selectSK=address_10"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "pullOutSelect" (formula "5") (term "0,0,0") (inst "selectSK=arr_4"))
                                 (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "6") (term "0,1") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "eqClose" (formula "5") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "intCastEqual" (formula "5") (term "0,0"))
                                 (rule "commute_or" (formula "6"))
                                 (rule "applyEq_or_int0" (formula "6"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "self.auctionOwner = a_1 TRUE"
                                    (rule "applyEqReverse" (formula "7") (term "1,0,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "7") (term "0"))
                                    (rule "concrete_or_2" (formula "7"))
                                    (rule "notLeft" (formula "7"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "4"))
                                    (rule "ifthenelse_true" (formula "5") (term "0"))
                                    (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "5"))
                                    (rule "eqClose" (formula "22"))
                                    (rule "closeTrue" (formula "22"))
                                 )
                                 (branch "self.auctionOwner = a_1 FALSE"
                                    (rule "applyEqReverse" (formula "6") (term "1,0,1") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "6") (term "0,0") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "eqSymm" (formula "5") (term "0,1"))
                                    (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "22"))
                                    (rule "ifthenelse_false" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "5") (term "1,0,1") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "3") (term "0,1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "21"))
                                    (rule "concrete_not_2" (formula "3") (term "0"))
                                    (rule "concrete_or_1" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "applyEq_or_int0" (formula "3"))
                                    (rule "allLeft" (formula "8") (inst "t=a_1"))
                                    (rule "inEqSimp_contradInEq0" (formula "4") (term "1") (ifseqformula "8"))
                                    (rule "qeq_literals" (formula "4") (term "0,1"))
                                    (rule "concrete_and_2" (formula "4") (term "1"))
                                    (rule "concrete_or_4" (formula "4"))
                                    (rule "notLeft" (formula "4"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (term "0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "3") (term "0,0"))
                                    (rule "concrete_and_2" (formula "3") (term "0"))
                                    (rule "concrete_or_2" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "allLeft" (formula "17") (inst "t=a_1"))
                                    (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "6"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "17"))
                                    (rule "leq_literals" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                    (rule "allLeft" (formula "10") (inst "t=a_0"))
                                    (rule "allLeft" (formula "7") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "7") (term "1,0"))
                                    (rule "eqSymm" (formula "7") (term "1"))
                                    (rule "eqSymm" (formula "7") (term "0,0"))
                                    (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "25"))
                                    (rule "concrete_or_4" (formula "7") (term "0"))
                                    (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "17"))
                                    (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "24"))
                                    (rule "concrete_or_4" (formula "7"))
                                    (rule "applyEqRigid" (formula "8") (term "1,0,0,0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "7"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "applyEqRigid" (formula "26") (term "0,0,2,0") (ifseqformula "7"))
                                    (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "26"))
                                    (rule "concrete_or_2" (formula "11"))
                                    (rule "applyEqRigid" (formula "16") (term "0,0,2,0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "9") (term "0,2,0") (ifseqformula "7"))
                                    (rule "close" (formula "23") (ifseqformula "9"))
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: self.balances[(int)(hb_0)] <= 0 FALSE"
                        (rule "concrete_or_4" (formula "8"))
                        (rule "inEqSimp_leqRight" (formula "16"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "1"))
                        (rule "leq_literals" (formula "14") (term "0"))
                        (rule "concrete_or_1" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "allLeft" (formula "12") (inst "t=hb_0"))
                        (rule "exLeft" (formula "12") (inst "sk=i_0"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "eqSymm" (formula "12") (term "0"))
                        (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "9"))
                        (rule "concrete_not_1" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "9"))
                        (rule "concrete_not_1" (formula "12") (term "1"))
                        (rule "concrete_or_4" (formula "12"))
                        (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "9"))
                        (rule "concrete_not_1" (formula "13") (term "0"))
                        (rule "concrete_or_2" (formula "13"))
                        (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "14"))
                        (rule "qeq_literals" (formula "13") (term "0"))
                        (rule "concrete_and_2" (formula "13"))
                        (rule "closeFalse" (formula "13"))
                     )
                  )
                  (branch "msg.sender = self.auctionOwner FALSE"
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,1,0,0,0,0,0,0") (ifseqformula "2"))
                     (rule "mul_literals" (formula "1") (term "1,0,1,1,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "eqClose" (formula "1") (term "0,1,0,0,0,0"))
                     (rule "concrete_not_1" (formula "1") (term "1,0,0,0,0"))
                     (rule "concrete_or_4" (formula "1") (term "0,0,0,0"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,1,0,0,1,0,0,0") (ifseqformula "2"))
                     (rule "times_zero_2" (formula "1") (term "1,0,1,1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,1,1,0,0,1,0,0,0"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "eqClose" (formula "1") (term "0,1,1,0,0"))
                     (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                     (rule "concrete_or_4" (formula "1") (term "1,0,0"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "eqClose" (formula "1") (term "0,1,1,0,0,0"))
                     (rule "concrete_not_1" (formula "1") (term "1,1,0,0,0"))
                     (rule "concrete_or_4" (formula "1") (term "1,0,0,0"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "add_zero_left" (formula "1") (term "1,0,1,0,0,0,0"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "add_zero_left" (formula "1") (term "1,0,1,1,0,0"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "times_zero_2" (formula "1") (term "1,0,1,1,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,1,1,0,1,0,0"))
                     (rule "applyEqReverse" (formula "1") (term "0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "add_zero_left" (formula "1") (term "1,0,1,1,0,0,0"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "7") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                     (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "6"))
                     (rule "leq_literals" (formula "7") (term "1"))
                     (rule "concrete_or_3" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "allLeft" (formula "7") (inst "t=hb_0"))
                     (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "5"))
                     (rule "cut_direct" (formula "7") (term "1"))
                     (branch "CUT: self.balances[(int)(hb_0)] <= 0 TRUE"
                        (rule "concrete_or_3" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "7"))
                        (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "12"))
                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "12"))
                        (rule "leq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEq" (formula "5") (term "1") (ifseqformula "11"))
                        (rule "allLeft" (formula "3") (inst "t=hb_0"))
                        (rule "allLeft" (formula "4") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "12"))
                        (rule "leq_literals" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                        (rule "exLeft" (formula "10") (inst "sk=i_0"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "eqSymm" (formula "10") (term "0"))
                        (rule "cut_direct" (formula "12") (term "1"))
                        (branch "CUT: i_0 <= -1 TRUE"
                           (rule "concrete_or_3" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "12"))
                           (rule "qeq_literals" (formula "11") (term "0,1"))
                           (rule "concrete_and_2" (formula "11") (term "1"))
                           (rule "concrete_or_4" (formula "11"))
                           (rule "notLeft" (formula "11"))
                           (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "17"))
                           (rule "concrete_not_2" (formula "10") (term "1"))
                           (rule "concrete_or_3" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "allLeft" (formula "11") (inst "t=hb_0"))
                           (rule "exLeft" (formula "11") (inst "sk=i_1"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "eqSymm" (formula "11") (term "0"))
                           (rule "cut_direct" (formula "13") (term "1"))
                           (branch "CUT: i_1 <= -1 TRUE"
                              (rule "concrete_or_3" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "13"))
                              (rule "qeq_literals" (formula "12") (term "0,1"))
                              (rule "concrete_and_2" (formula "12") (term "1"))
                              (rule "concrete_or_4" (formula "12"))
                              (rule "notLeft" (formula "12"))
                              (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "18"))
                              (rule "concrete_not_2" (formula "11") (term "1"))
                              (rule "concrete_or_3" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "allLeft" (formula "1") (inst "t=hb_0"))
                              (rule "exLeft" (formula "1") (inst "sk=a_0"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "eqSymm" (formula "1") (term "0,0,0"))
                              (rule "eqSymm" (formula "1") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "3") (term "1,1,1,0") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "1") (term "1,1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "2") (term "1,1,1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "2") (term "1,0,0,0") (ifseqformula "3"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "equalUnique" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "3") (term "0,0"))
                              (rule "ifthenelse_false" (formula "3") (term "0"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0,0"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "castDel" (formula "3") (term "1,0"))
                              (rule "intCastEqual" (formula "3") (term "0,0"))
                              (rule "pullOutSelect" (formula "4") (term "0,1,0") (inst "selectSK=address_4"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "5") (term "0,0,1") (ifseqformula "4"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "eqClose" (formula "4") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                              (rule "equalUnique" (formula "4") (term "0,0,0"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "castDel" (formula "4") (term "1,0"))
                              (rule "eqSymm" (formula "1") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "eqSymm" (formula "5") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "5") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,1,0"))
                              (rule "mul_literals" (formula "5") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                              (rule "pullOutSelect" (formula "2") (term "0,0,0,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                              (rule "eqClose" (formula "2") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "castDel" (formula "2") (term "1,0"))
                              (rule "eqSymm" (formula "3") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "5") (term "2,0") (inst "selectSK=address_6"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "equalUnique" (formula "5") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "12"))
                              (rule "pullOutSelect" (formula "1") (term "0,0,1") (inst "selectSK=arr_2"))
                              (rule "applyEq" (formula "7") (term "0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "simplifySelectOfStore" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                              (rule "eqClose" (formula "1") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                              (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "1") (term "0,0"))
                              (rule "castDel" (formula "1") (term "1,0"))
                              (rule "intCastEqual" (formula "1") (term "0,0"))
                              (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "21"))
                              (rule "ifthenelse_same_branches" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "2") (term "0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "7") (term "0,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "1") (term "0,1"))
                              (rule "eqSymm" (formula "6") (term "0,1"))
                              (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=address_7"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "2") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "2") (term "0,0"))
                              (rule "ifthenelse_false" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "commute_or" (formula "3") (term "0"))
                              (rule "commute_or_2" (formula "1"))
                              (rule "commute_or_2" (formula "6"))
                              (rule "commute_or_2" (formula "3"))
                              (rule "commute_or" (formula "3") (term "0"))
                              (rule "applyEq_or_int1" (formula "3"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch "msg.sender = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "7") (term "0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "1") (term "0,1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "4"))
                                 (rule "ifthenelse_true" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "5") (term "1"))
                                 (rule "mul_literals" (formula "5") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "5") (term "0,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "24"))
                                 (rule "concrete_not_2" (formula "1") (term "0,0"))
                                 (rule "concrete_or_1" (formula "1") (term "0"))
                                 (rule "concrete_or_1" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "1") (term "0,2,0,1,0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,1,0,0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                 (rule "eqSymm" (formula "3") (term "0,0"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "1") (term "0,2,1,0,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "3") (term "0,2,1,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                 (rule "polySimp_sepPosMonomial" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1"))
                                 (rule "mul_literals" (formula "4") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                                 (rule "commute_or_2" (formula "4"))
                                 (rule "commute_or_2" (formula "1"))
                                 (rule "applyEq_or_int3" (formula "4"))
                                 (rule "leq_literals" (formula "4") (term "1,0"))
                                 (rule "concrete_or_4" (formula "4") (term "0"))
                                 (rule "applyEq_or_int5" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "1,1"))
                                 (rule "commute_or_2" (formula "1"))
                                 (rule "commute_or" (formula "1") (term "0"))
                                 (rule "applyEq_or_int2" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_or_2" (formula "1") (term "0"))
                                 (rule "allLeft" (formula "19") (inst "t=a_0"))
                                 (rule "allLeft" (formula "8") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "8"))
                                 (rule "applyEq" (formula "8") (term "0") (ifseqformula "20"))
                                 (rule "leq_literals" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,1,1,1,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,1,1,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,1,1,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,1,1,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,0,0,1,1,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,0,0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,0,0,1,1,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,1,1,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,1,1,1,0,1,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,0,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,0,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,0,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "1") (term "1,0,1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,0,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,1,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "3") (term "0,1,0"))
                                 (rule "add_zero_left" (formula "3") (term "1,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,0,1,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,0,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,0,1,0,1,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,0,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,0,1,0,1,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,0,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,1,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,1,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,1,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,1,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "5") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "19"))
                                 (rule "mul_literals" (formula "5") (term "0,3,0,1,0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "3,0,1,0,1,1,0,0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "hb_0 = a_0 TRUE"
                                    (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "1") (term "0,0,0") (ifseqformula "4"))
                                    (rule "eq_or" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "21"))
                                    (rule "concrete_not_2" (formula "3") (term "1"))
                                    (rule "concrete_or_3" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "applyEq" (formula "16") (term "0,0,2,0") (ifseqformula "2"))
                                    (rule "applyEqRigid" (formula "8") (term "0,2,0") (ifseqformula "2"))
                                    (rule "close" (formula "19") (ifseqformula "8"))
                                 )
                                 (branch "hb_0 = a_0 FALSE"
                                    (rule "applyEqReverse" (formula "1") (term "0,0,0") (ifseqformula "3"))
                                    (rule "eqClose" (formula "1") (term "0,0"))
                                    (rule "concrete_not_1" (formula "1") (term "0"))
                                    (rule "concrete_or_2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "2"))
                                    (rule "eqClose" (formula "3") (term "0,1"))
                                    (rule "concrete_not_1" (formula "3") (term "1"))
                                    (rule "concrete_or_4" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "allLeft" (formula "9") (inst "t=a_0"))
                                    (rule "allLeft" (formula "6") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "6") (term "1"))
                                    (rule "eqSymm" (formula "6") (term "1,0"))
                                    (rule "eqSymm" (formula "6") (term "0,0"))
                                    (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "25"))
                                    (rule "concrete_or_4" (formula "6") (term "0"))
                                    (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "22"))
                                    (rule "concrete_or_2" (formula "6"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "6"))
                                    (rule "close" (formula "21") (ifseqformula "18"))
                                 )
                              )
                              (branch "msg.sender = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "1") (term "0,1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "22"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "0,1,0") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "applyEq_or_int1" (formula "2"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch "msg.sender = hb_0 TRUE"
                                    (rule "applyEqReverse" (formula "2") (term "0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "1") (term "1,1,1") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "2") (term "1,1,1,0") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "5") (term "0,0,1,0") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "5") (term "1,1,1") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "1") (term "0,0,1,0") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "1,1"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "1,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "4") (term "1"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0,0,1"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "3"))
                                    (rule "replace_known_right" (formula "4") (term "0,0,0") (ifseqformula "21"))
                                    (rule "concrete_not_2" (formula "4") (term "0,0"))
                                    (rule "concrete_or_1" (formula "4") (term "0"))
                                    (rule "concrete_or_1" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "0,2,1,0,0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "2") (term "0,2,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "0,2,1,0,1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,0,1") (ifseqformula "3"))
                                    (rule "applyEq" (formula "2") (term "0,0,2,0,1,0,0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "2") (term "0,2,1,0,1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                                    (rule "eqSymm" (formula "23"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,1,1,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,1,0,0"))
                                    (rule "applyEq" (formula "2") (term "1,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,1,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,1,0,0"))
                                    (rule "applyEq" (formula "1") (term "1,0,1") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "1") (term "0,1"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,1,1,1,0,1,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,1,1,1,0,1,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "1") (term "1,0,0,1,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,1,1,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "2") (term "1,0,1,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "2") (term "0,1,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,1,0,1,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,1,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,1,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "1,3,0,1,0,1,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "4") (term "3,0,1,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "17"))
                                    (rule "times_zero_2" (formula "4") (term "0,3,0,1,0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "4") (term "3,0,1,0,1,1,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,1,1,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,0,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,0,1,0,1,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,0,1,0,1,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,0,0,1,1,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,0,0,1,1,0,0"))
                                    (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                                    (rule "eqClose" (formula "2") (term "0,0,0"))
                                    (rule "concrete_not_1" (formula "2") (term "0,0"))
                                    (rule "concrete_or_2" (formula "2") (term "0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,0,0,1,1,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,0,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,0,1,0,1,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,0,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,1,1,1,0,1,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,1,1,1,0,1,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,0,1,0,0,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,0,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,1,1,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "1") (term "0,0,0,1,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                                    (rule "eqClose" (formula "1") (term "0,1,0"))
                                    (rule "concrete_not_1" (formula "1") (term "1,0"))
                                    (rule "concrete_or_4" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "1") (term "0,1,0,1") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "1") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,1"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,0,0,1,0,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,0,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,1,0,1,0,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,1,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,1,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "2") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "2") (term "0,0"))
                                    (rule "applyEq" (formula "4") (term "0,3,0,1,0,1,1,0,0,0") (ifseqformula "17"))
                                    (rule "mul_literals" (formula "4") (term "3,0,1,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "3,0,1,0,1,1,0,0") (ifseqformula "9"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                                    (rule "allLeft" (formula "18") (inst "t=a_0"))
                                    (rule "allLeft" (formula "7") (inst "t=a_0"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "1") (term "0,1"))
                                    (rule "concrete_and_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "1") (term "0,0"))
                                    (rule "concrete_and_2" (formula "1") (term "0"))
                                    (rule "concrete_or_2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "5"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "17"))
                                    (rule "leq_literals" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                    (rule "allLeft" (formula "9") (inst "t=a_0"))
                                    (rule "allLeft" (formula "6") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "6") (term "1,0"))
                                    (rule "eqSymm" (formula "6") (term "1"))
                                    (rule "eqSymm" (formula "6") (term "0,0"))
                                    (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "23"))
                                    (rule "concrete_or_2" (formula "6") (term "0"))
                                    (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "22"))
                                    (rule "concrete_or_2" (formula "6"))
                                    (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "6"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "6"))
                                    (rule "close" (formula "21") (ifseqformula "18"))
                                 )
                                 (branch "msg.sender = hb_0 FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "0,0,0,0") (ifseqformula "3"))
                                    (rule "eqClose" (formula "2") (term "0,0,0"))
                                    (rule "concrete_not_1" (formula "2") (term "0,0"))
                                    (rule "concrete_or_2" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "1") (term "1,1,1") (ifseqformula "3"))
                                    (rule "add_zero_right" (formula "1") (term "1,1"))
                                    (rule "applyEqReverse" (formula "4") (term "1,1,1") (ifseqformula "3"))
                                    (rule "add_literals" (formula "4") (term "1,1"))
                                    (rule "applyEqReverse" (formula "1") (term "0,0,1,0") (ifseqformula "3"))
                                    (rule "eqClose" (formula "1") (term "0,1,0"))
                                    (rule "concrete_not_1" (formula "1") (term "1,0"))
                                    (rule "concrete_or_4" (formula "1") (term "0"))
                                    (rule "applyEqReverse" (formula "4") (term "0,0,1,0") (ifseqformula "3"))
                                    (rule "eqClose" (formula "4") (term "0,1,0"))
                                    (rule "concrete_not_1" (formula "4") (term "1,0"))
                                    (rule "concrete_or_4" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "3"))
                                    (rule "add_zero_right" (formula "2") (term "1,0"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "allLeft" (formula "7") (inst "t=a_0"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "1") (term "0,1"))
                                    (rule "concrete_and_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "1") (term "0,0"))
                                    (rule "concrete_and_2" (formula "1") (term "0"))
                                    (rule "concrete_or_2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "1") (term "0,1"))
                                    (rule "concrete_and_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "allLeft" (formula "16") (inst "t=a_0"))
                                    (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "4"))
                                    (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                    (rule "leq_literals" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEq" (formula "19") (term "1") (ifseqformula "15"))
                                    (rule "allLeft" (formula "1") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                    (rule "replaceKnownSelect_taclet_27" (formula "1") (term "0,0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "1") (term "1,0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "1") (term "0,1,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "1") (term "0,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "1") (term "1,0,1,1,0"))
                                    (rule "eqClose" (formula "1") (term "0,1,1,0"))
                                    (rule "concrete_not_1" (formula "1") (term "1,1,0"))
                                    (rule "concrete_or_4" (formula "1") (term "1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "1") (term "0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "1") (term "1,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet_27" (formula "1") (term "0,0,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_27" (formula "1") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "1") (term "0,1,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "1") (term "1,0,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "1") (term "0,1,0,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "1") (term "1,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "1") (term "0,0,1,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "1") (term "0,0,1,0,0,0"))
                                    (rule "eqClose" (formula "1") (term "0,1,0,0,0"))
                                    (rule "concrete_not_1" (formula "1") (term "1,0,0,0"))
                                    (rule "concrete_or_4" (formula "1") (term "0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "1") (term "0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "1") (term "0,1,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "1") (term "1,0,1,1,0,0"))
                                    (rule "eqClose" (formula "1") (term "0,1,1,0,0"))
                                    (rule "concrete_not_1" (formula "1") (term "1,1,0,0"))
                                    (rule "concrete_or_4" (formula "1") (term "1,0,0"))
                                    (rule "exLeft" (formula "1") (inst "sk=a_1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "eqSymm" (formula "1") (term "0,0"))
                                    (rule "eqSymm" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,1"))
                                    (rule "pullOutSelect" (formula "1") (term "1,0,0") (inst "selectSK=arr_3"))
                                    (rule "applyEq" (formula "2") (term "0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "equalUnique" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "1") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "1") (term "0"))
                                    (rule "simplifySelectOfStore" (formula "1"))
                                    (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                                    (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "eqClose" (formula "1") (term "0,0,0"))
                                    (rule "concrete_and_1" (formula "1") (term "0,0"))
                                    (rule "castDel" (formula "1") (term "1,0"))
                                    (rule "intCastEqual" (formula "1") (term "0,0"))
                                    (rule "pullOutSelect" (formula "2") (term "0,0,0") (inst "selectSK=address_8"))
                                    (rule "simplifySelectOfStore" (formula "2"))
                                    (rule "eqClose" (formula "2") (term "0,0,0,0"))
                                    (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                                    (rule "equalUnique" (formula "2") (term "0,0,0"))
                                    (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "2") (term "0,0"))
                                    (rule "castDel" (formula "2") (term "1,0"))
                                    (rule "eqSymm" (formula "3") (term "0,0"))
                                    (rule "applyEq" (formula "7") (term "0") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=address_9"))
                                    (rule "simplifySelectOfStore" (formula "2"))
                                    (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "2") (term "0,0"))
                                    (rule "equalUnique" (formula "2") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "applyEq_or_int0" (formula "3"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch "msg.sender = a_1 TRUE"
                                       (rule "applyEqReverse" (formula "5") (term "0,1") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "5") (term "1"))
                                       (rule "concrete_or_4" (formula "5"))
                                       (rule "notLeft" (formula "5"))
                                       (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "3") (term "0,1"))
                                       (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                       (rule "ifthenelse_true" (formula "2") (term "0"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "0,2,1,0,0,1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                                       (rule "eqSymm" (formula "27"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "0,0,2,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "2") (term "0,2,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
                                       (rule "polySimp_sepPosMonomial" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "applyEq_or_int4" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,1"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1"))
                                       (rule "add_literals" (formula "2") (term "0,1"))
                                       (rule "leq_literals" (formula "2") (term "1"))
                                       (rule "concrete_or_4" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "allLeft" (formula "4") (inst "t=a_1"))
                                       (rule "allLeft" (formula "17") (inst "t=a_1"))
                                       (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "4"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "17"))
                                       (rule "leq_literals" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,1,1,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,1,1,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,0,0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,0,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,0,1,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,0,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,0,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,0,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,0,1,0,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,0,1,0,1,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,0,1,0,1,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,0,0,1,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,0,0,1,1,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,0,0,1,1,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,0,0,1,0,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,0,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,1,1,1,0,1,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,1,1,1,0,1,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,1,1,1,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,1,1,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,1,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,1,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,1,0,1,0,0,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,1,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "2") (term "0,3,0,1,0,1,1,0,0"))
                                       (rule "add_zero_left" (formula "2") (term "3,0,1,0,1,1,0,0"))
                                       (rule "allLeft" (formula "8") (inst "t=a_0"))
                                       (rule "allLeft" (formula "5") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "5") (term "1"))
                                       (rule "eqSymm" (formula "5") (term "1,0"))
                                       (rule "eqSymm" (formula "5") (term "0,0"))
                                       (rule "replace_known_right" (formula "5") (term "1,0") (ifseqformula "25"))
                                       (rule "concrete_or_4" (formula "5") (term "0"))
                                       (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "23"))
                                       (rule "concrete_or_2" (formula "5"))
                                       (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "5"))
                                       (rule "close" (formula "24") (ifseqformula "17"))
                                    )
                                    (branch "msg.sender = a_1 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "4") (term "0,1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
                                       (rule "ifthenelse_false" (formula "1") (term "0"))
                                       (rule "applyEqReverse" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "eqSymm" (formula "1") (term "0,1"))
                                       (rule "applyEq_or_int0" (formula "1"))
                                       (rule "allLeft" (formula "5") (inst "t=a_1"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "1") (term "0,0"))
                                       (rule "concrete_and_2" (formula "1") (term "0"))
                                       (rule "concrete_or_2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "4"))
                                       (rule "qeq_literals" (formula "1") (term "0,1"))
                                       (rule "concrete_and_2" (formula "1") (term "1"))
                                       (rule "concrete_or_4" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "allLeft" (formula "16") (inst "t=a_1"))
                                       (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "3"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEq" (formula "19") (term "1") (ifseqformula "15"))
                                       (rule "allLeft" (formula "7") (inst "t=a_0"))
                                       (rule "allLeft" (formula "4") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "4") (term "1"))
                                       (rule "eqSymm" (formula "4") (term "0,0"))
                                       (rule "eqSymm" (formula "4") (term "1,0"))
                                       (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "23"))
                                       (rule "concrete_or_2" (formula "4") (term "0"))
                                       (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                                       (rule "concrete_or_2" (formula "4"))
                                       (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "4"))
                                       (rule "close" (formula "24") (ifseqformula "16"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: i_1 <= -1 FALSE"
                              (rule "concrete_or_4" (formula "13"))
                              (rule "notLeft" (formula "13"))
                              (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "18"))
                              (rule "concrete_not_2" (formula "11") (term "1"))
                              (rule "concrete_or_3" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "17"))
                              (rule "concrete_not_2" (formula "11") (term "0"))
                              (rule "concrete_or_1" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "inEqSimp_leqRight" (formula "17"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "allLeft" (formula "2") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                              (rule "replaceKnownSelect_taclet_27" (formula "2") (term "0,0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "2") (term "1,0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "2") (term "0,1,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "2") (term "0,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "1,0,1,1,0"))
                              (rule "eqClose" (formula "2") (term "0,1,1,0"))
                              (rule "concrete_not_1" (formula "2") (term "1,1,0"))
                              (rule "concrete_or_4" (formula "2") (term "1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "2") (term "1,0,1,0,0,0"))
                              (rule "replaceKnownSelect_taclet_27" (formula "2") (term "0,0,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "2") (term "1,0,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "2") (term "0,1,0,1,0,0"))
                              (rule "replaceKnownSelect_taclet_27" (formula "2") (term "0,0,1,0,0,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "2") (term "0,1,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "1,0,1,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "2") (term "0,0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "1,0,1,1,0,0"))
                              (rule "eqClose" (formula "2") (term "0,1,1,0,0"))
                              (rule "concrete_not_1" (formula "2") (term "1,1,0,0"))
                              (rule "concrete_or_4" (formula "2") (term "1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "2") (term "0,0,1,0,0,0"))
                              (rule "eqClose" (formula "2") (term "0,1,0,0,0"))
                              (rule "concrete_not_1" (formula "2") (term "1,0,0,0"))
                              (rule "concrete_or_4" (formula "2") (term "0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "0,1,0,0,0"))
                              (rule "exLeft" (formula "2") (inst "sk=a_0"))
                              (rule "andLeft" (formula "2"))
                              (rule "andLeft" (formula "2"))
                              (rule "eqSymm" (formula "2") (term "0,0"))
                              (rule "eqSymm" (formula "2") (term "0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "1,0,1"))
                              (rule "add_zero_right" (formula "3") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "1,0,1"))
                              (rule "add_zero_right" (formula "2") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1"))
                              (rule "mul_literals" (formula "2") (term "1,1"))
                              (rule "pullOutSelect" (formula "2") (term "0,0,0") (inst "selectSK=address_4"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                              (rule "eqClose" (formula "2") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "castDel" (formula "2") (term "1,0"))
                              (rule "eqSymm" (formula "3") (term "0,0"))
                              (rule "pullOutSelect" (formula "4") (term "0,1") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "4"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "equalUnique" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "4") (term "0,0"))
                              (rule "ifthenelse_false" (formula "4") (term "0"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                              (rule "eqClose" (formula "4") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "castDel" (formula "4") (term "1,0"))
                              (rule "intCastEqual" (formula "4") (term "0,0"))
                              (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "2") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "2") (term "0,0"))
                              (rule "ifthenelse_false" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "commute_or" (formula "3"))
                              (rule "applyEq_or_int0" (formula "3"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch "msg.sender = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "6") (term "1"))
                                 (rule "concrete_or_4" (formula "6"))
                                 (rule "notLeft" (formula "6"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "4"))
                                 (rule "ifthenelse_true" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                 (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0,0,2,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0,2,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0,2,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "polySimp_sepPosMonomial" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                                 (rule "commute_or" (formula "2"))
                                 (rule "applyEq_or_int4" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,1"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,1"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,1"))
                                 (rule "add_literals" (formula "2") (term "0,1"))
                                 (rule "leq_literals" (formula "2") (term "1"))
                                 (rule "concrete_or_4" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "allLeft" (formula "6") (inst "t=a_0"))
                                 (rule "allLeft" (formula "17") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "6"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "16"))
                                 (rule "mul_literals" (formula "3") (term "0,3,0,0,1,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,0,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "16"))
                                 (rule "mul_literals" (formula "3") (term "0,3,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,0,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "16"))
                                 (rule "mul_literals" (formula "3") (term "0,3,0,1,1,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,1,1,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,0,1,0,1,0,0") (ifseqformula "16"))
                                 (rule "times_zero_2" (formula "3") (term "0,3,0,0,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,0,1,0,1,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "16"))
                                 (rule "times_zero_2" (formula "3") (term "0,3,0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,0,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "16"))
                                 (rule "times_zero_2" (formula "3") (term "0,3,0,1,1,1,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,1,1,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "16"))
                                 (rule "times_zero_2" (formula "3") (term "0,3,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,0,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,0,0,1,1,0,0") (ifseqformula "16"))
                                 (rule "mul_literals" (formula "3") (term "0,3,0,0,0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,0,0,1,1,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "16"))
                                 (rule "times_zero_2" (formula "3") (term "0,3,0,1,1,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,1,1,1,0,1,0,0"))
                                 (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "16"))
                                 (rule "times_zero_2" (formula "3") (term "0,3,0,0,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,0,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "16"))
                                 (rule "mul_literals" (formula "3") (term "0,3,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,1,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "16"))
                                 (rule "times_zero_2" (formula "3") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,1,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "16"))
                                 (rule "times_zero_2" (formula "3") (term "0,3,0,1,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,1,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "3") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "16"))
                                 (rule "mul_literals" (formula "3") (term "0,3,0,1,0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "3") (term "3,0,1,0,1,1,0,0"))
                                 (rule "allLeft" (formula "10") (inst "t=a_0"))
                                 (rule "allLeft" (formula "7") (inst "t=a_0"))
                                 (rule "eqSymm" (formula "7") (term "0,0"))
                                 (rule "eqSymm" (formula "7") (term "1,0"))
                                 (rule "eqSymm" (formula "7") (term "1"))
                                 (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "22"))
                                 (rule "concrete_or_4" (formula "7") (term "0"))
                                 (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "21"))
                                 (rule "concrete_or_4" (formula "7"))
                                 (rule "applyEq" (formula "23") (term "0,0,2,0") (ifseqformula "7"))
                                 (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "23"))
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "applyEq" (formula "9") (term "0,2,0") (ifseqformula "7"))
                                 (rule "close" (formula "21") (ifseqformula "9"))
                              )
                              (branch "msg.sender = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "0,1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "20"))
                                 (rule "ifthenelse_false" (formula "2") (term "0"))
                                 (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "2"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "applyEq_or_int0" (formula "2"))
                                 (rule "allLeft" (formula "7") (inst "t=a_0"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_and_2" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "inEqSimp_contradInEq0" (formula "2") (term "1") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "2") (term "0,1"))
                                 (rule "concrete_and_2" (formula "2") (term "1"))
                                 (rule "concrete_or_4" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "allLeft" (formula "16") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "5"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "applyEq" (formula "19") (term "1") (ifseqformula "15"))
                                 (rule "allLeft" (formula "2") (inst "t=hb_0"))
                                 (rule "exLeft" (formula "2") (inst "sk=a_1"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,0,0"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,0,0"))
                                 (rule "pullOutSelect" (formula "4") (term "1,1,1,0") (inst "selectSK=arr_2"))
                                 (rule "applyEq" (formula "3") (term "1,1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "2") (term "1,1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "3") (term "1,0,0,0") (ifseqformula "4"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                                 (rule "eqClose" (formula "4") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "castDel" (formula "4") (term "1,0"))
                                 (rule "intCastEqual" (formula "4") (term "0,0"))
                                 (rule "pullOutSelect" (formula "5") (term "0,1,0") (inst "selectSK=address_6"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0"))
                                 (rule "eqClose" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "eqSymm" (formula "6") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                 (rule "pullOutSelect" (formula "3") (term "0,0,0,0") (inst "selectSK=address_7"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "equalUnique" (formula "3") (term "1,0,0"))
                                 (rule "eqClose" (formula "3") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "3") (term "0,0"))
                                 (rule "castDel" (formula "3") (term "1,0"))
                                 (rule "eqSymm" (formula "4") (term "0,0,0"))
                                 (rule "pullOutSelect" (formula "6") (term "2,0") (inst "selectSK=address_8"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "6") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "6") (term "0"))
                                 (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "13"))
                                 (rule "pullOutSelect" (formula "4") (term "0,0,1") (inst "selectSK=arr_3"))
                                 (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "8") (term "0,0,1") (ifseqformula "4"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "eqClose" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "4") (term "0,0"))
                                 (rule "castDel" (formula "4") (term "1,0"))
                                 (rule "intCastEqual" (formula "4") (term "0,0"))
                                 (rule "applyEq" (formula "4") (term "2,0") (ifseqformula "21"))
                                 (rule "ifthenelse_same_branches" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "2") (term "0,0,1") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "8") (term "0,0,1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "eqSymm" (formula "2") (term "0,1"))
                                 (rule "eqSymm" (formula "7") (term "0,1"))
                                 (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=address_9"))
                                 (rule "simplifySelectOfStore" (formula "3"))
                                 (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0"))
                                 (rule "equalUnique" (formula "3") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "3") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "commute_or" (formula "4") (term "0"))
                                 (rule "commute_or_2" (formula "2"))
                                 (rule "commute_or_2" (formula "7"))
                                 (rule "commute_or_2" (formula "4"))
                                 (rule "commute_or" (formula "4") (term "0"))
                                 (rule "applyEq_or_int1" (formula "4"))
                                 (rule "ifthenelse_split" (formula "5") (term "0"))
                                 (branch "msg.sender = a_1 TRUE"
                                    (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                    (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "6"))
                                    (rule "applyEqReverse" (formula "8") (term "0,1") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "eqSymm" (formula "4") (term "0,1"))
                                    (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "5"))
                                    (rule "ifthenelse_true" (formula "3") (term "0"))
                                    (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                                    (rule "times_zero_2" (formula "6") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "6") (term "0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,0,2,1,0,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,2,0,1,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,2,1,0,0,1") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "30") (term "0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "28") (term "0") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "28"))
                                    (rule "concrete_not_2" (formula "2") (term "0,0"))
                                    (rule "concrete_or_1" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                    (rule "eqSymm" (formula "4") (term "0,0"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                                    (rule "polySimp_sepPosMonomial" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1"))
                                    (rule "mul_literals" (formula "5") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "5"))
                                    (rule "commute_or_2" (formula "2"))
                                    (rule "applyEq_or_int3" (formula "5"))
                                    (rule "leq_literals" (formula "5") (term "1,0"))
                                    (rule "concrete_or_4" (formula "5") (term "0"))
                                    (rule "applyEq_or_int5" (formula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,1"))
                                    (rule "add_literals" (formula "2") (term "1,1,0,1"))
                                    (rule "times_zero_1" (formula "2") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,1"))
                                    (rule "applyEq" (formula "8") (term "0") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "1,1"))
                                    (rule "commute_or_2" (formula "2"))
                                    (rule "commute_or" (formula "2") (term "0"))
                                    (rule "applyEq_or_int2" (formula "2") (term "0"))
                                    (rule "leq_literals" (formula "2") (term "0,0"))
                                    (rule "concrete_or_2" (formula "2") (term "0"))
                                    (rule "allLeft" (formula "8") (inst "t=a_1"))
                                    (rule "allLeft" (formula "20") (inst "t=a_1"))
                                    (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "8"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "applyEq" (formula "8") (term "0") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "mul_literals" (formula "6") (term "0,3,0,0,1,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,0,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "19"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,0,0,1,1,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,0,0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,0,0,1,1,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,0,0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,0,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,0,0,1,0,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,0,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,0,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,0,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "19"))
                                    (rule "mul_literals" (formula "4") (term "0,1,0"))
                                    (rule "add_zero_left" (formula "4") (term "1,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,1,1,1,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,1,1,1,0,1,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,1,1,1,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,1,1,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,1,1,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,1,1,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,0,1,0,1,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,0,1,0,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,0,1,0,1,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,0,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,1,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,1,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,1,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "6") (term "0,3,0,1,0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,1,0,1,1,0,0"))
                                    (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "19"))
                                    (rule "mul_literals" (formula "6") (term "0,3,0,1,0,1,0,0,0,0"))
                                    (rule "add_zero_left" (formula "6") (term "3,0,1,0,1,0,0,0,0"))
                                    (rule "allLeft" (formula "12") (inst "t=a_0"))
                                    (rule "allLeft" (formula "9") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "9") (term "0,0"))
                                    (rule "eqSymm" (formula "9") (term "1"))
                                    (rule "eqSymm" (formula "9") (term "1,0"))
                                    (rule "replace_known_right" (formula "9") (term "1,0") (ifseqformula "24"))
                                    (rule "concrete_or_4" (formula "9") (term "0"))
                                    (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "20"))
                                    (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "25"))
                                    (rule "concrete_or_4" (formula "9"))
                                    (rule "applyEqRigid" (formula "27") (term "0,0,2,0") (ifseqformula "9"))
                                    (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "27"))
                                    (rule "concrete_or_2" (formula "13"))
                                    (rule "applyEqRigid" (formula "19") (term "0,0,2,0") (ifseqformula "9"))
                                    (rule "applyEqRigid" (formula "10") (term "1,0,0,0") (ifseqformula "9"))
                                    (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "9"))
                                    (rule "eqSymm" (formula "4") (term "0,0"))
                                    (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "25"))
                                    (rule "ifthenelse_false" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "4"))
                                    (rule "eqClose" (formula "5") (term "0,1"))
                                    (rule "concrete_not_1" (formula "5") (term "1"))
                                    (rule "concrete_or_4" (formula "5"))
                                    (rule "notLeft" (formula "5"))
                                    (rule "applyEqReverse" (formula "2") (term "0,0,0") (ifseqformula "4"))
                                    (rule "eqClose" (formula "2") (term "0,0"))
                                    (rule "concrete_not_1" (formula "2") (term "0"))
                                    (rule "concrete_or_2" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "applyEqRigid" (formula "8") (term "0,2,0") (ifseqformula "6"))
                                    (rule "close" (formula "23") (ifseqformula "8"))
                                 )
                                 (branch "msg.sender = a_1 FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "7") (term "0,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "23"))
                                    (rule "ifthenelse_false" (formula "3") (term "0"))
                                    (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "eqSymm" (formula "3") (term "0,1"))
                                    (rule "applyEq_or_int1" (formula "3"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "msg.sender = hb_0 TRUE"
                                       (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "6") (term "1,1,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "6") (term "0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "2") (term "1,1,1") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "3") (term "1,1,1,0") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "polySimp_addAssoc" (formula "5") (term "1,1"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "1,1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "1,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "5") (term "1"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0"))
                                       (rule "applyEq" (formula "5") (term "0,2,1,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "0,2,1,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,0,2,0,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "0,0,2,0,1,0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,1,0,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,2,1,0,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "2") (term "0,2,1,0,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "22") (term "0") (ifseqformula "4"))
                                       (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "22"))
                                       (rule "concrete_not_2" (formula "5") (term "0,0"))
                                       (rule "concrete_or_1" (formula "5") (term "0"))
                                       (rule "concrete_or_1" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "27") (term "0") (ifseqformula "4"))
                                       (rule "eqSymm" (formula "27"))
                                       (rule "applyEq" (formula "5") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,1,1,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,0,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "1,0,1,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "3") (term "0,1,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,0,1,0,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,0,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,0,1,0,1,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,0,1,0,1,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,1,1,1,0,1,0,0"))
                                       (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "2") (term "0,1"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,0,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,1,1,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,0,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,0,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,0,0,1,1,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,0,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "1,0,0,1,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,1,0"))
                                       (rule "applyEq" (formula "3") (term "1,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,1,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,1,0,1,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,1,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "1,3,0,1,0,1,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "5") (term "3,0,1,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "0,3,0,1,0,1,1,0,0"))
                                       (rule "add_zero_left" (formula "5") (term "3,0,1,0,1,1,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,0,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,1,1,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,0,1,0,0,0,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,0,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,1,0,1,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "3") (term "1,0,1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,1,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,0,1,0,1,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,0,1,0,1,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,0,0,0") (ifseqformula "17"))
                                       (rule "times_zero_2" (formula "3") (term "0,0,0,0"))
                                       (rule "eqClose" (formula "3") (term "0,0,0"))
                                       (rule "concrete_not_1" (formula "3") (term "0,0"))
                                       (rule "concrete_or_2" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "2") (term "0,1,0,1") (ifseqformula "17"))
                                       (rule "times_zero_2" (formula "2") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "2") (term "0,1"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,0,0,1,0,0,0,0") (ifseqformula "17"))
                                       (rule "times_zero_2" (formula "5") (term "3,0,0,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0,0,1,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1,0"))
                                       (rule "eqClose" (formula "2") (term "0,1,0"))
                                       (rule "concrete_not_1" (formula "2") (term "1,0"))
                                       (rule "concrete_or_4" (formula "2") (term "0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,0,0,1,1,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,0,0,1,1,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,0,0,1,1,0,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,0,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,1,1,1,0,1,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,1,1,1,0,1,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,0,1,0,1,0,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,0,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "17"))
                                       (rule "times_zero_2" (formula "5") (term "3,0,1,1,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,1,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,1,0,1,1,0,0,0") (ifseqformula "17"))
                                       (rule "mul_literals" (formula "5") (term "3,0,1,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "0,3,0,1,0,1,0,0,0,0") (ifseqformula "17"))
                                       (rule "times_zero_2" (formula "5") (term "3,0,1,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "5") (term "3,0,1,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                                       (rule "allLeft" (formula "19") (inst "t=a_1"))
                                       (rule "allLeft" (formula "8") (inst "t=a_1"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (term "1") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "2") (term "0,1"))
                                       (rule "concrete_and_2" (formula "2") (term "1"))
                                       (rule "concrete_or_4" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "2") (term "0,0"))
                                       (rule "concrete_and_2" (formula "2") (term "0"))
                                       (rule "concrete_or_2" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "6"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                                       (rule "qeq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEq" (formula "6") (term "0") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "applyEq" (formula "20") (term "1") (ifseqformula "17"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "15"))
                                       (rule "leq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "allLeft" (formula "9") (inst "t=a_0"))
                                       (rule "allLeft" (formula "6") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "6") (term "0,0"))
                                       (rule "eqSymm" (formula "6") (term "1,0"))
                                       (rule "eqSymm" (formula "6") (term "1"))
                                       (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "24"))
                                       (rule "concrete_or_4" (formula "6") (term "0"))
                                       (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                                       (rule "concrete_or_2" (formula "6"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "6"))
                                       (rule "close" (formula "25") (ifseqformula "17"))
                                    )
                                    (branch "msg.sender = hb_0 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                       (rule "eqClose" (formula "3") (term "0,0,0"))
                                       (rule "concrete_not_1" (formula "3") (term "0,0"))
                                       (rule "concrete_or_2" (formula "3") (term "0"))
                                       (rule "applyEqReverse" (formula "5") (term "0,0,1,0") (ifseqformula "4"))
                                       (rule "eqClose" (formula "5") (term "0,1,0"))
                                       (rule "concrete_not_1" (formula "5") (term "1,0"))
                                       (rule "concrete_or_4" (formula "5") (term "0"))
                                       (rule "applyEqReverse" (formula "2") (term "1,1,1") (ifseqformula "4"))
                                       (rule "add_literals" (formula "2") (term "1,1"))
                                       (rule "applyEqReverse" (formula "5") (term "1,1,1") (ifseqformula "4"))
                                       (rule "add_zero_right" (formula "5") (term "1,1"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0,1,0") (ifseqformula "4"))
                                       (rule "eqClose" (formula "2") (term "0,1,0"))
                                       (rule "concrete_not_1" (formula "2") (term "1,0"))
                                       (rule "concrete_or_4" (formula "2") (term "0"))
                                       (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "4"))
                                       (rule "add_literals" (formula "3") (term "1,0"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "allLeft" (formula "19") (inst "t=a_1"))
                                       (rule "allLeft" (formula "8") (inst "t=a_1"))
                                       (rule "inEqSimp_contradInEq0" (formula "4") (term "1") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "4") (term "0,1"))
                                       (rule "concrete_and_2" (formula "4") (term "1"))
                                       (rule "concrete_or_4" (formula "4"))
                                       (rule "notLeft" (formula "4"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (term "1") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "2") (term "0,1"))
                                       (rule "concrete_and_2" (formula "2") (term "1"))
                                       (rule "concrete_or_4" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "2") (term "0,0"))
                                       (rule "concrete_and_2" (formula "2") (term "0"))
                                       (rule "concrete_or_2" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "5"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "17"))
                                       (rule "leq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                       (rule "allLeft" (formula "9") (inst "t=a_0"))
                                       (rule "allLeft" (formula "6") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "6") (term "1,0"))
                                       (rule "eqSymm" (formula "6") (term "1"))
                                       (rule "eqSymm" (formula "6") (term "0,0"))
                                       (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "26"))
                                       (rule "concrete_or_4" (formula "6") (term "0"))
                                       (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "17"))
                                       (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "27"))
                                       (rule "concrete_or_4" (formula "6"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "6"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "applyEqRigid" (formula "29") (term "0,0,2,0") (ifseqformula "6"))
                                       (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "29"))
                                       (rule "concrete_or_2" (formula "10"))
                                       (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "6"))
                                       (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "6"))
                                       (rule "close" (formula "26") (ifseqformula "8"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "CUT: i_0 <= -1 FALSE"
                           (rule "concrete_or_4" (formula "12"))
                           (rule "notLeft" (formula "12"))
                           (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "17"))
                           (rule "concrete_not_2" (formula "11") (term "0"))
                           (rule "concrete_or_1" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "16"))
                           (rule "concrete_not_2" (formula "10") (term "1"))
                           (rule "concrete_or_3" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "inEqSimp_leqRight" (formula "16"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "allLeft" (formula "11") (inst "t=hb_0"))
                           (rule "exLeft" (formula "11") (inst "sk=i_1"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "eqSymm" (formula "11") (term "0"))
                           (rule "cut_direct" (formula "13") (term "1"))
                           (branch "CUT: i_1 <= -1 TRUE"
                              (rule "concrete_or_3" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "inEqSimp_contradInEq0" (formula "12") (term "1") (ifseqformula "13"))
                              (rule "qeq_literals" (formula "12") (term "0,1"))
                              (rule "concrete_and_2" (formula "12") (term "1"))
                              (rule "concrete_or_4" (formula "12"))
                              (rule "notLeft" (formula "12"))
                              (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "18"))
                              (rule "concrete_not_2" (formula "11") (term "1"))
                              (rule "concrete_or_3" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "allLeft" (formula "2") (inst "t=hb_0"))
                              (rule "exLeft" (formula "2") (inst "sk=a_0"))
                              (rule "andLeft" (formula "2"))
                              (rule "andLeft" (formula "2"))
                              (rule "eqSymm" (formula "4") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "0,0,0"))
                              (rule "eqSymm" (formula "2") (term "0,0,0"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "pullOutSelect" (formula "4") (term "1,1,1,0") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "2") (term "1,1,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "3") (term "1,1,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "3") (term "1,0,0,0") (ifseqformula "4"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "equalUnique" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "4") (term "0,0"))
                              (rule "ifthenelse_false" (formula "4") (term "0"))
                              (rule "simplifySelectOfStore" (formula "4"))
                              (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                              (rule "eqClose" (formula "4") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "4") (term "0,0,0"))
                              (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "4") (term "0,0"))
                              (rule "castDel" (formula "4") (term "1,0"))
                              (rule "intCastEqual" (formula "4") (term "0,0"))
                              (rule "pullOutSelect" (formula "5") (term "0,1,0") (inst "selectSK=address_4"))
                              (rule "applyEq" (formula "2") (term "0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "5"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (rule "eqClose" (formula "5") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                              (rule "equalUnique" (formula "5") (term "0,0,0"))
                              (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "castDel" (formula "5") (term "1,0"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "eqSymm" (formula "3") (term "0,1"))
                              (rule "eqSymm" (formula "6") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "6") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "6") (term "1,1,0"))
                              (rule "mul_literals" (formula "6") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "19"))
                              (rule "leq_literals" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                              (rule "pullOutSelect" (formula "3") (term "0,0,0,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0,0"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "castDel" (formula "3") (term "1,0"))
                              (rule "eqSymm" (formula "4") (term "0,0,0"))
                              (rule "pullOutSelect" (formula "6") (term "2,0") (inst "selectSK=address_6"))
                              (rule "simplifySelectOfStore" (formula "6"))
                              (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "6") (term "0,0"))
                              (rule "equalUnique" (formula "6") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "6") (term "0,0"))
                              (rule "ifthenelse_false" (formula "6") (term "0"))
                              (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "applyEq" (formula "6") (term "2,0") (ifseqformula "12"))
                              (rule "pullOutSelect" (formula "2") (term "0,0,1") (inst "selectSK=arr_2"))
                              (rule "applyEq" (formula "5") (term "0,0,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "8") (term "0,0,1") (ifseqformula "2"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "equalUnique" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "2") (term "0,0"))
                              (rule "ifthenelse_false" (formula "2") (term "0"))
                              (rule "simplifySelectOfStore" (formula "2"))
                              (rule "eqClose" (formula "2") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                              (rule "equalUnique" (formula "2") (term "0,0,0"))
                              (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0"))
                              (rule "castDel" (formula "2") (term "1,0"))
                              (rule "intCastEqual" (formula "2") (term "0,0"))
                              (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "20"))
                              (rule "ifthenelse_same_branches" (formula "2") (term "0"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "8") (term "0,0,1") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "eqSymm" (formula "2") (term "0,1"))
                              (rule "eqSymm" (formula "4") (term "0,1"))
                              (rule "eqSymm" (formula "7") (term "0,1"))
                              (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=address_7"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "3") (term "0,0"))
                              (rule "ifthenelse_false" (formula "3") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "commute_or" (formula "4") (term "0"))
                              (rule "commute_or_2" (formula "2"))
                              (rule "commute_or_2" (formula "7"))
                              (rule "commute_or_2" (formula "4"))
                              (rule "commute_or" (formula "4") (term "0"))
                              (rule "applyEq_or_int1" (formula "4"))
                              (rule "ifthenelse_split" (formula "5") (term "0"))
                              (branch "msg.sender = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                 (rule "applyEqReverse" (formula "8") (term "0,1") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "5"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "2") (term "0,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                                 (rule "times_zero_2" (formula "6") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "6") (term "0,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0"))
                                 (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
                                 (rule "applyEq" (formula "7") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,1,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                 (rule "eqSymm" (formula "5") (term "0,0"))
                                 (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "4"))
                                 (rule "eqSymm" (formula "23"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "23"))
                                 (rule "concrete_not_2" (formula "2") (term "0,0"))
                                 (rule "concrete_or_1" (formula "2") (term "0"))
                                 (rule "concrete_or_1" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0,2,1,0,0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0,2,0,1,0,1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0,0,2,1,0,0,1,0") (ifseqformula "3"))
                                 (rule "polySimp_sepPosMonomial" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1"))
                                 (rule "mul_literals" (formula "5") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                                 (rule "commute_or_2" (formula "5"))
                                 (rule "commute_or_2" (formula "2"))
                                 (rule "applyEq_or_int3" (formula "5"))
                                 (rule "leq_literals" (formula "5") (term "1,0"))
                                 (rule "concrete_or_4" (formula "5") (term "0"))
                                 (rule "applyEq_or_int5" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,1"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,1"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,1"))
                                 (rule "add_zero_right" (formula "2") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "1,1"))
                                 (rule "commute_or_2" (formula "2"))
                                 (rule "commute_or" (formula "2") (term "0"))
                                 (rule "applyEq_or_int2" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2") (term "0,0"))
                                 (rule "concrete_or_2" (formula "2") (term "0"))
                                 (rule "allLeft" (formula "18") (inst "t=a_0"))
                                 (rule "allLeft" (formula "8") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "8"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEq" (formula "8") (term "0") (ifseqformula "19"))
                                 (rule "leq_literals" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,1,1,1,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,1,1,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "18"))
                                 (rule "times_zero_2" (formula "6") (term "0,3,0,1,1,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,1,1,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,0,0,1,1,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,0,0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,0,0,1,1,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,0,1,0,1,0,0") (ifseqformula "18"))
                                 (rule "times_zero_2" (formula "6") (term "0,3,0,0,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,0,1,0,1,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,0,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "18"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,0,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,0,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,0,1,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,0,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,1,1,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,1,1,1,0,1,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,0,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,0,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0"))
                                 (rule "add_zero_left" (formula "4") (term "1,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,1,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,1,0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,1,0,1,1,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "18"))
                                 (rule "mul_literals" (formula "6") (term "0,3,0,1,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,1,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "18"))
                                 (rule "times_zero_2" (formula "6") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "3,0,1,0,0,0,1,0,0,0"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "hb_0 = a_0 TRUE"
                                    (rule "applyEqReverse" (formula "6") (term "0,0,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "2") (term "0,0,0") (ifseqformula "5"))
                                    (rule "eq_or" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_right" (formula "4") (term "0,1") (ifseqformula "20"))
                                    (rule "concrete_not_2" (formula "4") (term "1"))
                                    (rule "concrete_or_3" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEq" (formula "15") (term "0,0,2,0") (ifseqformula "3"))
                                    (rule "applyEqRigid" (formula "7") (term "1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "3"))
                                    (rule "close" (formula "18") (ifseqformula "8"))
                                 )
                                 (branch "hb_0 = a_0 FALSE"
                                    (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "4"))
                                    (rule "eqClose" (formula "5") (term "0,1"))
                                    (rule "concrete_not_1" (formula "5") (term "1"))
                                    (rule "concrete_or_4" (formula "5"))
                                    (rule "notLeft" (formula "5"))
                                    (rule "applyEqReverse" (formula "2") (term "0,0,0") (ifseqformula "4"))
                                    (rule "eqClose" (formula "2") (term "0,0"))
                                    (rule "concrete_not_1" (formula "2") (term "0"))
                                    (rule "concrete_or_2" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "allLeft" (formula "9") (inst "t=a_0"))
                                    (rule "allLeft" (formula "6") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "6") (term "1"))
                                    (rule "eqSymm" (formula "6") (term "1,0"))
                                    (rule "eqSymm" (formula "6") (term "0,0"))
                                    (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "24"))
                                    (rule "concrete_or_4" (formula "6") (term "0"))
                                    (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "21"))
                                    (rule "concrete_or_2" (formula "6"))
                                    (rule "applyEq" (formula "3") (term "3,0,0,0,1,1,0,0,0") (ifseqformula "6"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "6"))
                                    (rule "close" (formula "20") (ifseqformula "17"))
                                 )
                              )
                              (branch "msg.sender = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "7") (term "0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "21"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "0,1,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "applyEq_or_int1" (formula "3"))
                                 (rule "ifthenelse_split" (formula "4") (term "0"))
                                 (branch "msg.sender = hb_0 TRUE"
                                    (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "2") (term "1,1,1") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "2") (term "0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "6") (term "0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "3") (term "1,1,1,0") (ifseqformula "5"))
                                    (rule "applyEqReverse" (formula "6") (term "1,1,1") (ifseqformula "5"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "polySimp_addAssoc" (formula "2") (term "1,1"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "1,1,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "1,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0,0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0"))
                                    (rule "inEqSimp_homoInEq1" (formula "5") (term "1"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0,0,1"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "2") (term "0,2,1,0,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "4"))
                                    (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "20"))
                                    (rule "concrete_not_2" (formula "5") (term "0,0"))
                                    (rule "concrete_or_1" (formula "5") (term "0"))
                                    (rule "concrete_or_1" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "2") (term "0,2,1,0,1") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "2") (term "0,0,2,0,1,0,0,1") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,2,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,2,1,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,0,2,0,1,0,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,1,1,1,0,1,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,1,1,1,0,1,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,1,0,1,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,0,1,0,1,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,0,1,1,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,0,0,1,1,0,0"))
                                    (rule "applyEq" (formula "2") (term "1,0,0,1,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "2") (term "0,0,1,0"))
                                    (rule "applyEq" (formula "3") (term "1,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,1,1,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "3") (term "1,0,1,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "3") (term "0,1,0"))
                                    (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "2") (term "0,1"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,1,0,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,0,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,1,1,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,0,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,0,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,0,1,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,0,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,0,1,0,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,0,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,1,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,1,0,1,1,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,1,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,1,0,1,0,0,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,1,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "1,3,0,1,0,1,1,0,0") (ifseqformula "9"))
                                    (rule "add_zero_right" (formula "5") (term "3,0,1,0,1,1,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,1,1,1,0,1,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,1,1,1,0,1,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,0,1,0,1,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,0,1,0,1,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,0,0,1,1,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,0,0,1,1,0,0"))
                                    (rule "applyEq" (formula "3") (term "0,0,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                                    (rule "eqClose" (formula "3") (term "0,0,0"))
                                    (rule "concrete_not_1" (formula "3") (term "0,0"))
                                    (rule "concrete_or_2" (formula "3") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,0,0,1,0,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,0,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "2") (term "0,0,0,1,0") (ifseqformula "16"))
                                    (rule "times_zero_2" (formula "2") (term "0,0,1,0"))
                                    (rule "eqClose" (formula "2") (term "0,1,0"))
                                    (rule "concrete_not_1" (formula "2") (term "1,0"))
                                    (rule "concrete_or_4" (formula "2") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,0,0,1,1,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,0,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,0,1,0,1,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,0,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,0,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,0,1,0,0,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,0,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,1,1,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "2") (term "0,1,0,1") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "2") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,1"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,1,1,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,1,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,1,0,1,1,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,1,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "3") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "3") (term "0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,1,0,1,0,0,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,1,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,3,0,1,0,1,1,0,0") (ifseqformula "16"))
                                    (rule "mul_literals" (formula "5") (term "3,0,1,0,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                                    (rule "allLeft" (formula "17") (inst "t=a_0"))
                                    (rule "allLeft" (formula "7") (inst "t=a_0"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (term "0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "3") (term "0,0"))
                                    (rule "concrete_and_2" (formula "3") (term "0"))
                                    (rule "concrete_or_2" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (term "1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "2") (term "0,1"))
                                    (rule "concrete_and_2" (formula "2") (term "1"))
                                    (rule "concrete_or_4" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "5"))
                                    (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
                                    (rule "leq_literals" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEq" (formula "19") (term "1") (ifseqformula "15"))
                                    (rule "allLeft" (formula "9") (inst "t=a_0"))
                                    (rule "allLeft" (formula "6") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "6") (term "1,0"))
                                    (rule "eqSymm" (formula "6") (term "0,0"))
                                    (rule "eqSymm" (formula "6") (term "1"))
                                    (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "22"))
                                    (rule "concrete_or_2" (formula "6") (term "0"))
                                    (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "20"))
                                    (rule "concrete_or_2" (formula "6"))
                                    (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "6"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "6"))
                                    (rule "close" (formula "21") (ifseqformula "17"))
                                 )
                                 (branch "msg.sender = hb_0 FALSE"
                                    (rule "applyEqReverse" (formula "2") (term "1,1,1") (ifseqformula "4"))
                                    (rule "add_zero_right" (formula "2") (term "1,1"))
                                    (rule "applyEqReverse" (formula "2") (term "0,0,1,0") (ifseqformula "4"))
                                    (rule "eqClose" (formula "2") (term "0,1,0"))
                                    (rule "concrete_not_1" (formula "2") (term "1,0"))
                                    (rule "concrete_or_4" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "1,1,1,0") (ifseqformula "4"))
                                    (rule "add_literals" (formula "3") (term "1,1,0"))
                                    (rule "applyEqReverse" (formula "5") (term "0,0,1,0") (ifseqformula "4"))
                                    (rule "eqClose" (formula "5") (term "0,1,0"))
                                    (rule "concrete_not_1" (formula "5") (term "1,0"))
                                    (rule "concrete_or_4" (formula "5") (term "0"))
                                    (rule "applyEqReverse" (formula "5") (term "1,1,1") (ifseqformula "4"))
                                    (rule "add_literals" (formula "5") (term "1,1"))
                                    (rule "applyEqReverse" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                    (rule "eqClose" (formula "3") (term "0,0,0"))
                                    (rule "concrete_not_1" (formula "3") (term "0,0"))
                                    (rule "concrete_or_2" (formula "3") (term "0"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "allLeft" (formula "17") (inst "t=a_0"))
                                    (rule "allLeft" (formula "7") (inst "t=a_0"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (term "0") (ifseqformula "7"))
                                    (rule "qeq_literals" (formula "3") (term "0,0"))
                                    (rule "concrete_and_2" (formula "3") (term "0"))
                                    (rule "concrete_or_2" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "3") (term "0,1"))
                                    (rule "concrete_and_2" (formula "3") (term "1"))
                                    (rule "concrete_or_4" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (term "1") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "2") (term "0,1"))
                                    (rule "concrete_and_2" (formula "2") (term "1"))
                                    (rule "concrete_or_4" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "4"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "15"))
                                    (rule "leq_literals" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                                    (rule "qeq_literals" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "applyEq" (formula "19") (term "1") (ifseqformula "14"))
                                    (rule "allLeft" (formula "2") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "2") (term "1,0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_27" (formula "2") (term "0,0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "2") (term "0,1,0,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "1,0,1,1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "2") (term "0,0,1,1,0"))
                                    (rule "eqClose" (formula "2") (term "0,1,1,0"))
                                    (rule "concrete_not_1" (formula "2") (term "1,1,0"))
                                    (rule "concrete_or_4" (formula "2") (term "1,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "0,1,1,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "2") (term "1,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "2") (term "0,1,0,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_27" (formula "2") (term "0,0,1,0,0,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "2") (term "0,1,0,0,0,0"))
                                    (rule "replaceKnownSelect_taclet_27" (formula "2") (term "0,0,1,1,0,0"))
                                    (rule "replaceKnownSelect_taclet_26" (formula "2") (term "1,0,1,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "1,0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "0,1,0,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "2") (term "0,0,1,0,0,0"))
                                    (rule "eqClose" (formula "2") (term "0,1,0,0,0"))
                                    (rule "concrete_not_1" (formula "2") (term "1,0,0,0"))
                                    (rule "concrete_or_4" (formula "2") (term "0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "0,1,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "2") (term "0,0,1,1,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "2") (term "1,0,1,1,0,0"))
                                    (rule "eqClose" (formula "2") (term "0,1,1,0,0"))
                                    (rule "concrete_not_1" (formula "2") (term "1,1,0,0"))
                                    (rule "concrete_or_4" (formula "2") (term "1,0,0"))
                                    (rule "exLeft" (formula "2") (inst "sk=a_1"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "eqSymm" (formula "2") (term "0,0"))
                                    (rule "eqSymm" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "3") (term "0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "2") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "1,1"))
                                    (rule "pullOutSelect" (formula "2") (term "0,0,0") (inst "selectSK=address_8"))
                                    (rule "simplifySelectOfStore" (formula "2"))
                                    (rule "equalUnique" (formula "2") (term "1,0,0,0"))
                                    (rule "eqClose" (formula "2") (term "0,0,0,0"))
                                    (rule "concrete_and_1" (formula "2") (term "0,0,0"))
                                    (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "2") (term "0,0"))
                                    (rule "castDel" (formula "2") (term "1,0"))
                                    (rule "eqSymm" (formula "3") (term "0,0"))
                                    (rule "pullOutSelect" (formula "4") (term "0,1") (inst "selectSK=arr_3"))
                                    (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "4"))
                                    (rule "simplifySelectOfStore" (formula "4"))
                                    (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "4") (term "0,0"))
                                    (rule "equalUnique" (formula "4") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "4") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "4") (term "0"))
                                    (rule "simplifySelectOfStore" (formula "4"))
                                    (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "4") (term "0,0"))
                                    (rule "eqClose" (formula "4") (term "0,0,0"))
                                    (rule "concrete_and_1" (formula "4") (term "0,0"))
                                    (rule "equalUnique" (formula "4") (term "0,0"))
                                    (rule "castDel" (formula "4") (term "1,0"))
                                    (rule "intCastEqual" (formula "4") (term "0,0"))
                                    (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=address_9"))
                                    (rule "simplifySelectOfStore" (formula "2"))
                                    (rule "equalUnique" (formula "2") (term "0,1,0,0"))
                                    (rule "concrete_not_2" (formula "2") (term "1,0,0"))
                                    (rule "concrete_and_3" (formula "2") (term "0,0"))
                                    (rule "equalUnique" (formula "2") (term "1,0,0"))
                                    (rule "concrete_and_4" (formula "2") (term "0,0"))
                                    (rule "ifthenelse_false" (formula "2") (term "0"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "applyEq_or_int0" (formula "3"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "msg.sender = a_1 TRUE"
                                       (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "6") (term "1"))
                                       (rule "concrete_or_4" (formula "6"))
                                       (rule "notLeft" (formula "6"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "eqSymm" (formula "3") (term "0,1"))
                                       (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "4"))
                                       (rule "ifthenelse_true" (formula "2") (term "0"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "applyEq" (formula "2") (term "0,2,1,0,0,1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "2") (term "0,0,2,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "27") (term "0") (ifseqformula "3"))
                                       (rule "eqSymm" (formula "27"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "28") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "2") (term "0,2,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "4") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                                       (rule "polySimp_sepPosMonomial" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "applyEq_or_int4" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,1"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,1"))
                                       (rule "add_literals" (formula "2") (term "0,1"))
                                       (rule "leq_literals" (formula "2") (term "1"))
                                       (rule "concrete_or_4" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "allLeft" (formula "16") (inst "t=a_1"))
                                       (rule "allLeft" (formula "5") (inst "t=a_1"))
                                       (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "5"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "17"))
                                       (rule "leq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,0,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,0,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,0,1,0,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,0,1,0,1,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,0,1,0,1,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,0,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,0,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,1,1,1,0,1,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,1,1,1,0,1,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,1,1,1,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,1,1,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,0,0,1,0,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,0,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,1,1,1,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,1,1,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,0,0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,0,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "19") (term "1") (ifseqformula "16"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,0,0,1,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,0,0,1,1,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,0,0,1,1,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,0,1,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,0,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,1,0,1,1,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,1,0,1,1,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,1,0,1,0,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,1,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,1,0,1,1,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,1,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "3") (term "3,0,1,0,0,0,1,0,0,0"))
                                       (rule "allLeft" (formula "9") (inst "t=a_0"))
                                       (rule "allLeft" (formula "6") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "6") (term "1,0"))
                                       (rule "eqSymm" (formula "6") (term "0,0"))
                                       (rule "eqSymm" (formula "6") (term "1"))
                                       (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "24"))
                                       (rule "concrete_or_2" (formula "6") (term "0"))
                                       (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "23"))
                                       (rule "concrete_or_2" (formula "6"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "6"))
                                       (rule "close" (formula "25") (ifseqformula "17"))
                                    )
                                    (branch "msg.sender = a_1 FALSE"
                                       (rule "applyEqReverse" (formula "5") (term "0,1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "20"))
                                       (rule "ifthenelse_false" (formula "2") (term "0"))
                                       (rule "applyEqReverse" (formula "3") (term "1,0,1") (ifseqformula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "2") (term "0,1"))
                                       (rule "applyEq_or_int0" (formula "2"))
                                       (rule "allLeft" (formula "6") (inst "t=a_1"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "3") (term "0,1"))
                                       (rule "concrete_and_2" (formula "3") (term "1"))
                                       (rule "concrete_or_4" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (term "0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "2") (term "0,0"))
                                       (rule "concrete_and_2" (formula "2") (term "0"))
                                       (rule "concrete_or_2" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "allLeft" (formula "16") (inst "t=a_1"))
                                       (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "4"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "applyEq" (formula "18") (term "1") (ifseqformula "15"))
                                       (rule "allLeft" (formula "8") (inst "t=a_0"))
                                       (rule "allLeft" (formula "5") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "5") (term "1"))
                                       (rule "eqSymm" (formula "5") (term "1,0"))
                                       (rule "eqSymm" (formula "5") (term "0,0"))
                                       (rule "replace_known_right" (formula "5") (term "1,0") (ifseqformula "23"))
                                       (rule "concrete_or_4" (formula "5") (term "0"))
                                       (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "24"))
                                       (rule "concrete_or_2" (formula "5"))
                                       (rule "applyEq" (formula "25") (term "0") (ifseqformula "5"))
                                       (rule "close" (formula "25") (ifseqformula "16"))
                                    )
                                 )
                              )
                           )
                           (branch "CUT: i_1 <= -1 FALSE"
                              (rule "concrete_or_4" (formula "13"))
                              (rule "notLeft" (formula "13"))
                              (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "18"))
                              (rule "concrete_not_2" (formula "12") (term "0"))
                              (rule "concrete_or_1" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "replace_known_right" (formula "11") (term "0,1") (ifseqformula "17"))
                              (rule "concrete_not_2" (formula "11") (term "1"))
                              (rule "concrete_or_3" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "inEqSimp_leqRight" (formula "17"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "allLeft" (formula "3") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                              (rule "replaceKnownSelect_taclet_27" (formula "3") (term "0,0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "3") (term "1,0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "3") (term "0,1,0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "3") (term "0,0,1,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "3") (term "1,0,1,1,0"))
                              (rule "eqClose" (formula "3") (term "0,1,1,0"))
                              (rule "concrete_not_1" (formula "3") (term "1,1,0"))
                              (rule "concrete_or_4" (formula "3") (term "1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "3") (term "0,1,1,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "3") (term "0,1,0,1,0,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "3") (term "0,1,0,0,0,0"))
                              (rule "replaceKnownSelect_taclet_27" (formula "3") (term "0,0,1,1,0,0"))
                              (rule "replaceKnownSelect_taclet_27" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "replaceKnownSelect_taclet_26" (formula "3") (term "1,0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "3") (term "0,1,0,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "3") (term "0,1,0,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "3") (term "0,0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet_29" (formula "3") (term "0,0,1,0,0,0"))
                              (rule "eqClose" (formula "3") (term "0,1,0,0,0"))
                              (rule "concrete_not_1" (formula "3") (term "1,0,0,0"))
                              (rule "concrete_or_4" (formula "3") (term "0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1120000_35" (formula "3") (term "1,0,1,1,0,0"))
                              (rule "eqClose" (formula "3") (term "0,1,1,0,0"))
                              (rule "concrete_not_1" (formula "3") (term "1,1,0,0"))
                              (rule "concrete_or_4" (formula "3") (term "1,0,0"))
                              (rule "exLeft" (formula "3") (inst "sk=a_0"))
                              (rule "andLeft" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "eqSymm" (formula "3") (term "0,0"))
                              (rule "eqSymm" (formula "3") (term "0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "1,0,1"))
                              (rule "add_zero_right" (formula "4") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "1,0,1"))
                              (rule "add_zero_right" (formula "3") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "1,1"))
                              (rule "pullOutSelect" (formula "3") (term "0,0,0") (inst "selectSK=address_4"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                              (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "3") (term "0,0"))
                              (rule "eqClose" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0,0"))
                              (rule "castDel" (formula "3") (term "1,0"))
                              (rule "eqSymm" (formula "4") (term "0,0"))
                              (rule "applyEq" (formula "8") (term "0") (ifseqformula "17"))
                              (rule "leq_literals" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "pullOutSelect" (formula "5") (term "0,1") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "5"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "5"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "equalUnique" (formula "5") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "5") (term "0,0"))
                              (rule "ifthenelse_false" (formula "5") (term "0"))
                              (rule "simplifySelectOfStore" (formula "5"))
                              (rule "eqClose" (formula "5") (term "0,0,0,0"))
                              (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                              (rule "equalUnique" (formula "5") (term "0,0,0"))
                              (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                              (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                              (rule "concrete_and_3" (formula "5") (term "0,0"))
                              (rule "castDel" (formula "5") (term "1,0"))
                              (rule "intCastEqual" (formula "5") (term "0,0"))
                              (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=address_5"))
                              (rule "simplifySelectOfStore" (formula "3"))
                              (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                              (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                              (rule "concrete_and_2" (formula "3") (term "0,0"))
                              (rule "ifthenelse_false" (formula "3") (term "0"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "commute_or" (formula "4"))
                              (rule "applyEq_or_int0" (formula "4"))
                              (rule "ifthenelse_split" (formula "5") (term "0"))
                              (branch "msg.sender = a_0 TRUE"
                                 (rule "applyEqReverse" (formula "7") (term "0,1") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "7") (term "1"))
                                 (rule "concrete_or_4" (formula "7"))
                                 (rule "notLeft" (formula "7"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "5"))
                                 (rule "ifthenelse_true" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                 (rule "applyEq" (formula "3") (term "0,2,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "3") (term "0,0,2,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "4"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "3") (term "0,2,1,0,0,1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "applyEq" (formula "5") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                 (rule "polySimp_sepPosMonomial" (formula "3") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "applyEq_or_int4" (formula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "3") (term "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,1"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,1"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,1"))
                                 (rule "add_literals" (formula "3") (term "0,1"))
                                 (rule "leq_literals" (formula "3") (term "1"))
                                 (rule "concrete_or_4" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "allLeft" (formula "6") (inst "t=a_0"))
                                 (rule "allLeft" (formula "16") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "6"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,0,1,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,0,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "18") (term "1") (ifseqformula "15"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,0,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,0,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,1,1,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,1,1,1,0,1,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,1,1,1,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,1,1,1,0,1,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,1,1,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,1,1,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,0,1,0,1,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,0,1,0,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,0,1,0,1,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,0,1,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,0,1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,0,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,0,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,0,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,0,0,1,1,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,0,0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,0,0,1,1,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,1,0,0,0,1,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,1,0,1,1,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,1,0,1,1,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,1,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,1,0,1,0,0,0,0"))
                                 (rule "applyEq" (formula "4") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "4") (term "0,3,0,1,0,1,1,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "3,0,1,0,1,1,0,0"))
                                 (rule "allLeft" (formula "10") (inst "t=a_0"))
                                 (rule "allLeft" (formula "7") (inst "t=a_0"))
                                 (rule "eqSymm" (formula "7") (term "1"))
                                 (rule "eqSymm" (formula "7") (term "1,0"))
                                 (rule "eqSymm" (formula "7") (term "0,0"))
                                 (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "21"))
                                 (rule "concrete_or_4" (formula "7") (term "0"))
                                 (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "20"))
                                 (rule "concrete_or_4" (formula "7"))
                                 (rule "applyEq" (formula "22") (term "0,0,2,0") (ifseqformula "7"))
                                 (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "22"))
                                 (rule "concrete_or_2" (formula "11"))
                                 (rule "applyEqRigid" (formula "9") (term "0,2,0") (ifseqformula "7"))
                                 (rule "close" (formula "20") (ifseqformula "9"))
                              )
                              (branch "msg.sender = a_0 FALSE"
                                 (rule "applyEqReverse" (formula "6") (term "0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0,1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "19"))
                                 (rule "ifthenelse_false" (formula "3") (term "0"))
                                 (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "1,0,1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "applyEq_or_int0" (formula "3"))
                                 (rule "allLeft" (formula "7") (inst "t=a_0"))
                                 (rule "inEqSimp_contradInEq0" (formula "4") (term "1") (ifseqformula "7"))
                                 (rule "qeq_literals" (formula "4") (term "0,1"))
                                 (rule "concrete_and_2" (formula "4") (term "1"))
                                 (rule "concrete_or_4" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "inEqSimp_contradInEq0" (formula "3") (term "0") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "3") (term "0,0"))
                                 (rule "concrete_and_2" (formula "3") (term "0"))
                                 (rule "concrete_or_2" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "allLeft" (formula "15") (inst "t=a_0"))
                                 (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "5"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "15"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "applyEq" (formula "17") (term "1") (ifseqformula "14"))
                                 (rule "allLeft" (formula "3") (inst "t=hb_0"))
                                 (rule "exLeft" (formula "3") (inst "sk=a_1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "eqSymm" (formula "5") (term "0,1"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,0,0"))
                                 (rule "eqSymm" (formula "4") (term "0,0,0"))
                                 (rule "pullOutSelect" (formula "5") (term "1,1,1,0") (inst "selectSK=arr_2"))
                                 (rule "applyEq" (formula "4") (term "1,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "3") (term "1,1,1,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "4") (term "1,0,0,0") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "eqClose" (formula "5") (term "0,0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "intCastEqual" (formula "5") (term "0,0"))
                                 (rule "pullOutSelect" (formula "6") (term "0,1,0") (inst "selectSK=address_6"))
                                 (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "7") (term "0,0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "6"))
                                 (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "6"))
                                 (rule "simplifySelectOfStore" (formula "6"))
                                 (rule "equalUnique" (formula "6") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "6") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "6") (term "0,0"))
                                 (rule "equalUnique" (formula "6") (term "1,0,0"))
                                 (rule "eqClose" (formula "6") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "6") (term "0,0"))
                                 (rule "castDel" (formula "6") (term "1,0"))
                                 (rule "eqSymm" (formula "4") (term "0,1"))
                                 (rule "eqSymm" (formula "7") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "7") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "4") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "7") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "7") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0"))
                                 (rule "pullOutSelect" (formula "4") (term "0,0,0,0") (inst "selectSK=address_7"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "eqClose" (formula "4") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "4") (term "0,0"))
                                 (rule "castDel" (formula "4") (term "1,0"))
                                 (rule "eqSymm" (formula "5") (term "0,0,0"))
                                 (rule "pullOutSelect" (formula "7") (term "2,0") (inst "selectSK=address_8"))
                                 (rule "simplifySelectOfStore" (formula "7"))
                                 (rule "equalUnique" (formula "7") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "7") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "7") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "7") (term "0"))
                                 (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                                 (rule "hideAuxiliaryEq" (formula "7"))
                                 (rule "applyEq" (formula "7") (term "2,0") (ifseqformula "13"))
                                 (rule "pullOutSelect" (formula "5") (term "0,0,1") (inst "selectSK=arr_3"))
                                 (rule "applyEq" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEq" (formula "9") (term "0,0,1") (ifseqformula "5"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "concrete_and_4" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_2" (formula "5") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "5") (term "0"))
                                 (rule "simplifySelectOfStore" (formula "5"))
                                 (rule "equalUnique" (formula "5") (term "1,0,0,0"))
                                 (rule "equalUnique" (formula "5") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "5") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "5") (term "0,0"))
                                 (rule "eqClose" (formula "5") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "5") (term "0,0"))
                                 (rule "castDel" (formula "5") (term "1,0"))
                                 (rule "intCastEqual" (formula "5") (term "0,0"))
                                 (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "20"))
                                 (rule "ifthenelse_same_branches" (formula "5") (term "0"))
                                 (rule "applyEqReverse" (formula "9") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "3") (term "0,0,1") (ifseqformula "5"))
                                 (rule "applyEqReverse" (formula "6") (term "0,0,1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "eqSymm" (formula "8") (term "0,1"))
                                 (rule "eqSymm" (formula "3") (term "0,1"))
                                 (rule "eqSymm" (formula "5") (term "0,1"))
                                 (rule "pullOutSelect" (formula "4") (term "2,0") (inst "selectSK=address_9"))
                                 (rule "simplifySelectOfStore" (formula "4"))
                                 (rule "equalUnique" (formula "4") (term "0,1,0,0"))
                                 (rule "concrete_not_2" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_3" (formula "4") (term "0,0"))
                                 (rule "equalUnique" (formula "4") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "4") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "4") (term "0"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "commute_or" (formula "5") (term "0"))
                                 (rule "commute_or_2" (formula "8"))
                                 (rule "commute_or_2" (formula "3"))
                                 (rule "commute_or_2" (formula "5"))
                                 (rule "commute_or" (formula "5") (term "0"))
                                 (rule "applyEq_or_int1" (formula "5"))
                                 (rule "ifthenelse_split" (formula "6") (term "0"))
                                 (branch "msg.sender = a_1 TRUE"
                                    (rule "applyEqReverse" (formula "9") (term "0,1") (ifseqformula "7"))
                                    (rule "applyEqReverse" (formula "3") (term "0,1") (ifseqformula "7"))
                                    (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "7"))
                                    (rule "hideAuxiliaryEq" (formula "7"))
                                    (rule "eqSymm" (formula "5") (term "0,1"))
                                    (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "6"))
                                    (rule "ifthenelse_true" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "inEqSimp_homoInEq1" (formula "7") (term "1"))
                                    (rule "mul_literals" (formula "7") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "7") (term "0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "3") (term "0,1"))
                                    (rule "inEqSimp_homoInEq1" (formula "4") (term "1,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1,0,1,0"))
                                    (rule "polySimp_mulAssoc" (formula "4") (term "0,1,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0,1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0,1,0"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "4") (term "0,2,0,1,0,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "4") (term "0,2,1,0,0,1") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,1") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "29") (term "0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "8") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "27") (term "0") (ifseqformula "5"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "27"))
                                    (rule "concrete_not_2" (formula "3") (term "0,0"))
                                    (rule "concrete_or_1" (formula "3") (term "0"))
                                    (rule "concrete_or_1" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,2,0,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "3") (term "0,0,2,1,0,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "5") (term "0,0"))
                                    (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "5") (term "0,2,1,1,0") (ifseqformula "4"))
                                    (rule "polySimp_sepPosMonomial" (formula "3") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
                                    (rule "mul_literals" (formula "6") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
                                    (rule "commute_or_2" (formula "6"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "applyEq_or_int3" (formula "6"))
                                    (rule "leq_literals" (formula "6") (term "1,0"))
                                    (rule "concrete_or_4" (formula "6") (term "0"))
                                    (rule "applyEq_or_int5" (formula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "3") (term "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,1"))
                                    (rule "add_literals" (formula "3") (term "1,1,0,1"))
                                    (rule "times_zero_1" (formula "3") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "3") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "1,1"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "commute_or" (formula "3") (term "0"))
                                    (rule "applyEq_or_int2" (formula "3") (term "0"))
                                    (rule "leq_literals" (formula "3") (term "0,0"))
                                    (rule "concrete_or_2" (formula "3") (term "0"))
                                    (rule "allLeft" (formula "9") (inst "t=a_1"))
                                    (rule "allLeft" (formula "20") (inst "t=a_1"))
                                    (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "9"))
                                    (rule "applyEq" (formula "9") (term "0") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "mul_literals" (formula "7") (term "0,3,0,0,1,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,0,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,0,1,0,1,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,0,1,0,1,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,0,1,0,1,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,0,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,0,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,0,0,1,0,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,0,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "19"))
                                    (rule "mul_literals" (formula "5") (term "0,1,0"))
                                    (rule "add_zero_left" (formula "5") (term "1,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,1,1,1,0,1,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,1,1,1,0,1,0,0"))
                                    (rule "applyEq" (formula "3") (term "1,0,1") (ifseqformula "19"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,1,1,1,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,1,1,1,0,1,0,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,1,1,1,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,1,1,1,0,0,0,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "mul_literals" (formula "7") (term "0,3,0,0,0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,0,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,0,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,0,0,1,1,0,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,0,0,1,1,0,0") (ifseqformula "19"))
                                    (rule "mul_literals" (formula "7") (term "0,3,0,0,0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,0,0,1,1,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,1,0,1,0,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,1,0,1,0,0,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,1,0,0,0,1,0,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,1,0,1,1,0,0") (ifseqformula "19"))
                                    (rule "times_zero_2" (formula "7") (term "0,3,0,1,0,1,1,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,1,0,1,1,0,0"))
                                    (rule "applyEq" (formula "7") (term "0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "19"))
                                    (rule "mul_literals" (formula "7") (term "0,3,0,1,0,1,1,0,0,0"))
                                    (rule "add_zero_left" (formula "7") (term "3,0,1,0,1,1,0,0,0"))
                                    (rule "allLeft" (formula "13") (inst "t=a_0"))
                                    (rule "allLeft" (formula "10") (inst "t=a_0"))
                                    (rule "eqSymm" (formula "10") (term "0,0"))
                                    (rule "eqSymm" (formula "10") (term "1"))
                                    (rule "eqSymm" (formula "10") (term "1,0"))
                                    (rule "replace_known_right" (formula "10") (term "1,0") (ifseqformula "25"))
                                    (rule "concrete_or_4" (formula "10") (term "0"))
                                    (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "20"))
                                    (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "24"))
                                    (rule "concrete_or_4" (formula "10"))
                                    (rule "applyEqRigid" (formula "12") (term "0,2,0") (ifseqformula "10"))
                                    (rule "close" (formula "24") (ifseqformula "12"))
                                 )
                                 (branch "msg.sender = a_1 FALSE"
                                    (rule "applyEqReverse" (formula "3") (term "0,1") (ifseqformula "6"))
                                    (rule "applyEqReverse" (formula "8") (term "0,1") (ifseqformula "6"))
                                    (rule "applyEqReverse" (formula "5") (term "0,0,1") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "22"))
                                    (rule "ifthenelse_false" (formula "4") (term "0"))
                                    (rule "applyEqReverse" (formula "5") (term "0,1,0") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "5") (term "1,0,1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "eqSymm" (formula "4") (term "0,1"))
                                    (rule "applyEq_or_int1" (formula "4"))
                                    (rule "ifthenelse_split" (formula "5") (term "0"))
                                    (branch "msg.sender = hb_0 TRUE"
                                       (rule "applyEqReverse" (formula "4") (term "1,1,1,0") (ifseqformula "6"))
                                       (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "6"))
                                       (rule "applyEqReverse" (formula "7") (term "0,0,1,0") (ifseqformula "6"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0,1,0") (ifseqformula "6"))
                                       (rule "applyEqReverse" (formula "7") (term "1,1,1") (ifseqformula "6"))
                                       (rule "applyEqReverse" (formula "3") (term "1,1,1") (ifseqformula "6"))
                                       (rule "hideAuxiliaryEq" (formula "6"))
                                       (rule "polySimp_addAssoc" (formula "4") (term "1,1,0"))
                                       (rule "polySimp_addAssoc" (formula "6") (term "1,1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "1,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "4") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0,0,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "6") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq1" (formula "3") (term "1"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0,1"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,1,0,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "27") (term "0") (ifseqformula "5"))
                                       (rule "eqSymm" (formula "27"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,1,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "3") (term "0,2,1,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,1,0,0,1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "29") (term "0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,0,1,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,3,0,0,1,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,1,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,1,0,1,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,0,0,1,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "5"))
                                       (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "21"))
                                       (rule "concrete_not_2" (formula "6") (term "0,0"))
                                       (rule "concrete_or_1" (formula "6") (term "0"))
                                       (rule "concrete_or_1" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,0,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,2,1,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,0,0,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,0,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,0,1,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,3,0,1,0,1,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "0,0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,0,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,1,1,1,0,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,0,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,1,1,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,0,1,0,1,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,0,1,0,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,0,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,0,0,1,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,0,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,0,1,0,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,0,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "4") (term "1,0,1,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "4") (term "0,1,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,1,1,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "1,0,0,1,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "3") (term "0,0,1,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,0,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "4") (term "1,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "1,0,1") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "3") (term "0,1"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,1,0,1,1,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,1,0,1,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,1,0,1,0,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,1,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "1,3,0,1,0,1,1,0,0,0") (ifseqformula "10"))
                                       (rule "add_zero_right" (formula "6") (term "3,0,1,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,0,3,0,1,0,0,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "times_zero_2" (formula "6") (term "0,3,0,1,0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "6") (term "3,0,1,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,1,1,1,0,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,1,1,1,0,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,0,1,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,0,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,0,0,0,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,0,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,1,1,1,0,1,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,1,1,1,0,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,0,1,0,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,0,1,0,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,0,0,1,1,0,0,0") (ifseqformula "16"))
                                       (rule "times_zero_2" (formula "6") (term "3,0,0,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "3") (term "0,1,0,1") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "3") (term "0,1"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,1,1,1,0,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,1,1,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,0,0,1,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,0,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "4") (term "0,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                                       (rule "eqClose" (formula "4") (term "0,0,0"))
                                       (rule "concrete_not_1" (formula "4") (term "0,0"))
                                       (rule "concrete_or_2" (formula "4") (term "0"))
                                       (rule "applyEq" (formula "3") (term "0,0,0,1,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "3") (term "0,0,1,0"))
                                       (rule "eqClose" (formula "3") (term "0,1,0"))
                                       (rule "concrete_not_1" (formula "3") (term "1,0"))
                                       (rule "concrete_or_4" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,0,1,0,0,0,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,0,1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,0,0,1,1,0,0") (ifseqformula "16"))
                                       (rule "mul_literals" (formula "6") (term "3,0,0,0,1,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,1,0,1,1,0,0") (ifseqformula "16"))
                                       (rule "times_zero_2" (formula "6") (term "3,0,1,0,1,1,0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,1,0,1,0,0,0,0") (ifseqformula "16"))
                                       (rule "times_zero_2" (formula "6") (term "3,0,1,0,1,0,0,0,0"))
                                       (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "16"))
                                       (rule "times_zero_2" (formula "4") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0"))
                                       (rule "applyEq" (formula "6") (term "0,3,0,1,0,1,1,0,0,0") (ifseqformula "16"))
                                       (rule "times_zero_2" (formula "6") (term "3,0,1,0,1,1,0,0,0"))
                                       (rule "applyEq" (formula "6") (term "3,0,1,0,0,0,1,0,0,0") (ifseqformula "10"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0,0"))
                                       (rule "allLeft" (formula "18") (inst "t=a_1"))
                                       (rule "allLeft" (formula "8") (inst "t=a_1"))
                                       (rule "inEqSimp_contradInEq0" (formula "4") (term "0") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "4") (term "0,0"))
                                       (rule "concrete_and_2" (formula "4") (term "0"))
                                       (rule "concrete_or_2" (formula "4"))
                                       (rule "notLeft" (formula "4"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "3") (term "0,1"))
                                       (rule "concrete_and_2" (formula "3") (term "1"))
                                       (rule "concrete_or_4" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "6"))
                                       (rule "applyEq" (formula "6") (term "0") (ifseqformula "17"))
                                       (rule "leq_literals" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "20") (term "1") (ifseqformula "16"))
                                       (rule "allLeft" (formula "10") (inst "t=a_0"))
                                       (rule "allLeft" (formula "7") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "7") (term "1"))
                                       (rule "eqSymm" (formula "7") (term "1,0"))
                                       (rule "eqSymm" (formula "7") (term "0,0"))
                                       (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "26"))
                                       (rule "concrete_or_2" (formula "7") (term "0"))
                                       (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "25"))
                                       (rule "concrete_or_2" (formula "7"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "7"))
                                       (rule "close" (formula "24") (ifseqformula "17"))
                                    )
                                    (branch "msg.sender = hb_0 FALSE"
                                       (rule "applyEqReverse" (formula "4") (term "1,1,1,0") (ifseqformula "5"))
                                       (rule "add_literals" (formula "4") (term "1,1,0"))
                                       (rule "applyEqReverse" (formula "3") (term "1,1,1") (ifseqformula "5"))
                                       (rule "add_zero_right" (formula "3") (term "1,1"))
                                       (rule "applyEqReverse" (formula "4") (term "0,0,0,0") (ifseqformula "5"))
                                       (rule "eqClose" (formula "4") (term "0,0,0"))
                                       (rule "concrete_not_1" (formula "4") (term "0,0"))
                                       (rule "concrete_or_2" (formula "4") (term "0"))
                                       (rule "applyEqReverse" (formula "6") (term "0,0,1,0") (ifseqformula "5"))
                                       (rule "eqClose" (formula "6") (term "0,1,0"))
                                       (rule "concrete_not_1" (formula "6") (term "1,0"))
                                       (rule "concrete_or_4" (formula "6") (term "0"))
                                       (rule "applyEqReverse" (formula "6") (term "1,1,1") (ifseqformula "5"))
                                       (rule "add_zero_right" (formula "6") (term "1,1"))
                                       (rule "applyEqReverse" (formula "3") (term "0,0,1,0") (ifseqformula "5"))
                                       (rule "eqClose" (formula "3") (term "0,1,0"))
                                       (rule "concrete_not_1" (formula "3") (term "1,0"))
                                       (rule "concrete_or_4" (formula "3") (term "0"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "allLeft" (formula "18") (inst "t=a_1"))
                                       (rule "allLeft" (formula "8") (inst "t=a_1"))
                                       (rule "inEqSimp_contradInEq0" (formula "4") (term "0") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "4") (term "0,0"))
                                       (rule "concrete_and_2" (formula "4") (term "0"))
                                       (rule "concrete_or_2" (formula "4"))
                                       (rule "notLeft" (formula "4"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "7"))
                                       (rule "qeq_literals" (formula "3") (term "0,1"))
                                       (rule "concrete_and_2" (formula "3") (term "1"))
                                       (rule "concrete_or_4" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "3") (term "0,1"))
                                       (rule "concrete_and_2" (formula "3") (term "1"))
                                       (rule "concrete_or_4" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "5"))
                                       (rule "applyEq" (formula "5") (term "0") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                       (rule "qeq_literals" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "applyEq" (formula "20") (term "1") (ifseqformula "15"))
                                       (rule "allLeft" (formula "9") (inst "t=a_0"))
                                       (rule "allLeft" (formula "6") (inst "t=a_0"))
                                       (rule "eqSymm" (formula "6") (term "0,0"))
                                       (rule "eqSymm" (formula "6") (term "1,0"))
                                       (rule "eqSymm" (formula "6") (term "1"))
                                       (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "26"))
                                       (rule "concrete_or_4" (formula "6") (term "0"))
                                       (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "16"))
                                       (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "25"))
                                       (rule "concrete_or_4" (formula "6"))
                                       (rule "applyEq" (formula "15") (term "0,0,2,0") (ifseqformula "6"))
                                       (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "6"))
                                       (rule "applyEqRigid" (formula "8") (term "0,2,0") (ifseqformula "6"))
                                       (rule "close" (formula "23") (ifseqformula "8"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: self.balances[(int)(hb_0)] <= 0 FALSE"
                        (rule "concrete_or_4" (formula "7"))
                        (rule "inEqSimp_leqRight" (formula "15"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
                        (rule "leq_literals" (formula "13") (term "0"))
                        (rule "concrete_or_1" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "allLeft" (formula "11") (inst "t=hb_0"))
                        (rule "exLeft" (formula "11") (inst "sk=i_0"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "11"))
                        (rule "eqSymm" (formula "11") (term "0"))
                        (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "8"))
                        (rule "concrete_not_1" (formula "13") (term "0"))
                        (rule "concrete_or_2" (formula "13"))
                        (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "8"))
                        (rule "concrete_not_1" (formula "11") (term "1"))
                        (rule "concrete_or_4" (formula "11"))
                        (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "8"))
                        (rule "concrete_not_1" (formula "12") (term "0"))
                        (rule "concrete_or_2" (formula "12"))
                        (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "13") (term "0"))
                        (rule "concrete_and_2" (formula "13"))
                        (rule "closeFalse" (formula "13"))
                     )
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "22") (inst "sk=a_0"))
            (rule "eqSymm" (formula "22") (term "1,0,0,1"))
            (rule "pullOutSelect" (formula "22") (term "0,0,0") (inst "selectSK=address_4"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "eqClose" (formula "1") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "1") (term "0,0,0"))
            (rule "equalUnique" (formula "1") (term "0,0,0"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "pullOutSelect" (formula "23") (term "0,1,1") (inst "selectSK=arr_1"))
            (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "1"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "equalUnique" (formula "1") (term "1,0,0"))
            (rule "concrete_and_4" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "1,0,0,0"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "intCastEqual" (formula "1") (term "1,0,0"))
            (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "22"))
            (rule "concrete_and_2" (formula "1") (term "0,0,0"))
            (rule "concrete_and_2" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "24") (term "0,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=address_5"))
            (rule "simplifySelectOfStore" (formula "1"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0"))
            (rule "equalUnique" (formula "1") (term "1,0,0"))
            (rule "concrete_and_4" (formula "1") (term "0,0"))
            (rule "ifthenelse_false" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_or" (formula "23") (term "0"))
            (rule "ifthenelse_split" (formula "2") (term "0"))
            (branch "msg.sender = self.auctionOwner TRUE"
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "applyEq" (formula "23") (term "0,0,2,0,0,3,0,0,1,0,0,1") (ifseqformula "2"))
               (rule "applyEq" (formula "23") (term "0,2,1,3,0,0,1,0,0,1") (ifseqformula "2"))
               (rule "applyEq" (formula "23") (term "0,2,0,0,1,0,0,1") (ifseqformula "2"))
               (rule "applyEq" (formula "23") (term "0,0,2,0,0,0,1,0,0,1") (ifseqformula "2"))
               (rule "applyEq" (formula "1") (term "0,2,1,1,0") (ifseqformula "2"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "2"))
               (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0") (ifseqformula "2"))
               (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "23") (term "1,3,0,0,1,0,0,1") (ifseqformula "7"))
               (rule "add_zero_right" (formula "23") (term "3,0,0,1,0,0,1"))
               (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "7"))
               (rule "add_zero_right" (formula "1") (term "1,0"))
               (rule "applyEq" (formula "23") (term "0,3,0,0,1,0,0,1") (ifseqformula "12"))
               (rule "mul_literals" (formula "23") (term "3,0,0,1,0,0,1"))
               (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "12"))
               (rule "mul_literals" (formula "1") (term "1,0"))
               (rule "allLeft" (formula "14") (inst "t=a_0"))
               (rule "allLeft" (formula "4") (inst "t=a_0"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "self.auctionOwner = a_0 TRUE"
                  (rule "applyEqReverse" (formula "26") (term "0,1,0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "26") (term "1,0"))
                  (rule "concrete_or_3" (formula "26") (term "0"))
                  (rule "concrete_and_1" (formula "26"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
                  (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                  (rule "applyEq" (formula "13") (term "0,0,2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "6") (term "1,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "25") (term "0,2,0,0,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "25") (term "0,0,2,0,0,0,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "1"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "applyEq" (formula "4") (term "1") (ifseqformula "13"))
                  (rule "commute_or" (formula "5") (term "0,0"))
                  (rule "equiv_right" (formula "23"))
                  (branch "Case 1"
                     (rule "exLeft" (formula "1") (inst "sk=i_0"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfStore" (formula "3"))
                     (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                     (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "3") (term "0,0"))
                     (rule "ifthenelse_false" (formula "3") (term "0"))
                     (rule "simplifySelectOfStore" (formula "3"))
                     (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                     (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "3") (term "0,0"))
                     (rule "eqSymm" (formula "3") (term "0,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "3") (term "0,0,0"))
                     (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "22"))
                     (rule "concrete_and_2" (formula "3") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "3") (term "0,0"))
                     (rule "ifthenelse_false" (formula "3") (term "0"))
                     (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "allLeft" (formula "11") (inst "t=a_0"))
                     (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "27"))
                     (rule "concrete_or_2" (formula "11"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                     (rule "leq_literals" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "allLeft" (formula "14") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                     (rule "applyEq" (formula "14") (term "0,0,2,0,0,0") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "27"))
                     (rule "concrete_or_2" (formula "14") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                     (rule "add_literals" (formula "14") (term "0,0,1"))
                     (rule "leq_literals" (formula "14") (term "0,1"))
                     (rule "concrete_and_2" (formula "14") (term "1"))
                     (rule "concrete_or_4" (formula "14"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "14") (term "0"))
                     (rule "concrete_and_2" (formula "14"))
                     (rule "closeFalse" (formula "14"))
                  )
                  (branch "Case 2"
                     (rule "nnf_ex2all" (formula "24"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0"))
                     (rule "commute_or" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "12") (inst "t=a_0"))
                     (rule "exLeft" (formula "12") (inst "sk=i_0"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "eqSymm" (formula "12") (term "0"))
                     (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "2"))
                     (rule "concrete_not_1" (formula "12") (term "1"))
                     (rule "concrete_or_4" (formula "12"))
                     (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
                     (rule "concrete_not_1" (formula "14") (term "0"))
                     (rule "concrete_or_2" (formula "14"))
                     (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "2"))
                     (rule "concrete_not_1" (formula "13") (term "0"))
                     (rule "concrete_or_2" (formula "13"))
                     (rule "inEqSimp_homoInEq0" (formula "14"))
                     (rule "polySimp_addComm1" (formula "14") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1"))
                     (rule "polySimp_rightDist" (formula "14") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                     (rule "mul_literals" (formula "14") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                     (rule "allLeft" (formula "16") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                     (rule "applyEq" (formula "16") (term "0,0,2,0,0,0") (ifseqformula "12"))
                     (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "2"))
                     (rule "concrete_or_1" (formula "16") (term "0"))
                     (rule "concrete_or_1" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "allLeft" (formula "1") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "14"))
                     (rule "qeq_literals" (formula "1") (term "0,1,0"))
                     (rule "concrete_and_2" (formula "1") (term "1,0"))
                     (rule "concrete_or_4" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "15"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_literals" (formula "1") (term "0,0,1"))
                     (rule "leq_literals" (formula "1") (term "0,1"))
                     (rule "concrete_and_2" (formula "1") (term "1"))
                     (rule "concrete_or_4" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=arr_2"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                     (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                     (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "22") (ifseqformula "13"))
                  )
               )
               (branch "self.auctionOwner = a_0 FALSE"
                  (rule "applyEqReverse" (formula "26") (term "0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "andRight" (formula "25"))
                  (branch "Case 1"
                     (rule "orRight" (formula "25"))
                     (rule "inEqSimp_leqRight" (formula "26"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "allLeft" (formula "9") (inst "t=a_0"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "27"))
                     (rule "concrete_or_2" (formula "9"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (rule "concrete_and_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                     (rule "equiv_right" (formula "25"))
                     (branch "Case 1"
                        (rule "exLeft" (formula "1") (inst "sk=i_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfStore" (formula "3"))
                        (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "3") (term "0,0"))
                        (rule "equalUnique" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "3") (term "0,0"))
                        (rule "ifthenelse_false" (formula "3") (term "0"))
                        (rule "simplifySelectOfStore" (formula "3"))
                        (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "3") (term "0,0"))
                        (rule "equalUnique" (formula "3") (term "1,0,0"))
                        (rule "eqSymm" (formula "3") (term "0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "3") (term "0,0,0"))
                        (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "24"))
                        (rule "concrete_and_2" (formula "3") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0,0"))
                        (rule "ifthenelse_false" (formula "3") (term "0"))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "allLeft" (formula "11") (inst "t=a_0"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "29"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "allLeft" (formula "15") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                        (rule "applyEq" (formula "15") (term "0,0,2,0,0,0") (ifseqformula "3"))
                        (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "30"))
                        (rule "concrete_or_2" (formula "15") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                        (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "leq_literals" (formula "15") (term "0,1"))
                        (rule "concrete_and_2" (formula "15") (term "1"))
                        (rule "concrete_or_4" (formula "15"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (rule "concrete_and_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Case 2"
                        (rule "nnf_ex2all" (formula "26"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "allLeft" (formula "12") (inst "t=a_0"))
                        (rule "exLeft" (formula "12") (inst "sk=i_0"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "eqSymm" (formula "12") (term "0"))
                        (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "12") (term "1"))
                        (rule "concrete_or_4" (formula "12"))
                        (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "13") (term "0"))
                        (rule "concrete_or_2" (formula "13"))
                        (rule "inEqSimp_homoInEq0" (formula "14"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "mul_literals" (formula "14") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                        (rule "allLeft" (formula "1") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "15"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "leq_literals" (formula "1") (term "0,1"))
                        (rule "concrete_and_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "14"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "concrete_and_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                        (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "23") (ifseqformula "13"))
                     )
                  )
               )
            )
            (branch "msg.sender = self.auctionOwner FALSE"
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "allLeft" (formula "3") (inst "t=a_0"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "allLeft" (formula "4") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "4"))
               (rule "mul_literals" (formula "15") (term "0,0"))
               (rule "add_zero_left" (formula "15") (term "0"))
               (rule "allLeft" (formula "16") (inst "t=a_0"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "msg.sender = a_0 TRUE"
                  (rule "applyEqReverse" (formula "28") (term "0,1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "applyEq" (formula "27") (term "0,2,1,0,1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "27") (term "0,2,1,3,0,0,1,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
                  (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "19"))
                  (rule "applyEq" (formula "27") (term "0,0,2,0,0,3,0,0,1,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "4") (term "0,0,2,0") (ifseqformula "1"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "applyEq" (formula "26") (term "0,2,0,0,1,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "25") (term "0,0,2,0,0,0,1,0,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "25") (term "0,0,2,0,0,0,1,0") (ifseqformula "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,1,0"))
                  (rule "andRight" (formula "25"))
                  (branch "Case 1"
                     (rule "orRight" (formula "25"))
                     (rule "inEqSimp_leqRight" (formula "26"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "allLeft" (formula "9") (inst "t=a_0"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "27"))
                     (rule "concrete_or_2" (formula "9"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "17") (term "0"))
                     (rule "concrete_and_2" (formula "17"))
                     (rule "closeFalse" (formula "17"))
                  )
                  (branch "Case 2"
                     (rule "equiv_right" (formula "25"))
                     (branch "Case 1"
                        (rule "exLeft" (formula "1") (inst "sk=i_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfStore" (formula "3"))
                        (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "3") (term "0,0"))
                        (rule "equalUnique" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "3") (term "0,0"))
                        (rule "ifthenelse_false" (formula "3") (term "0"))
                        (rule "simplifySelectOfStore" (formula "3"))
                        (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                        (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "3") (term "0,0"))
                        (rule "eqSymm" (formula "3") (term "0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "3") (term "0,0,0"))
                        (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "24"))
                        (rule "concrete_and_2" (formula "3") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0,0"))
                        (rule "ifthenelse_false" (formula "3") (term "0"))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "allLeft" (formula "11") (inst "t=a_0"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "29"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "allLeft" (formula "15") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                        (rule "applyEq" (formula "15") (term "0,0,2,0,0,0") (ifseqformula "3"))
                        (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "30"))
                        (rule "concrete_or_2" (formula "15") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                        (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,1"))
                        (rule "leq_literals" (formula "15") (term "0,1"))
                        (rule "concrete_and_2" (formula "15") (term "1"))
                        (rule "concrete_or_4" (formula "15"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "15") (term "0"))
                        (rule "concrete_and_2" (formula "15"))
                        (rule "closeFalse" (formula "15"))
                     )
                     (branch "Case 2"
                        (rule "nnf_ex2all" (formula "26"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "allLeft" (formula "12") (inst "t=a_0"))
                        (rule "exLeft" (formula "12") (inst "sk=i_0"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "eqSymm" (formula "12") (term "0"))
                        (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "13") (term "0"))
                        (rule "concrete_or_2" (formula "13"))
                        (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "12") (term "1"))
                        (rule "concrete_or_4" (formula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "14"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "mul_literals" (formula "14") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                        (rule "allLeft" (formula "1") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "14"))
                        (rule "qeq_literals" (formula "1") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "1") (term "1,0"))
                        (rule "concrete_or_4" (formula "1") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "15"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "leq_literals" (formula "1") (term "0,1"))
                        (rule "concrete_and_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                        (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "23") (ifseqformula "13"))
                     )
                  )
               )
               (branch "msg.sender = a_0 FALSE"
                  (rule "applyEqReverse" (formula "28") (term "0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "andRight" (formula "27"))
                  (branch "Case 1"
                     (rule "orRight" (formula "27"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "allLeft" (formula "9") (inst "t=a_0"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "29"))
                     (rule "concrete_or_2" (formula "9"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "9") (term "0"))
                     (rule "concrete_and_2" (formula "9"))
                     (rule "closeFalse" (formula "9"))
                  )
                  (branch "Case 2"
                     (rule "equiv_right" (formula "27"))
                     (branch "Case 1"
                        (rule "exLeft" (formula "1") (inst "sk=i_0"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfStore" (formula "3"))
                        (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "3") (term "0,0"))
                        (rule "equalUnique" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "3") (term "0,0"))
                        (rule "ifthenelse_false" (formula "3") (term "0"))
                        (rule "simplifySelectOfStore" (formula "3"))
                        (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "3") (term "0,0"))
                        (rule "equalUnique" (formula "3") (term "1,0,0"))
                        (rule "eqSymm" (formula "3") (term "0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "3") (term "0,0,0"))
                        (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "26"))
                        (rule "concrete_and_2" (formula "3") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "3") (term "0,0"))
                        (rule "ifthenelse_false" (formula "3") (term "0"))
                        (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "allLeft" (formula "11") (inst "t=a_0"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "31"))
                        (rule "concrete_or_2" (formula "11"))
                        (rule "allLeft" (formula "15") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                        (rule "applyEq" (formula "15") (term "0,0,2,0,0,0") (ifseqformula "3"))
                        (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "32"))
                        (rule "concrete_or_2" (formula "15") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "15") (term "0,0"))
                        (rule "concrete_and_2" (formula "15") (term "0"))
                        (rule "concrete_or_2" (formula "15"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "15"))
                        (rule "andLeft" (formula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "add_literals" (formula "2") (term "0"))
                        (rule "leq_literals" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "Case 2"
                        (rule "nnf_ex2all" (formula "28"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "allLeft" (formula "12") (inst "t=a_0"))
                        (rule "exLeft" (formula "12") (inst "sk=i_0"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "12"))
                        (rule "eqSymm" (formula "12") (term "0"))
                        (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "13") (term "0"))
                        (rule "concrete_or_2" (formula "13"))
                        (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "14") (term "0"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "2"))
                        (rule "concrete_not_1" (formula "12") (term "1"))
                        (rule "concrete_or_4" (formula "12"))
                        (rule "inEqSimp_homoInEq0" (formula "14"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "mul_literals" (formula "14") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                        (rule "allLeft" (formula "1") (inst "t=i_0"))
                        (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "15"))
                        (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                        (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "leq_literals" (formula "1") (term "0,1"))
                        (rule "concrete_and_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "14"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (rule "concrete_and_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_4" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "simplifySelectOfStore" (formula "1"))
                        (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                        (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                        (rule "concrete_and_3" (formula "1") (term "0,0"))
                        (rule "equalUnique" (formula "1") (term "1,0,0"))
                        (rule "eqSymm" (formula "1") (term "0,0,0"))
                        (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "30"))
                        (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0,0"))
                        (rule "ifthenelse_false" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "24") (ifseqformula "13"))
                     )
                  )
               )
            )
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "22") (inst "sk=a_0"))
         (rule "inEqSimp_geqRight" (formula "22"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0,0"))
         (rule "concrete_and_2" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0,0"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0"))
         (rule "eqClose" (formula "1") (term "0,0,0"))
         (rule "concrete_and_1" (formula "1") (term "0,0"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "intCastEqual" (formula "1") (term "0,0"))
         (rule "ifthenelse_split" (formula "3") (term "0"))
         (branch "msg.sender = self.auctionOwner TRUE"
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "3"))
            (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "3"))
            (rule "allLeft" (formula "5") (inst "t=a_0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "allLeft" (formula "16") (inst "t=a_0"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "self.auctionOwner = a_0 TRUE"
               (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
               (rule "leq_literals" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
            (branch "self.auctionOwner = a_0 FALSE"
               (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "15"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (rule "concrete_and_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "msg.sender = self.auctionOwner FALSE"
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "allLeft" (formula "4") (inst "t=a_0"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "allLeft" (formula "15") (inst "t=a_0"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "msg.sender = a_0 TRUE"
               (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
               (rule "leq_literals" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
            (branch "msg.sender = a_0 FALSE"
               (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (rule "concrete_and_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
   (branch "Case 2"
      (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
      (rule "allLeft" (formula "3") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
      (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "3"))
      (rule "mul_literals" (formula "14") (term "0,0"))
      (rule "add_zero_left" (formula "14") (term "0"))
      (rule "ifthenelse_split" (formula "1") (term "0"))
      (branch "msg.sender = self.auctionOwner TRUE"
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "applyEq" (formula "24") (term "0,0,2,1") (ifseqformula "1"))
         (rule "applyEq" (formula "24") (term "0,2,0") (ifseqformula "1"))
         (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "1"))
         (rule "applyEq" (formula "14") (term "0,0,2,0") (ifseqformula "1"))
         (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "12"))
         (rule "qeq_literals" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "applyEq" (formula "23") (term "0") (ifseqformula "7"))
         (rule "eqSymm" (formula "23"))
         (rule "close" (formula "23") (ifseqformula "12"))
      )
      (branch "msg.sender = self.auctionOwner FALSE"
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "allLeft" (formula "7") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
         (rule "cut_direct" (formula "7") (term "1"))
         (branch "CUT: int::select(heap, net, address(msg.sender)) <= 0 TRUE"
            (rule "concrete_or_3" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "allLeft" (formula "8") (inst "t=hb_0"))
            (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "5"))
            (rule "cut_direct" (formula "8") (term "1"))
            (branch "CUT: self.balances[(int)(hb_0)] <= 0 TRUE"
               (rule "concrete_or_3" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "8"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "14"))
               (rule "leq_literals" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
               (rule "qeq_literals" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "13"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "13"))
               (rule "applyEq" (formula "5") (term "1") (ifseqformula "13"))
               (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "2"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "14"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
               (rule "qeq_literals" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "applyEq" (formula "24") (term "1") (ifseqformula "13"))
               (rule "inEqSimp_strengthen0" (formula "6") (ifseqformula "24"))
               (rule "add_literals" (formula "6") (term "1"))
               (rule "inEqSimp_contradEq3" (formula "24") (ifseqformula "6"))
               (rule "mul_literals" (formula "24") (term "1,0,0"))
               (rule "add_literals" (formula "24") (term "0,0"))
               (rule "qeq_literals" (formula "24") (term "0"))
               (rule "concrete_and_2" (formula "24"))
               (rule "false_right" (formula "24"))
               (rule "allLeft" (formula "2") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "allLeft" (formula "3") (inst "t=hb_0"))
               (rule "allLeft" (formula "4") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "14"))
               (rule "leq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "allLeft" (formula "9") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
               (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "7"))
               (rule "leq_literals" (formula "9") (term "1"))
               (rule "concrete_or_3" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "allLeft" (formula "5") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "eqSymm" (formula "5") (term "1"))
               (rule "replace_known_right" (formula "5") (term "1,0") (ifseqformula "19"))
               (rule "concrete_or_4" (formula "5") (term "0"))
               (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "16"))
               (rule "inEqSimp_contradEq3" (formula "5") (term "1") (ifseqformula "9"))
               (rule "mul_literals" (formula "5") (term "1,0,0,1"))
               (rule "add_literals" (formula "5") (term "0,0,1"))
               (rule "qeq_literals" (formula "5") (term "0,1"))
               (rule "concrete_and_2" (formula "5") (term "1"))
               (rule "concrete_or_4" (formula "5"))
               (rule "applyEq" (formula "21") (term "0") (ifseqformula "5"))
               (rule "applyEq" (formula "2") (term "0,0,2,0") (ifseqformula "5"))
               (rule "applyEq" (formula "15") (term "0,0,2,0") (ifseqformula "4"))
               (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "4"))
               (rule "applyEq" (formula "17") (term "0") (ifseqformula "4"))
               (rule "eqSymm" (formula "17"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
               (rule "leq_literals" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
            (branch "CUT: self.balances[(int)(hb_0)] <= 0 FALSE"
               (rule "concrete_or_4" (formula "8"))
               (rule "inEqSimp_leqRight" (formula "18"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "1"))
               (rule "leq_literals" (formula "15") (term "0"))
               (rule "concrete_or_1" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "allLeft" (formula "12") (inst "t=hb_0"))
               (rule "exLeft" (formula "12") (inst "sk=i_0"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "eqSymm" (formula "12") (term "0"))
               (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "9"))
               (rule "concrete_not_1" (formula "14") (term "0"))
               (rule "concrete_or_2" (formula "14"))
               (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "9"))
               (rule "concrete_not_1" (formula "12") (term "1"))
               (rule "concrete_or_4" (formula "12"))
               (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "9"))
               (rule "concrete_not_1" (formula "13") (term "0"))
               (rule "concrete_or_2" (formula "13"))
               (rule "inEqSimp_homoInEq0" (formula "14"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
               (rule "mul_literals" (formula "14") (term "0,1"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1"))
               (rule "allLeft" (formula "16") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
               (rule "applyEq" (formula "16") (term "0,0,2,0,0,0") (ifseqformula "12"))
               (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "9"))
               (rule "concrete_or_1" (formula "16") (term "0"))
               (rule "concrete_or_1" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
               (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "7"))
               (rule "leq_literals" (formula "10") (term "1"))
               (rule "concrete_or_3" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "allLeft" (formula "5") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "eqSymm" (formula "5") (term "1"))
               (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "30"))
               (rule "concrete_or_4" (formula "5"))
               (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "22"))
               (rule "concrete_or_4" (formula "5"))
               (rule "applyEq" (formula "22") (term "0") (ifseqformula "5"))
               (rule "eqSymm" (formula "22"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "5"))
               (rule "applyEq" (formula "9") (term "0,2,0") (ifseqformula "5"))
               (rule "applyEq" (formula "30") (term "0,0,2,1") (ifseqformula "5"))
               (rule "applyEq" (formula "30") (term "0,2,0") (ifseqformula "5"))
               (rule "close" (formula "30") (ifseqformula "7"))
            )
         )
         (branch "CUT: int::select(heap, net, address(msg.sender)) <= 0 FALSE"
            (rule "concrete_or_4" (formula "7"))
            (rule "inEqSimp_leqRight" (formula "17"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "allLeft" (formula "11") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
            (rule "exLeft" (formula "11") (inst "sk=i_0"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "eqSymm" (formula "11") (term "0"))
            (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "8"))
            (rule "concrete_not_1" (formula "12") (term "0"))
            (rule "concrete_or_2" (formula "12"))
            (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "8"))
            (rule "concrete_not_1" (formula "13") (term "0"))
            (rule "concrete_or_2" (formula "13"))
            (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "8"))
            (rule "concrete_not_1" (formula "11") (term "1"))
            (rule "concrete_or_4" (formula "11"))
            (rule "inEqSimp_homoInEq0" (formula "13"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "polySimp_mulComm0" (formula "13") (term "1"))
            (rule "polySimp_rightDist" (formula "13") (term "1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
            (rule "mul_literals" (formula "13") (term "0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1"))
            (rule "allLeft" (formula "15") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "applyEq" (formula "15") (term "0,0,2,0,0,0") (ifseqformula "11"))
            (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "8"))
            (rule "concrete_or_1" (formula "15") (term "0"))
            (rule "concrete_or_1" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "allLeft" (formula "9") (inst "t=hb_0"))
            (rule "applyEq" (formula "9") (term "0,1") (ifseqformula "6"))
            (rule "cut_direct" (formula "9") (term "1"))
            (branch "CUT: self.balances[(int)(hb_0)] <= 0 TRUE"
               (rule "concrete_or_3" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "9"))
               (rule "applyEq" (formula "3") (term "1") (ifseqformula "18"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
               (rule "qeq_literals" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "18"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "18"))
               (rule "leq_literals" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "applyEq" (formula "6") (term "1") (ifseqformula "17"))
               (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "3"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "18"))
               (rule "leq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
               (rule "qeq_literals" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "applyEq" (formula "28") (term "1") (ifseqformula "17"))
               (rule "inEqSimp_contradEq7" (formula "28") (ifseqformula "1"))
               (rule "mul_literals" (formula "28") (term "1,0,0"))
               (rule "add_literals" (formula "28") (term "0,0"))
               (rule "leq_literals" (formula "28") (term "0"))
               (rule "concrete_and_2" (formula "28"))
               (rule "false_right" (formula "28"))
               (rule "allLeft" (formula "3") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "allLeft" (formula "4") (inst "t=hb_0"))
               (rule "allLeft" (formula "5") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "18"))
               (rule "leq_literals" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
               (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "8"))
               (rule "leq_literals" (formula "10") (term "1"))
               (rule "concrete_or_3" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "allLeft" (formula "6") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "eqSymm" (formula "6") (term "1"))
               (rule "replace_known_right" (formula "6") (term "1,0") (ifseqformula "23"))
               (rule "concrete_or_4" (formula "6") (term "0"))
               (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "20"))
               (rule "inEqSimp_contradEq7" (formula "6") (term "1") (ifseqformula "1"))
               (rule "mul_literals" (formula "6") (term "1,0,0,1"))
               (rule "add_literals" (formula "6") (term "0,0,1"))
               (rule "leq_literals" (formula "6") (term "0,1"))
               (rule "concrete_and_2" (formula "6") (term "1"))
               (rule "concrete_or_4" (formula "6"))
               (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "6"))
               (rule "applyEq" (formula "22") (term "0") (ifseqformula "6"))
               (rule "eqSymm" (formula "22"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "6"))
               (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "6"))
               (rule "applyEq" (formula "9") (term "0,0,2,0") (ifseqformula "5"))
               (rule "applyEq" (formula "1") (term "0,2,0") (ifseqformula "5"))
               (rule "applyEq" (formula "12") (term "1") (ifseqformula "5"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "CUT: self.balances[(int)(hb_0)] <= 0 FALSE"
               (rule "concrete_or_4" (formula "9"))
               (rule "inEqSimp_leqRight" (formula "22"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "1"))
               (rule "leq_literals" (formula "19") (term "0"))
               (rule "concrete_or_1" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "allLeft" (formula "16") (inst "t=hb_0"))
               (rule "exLeft" (formula "16") (inst "sk=i_1"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "eqSymm" (formula "16") (term "0"))
               (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "10"))
               (rule "concrete_not_1" (formula "17") (term "0"))
               (rule "concrete_or_2" (formula "17"))
               (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "10"))
               (rule "concrete_not_1" (formula "18") (term "0"))
               (rule "concrete_or_2" (formula "18"))
               (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "10"))
               (rule "concrete_not_1" (formula "16") (term "1"))
               (rule "concrete_or_4" (formula "16"))
               (rule "inEqSimp_homoInEq0" (formula "18"))
               (rule "polySimp_addComm1" (formula "18") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "18"))
               (rule "polySimp_mulComm0" (formula "18") (term "1"))
               (rule "polySimp_rightDist" (formula "18") (term "1"))
               (rule "mul_literals" (formula "18") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1"))
               (rule "allLeft" (formula "20") (inst "t=i_1"))
               (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
               (rule "applyEq" (formula "20") (term "0,0,2,0,0,0") (ifseqformula "16"))
               (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "10"))
               (rule "concrete_or_1" (formula "20") (term "0"))
               (rule "concrete_or_1" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "allLeft" (formula "11") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
               (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "8"))
               (rule "leq_literals" (formula "11") (term "1"))
               (rule "concrete_or_3" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "allLeft" (formula "6") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "eqSymm" (formula "6") (term "1"))
               (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "34"))
               (rule "concrete_or_4" (formula "6"))
               (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "26"))
               (rule "concrete_or_4" (formula "6"))
               (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "6"))
               (rule "applyEq" (formula "4") (term "0,0,2,0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq0" (formula "4"))
               (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,0"))
               (rule "times_zero_1" (formula "4") (term "0"))
               (rule "qeq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "applyEq" (formula "26") (term "0") (ifseqformula "5"))
               (rule "applyEq" (formula "32") (term "0,0,2,1") (ifseqformula "5"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "5"))
               (rule "eqSymm" (formula "24"))
               (rule "applyEq" (formula "32") (term "0,2,0") (ifseqformula "5"))
               (rule "close" (formula "32") (ifseqformula "7"))
            )
         )
      )
   )
)
(branch "Case 2"
   (rule "allRight" (formula "22") (inst "sk=f_0"))
   (rule "allRight" (formula "22") (inst "sk=o_0"))
   (rule "orRight" (formula "22"))
   (rule "orRight" (formula "22"))
   (rule "orRight" (formula "22"))
   (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=f_0_0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "26"))
   (rule "eqSymm" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1") (term "1,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0"))
   (rule "eqSymm" (formula "1") (term "1,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "close" (formula "26") (ifseqformula "1"))
)
)
}
