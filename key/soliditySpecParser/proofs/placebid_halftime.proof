\profile "Solidity Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Apr 20 22:42:11 CEST 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_HIGH
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:solidity , programRules-programRules\\:Solidity , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , paymentHistoryDetail-paymentHistoryDetail\\:net , transfer-transfer\\:noCallBack
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_SKIP
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\withOptions transfer:noCallBack;


\programVariables {
  MultiAuctionImpl self;
  Message msg;
  
}

\rules {
    insertCInv {
        \schemaVar \term Heap h;
        \schemaVar \term MultiAuctionImpl self;
        \schemaVar \variable Address a;
\schemaVar \variable int i;
\schemaVar \variable Address hb;


        \find(CInv(h, self))
        \varcond(\notFreeIn(a,h,self),\notFreeIn(i,h,self),\notFreeIn(hb,h,self))
        \replacewith(    
            ((((\exists hb; (\forall a; (((((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)hb))) >= (int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)a)))) & (((a != hb) & (a != (Address::select(h,self,MultiAuctionImpl::$auctionOwner)))) -> ((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)a))) = int::select(h,net,address(a))))) & (((MultiAuctionImpl.State::select(h,self,MultiAuctionImpl::$state)) = MultiAuctionImpl.State::select(h,null,MultiAuctionImpl.State::$AUCTION_OPEN)) -> (int::select(h,net,address((Address::select(h,self,MultiAuctionImpl::$auctionOwner)))) = 0))) & ((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)hb))) = (int::select(h,net,address(hb))+int::select(h,net,address((Address::select(h,self,MultiAuctionImpl::$auctionOwner))))))))) & (((MultiAuctionImpl.State::select(h,self,MultiAuctionImpl::$state)) = MultiAuctionImpl.State::select(h,null,MultiAuctionImpl.State::$AUCTION_OPEN)) -> (\forall a; (((int::select(h,net,address(a)) > 0) -> ((boolean::select(h,(boolean[]::select(h,self,MultiAuctionImpl::$bidded)), arr((int)a))) = TRUE)) & (((\exists i; (((i >= 0) & (i < (int::select(h,(Address[]::select(h,self,MultiAuctionImpl::$bidders)),arr_length)))) & ((Address::select(h,(Address[]::select(h,self,MultiAuctionImpl::$bidders)), arr((int)i))) = a))))<->(((boolean::select(h,(boolean[]::select(h,self,MultiAuctionImpl::$bidded)), arr((int)a))) = TRUE))))))) & ((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)(Address::select(h,self,MultiAuctionImpl::$auctionOwner))))) = 0)) & (\forall a; ((int::select(h,(int[]::select(h,self,MultiAuctionImpl::$balances)), arr((int)a))) >= 0)))
        )
        \heuristics(userTaclets1)
    };
}
 
\problem {
     !  java.lang.Address::select(heap,
                                  msg,
                                  java.lang.Message::$sender)
      = self
   & !gross_to = gross_from
   & CInv(heap, self)
   & geq(int::select(heap,
                     msg,
                     java.lang.Message::$value),
         Z(0(#)))
   & !  java.lang.Address[]::select(heap,
                                    self,
                                    MultiAuctionImpl::$bidders)
      = null
   & !  int[]::select(heap,
                      self,
                      MultiAuctionImpl::$balances)
      = null
   & !  java.lang.Address::select(heap,
                                  self,
                                  MultiAuctionImpl::$auctionOwner)
      = null
   & !  int::select(heap,
                    self,
                    java.lang.Address::$balance)
      = null
   & !  boolean[]::select(heap,
                          self,
                          MultiAuctionImpl::$bidded)
      = null
   & !  MultiAuctionImpl.State::select(heap,
                                       self,
                                       MultiAuctionImpl::$state)
      = null
-> {savedHeap:=heap
    || heap:=store(heap,
                   net,
                   address(java.lang.Address::select(heap,
                                                     msg,
                                                     java.lang.Message::$sender)),
                   add(int::select(heap,
                                   net,
                                   address(java.lang.Address::select(heap,
                                                                     msg,
                                                                     java.lang.Message::$sender))),
                       int::select(heap,
                                   msg,
                                   java.lang.Message::$value)))}
     \[{
         self.placeOrIncreaseBid(msg)@MultiAuctionImpl;
       }\] (  CInv(heap, self)
            & (    MultiAuctionImpl.State::select(savedHeap,
                                                  self,
                                                  MultiAuctionImpl::$state)
                 = MultiAuctionImpl.State::select(savedHeap,
                                                  null,
                                                  MultiAuctionImpl.State::$AUCTION_OPEN)
               & !  java.lang.Address::select(savedHeap,
                                              msg,
                                              java.lang.Message::$sender)
                  = java.lang.Address::select(savedHeap,
                                              self,
                                              MultiAuctionImpl::$auctionOwner)
               & gt(int::select(savedHeap,
                                msg,
                                java.lang.Message::$value),
                    Z(0(#))))
            & \forall Field f;
                \forall java.lang.Object o;
                  (  elementOf(o,
                               f,
                               union(singleton(int[]::select(savedHeap,
                                                             self,
                                                             MultiAuctionImpl::$balances),
                                               arr((int)(java.lang.Address::select(savedHeap,
                                                                                   msg,
                                                                                   java.lang.Message::$sender)))),
                                     union(singleton(java.lang.Address[]::select(savedHeap,
                                                                                 self,
                                                                                 MultiAuctionImpl::$bidders),
                                                     arr(int::select(savedHeap,
                                                                     java.lang.Address[]::select(savedHeap,
                                                                                                 self,
                                                                                                 MultiAuctionImpl::$bidders),
                                                                     arr_length))),
                                           union(singleton(java.lang.Address[]::select(savedHeap,
                                                                                       self,
                                                                                       MultiAuctionImpl::$bidders),
                                                           arr_length),
                                                 union(singleton(boolean[]::select(savedHeap,
                                                                                   self,
                                                                                   MultiAuctionImpl::$bidded),
                                                                 arr((int)(java.lang.Address::select(savedHeap,
                                                                                                     msg,
                                                                                                     java.lang.Message::$sender)))),
                                                       singleton(net,
                                                                 address(java.lang.Address::select(savedHeap,
                                                                                                   msg,
                                                                                                   java.lang.Message::$sender))))))))
                   | !o = null
                   & !  boolean::select(savedHeap,
                                        o,
                                        java.lang.Object::<created>)
                      = TRUE
                   |   any::select(heap, o, f)
                     = any::select(savedHeap, o, f)))

}

\proof {
(keyLog "0" (keyUser "niklon" ) (keyVersion "e4a211603f"))

(autoModeTime "155887")

(branch "dummy ID"
(rule "sortsDisjoint1" (formula "1") (term "0,1,0,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "3,0,1,0"))
(rule "inEqSimp_gtToGeq" (formula "10") (term "1,1,0,0,1"))
(rule "times_zero_1" (formula "10") (term "1,0,0,1,1,0,0,1"))
(rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,1,0,0,1"))
(rule "mul_literals" (formula "10") (term "1,1,1,0,0,1"))
(rule "elementOfUnion" (formula "10") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "10") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "10") (term "1,1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,1,1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "10") (term "1,1,1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "1,1,1,1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,1,1,1,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_placeOrIncreaseBid,savedHeapBefore_placeOrIncreaseBid"))
(rule "simplifyUpdate2" (formula "10") (term "1"))
(rule "insertCInv" (formula "1") (inst "a=a") (inst "i=i") (inst "hb=hb"))
(rule "castDel" (formula "1") (term "0,2,0,1,0,0,1,0,1,1,0,0"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exLeft" (formula "1") (inst "sk=hb_0"))
(rule "eqSymm" (formula "2") (term "1,0,0,1,0,1"))
(rule "polySimp_homoEq" (formula "1") (term "1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "1") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,1,0,1"))
(rule "inEqSimp_gtToGeq" (formula "2") (term "0,0,0,1"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "1") (term "0,0,0,0"))
(rule "polySimp_sepPosMonomial" (formula "1") (term "1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
(rule "polySimp_mulAssoc" (formula "1") (term "0,1,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0,1,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0,0,1"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,1"))
(rule "nnf_imp2or" (formula "1") (term "1,0,0"))
(rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "2") (term "0,0,1"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,1"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,1"))
(rule "add_literals" (formula "2") (term "0,0,0,0,0,1"))
(rule "add_zero_left" (formula "2") (term "0,0,0,0,1"))
(rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
(rule "double_not" (formula "1") (term "1,0,1,0,0,0"))
(rule "double_not" (formula "1") (term "0,0,1,0,0,0"))
(rule "distr_forallAnd" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "all_unused" (formula "2"))
(rule "applyEq" (formula "1") (term "0,1,1,0") (ifseqformula "2"))
(rule "polySimp_sepNegMonomial" (formula "1") (term "1,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,1,0"))
(rule "distr_forallAnd" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "all_unused" (formula "2"))
(rule "distr_forallAnd" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "commute_or" (formula "5") (term "0,0,1"))
(rule "commute_and_2" (formula "5") (term "0,0,1,0,1"))
(rule "insertCInv" (formula "16") (term "0,0,0,1") (inst "a=a") (inst "i=i") (inst "hb=hb"))
(rule "castDel" (formula "16") (term "0,2,0,1,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "eqSymm" (formula "16") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,1"))
(rule "eqSymm" (formula "16") (term "1,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "16") (term "0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "16") (term "0,0,1,1,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "16") (term "0,0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "16") (term "0,0,0,0,1,1,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "16") (term "1,0,0,0,0,0,0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "16") (term "0,1,0,0,0,0,0,0,0,0,0,0,1"))
(rule "double_not" (formula "16") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,1"))
(rule "double_not" (formula "16") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,1"))
(rule "commute_and" (formula "5") (term "0,0,0,1,0,1"))
(rule "methodCallUnfoldArguments" (formula "16") (term "1"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "var"))
(rule "evalEqualityLeft" (formula "16") (term "1") (inst "#b=s"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "s"))
(rule "assignLocalVariableReadAttribute" (formula "16") (term "1"))
(rule "evalEqualityRight" (formula "16") (term "1,1") (inst "#b=s_1"))
(rule "sequentialToParallel2" (formula "16"))
(rule "simplifyUpdate3" (formula "16") (term "1,0"))
(rule "applyOnElementary" (formula "16") (term "1,0"))
(rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
(rule "applyOnPV" (formula "16") (term "0,0,1,0"))
(rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=MultiAuctionImpl_state_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "17") (term "0,1,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "s_1"))
(rule "assignLocalVariableEnumValue" (formula "16") (term "1"))
(rule "assignLocalVariableEqual" (formula "16") (term "1,1"))
(rule "eqSymm" (formula "16") (term "0,0,0,1,1"))
(rule "sequentialToParallel2" (formula "16") (term "1"))
(rule "simplifyUpdate2" (formula "16") (term "1"))
(rule "applyOnElementary" (formula "16") (term "0,1"))
(rule "sequentialToParallel2" (formula "16"))
(rule "requireSucc" (formula "16"))
(rule "simplifyUpdate2" (formula "1"))
(rule "simplifyUpdate2" (formula "17"))
(rule "simplifyUpdate3" (formula "1") (term "0"))
(rule "applyOnSkip" (formula "17") (term "1,0"))
(rule "parallelWithSkip2" (formula "17") (term "0"))
(rule "applyOnElementary" (formula "1") (term "0"))
(rule "sequentialToParallel1" (formula "1") (term "0,0"))
(rule "simplifyUpdate1" (formula "1") (term "0,0"))
(rule "simplifyUpdate3" (formula "1") (term "1,0,0,0"))
(rule "applyOnElementary" (formula "1") (term "1,0,0,0"))
(rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "2,0,1,0,0,0"))
(rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0"))
(rule "applyOnRigidTerm" (formula "1") (term "0,0"))
(rule "simplifyUpdate1" (formula "1") (term "2,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
(rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
(rule "applyOnPV" (formula "1") (term "0,0,0,0"))
(rule "applyOnPV" (formula "1") (term "1,0,0,0"))
(rule "applyOnRigidFormula" (formula "1"))
(rule "simplifyUpdate1" (formula "1") (term "1"))
(rule "applyOnPV" (formula "1") (term "0"))
(rule "ifthenelse_concrete3" (formula "1"))
(rule "boolean_not_equal_2" (formula "1") (term "1"))
(rule "concrete_or_4" (formula "1"))
(rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=MultiAuctionImpl_State_AUCTION_OPEN_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "eqSymm" (formula "1"))
(rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
(rule "concrete_not_1" (formula "4") (term "0"))
(rule "concrete_or_2" (formula "4"))
(rule "replace_known_left" (formula "6") (term "0") (ifseqformula "1"))
(rule "concrete_impl_1" (formula "6"))
(rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
(rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "4"))
(rule "polySimp_pullOutFactor1" (formula "5") (term "1"))
(rule "add_literals" (formula "5") (term "1,1"))
(rule "times_zero_1" (formula "5") (term "1"))
(rule "distr_forallAnd" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "emptyBlock" (formula "18") (term "1"))
(rule "cnf_eqv" (formula "7") (term "0"))
(rule "nnf_notEx" (formula "7") (term "0,1,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,1,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,1,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,1,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,1,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "1,0,0,0,1,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,0,1,0"))
(rule "add_zero_right" (formula "7") (term "0,0,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,1,0"))
(rule "mul_literals" (formula "7") (term "1,1,0,0,0,1,0"))
(rule "distr_forallAnd" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
(rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
(rule "qeq_literals" (formula "10"))
(rule "true_left" (formula "10"))
(rule "allLeft" (formula "10") (inst "t=hb_0"))
(rule "ex_pull_out2" (formula "7") (term "0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "cnf_rightDist" (formula "7") (term "0,0"))
(rule "commute_or" (formula "7") (term "1,0,0"))
(rule "cnf_rightDist" (formula "7") (term "0,0,0"))
(rule "commute_or" (formula "7") (term "0,0,0,0"))
(rule "commute_or" (formula "7") (term "1,0,0,0"))
(rule "methodCallUnfoldArguments" (formula "20") (term "1"))
(rule "variableDeclarationAssign" (formula "20") (term "1"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "var_1"))
(rule "assignLocalVariableNotEqual" (formula "20") (term "1"))
(rule "evalNegation" (formula "20") (term "1") (inst "#b=x"))
(rule "variableDeclarationAssign" (formula "20") (term "1"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "x"))
(rule "removeParenthesis" (formula "20") (term "1"))
(rule "evalEqualityLeft" (formula "20") (term "1") (inst "#b=a"))
(rule "variableDeclarationAssign" (formula "20") (term "1"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "a"))
(rule "assignLocalVariableReadAttributeNonThis" (formula "20") (term "1"))
(rule "evalEqualityRight" (formula "20") (term "1,1") (inst "#b=a_1"))
(rule "sequentialToParallel2" (formula "20"))
(rule "simplifyUpdate3" (formula "20") (term "1,0"))
(rule "applyOnElementary" (formula "20") (term "1,0"))
(rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
(rule "applyOnPV" (formula "20") (term "0,0,1,0"))
(rule "pullOutSelect" (formula "20") (term "0,1,0") (inst "selectSK=java_lang_Message_sender_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "21") (term "0,1,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "variableDeclarationAssign" (formula "20") (term "1"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "a_1"))
(rule "assignLocalVariableReadAttribute" (formula "20") (term "1"))
(rule "assignLocalVariableEqual" (formula "20") (term "1,1"))
(rule "assignLocalVariableNegation" (formula "20") (term "1,1,1"))
(rule "eqSymm" (formula "20") (term "0,0,0,1,1"))
(rule "sequentialToParallel2" (formula "20") (term "1,1"))
(rule "simplifyUpdate2" (formula "20") (term "1,1"))
(rule "applyOnElementary" (formula "20") (term "0,1,1"))
(rule "sequentialToParallel2" (formula "20") (term "1"))
(rule "simplifyUpdate2" (formula "20") (term "1"))
(rule "applyOnElementary" (formula "20") (term "0,1"))
(rule "sequentialToParallel1" (formula "20") (term "0,0,1"))
(rule "simplifyUpdate1" (formula "20") (term "0,0,1"))
(rule "applyOnElementary" (formula "20") (term "0,0,0,1"))
(rule "sequentialToParallel2" (formula "20"))
(rule "requireSucc" (formula "20"))
(rule "simplifyUpdate2" (formula "21"))
(rule "simplifyUpdate2" (formula "1"))
(rule "simplifyUpdate3" (formula "1") (term "0"))
(rule "applyOnSkip" (formula "21") (term "1,0"))
(rule "parallelWithSkip2" (formula "21") (term "0"))
(rule "applyOnElementary" (formula "1") (term "0"))
(rule "sequentialToParallel1" (formula "1") (term "0,0"))
(rule "simplifyUpdate1" (formula "1") (term "0,0"))
(rule "applyOnElementary" (formula "1") (term "0,0,0"))
(rule "sequentialToParallel1" (formula "1") (term "0,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
(rule "simplifyUpdate3" (formula "1") (term "1,0,0,0,0,0"))
(rule "applyOnElementary" (formula "1") (term "1,0,0,0,0,0"))
(rule "applyOnRigidTerm" (formula "1") (term "0,0"))
(rule "simplifyUpdate1" (formula "1") (term "2,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
(rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
(rule "applyOnPV" (formula "1") (term "0,0,0,0"))
(rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "2,0,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
(rule "ifthenelse_concrete3" (formula "1") (term "0,0,0"))
(rule "boolean_not_equal_2" (formula "1") (term "1,0,0,0"))
(rule "concrete_or_4" (formula "1") (term "0,0,0"))
(rule "applyOnRigidFormula" (formula "1"))
(rule "simplifyUpdate1" (formula "1") (term "1"))
(rule "applyOnPV" (formula "1") (term "0"))
(rule "ifthenelse_concrete4" (formula "1"))
(rule "boolean_not_equal_2" (formula "1") (term "1"))
(rule "concrete_or_4" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "applyOnRigidFormula" (formula "13"))
(rule "simplifyUpdate1" (formula "13") (term "1"))
(rule "simplifyUpdate1" (formula "13") (term "0"))
(rule "applyOnPV" (formula "13") (term "1"))
(rule "applyOnPV" (formula "13") (term "0"))
(rule "applyOnRigidTerm" (formula "13") (term "0"))
(rule "simplifyUpdate1" (formula "13") (term "2,0"))
(rule "simplifyUpdate1" (formula "13") (term "1,0"))
(rule "applyOnPV" (formula "13") (term "0,0"))
(rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=MultiAuctionImpl_auctionOwner_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "eqSymm" (formula "13"))
(rule "emptyBlock" (formula "21") (term "1"))
(rule "all_pull_out2" (formula "8") (term "0"))
(rule "swapQuantifiersAll" (formula "8"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(rule "commute_or_2" (formula "8") (term "0,0,0"))
(rule "commute_or" (formula "8") (term "0,0,0,0"))
(rule "commute_or_2" (formula "8") (term "0,0,0"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(rule "elim_forall4" (formula "8") (term "0"))
(rule "allLeft" (formula "2") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
(rule "applyEq" (formula "2") (term "0") (ifseqformula "10"))
(rule "inEqSimp_commuteLeq" (formula "2"))
(rule "arrLengthLengthNotNegative" (formula "7") (term "1,1,1,1,0,0"))
(rule "methodCallUnfoldArguments" (formula "22") (term "1"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "var_2"))
(rule "evalLocalVariableGreaterLeft" (formula "22") (term "1") (inst "#leftVar=x"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_1"))
(rule "assignLocalVariableReadAttributeNonThis" (formula "22") (term "1"))
(rule "assignLocalVariableGreaterThan" (formula "22") (term "1,1"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "sequentialToParallel2" (formula "22"))
(rule "requireSucc" (formula "22"))
(rule "simplifyUpdate2" (formula "1"))
(rule "simplifyUpdate2" (formula "23"))
(rule "simplifyUpdate3" (formula "1") (term "0"))
(rule "applyOnSkip" (formula "23") (term "1,0"))
(rule "parallelWithSkip2" (formula "23") (term "0"))
(rule "applyOnElementary" (formula "1") (term "0"))
(rule "applyOnRigidTerm" (formula "1") (term "0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "2,0,0"))
(rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
(rule "applyOnPV" (formula "1") (term "0,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
(rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "2,0,0,0,0"))
(rule "applyOnPV" (formula "1") (term "0,0,0,0,0"))
(rule "applyOnRigidFormula" (formula "1"))
(rule "applyOnPV" (formula "1") (term "0"))
(rule "simplifyUpdate1" (formula "1") (term "1"))
(rule "ifthenelse_concrete3" (formula "1"))
(rule "boolean_not_equal_2" (formula "1") (term "1"))
(rule "concrete_or_4" (formula "1"))
(rule "inEqSimp_gtToGeq" (formula "1"))
(rule "times_zero_1" (formula "1") (term "1,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1"))
(rule "mul_literals" (formula "1") (term "1"))
(rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_lang_Message_value_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "1"))
(rule "leq_literals" (formula "14") (term "0"))
(rule "concrete_or_1" (formula "14"))
(rule "true_left" (formula "14"))
(rule "emptyBlock" (formula "22") (term "1"))
(rule "unfoldAssignArray1" (formula "22") (term "1") (inst "#arr=x_arr"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_arr"))
(rule "assignLocalVariableReadAttribute" (formula "22") (term "1"))
(rule "unfoldAssignArray2" (formula "22") (term "1,1") (inst "#idxV=x"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
(rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=MultiAuctionImpl_balances_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_2"))
(rule "evalCastAddressToInt2" (formula "22") (term "1"))
(rule "unfoldAssignArray3" (formula "22") (term "1,1") (inst "#value=x_3"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
(rule "replaceKnownSelect_taclet_4" (formula "22") (term "0,0,1,0"))
(rule "replaceKnownAuxiliaryConstant_taclet_5" (formula "22") (term "0,0,1,0"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_3"))
(rule "eval_order_IntAddition_left" (formula "22") (term "1") (inst "#v0=x_4"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_4"))
(rule "unfoldReadArray1" (formula "22") (term "1") (inst "#arr=x_arr_1"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_arr_1"))
(rule "assignLocalVariableReadAttribute" (formula "22") (term "1"))
(rule "unfoldReadArray2" (formula "22") (term "1,1") (inst "#idxV=x_5"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
(rule "replaceKnownSelect_taclet_10" (formula "22") (term "0,1,0"))
(rule "replaceKnownAuxiliaryConstant_taclet_11" (formula "22") (term "0,1,0"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_5"))
(rule "evalCastAddressToInt2" (formula "22") (term "1"))
(rule "assignLocalVariableReadArray" (formula "22") (term "1,1"))
(rule "castDel" (formula "22") (term "0,2,0,0,1,1"))
(rule "eval_order_IntAddition_right" (formula "22") (term "1,1,1") (inst "#v0=x_5"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,0,1,0,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,0,1,0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,0,1,0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0,0,1,0"))
(rule "replaceKnownSelect_taclet_4" (formula "22") (term "0,0,1,0,0,1,0"))
(rule "replaceKnownAuxiliaryConstant_taclet_5" (formula "22") (term "0,0,1,0,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,1,0"))
(rule "applyOnPV" (formula "22") (term "1,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "2,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,2,0,1,0"))
(rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=arr_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_6"))
(rule "assignLocalVariableReadAttributeNonThis" (formula "22") (term "1"))
(rule "assignLocalVariableIntAddition" (formula "22") (term "1,1"))
(rule "assignArray" (formula "22") (term "1,1,1"))
(rule "castDel" (formula "22") (term "0,2,0,0,1,1,1"))
(rule "sequentialToParallel2" (formula "22") (term "1"))
(rule "simplifyUpdate2" (formula "22") (term "1"))
(rule "applyOnElementary" (formula "22") (term "0,1"))
(rule "sequentialToParallel2" (formula "22") (term "1"))
(rule "simplifyUpdate2" (formula "22") (term "1"))
(rule "applyOnElementary" (formula "22") (term "0,1"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "sequentialToParallel1" (formula "22") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "0,1,0"))
(rule "simplifyUpdate3" (formula "22") (term "1,0,0,1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0,0,1,0"))
(rule "sequentialToParallel1" (formula "22") (term "0,1,0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "0,1,0,0,1,0"))
(rule "simplifyUpdate3" (formula "22") (term "1,0,0,1,0,0,1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0,0,1,0,0,1,0"))
(rule "translateSolidityUintAddition" (formula "22") (term "1,0,1,0,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,1,0,0,1,0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,1,0,0,1,0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,1,0,0,1,0,0,1,0"))
(rule "replaceKnownSelect_taclet_8" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
(rule "replaceKnownAuxiliaryConstant_taclet_9" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "0,0,1,0"))
(rule "applyOnPV" (formula "22") (term "1,0,1,0"))
(rule "applyOnPV" (formula "22") (term "3,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "2,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,2,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "0,3,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,3,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,3,0,1,0"))
(rule "applyOnPV" (formula "22") (term "1,3,0,1,0"))
(rule "polySimp_addComm0" (formula "22") (term "3,0,1,0"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "bid"))
(rule "unfoldReadArray1" (formula "22") (term "1") (inst "#arr=x_arr"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_arr_2"))
(rule "assignLocalVariableReadAttribute" (formula "22") (term "1"))
(rule "unfoldReadArray2" (formula "22") (term "1,1") (inst "#idxV=x"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
(rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=MultiAuctionImpl_bidded_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "variableDeclarationAssign" (formula "22") (term "1"))
(rule "variableDeclaration" (formula "22") (term "1") (newnames "x_7"))
(rule "evalCastAddressToInt2" (formula "22") (term "1"))
(rule "assignLocalVariableReadArray" (formula "22") (term "1,1"))
(rule "castDel" (formula "22") (term "0,2,0,0,1,1"))
(rule "ifThenEvalGuard" (formula "22") (term "1,1,1") (inst "#b=x"))
(rule "sequentialToParallel2" (formula "22") (term "1"))
(rule "simplifyUpdate2" (formula "22") (term "1"))
(rule "applyOnElementary" (formula "22") (term "0,1"))
(rule "sequentialToParallel2" (formula "22"))
(rule "simplifyUpdate2" (formula "22"))
(rule "simplifyUpdate3" (formula "22") (term "1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0"))
(rule "sequentialToParallel1" (formula "22") (term "0,1,0"))
(rule "simplifyUpdate3" (formula "22") (term "1,0,0,1,0"))
(rule "applyOnElementary" (formula "22") (term "1,0,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,1,0"))
(rule "applyOnPV" (formula "22") (term "1,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,0,2,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "0,0,0,2,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "2,0,0,0,2,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,0,0,0,2,0,1,0"))
(rule "simplifyUpdate1" (formula "22") (term "1,0,0,0,2,0,1,0"))
(rule "applyOnRigidTerm" (formula "22") (term "2,0,1,0"))
(rule "applyOnPV" (formula "22") (term "0,2,0,1,0"))
(rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=arr_1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "eqSymm" (formula "1") (term "0,0,0"))
(rule "eqSymm" (formula "1") (term "1,0,0"))
(rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
(rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "19"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0,0"))
(rule "concrete_and_2" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x_8"))
(rule "assignLocalVariableNegation" (formula "23") (term "1"))
(rule "ifThenSplit" (formula "23") (term "1,1"))
(rule "sequentialToParallel2" (formula "23"))
(rule "simplifyUpdate2" (formula "23"))
(rule "simplifyUpdate3" (formula "23") (term "1,0"))
(rule "applyOnElementary" (formula "23") (term "1,0"))
(rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
(rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
(rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
(rule "applyOnRigidFormula" (formula "23"))
(rule "simplifyUpdate2" (formula "23") (term "2"))
(rule "simplifyUpdate2" (formula "23") (term "0"))
(rule "simplifyUpdate2" (formula "23") (term "1"))
(rule "applyOnRigidFormula" (formula "23") (term "0"))
(rule "simplifyUpdate1" (formula "23") (term "1,0"))
(rule "applyOnPV" (formula "23") (term "0,0"))
(rule "ifthenelse_concrete4" (formula "23") (term "0"))
(rule "boolean_not_equal_2" (formula "23") (term "1,0"))
(rule "concrete_or_4" (formula "23") (term "0"))
(rule "ifthenelse_negated_for" (formula "23"))
(rule "pullOutSelect" (formula "1") (term "0,0,2,0") (inst "selectSK=java_lang_Message_sender_1"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "replaceKnownSelect_taclet_4" (formula "1") (term "2,0"))
(rule "replaceKnownAuxiliaryConstant_taclet_5" (formula "1") (term "2,0"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "equalUnique" (formula "1") (term "1,0,0"))
(rule "concrete_and_4" (formula "1") (term "0,0"))
(rule "ifthenelse_false" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "2") (term "0,0,2,0") (ifseqformula "1"))
(rule "applyEqReverse" (formula "24") (term "0,0,2,0,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "ifthenelse_split_for" (formula "22"))
(branch "self.bidded[(int)msg.sender] = TRUE TRUE"
   (rule "functionCallEmpty" (formula "23") (term "1"))
   (rule "emptyProgram" (formula "23") (term "1"))
   (rule "applyOnRigidFormula" (formula "23"))
   (rule "applyOnRigidFormula" (formula "23") (term "0"))
   (rule "simplifyUpdate2" (formula "23") (term "1,0"))
   (rule "simplifyUpdate2" (formula "23") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,1"))
   (rule "simplifyUpdate2" (formula "23") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,1,0"))
   (rule "replace_known_left" (formula "23") (term "1,1,0") (ifseqformula "2"))
   (rule "concrete_and_3" (formula "23") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
   (rule "eqSymm" (formula "23") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,1"))
   (rule "eqSymm" (formula "23") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "23") (term "0,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
   (rule "eqSymm" (formula "23") (term "0,1,0"))
   (rule "replace_known_left" (formula "23") (term "0,1,0") (ifseqformula "3"))
   (rule "concrete_and_1" (formula "23") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "2,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
   (rule "replace_known_right" (formula "23") (term "0,1,0") (ifseqformula "15"))
   (rule "concrete_not_2" (formula "23") (term "1,0"))
   (rule "concrete_and_3" (formula "23") (term "0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0,0,0"))
   (rule "eqSymm" (formula "23") (term "0,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,2,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,1,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "23") (term "1,0,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,0,0,0"))
   (rule "eqSymm" (formula "23") (term "0,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,2,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,2,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,2,0,1,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,2,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,0,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,0,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "23") (term "0,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,1,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,0,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,1,0,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,0,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,1,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,1,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,1,1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "2,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate2" (formula "23") (term "0,0,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,0,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,1,0,0,1,1,0,0,0"))
   (rule "replaceKnownSelect_taclet_14" (formula "23") (term "1,0,1,0,0,1,1,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_16" (formula "23") (term "1,0,1,0,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,1,0,1,1,0,0,0"))
   (rule "replaceKnownSelect_taclet_14" (formula "23") (term "1,0,1,1,0,1,1,0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_16" (formula "23") (term "1,0,1,1,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate2" (formula "23") (term "0,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,1,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,1,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,1,1,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,1,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,2,0,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,2,0,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,2,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,2,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,0,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "2,0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,2,0,1,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,2,0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,2,0,1,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,2,0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "pullOutSelect" (formula "23") (term "1,0,1,0,0") (inst "selectSK=MultiAuctionImpl_balances_1"))
   (rule "applyEq" (formula "24") (term "1,0,1,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "24") (term "1,0,0,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "24") (term "1,0,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_10" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_11" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "1,0,1,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "1,0,1,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "1,0,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "23") (term "1,0,1,0,0,0") (inst "selectSK=MultiAuctionImpl_State_AUCTION_OPEN_1"))
   (rule "applyEq" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_2" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_3" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "1,0,1,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "23") (term "0,0,1,0,0,0") (inst "selectSK=MultiAuctionImpl_state_1"))
   (rule "applyEq" (formula "24") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_0" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "0,0,1,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_left" (formula "23") (term "0,1,0,0,0") (ifseqformula "3"))
   (rule "concrete_impl_1" (formula "23") (term "1,0,0,0"))
   (rule "replace_known_left" (formula "23") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "3"))
   (rule "concrete_not_1" (formula "23") (term "0,1,0,0,0,0,0,0,0"))
   (rule "concrete_or_2" (formula "23") (term "1,0,0,0,0,0,0,0"))
   (rule "pullOutSelect" (formula "23") (term "0,0,2,0,1,0,0") (inst "selectSK=MultiAuctionImpl_auctionOwner_1"))
   (rule "applyEq" (formula "24") (term "0,2,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "24") (term "0,2,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "24") (term "1,1,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_6" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "0,0,2,0,1,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "0,2,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "0,2,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "1,1,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "23") (term "1,1,1,0,0,1,0,1,0,0,0") (inst "selectSK=MultiAuctionImpl_bidders_0"))
   (rule "applyEq" (formula "24") (term "1,1,1,1,0,0,0,1,0,1,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "1,1,1,0,0,1,0,1,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "1,1,1,1,0,0,0,1,0,1,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "23") (term "0,1,0,0") (inst "selectSK=arr_2"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "eqClose" (formula "1") (term "0,0,0"))
   (rule "concrete_and_1" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "0,0"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "intCastEqual" (formula "1") (term "0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "16"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "0,1,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_left" (formula "23") (term "1,0,0") (ifseqformula "12"))
   (rule "concrete_and_3" (formula "23") (term "0,0"))
   (rule "pullOutSelect" (formula "23") (term "0,1,0,0,0,0,0,0") (inst "selectSK=address_0"))
   (rule "applyEq" (formula "24") (term "0,1,1,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "eqClose" (formula "1") (term "0,0,0,0"))
   (rule "concrete_and_1" (formula "1") (term "0,0,0"))
   (rule "equalUnique" (formula "1") (term "0,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "16"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "0,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "0,1,1,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_left" (formula "23") (term "1,0,0,0,0,0,0") (ifseqformula "7"))
   (rule "concrete_and_3" (formula "23") (term "0,0,0,0,0,0"))
   (rule "applyEq" (formula "23") (term "0,1,1,0,0,0,0,0") (ifseqformula "7"))
   (rule "add_zero_left" (formula "23") (term "1,1,0,0,0,0,0"))
   (rule "pullOutSelect" (formula "23") (term "1,1,1,0,0,0,1,0,1,0,0") (inst "selectSK=arr_length_0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "1,1,1,0,0,0,1,0,1,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "andRight" (formula "23") (userinteraction))
   (branch "Case 1"
      (rule "andRight" (formula "23") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "23") (userinteraction))
         (branch "Case 1"
            (rule "cut" (inst "cutFormula=geq(int::select(store(store(store(store(store(heap,
                                              net,
                                              address(java.lang.Address::select(heap,
                                                                                msg,
                                                                                java.lang.Message::$sender)),
                                              add(int::select(heap,
                                                              msg,
                                                              java.lang.Message::$value),
                                                  int::select(heap,
                                                              net,
                                                              address(java.lang.Address::select(heap,
                                                                                                msg,
                                                                                                java.lang.Message::$sender))))),
                                        int[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$balances),
                                        arr((int)(java.lang.Address::select(heap,
                                                                            msg,
                                                                            java.lang.Message::$sender))),
                                        add(int::select(heap,
                                                        msg,
                                                        java.lang.Message::$value),
                                            int::select(heap,
                                                        int[]::select(heap,
                                                                      self,
                                                                      MultiAuctionImpl::$balances),
                                                        arr((int)(java.lang.Address::select(heap,
                                                                                            msg,
                                                                                            java.lang.Message::$sender)))))),
                                  java.lang.Address[]::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$bidders),
                                  arr(int::select(heap,
                                                  java.lang.Address[]::select(heap,
                                                                              self,
                                                                              MultiAuctionImpl::$bidders),
                                                  arr_length)),
                                  java.lang.Address::select(heap,
                                                            msg,
                                                            java.lang.Message::$sender)),
                            java.lang.Address[]::select(heap,
                                                        self,
                                                        MultiAuctionImpl::$bidders),
                            arr_length,
                            add(Z(1(#)),
                                int::select(heap,
                                            java.lang.Address[]::select(heap,
                                                                        self,
                                                                        MultiAuctionImpl::$bidders),
                                            arr_length))),
                      boolean[]::select(heap,
                                        self,
                                        MultiAuctionImpl::$bidded),
                      arr((int)(java.lang.Address::select(heap,
                                                          msg,
                                                          java.lang.Message::$sender))),
                      TRUE),
                int[]::select(store(store(store(store(store(heap,
                                                            net,
                                                            address(java.lang.Address::select(heap,
                                                                                              msg,
                                                                                              java.lang.Message::$sender)),
                                                            add(int::select(heap,
                                                                            msg,
                                                                            java.lang.Message::$value),
                                                                int::select(heap,
                                                                            net,
                                                                            address(java.lang.Address::select(heap,
                                                                                                              msg,
                                                                                                              java.lang.Message::$sender))))),
                                                      int[]::select(heap,
                                                                    self,
                                                                    MultiAuctionImpl::$balances),
                                                      arr((int)(java.lang.Address::select(heap,
                                                                                          msg,
                                                                                          java.lang.Message::$sender))),
                                                      add(int::select(heap,
                                                                      msg,
                                                                      java.lang.Message::$value),
                                                          int::select(heap,
                                                                      int[]::select(heap,
                                                                                    self,
                                                                                    MultiAuctionImpl::$balances),
                                                                      arr((int)(java.lang.Address::select(heap,
                                                                                                          msg,
                                                                                                          java.lang.Message::$sender)))))),
                                                java.lang.Address[]::select(heap,
                                                                            self,
                                                                            MultiAuctionImpl::$bidders),
                                                arr(int::select(heap,
                                                                java.lang.Address[]::select(heap,
                                                                                            self,
                                                                                            MultiAuctionImpl::$bidders),
                                                                arr_length)),
                                                java.lang.Address::select(heap,
                                                                          msg,
                                                                          java.lang.Message::$sender)),
                                          java.lang.Address[]::select(heap,
                                                                      self,
                                                                      MultiAuctionImpl::$bidders),
                                          arr_length,
                                          add(Z(1(#)),
                                              int::select(heap,
                                                          java.lang.Address[]::select(heap,
                                                                                      self,
                                                                                      MultiAuctionImpl::$bidders),
                                                          arr_length))),
                                    boolean[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidded),
                                    arr((int)(java.lang.Address::select(heap,
                                                                        msg,
                                                                        java.lang.Message::$sender))),
                                    TRUE),
                              self,
                              MultiAuctionImpl::$balances),
                arr((int)(java.lang.Address::select(heap,
                                                    msg,
                                                    java.lang.Message::$sender)))),
    int::select(heap,
                int[]::select(heap,
                              self,
                              MultiAuctionImpl::$balances),
                arr((int)(hb_0))))<<origin(\"User_Interaction @ node 21562 (cut)\",\"[]\")>>") (userinteraction))
            (branch "CUT: geq(int::select(store(store(store(store(store(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender)), add(int::select(heap, msg, java.lang.Message::$value), int::select(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender))))), int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender))), add(int::select(heap, msg, java.lang.Message::$value), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))))), java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr(int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length)), java.lang.Address::select(heap, msg, java.lang.Message::$sender)), java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length, add(Z(1(#)), int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length))), boolean[]::select(heap, self, MultiAuctionImpl::$bidded), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender))), TRUE), int[]::select(store(store(store(store(store(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender)), add(int::select(heap, msg, java.lang.Message::$value), int::select(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender))))), int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender))), add(int::select(heap, msg, java.lang.Message::$value), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))))), java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr(int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length)), java.lang.Address::select(heap, msg, java.lang.Message::$sender)), java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length, add(Z(1(#)), int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length))), boolean[]::select(heap, self, MultiAuctionImpl::$bidded), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender))), TRUE), self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(hb_0)))) TRUE"
               (rule "exRight" (formula "24") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)") (userinteraction))
               (rule "allRight" (formula "24") (inst "sk=a_0"))
               (rule "eqSymm" (formula "24") (term "1"))
               (rule "eqSymm" (formula "24") (term "1,0,1,0"))
               (rule "eqSymm" (formula "24") (term "1,1,0"))
               (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=MultiAuctionImpl_balances_2"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "replaceKnownSelect_taclet0_22" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_23" (formula "1") (term "2,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "24") (term "0,0,0") (inst "selectSK=arr_3"))
               (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "replaceKnownSelect_taclet_12" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_13" (formula "1") (term "2,0"))
               (rule "eqClose" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "concrete_not_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_true" (formula "1") (term "0"))
               (rule "castDel" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "25") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "25") (term "1,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "0,0"))
               (rule "pullOutSelect" (formula "24") (term "0,1") (inst "selectSK=address_1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0"))
               (rule "ifthenelse_true" (formula "1") (term "0"))
               (rule "castDel" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "polySimp_homoEq" (formula "24") (term "1"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,1"))
               (rule "polySimp_rightDist" (formula "24") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "24") (term "0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "24") (term "0,1"))
               (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "24") (term "0,0,0,1"))
               (rule "add_literals" (formula "24") (term "1,0,0,0,1"))
               (rule "times_zero_1" (formula "24") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "24") (term "0,0,1"))
               (rule "polySimp_sepNegMonomial" (formula "24") (term "1"))
               (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
               (rule "polySimp_elimOne" (formula "24") (term "0,1"))
               (rule "pullOutSelect" (formula "24") (term "1,1,1,0") (inst "selectSK=arr_4"))
               (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "intCastEqual" (formula "1") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "25") (term "0,0"))
               (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "0,1,0,0"))
               (rule "pullOutSelect" (formula "25") (term "0,1,1,0") (inst "selectSK=address_2"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "26") (term "1,1,0"))
               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_5"))
               (rule "simplifySelectOfStore" (formula "3"))
               (rule "equalUnique" (formula "3") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "3") (term "1,0,0"))
               (rule "concrete_and_3" (formula "3") (term "0,0"))
               (rule "eqClose" (formula "3") (term "1,0,0"))
               (rule "concrete_and_3" (formula "3") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "3") (term "0,0"))
               (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "23"))
               (rule "concrete_and_4" (formula "3") (term "0,0"))
               (rule "ifthenelse_false" (formula "3") (term "0"))
               (rule "simplifySelectOfStore" (formula "3"))
               (rule "equalUnique" (formula "3") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "3") (term "1,0,0"))
               (rule "concrete_and_3" (formula "3") (term "0,0"))
               (rule "equalUnique" (formula "3") (term "1,0,0"))
               (rule "concrete_and_4" (formula "3") (term "0,0"))
               (rule "ifthenelse_false" (formula "3") (term "0"))
               (rule "simplifySelectOfStore" (formula "3"))
               (rule "replaceKnownSelect_taclet00000_46" (formula "3") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_47" (formula "3") (term "2,0"))
               (rule "equalUnique" (formula "3") (term "1,0,0,0"))
               (rule "equalUnique" (formula "3") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "3") (term "1,0,0"))
               (rule "concrete_and_3" (formula "3") (term "0,0"))
               (rule "eqSymm" (formula "3") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "3") (term "0,0,0"))
               (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "22"))
               (rule "concrete_and_2" (formula "3") (term "0,0,0"))
               (rule "concrete_and_2" (formula "3") (term "0,0"))
               (rule "ifthenelse_false" (formula "3") (term "0"))
               (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_6"))
               (rule "simplifySelectOfStore" (formula "2"))
               (rule "equalUnique" (formula "2") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "2") (term "0,0,0"))
               (rule "concrete_and_2" (formula "2") (term "0,0"))
               (rule "ifthenelse_false" (formula "2") (term "0"))
               (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "nnf_ex2all" (formula "27"))
               (rule "nnf_notAll" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
               (rule "commute_or" (formula "27") (term "0,1,0"))
               (rule "commute_or_2" (formula "1") (term "0,0"))
               (rule "commute_and_2" (formula "27"))
               (rule "cnf_rightDist" (formula "1") (term "0,0"))
               (rule "shift_paren_or" (formula "1") (term "1,0,0"))
               (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
               (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
               (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
               (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
               (rule "ifthenelse_split" (formula "2") (term "0"))
               (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 TRUE"
                  (rule "applyEqReverse" (formula "28") (term "1,1,1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                  (rule "ifthenelse_true" (formula "3") (term "0"))
                  (rule "applyEqReverse" (formula "27") (term "0,1,1") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "27") (term "0,1,0,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "26") (term "1,0,1") (ifseqformula "2"))
                  (rule "concrete_or_3" (formula "26") (term "0,1"))
                  (rule "concrete_or_1" (formula "26") (term "1"))
                  (rule "concrete_and_3" (formula "26"))
                  (rule "polySimp_addComm1" (formula "26") (term "1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "26") (term "0,1,0"))
                  (rule "add_literals" (formula "26") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "26") (term "0,1,0"))
                  (rule "add_zero_left" (formula "26") (term "1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "26") (term "0"))
                  (rule "polySimp_pullOutFactor1" (formula "26") (term "0,0"))
                  (rule "add_literals" (formula "26") (term "1,0,0"))
                  (rule "times_zero_1" (formula "26") (term "0,0"))
                  (rule "leq_literals" (formula "26") (term "0"))
                  (rule "concrete_and_1" (formula "26"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "26") (term "0,2,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "26") (term "0,0,2,1") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "4") (term "0,0,2,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                  (rule "eqSymm" (formula "18"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "3") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "3"))
                  (rule "mul_literals" (formula "16") (term "0,0"))
                  (rule "add_zero_left" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "allLeft" (formula "7") (inst "t=a_0"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "7") (term "0"))
                  (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "1,1,0"))
                  (rule "times_zero_1" (formula "7") (term "1,0"))
                  (rule "add_zero_right" (formula "7") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "5"))
                  (rule "leq_literals" (formula "7") (term "0"))
                  (rule "concrete_or_1" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "allLeft" (formula "19") (inst "t=a_0"))
                  (rule "commute_and" (formula "1") (term "0,0,0"))
                  (rule "commute_and_2" (formula "1") (term "0,0"))
                  (rule "allLeft" (formula "14") (inst "t=a_0"))
                  (rule "exLeft" (formula "14") (inst "sk=i_0"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "eqSymm" (formula "14") (term "0"))
                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "4"))
                  (rule "concrete_not_1" (formula "16") (term "0"))
                  (rule "concrete_or_2" (formula "16"))
                  (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "4"))
                  (rule "concrete_not_1" (formula "14") (term "1"))
                  (rule "concrete_or_4" (formula "14"))
                  (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                  (rule "concrete_not_1" (formula "15") (term "0"))
                  (rule "concrete_or_2" (formula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1"))
                  (rule "mul_literals" (formula "16") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                  (rule "allLeft" (formula "18") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "4"))
                  (rule "concrete_or_1" (formula "18") (term "0"))
                  (rule "concrete_or_1" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "allLeft" (formula "12") (inst "t=hb_0"))
                  (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "10"))
                  (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                  (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "11"))
                  (rule "leq_literals" (formula "13") (term "1"))
                  (rule "concrete_or_3" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "allLeft" (formula "19") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                  (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                  (rule "allLeft" (formula "8") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                  (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "8"))
                  (rule "times_zero_1" (formula "26") (term "0,0"))
                  (rule "add_zero_left" (formula "26") (term "0"))
                  (rule "allLeft" (formula "10") (inst "t=a_0"))
                  (rule "eqSymm" (formula "10") (term "1,0"))
                  (rule "eqSymm" (formula "10") (term "0,0"))
                  (rule "eqSymm" (formula "10") (term "1"))
                  (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "37"))
                  (rule "concrete_or_4" (formula "10"))
                  (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "29"))
                  (rule "concrete_or_4" (formula "10"))
                  (rule "applyEq" (formula "12") (term "0,2,0") (ifseqformula "10"))
                  (rule "applyEqRigid" (formula "9") (term "0,0,2,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "8") (term "0,0,2,1") (ifseqformula "10"))
                  (rule "applyEqRigid" (formula "11") (term "1,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "14") (term "0,0,2,0,1") (ifseqformula "10"))
                  (rule "applyEq" (formula "14") (term "0,0,2,0,0") (ifseqformula "10"))
                  (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "4"))
                  (rule "concrete_or_1" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEqRigid" (formula "3") (term "0,0,2,0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq0" (formula "3"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "applyEqRigid" (formula "7") (term "0,0,2,0") (ifseqformula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "7"))
                  (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "1,0"))
                  (rule "times_zero_1" (formula "7") (term "0"))
                  (rule "leq_literals" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "applyEqRigid" (formula "11") (term "0,0,2,1") (ifseqformula "9"))
                  (rule "close" (formula "35") (ifseqformula "11"))
               )
               (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 FALSE"
                  (rule "applyEqReverse" (formula "28") (term "1,1,1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "27") (term "1,1"))
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "18"))
                  (rule "ifthenelse_false" (formula "2") (term "0"))
                  (rule "applyEqReverse" (formula "27") (term "1,1,1") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "27") (term "0,1,0,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_right" (formula "26") (term "1,0,1") (ifseqformula "17"))
                  (rule "concrete_or_4" (formula "26") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "26") (term "1,0,0"))
                  (rule "allLeft" (formula "6") (inst "t=a_0"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                  (rule "allLeft" (formula "7") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "7"))
                  (rule "mul_literals" (formula "18") (term "0,0"))
                  (rule "add_zero_left" (formula "18") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "7"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "5"))
                  (rule "leq_literals" (formula "2") (term "0"))
                  (rule "concrete_or_1" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "allLeft" (formula "19") (inst "t=a_0"))
                  (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                  (rule "exLeft" (formula "14") (inst "sk=i_0"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "eqSymm" (formula "14") (term "0"))
                  (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "3"))
                  (rule "concrete_not_1" (formula "15") (term "0"))
                  (rule "concrete_or_2" (formula "15"))
                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "3"))
                  (rule "concrete_not_1" (formula "16") (term "0"))
                  (rule "concrete_or_2" (formula "16"))
                  (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "3"))
                  (rule "concrete_not_1" (formula "14") (term "1"))
                  (rule "concrete_or_4" (formula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1"))
                  (rule "mul_literals" (formula "16") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                  (rule "commute_and" (formula "1") (term "0,0,0"))
                  (rule "commute_and_2" (formula "1") (term "0,0"))
                  (rule "allLeft" (formula "18") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "3"))
                  (rule "concrete_or_1" (formula "18") (term "0"))
                  (rule "concrete_or_1" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "cut_direct" (formula "33") (term "0,0"))
                  (branch "CUT: geq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))), add(mul(int::select(heap, msg, java.lang.Message::$value), Z(neglit(1(#)))), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(a_0))))) TRUE"
                     (rule "concrete_and_1" (formula "34") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                     (rule "cut_direct" (formula "35") (term "0"))
                     (branch "CUT: int::select(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender))) = int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))) TRUE"
                        (rule "concrete_and_1" (formula "36"))
                        (rule "orRight" (formula "36"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,1,1,1,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,1,1,1,0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,0,0,1,0,0,0") (ifseqformula "1"))
                        (rule "allLeft" (formula "12") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                        (rule "eqSymm" (formula "12") (term "1"))
                        (rule "replace_known_right" (formula "12") (term "1,0") (ifseqformula "29"))
                        (rule "concrete_or_4" (formula "12") (term "0"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "1"))
                        (rule "concrete_or_3" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "allLeft" (formula "15") (inst "t=hb_0"))
                        (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "13"))
                        (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                        (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "14"))
                        (rule "leq_literals" (formula "16") (term "1"))
                        (rule "concrete_or_3" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "allLeft" (formula "16") (inst "t=a_0"))
                        (rule "allLeft" (formula "23") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                        (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                        (rule "allLeft" (formula "29") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                        (rule "allLeft" (formula "11") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                        (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "11"))
                        (rule "mul_literals" (formula "30") (term "0,0"))
                        (rule "add_zero_left" (formula "30") (term "0"))
                        (rule "allLeft" (formula "25") (inst "t=(int)(java.lang.Address::select(heap,
                                msg,
                                java.lang.Message::$sender))"))
                        (rule "allLeft" (formula "32") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender))))"))
                        (rule "allLeft" (formula "12") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender))))"))
                        (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "12"))
                        (rule "mul_literals" (formula "33") (term "0,0"))
                        (rule "add_zero_left" (formula "33") (term "0"))
                        (rule "cut_direct" (formula "17") (term "1"))
                        (branch "CUT: leq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(hb_0))), Z(0(#))) TRUE"
                           (rule "concrete_or_3" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_antiSymm" (formula "29") (ifseqformula "17"))
                           (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "29"))
                           (rule "add_zero_right" (formula "5") (term "1"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "29"))
                           (rule "inEqSimp_commuteGeq" (formula "9"))
                           (rule "applyEq" (formula "10") (term "1") (ifseqformula "29"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "29"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "applyEq" (formula "12") (term "1") (ifseqformula "29"))
                           (rule "applyEq" (formula "11") (term "1") (ifseqformula "29"))
                           (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "29"))
                           (rule "leq_literals" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "applyEq" (formula "29") (term "0") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "applyEq" (formula "15") (term "1") (ifseqformula "28"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1"))
                           (rule "inEqSimp_antiSymm" (formula "32") (ifseqformula "12"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "32"))
                           (rule "qeq_literals" (formula "33"))
                           (rule "true_left" (formula "33"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "32"))
                           (rule "leq_literals" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "11"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "30"))
                           (rule "leq_literals" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "applyEq" (formula "30") (term "0") (ifseqformula "29"))
                           (rule "qeq_literals" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "inEqSimp_antiSymm" (formula "27") (ifseqformula "10"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,0,1,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,0,1,0,0"))
                           (rule "applyEq" (formula "5") (term "0") (ifseqformula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "5"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,1,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,1,0,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,1,1,1,0,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,1,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,1,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,1,1,0,0,0,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,1,1,0,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,1,1,1,0,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,0,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,1,0,0,0") (ifseqformula "27"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,1,0,0,0"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "27"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "add_zero_right" (formula "3") (term "0"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "27"))
                           (rule "leq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "27") (term "0") (ifseqformula "26"))
                           (rule "qeq_literals" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,1,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,1,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,0,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,1,1,0,1,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,1,1,0,1,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,1,1,1,0,1,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,1,1,1,0,1,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,0,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,0,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,1,1,0,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,0,1,0,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,1,0,1,1,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,1,0,1,1,0,0,0"))
                           (rule "applyEq" (formula "1") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "4") (term "1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,1,0,0,0,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,1,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,1,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,1,0,1,1,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,1,0,1,1,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,0,0,1,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,0,0,1,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,1,0,1,0,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,1,0,1,0,0,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,1,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,1,1,0,0"))
                           (rule "applyEq" (formula "4") (term "1,3,0,0,1,0,1,0,0,0,0") (ifseqformula "26"))
                           (rule "add_zero_right" (formula "4") (term "3,0,0,1,0,1,0,0,0,0"))
                           (rule "inEqSimp_invertInEq0" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_antiSymm" (formula "25") (ifseqformula "7"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "25"))
                           (rule "leq_literals" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
                           (rule "qeq_literals" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "24"))
                           (rule "inEqSimp_commuteLeq" (formula "2"))
                           (rule "applyEq" (formula "38") (term "1") (ifseqformula "24"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "5"))
                           (rule "leq_literals" (formula "2") (term "0"))
                           (rule "concrete_or_1" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "allLeft" (formula "7") (inst "t=a_0"))
                           (rule "eqSymm" (formula "7") (term "0,0"))
                           (rule "eqSymm" (formula "7") (term "1,0"))
                           (rule "eqSymm" (formula "7") (term "1"))
                           (rule "replace_known_right" (formula "7") (term "1,0") (ifseqformula "37"))
                           (rule "concrete_or_4" (formula "7") (term "0"))
                           (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "24"))
                           (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "38"))
                           (rule "concrete_or_4" (formula "7"))
                           (rule "applyEqRigid" (formula "22") (term "0,0,2,0") (ifseqformula "7"))
                           (rule "applyEqRigid" (formula "9") (term "0,2,0") (ifseqformula "7"))
                           (rule "close" (formula "37") (ifseqformula "9"))
                        )
                        (branch "CUT: leq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(hb_0))), Z(0(#))) FALSE"
                           (rule "concrete_or_4" (formula "17"))
                           (rule "inEqSimp_leqRight" (formula "35"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "1"))
                           (rule "leq_literals" (formula "30") (term "0"))
                           (rule "concrete_or_1" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "allLeft" (formula "25") (inst "t=hb_0"))
                           (rule "exLeft" (formula "25") (inst "sk=i_1"))
                           (rule "andLeft" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "eqSymm" (formula "25") (term "0"))
                           (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "18"))
                           (rule "concrete_not_1" (formula "25") (term "1"))
                           (rule "concrete_or_4" (formula "25"))
                           (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "18"))
                           (rule "concrete_not_1" (formula "27") (term "0"))
                           (rule "concrete_or_2" (formula "27"))
                           (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "18"))
                           (rule "concrete_not_1" (formula "26") (term "0"))
                           (rule "concrete_or_2" (formula "26"))
                           (rule "inEqSimp_homoInEq0" (formula "27"))
                           (rule "polySimp_addComm1" (formula "27") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1"))
                           (rule "polySimp_rightDist" (formula "27") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                           (rule "mul_literals" (formula "27") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                           (rule "allLeft" (formula "31") (inst "t=i_1"))
                           (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                           (rule "applyEq" (formula "31") (term "0,0,2,0,0,0") (ifseqformula "25"))
                           (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "18"))
                           (rule "concrete_or_1" (formula "31") (term "0"))
                           (rule "concrete_or_1" (formula "31"))
                           (rule "true_left" (formula "31"))
                           (rule "allLeft" (formula "15") (inst "t=a_0"))
                           (rule "eqSymm" (formula "15") (term "0,0"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "eqSymm" (formula "15") (term "1"))
                           (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "49"))
                           (rule "concrete_or_4" (formula "15"))
                           (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "48"))
                           (rule "concrete_or_4" (formula "15"))
                           (rule "applyEq" (formula "19") (term "0,0,2,0") (ifseqformula "15"))
                           (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "19"))
                           (rule "concrete_or_1" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "applyEq" (formula "13") (term "0,0,2,1") (ifseqformula "15"))
                           (rule "applyEqRigid" (formula "11") (term "0,0,2,1") (ifseqformula "15"))
                           (rule "applyEq" (formula "12") (term "0,0,2,1") (ifseqformula "15"))
                           (rule "applyEqRigid" (formula "1") (term "0,0,2,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "15"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_zero_right" (formula "3") (term "0"))
                           (rule "applyEq" (formula "14") (term "0,0,2,1,0") (ifseqformula "15"))
                           (rule "applyEqRigid" (formula "25") (term "1") (ifseqformula "15"))
                           (rule "applyEqRigid" (formula "17") (term "0,2,0") (ifseqformula "15"))
                           (rule "applyEqRigid" (formula "6") (term "0,0,2,1,1") (ifseqformula "15"))
                           (rule "applyEq" (formula "15") (term "1,0,0,0") (ifseqformula "14"))
                           (rule "applyEqRigid" (formula "16") (term "0,0,2,1") (ifseqformula "14"))
                           (rule "close" (formula "47") (ifseqformula "16"))
                        )
                     )
                     (branch "CUT: int::select(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender))) = int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))) FALSE"
                        (rule "concrete_and_2" (formula "36"))
                        (rule "false_right" (formula "36"))
                        (rule "allLeft" (formula "14") (inst "t=hb_0"))
                        (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "12"))
                        (rule "cut_direct" (formula "14") (term "1"))
                        (branch "CUT: leq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(hb_0))), Z(0(#))) TRUE"
                           (rule "concrete_or_3" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "14"))
                           (rule "applyEq" (formula "9") (term "1") (ifseqformula "23"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "23"))
                           (rule "leq_literals" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "applyEq" (formula "8") (term "0") (ifseqformula "22"))
                           (rule "inEqSimp_commuteGeq" (formula "8"))
                           (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "4") (term "1"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "22"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "22"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                           (rule "qeq_literals" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "applyEq" (formula "12") (term "1") (ifseqformula "22"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "9"))
                           (rule "applyEq" (formula "3") (term "1,3,0,0,0,1,1,0,0") (ifseqformula "23"))
                           (rule "add_zero_right" (formula "3") (term "3,0,0,0,1,1,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "23"))
                           (rule "add_zero_right" (formula "3") (term "3,0,1,1,1,0,0,0,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,0,0,0,0,1,0,0,0") (ifseqformula "23"))
                           (rule "add_zero_right" (formula "3") (term "3,0,0,0,0,0,1,0,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,0,1,0,0,0,0,0") (ifseqformula "23"))
                           (rule "add_zero_right" (formula "3") (term "3,0,0,1,0,0,0,0,0"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "23"))
                           (rule "leq_literals" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEq" (formula "3") (term "1,3,0,0,1,0,1,0,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,0,1,0,1,0,0,0"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "22"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,0,0,1,1,0,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,0,0,1,1,0,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,1,1,1,0,1,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,1,1,1,0,1,0,0"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "22"))
                           (rule "inEqSimp_commuteGeq" (formula "4"))
                           (rule "applyEq" (formula "3") (term "1,3,0,0,1,0,1,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,0,1,0,1,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,0,0,1,0,0,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,0,0,1,0,0,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,1,1,1,0,1,0,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,1,0,0,0,1,0,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,1,0,0,0,1,0,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,1,0,1,1,0,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,1,0,1,1,0,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,1,0,1,0,0,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,1,0,1,0,0,0,0"))
                           (rule "applyEq" (formula "3") (term "1,3,0,1,0,1,1,0,0") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "3") (term "3,0,1,0,1,1,0,0"))
                           (rule "applyEq" (formula "34") (term "1") (ifseqformula "22"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1"))
                           (rule "inEqSimp_invertInEq0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "times_zero_2" (formula "3") (term "1"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "5"))
                           (rule "leq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "6"))
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                           (rule "qeq_literals" (formula "22"))
                           (rule "true_left" (formula "22"))
                           (rule "applyEq" (formula "6") (term "0") (ifseqformula "21"))
                           (rule "leq_literals" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                           (rule "leq_literals" (formula "1") (term "0"))
                           (rule "concrete_or_1" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "allLeft" (formula "5") (inst "t=a_0"))
                           (rule "allLeft" (formula "6") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                           (rule "allLeft" (formula "7") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "19"))
                           (rule "leq_literals" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "allLeft" (formula "7") (inst "t=hb_0"))
                           (rule "allLeft" (formula "12") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                           (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "11"))
                           (rule "leq_literals" (formula "12") (term "1"))
                           (rule "concrete_or_3" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "allLeft" (formula "12") (inst "t=a_0"))
                           (rule "allLeft" (formula "9") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                           (rule "eqSymm" (formula "9") (term "1"))
                           (rule "replace_known_right" (formula "9") (term "1,0") (ifseqformula "27"))
                           (rule "concrete_or_4" (formula "9") (term "0"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "22"))
                           (rule "leq_literals" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "22"))
                           (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "34"))
                           (rule "concrete_or_4" (formula "8"))
                           (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "22") (term "0,0,2,0") (ifseqformula "8"))
                           (rule "applyEq" (formula "33") (term "0,2,0") (ifseqformula "8"))
                           (rule "close" (formula "33") (ifseqformula "10"))
                        )
                        (branch "CUT: leq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(hb_0))), Z(0(#))) FALSE"
                           (rule "concrete_or_4" (formula "14"))
                           (rule "inEqSimp_leqRight" (formula "27"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "1"))
                           (rule "leq_literals" (formula "24") (term "0"))
                           (rule "concrete_or_1" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "allLeft" (formula "21") (inst "t=hb_0"))
                           (rule "exLeft" (formula "21") (inst "sk=i_1"))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "eqSymm" (formula "21") (term "0"))
                           (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "15"))
                           (rule "concrete_not_1" (formula "21") (term "1"))
                           (rule "concrete_or_4" (formula "21"))
                           (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "15"))
                           (rule "concrete_not_1" (formula "23") (term "0"))
                           (rule "concrete_or_2" (formula "23"))
                           (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "15"))
                           (rule "concrete_not_1" (formula "22") (term "0"))
                           (rule "concrete_or_2" (formula "22"))
                           (rule "inEqSimp_homoInEq0" (formula "23"))
                           (rule "polySimp_addComm1" (formula "23") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1"))
                           (rule "polySimp_rightDist" (formula "23") (term "1"))
                           (rule "mul_literals" (formula "23") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                           (rule "allLeft" (formula "25") (inst "t=i_1"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "applyEq" (formula "25") (term "0,0,2,0,0,0") (ifseqformula "21"))
                           (rule "replace_known_left" (formula "25") (term "0,0") (ifseqformula "15"))
                           (rule "concrete_or_1" (formula "25") (term "0"))
                           (rule "concrete_or_1" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                           (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "14"))
                           (rule "leq_literals" (formula "16") (term "1"))
                           (rule "concrete_or_3" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "allLeft" (formula "16") (inst "t=a_0"))
                           (rule "allLeft" (formula "12") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                           (rule "eqSymm" (formula "12") (term "1"))
                           (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "41"))
                           (rule "concrete_or_4" (formula "12"))
                           (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "33"))
                           (rule "concrete_or_4" (formula "12"))
                           (rule "applyEq" (formula "4") (term "0,0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "4") (term "0,0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,0,0,0,1,0,0,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "12"))
                           (rule "inEqSimp_homoInEq0" (formula "10"))
                           (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "1,0"))
                           (rule "times_zero_1" (formula "10") (term "0"))
                           (rule "qeq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "32") (term "0") (ifseqformula "11"))
                           (rule "eqSymm" (formula "32"))
                           (rule "applyEq" (formula "4") (term "0,2,0,0,0,0,1,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,0,2,0,1,0,1,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "5") (term "0,0,2,0") (ifseqformula "11"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "1,1,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0"))
                           (rule "add_zero_right" (formula "5") (term "0"))
                           (rule "applyEq" (formula "4") (term "0,0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,0,2,0,0,0,1,1,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,0,0,0,0,0,0,1,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,1,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "34") (term "0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,0,1,0,1,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "4") (term "0,2,1,3,0,0,1,0,0,0,1,0,0,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "40") (term "0,2,0") (ifseqformula "11"))
                           (rule "applyEq" (formula "40") (term "0,0,2,1") (ifseqformula "11"))
                           (rule "close" (formula "40") (ifseqformula "13"))
                        )
                     )
                  )
                  (branch "CUT: geq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))), add(mul(int::select(heap, msg, java.lang.Message::$value), Z(neglit(1(#)))), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(a_0))))) FALSE"
                     (rule "concrete_and_2" (formula "34") (term "0"))
                     (rule "concrete_and_2" (formula "34"))
                     (rule "false_right" (formula "34"))
                     (rule "inEqSimp_geqRight" (formula "33"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "1"))
                     (rule "mul_literals" (formula "22") (term "0,0"))
                     (rule "add_zero_left" (formula "22") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1"))
                     (rule "polySimp_rightDist" (formula "22") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                     (rule "mul_literals" (formula "22") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "polySimp_mulAssoc" (formula "3") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "8"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_literals" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
            )
            (branch "CUT: geq(int::select(store(store(store(store(store(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender)), add(int::select(heap, msg, java.lang.Message::$value), int::select(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender))))), int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender))), add(int::select(heap, msg, java.lang.Message::$value), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))))), java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr(int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length)), java.lang.Address::select(heap, msg, java.lang.Message::$sender)), java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length, add(Z(1(#)), int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length))), boolean[]::select(heap, self, MultiAuctionImpl::$bidded), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender))), TRUE), int[]::select(store(store(store(store(store(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender)), add(int::select(heap, msg, java.lang.Message::$value), int::select(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender))))), int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender))), add(int::select(heap, msg, java.lang.Message::$value), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))))), java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr(int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length)), java.lang.Address::select(heap, msg, java.lang.Message::$sender)), java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length, add(Z(1(#)), int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length))), boolean[]::select(heap, self, MultiAuctionImpl::$bidded), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender))), TRUE), self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(hb_0)))) FALSE"
               (rule "exRight" (formula "24") (inst "t=hb_0") (userinteraction))
               (rule "allRight" (formula "24") (inst "sk=a_0"))
               (rule "eqSymm" (formula "24") (term "1,1,0"))
               (rule "eqSymm" (formula "24") (term "1"))
               (rule "eqSymm" (formula "24") (term "1,0,1,0"))
               (rule "inEqSimp_geqRight" (formula "15"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "pullOutSelect" (formula "24") (term "0,0,0") (inst "selectSK=arr_3"))
               (rule "applyEq" (formula "25") (term "1,1") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "intCastEqual" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteGeq" (formula "25") (term "0,0"))
               (rule "pullOutSelect" (formula "25") (term "0,1,1,0") (inst "selectSK=address_1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "26") (term "1,1,0"))
               (rule "pullOutSelect" (formula "26") (term "0,1") (inst "selectSK=address_2"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "27") (term "1"))
               (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "10"))
               (rule "pullOutSelect" (formula "4") (term "1,0") (inst "selectSK=MultiAuctionImpl_balances_2"))
               (rule "simplifySelectOfStore" (formula "4"))
               (rule "equalUnique" (formula "4") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "4") (term "1,0,0"))
               (rule "concrete_and_3" (formula "4") (term "0,0"))
               (rule "equalUnique" (formula "4") (term "1,0,0"))
               (rule "concrete_and_4" (formula "4") (term "0,0"))
               (rule "ifthenelse_false" (formula "4") (term "0"))
               (rule "simplifySelectOfStore" (formula "4"))
               (rule "equalUnique" (formula "4") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "4") (term "0,0,0"))
               (rule "concrete_and_2" (formula "4") (term "0,0"))
               (rule "ifthenelse_false" (formula "4") (term "0"))
               (rule "simplifySelectOfStore" (formula "4"))
               (rule "replaceKnownSelect_taclet0_22" (formula "4") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_23" (formula "4") (term "2,0"))
               (rule "equalUnique" (formula "4") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "4") (term "1,0,0"))
               (rule "concrete_and_3" (formula "4") (term "0,0"))
               (rule "equalUnique" (formula "4") (term "1,0,0"))
               (rule "concrete_and_4" (formula "4") (term "0,0"))
               (rule "ifthenelse_false" (formula "4") (term "0"))
               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=arr_4"))
               (rule "simplifySelectOfStore" (formula "3"))
               (rule "equalUnique" (formula "3") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "3") (term "1,0,0"))
               (rule "concrete_and_3" (formula "3") (term "0,0"))
               (rule "equalUnique" (formula "3") (term "1,0,0"))
               (rule "concrete_and_4" (formula "3") (term "0,0"))
               (rule "ifthenelse_false" (formula "3") (term "0"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "pullOutSelect" (formula "27") (term "0,0,0") (inst "selectSK=arr_5"))
               (rule "applyEq" (formula "28") (term "0,1,1,0") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "intCastEqual" (formula "1") (term "0,0"))
               (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_6"))
               (rule "simplifySelectOfStore" (formula "5"))
               (rule "eqClose" (formula "5") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0,0"))
               (rule "equalUnique" (formula "5") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "5") (term "1,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "5") (term "0,0"))
               (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "27"))
               (rule "concrete_and_2" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "simplifySelectOfStore" (formula "5"))
               (rule "equalUnique" (formula "5") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "5") (term "0,0,0"))
               (rule "concrete_and_2" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "simplifySelectOfStore" (formula "5"))
               (rule "equalUnique" (formula "5") (term "1,0,0,0"))
               (rule "equalUnique" (formula "5") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "5") (term "1,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0"))
               (rule "eqSymm" (formula "5") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "5") (term "0,0,0"))
               (rule "replace_known_right" (formula "5") (term "1,0,0,0") (ifseqformula "25"))
               (rule "concrete_and_4" (formula "5") (term "0,0,0"))
               (rule "concrete_and_2" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "simplifySelectOfStore" (formula "5"))
               (rule "replaceKnownSelect_taclet_12" (formula "5") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_13" (formula "5") (term "2,0"))
               (rule "equalUnique" (formula "5") (term "1,0,0,0"))
               (rule "equalUnique" (formula "5") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "5") (term "1,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0"))
               (rule "eqClose" (formula "5") (term "0,0,0"))
               (rule "concrete_and_1" (formula "5") (term "0,0"))
               (rule "eqClose" (formula "5") (term "0,0"))
               (rule "ifthenelse_true" (formula "5") (term "0"))
               (rule "castDel" (formula "5") (term "0"))
               (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "inEqSimp_homoInEq0" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_7"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "nnf_ex2all" (formula "29"))
               (rule "nnf_notAll" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
               (rule "commute_and_2" (formula "29"))
               (rule "commute_or_2" (formula "1") (term "0,0"))
               (rule "commute_and" (formula "29") (term "0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0"))
               (rule "shift_paren_or" (formula "1") (term "1,0,0"))
               (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
               (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
               (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
               (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
               (rule "ifthenelse_split" (formula "4") (term "0"))
               (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 TRUE"
                  (rule "applyEqReverse" (formula "30") (term "1,1,1") (ifseqformula "5"))
                  (rule "hideAuxiliaryEq" (formula "5"))
                  (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "4"))
                  (rule "ifthenelse_true" (formula "2") (term "0"))
                  (rule "applyEqReverse" (formula "29") (term "0,1,0") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "29") (term "0,1,1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "polySimp_homoEq" (formula "28") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,1,1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,1,1"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,1,1"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor1" (formula "28") (term "0,0,0,1,1"))
                  (rule "add_literals" (formula "28") (term "1,0,0,0,1,1"))
                  (rule "times_zero_1" (formula "28") (term "0,0,0,1,1"))
                  (rule "add_zero_left" (formula "28") (term "0,0,1,1"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,1,0"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "2") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "2") (term "0,2,1,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "4") (term "0,0,2,1,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "5") (term "0,0,2,0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "20"))
                  (rule "replace_known_right" (formula "28") (term "1,0,1") (ifseqformula "20"))
                  (rule "concrete_or_4" (formula "28") (term "0,1"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "4") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "28") (term "0,0,2,0,0,0,1,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "28") (term "0,0,2,0,1,0,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "28") (term "0,2,1,0,1,1") (ifseqformula "3"))
                  (rule "polySimp_sepPosMonomial" (formula "28") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
                  (rule "mul_literals" (formula "5") (term "0,0,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "28") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0,1,0"))
                  (rule "allLeft" (formula "19") (inst "t=a_0"))
                  (rule "allLeft" (formula "9") (inst "t=a_0"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch "hb_0 = a_0 TRUE"
                     (rule "applyEqReverse" (formula "31") (term "1,0,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "2"))
                     (rule "ifthenelse_true" (formula "4") (term "0"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "4"))
                     (rule "applyEqReverse" (formula "30") (term "0,0,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "2"))
                     (rule "concrete_or_1" (formula "29") (term "1"))
                     (rule "concrete_and_3" (formula "29"))
                     (rule "polySimp_homoEq" (formula "29") (term "0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,1"))
                     (rule "add_literals" (formula "29") (term "1,0,1,1"))
                     (rule "times_zero_1" (formula "29") (term "0,1,1"))
                     (rule "add_zero_left" (formula "29") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0,0,0"))
                     (rule "add_literals" (formula "29") (term "1,0,0,0,0"))
                     (rule "times_zero_1" (formula "29") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "29") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "1"))
                     (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1"))
                     (rule "add_literals" (formula "29") (term "1,0,1"))
                     (rule "times_zero_1" (formula "29") (term "0,1"))
                     (rule "qeq_literals" (formula "29") (term "1"))
                     (rule "concrete_and_3" (formula "29"))
                     (rule "applyEqRigid" (formula "11") (term "0,0,2,1") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "9") (term "0,0,2,1,0") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "11") (term "0,2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "18") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "8") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,0"))
                     (rule "times_zero_1" (formula "8") (term "0"))
                     (rule "leq_literals" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "applyEqRigid" (formula "4") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "1,1,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,1,0,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "10"))
                     (rule "polySimp_pullOutFactor2" (formula "27") (term "0"))
                     (rule "add_literals" (formula "27") (term "1,0"))
                     (rule "times_zero_1" (formula "27") (term "0"))
                     (rule "eqClose" (formula "27"))
                     (rule "closeTrue" (formula "27"))
                  )
                  (branch "hb_0 = a_0 FALSE"
                     (rule "applyEqReverse" (formula "31") (term "1,0,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "30") (term "0,0"))
                     (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "21"))
                     (rule "ifthenelse_false" (formula "3") (term "0"))
                     (rule "applyEqReverse" (formula "30") (term "1,0,0") (ifseqformula "3"))
                     (rule "eqClose" (formula "30") (term "0,0"))
                     (rule "concrete_and_1" (formula "30") (term "0"))
                     (rule "applyEqReverse" (formula "30") (term "0,1,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_right" (formula "29") (term "0,1") (ifseqformula "20"))
                     (rule "concrete_or_2" (formula "29") (term "1"))
                     (rule "polySimp_addComm0" (formula "29") (term "1,0"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "1,1,0"))
                     (rule "polySimp_mulAssoc" (formula "29") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "0,1,0"))
                     (rule "polySimp_elimOne" (formula "29") (term "0,1,0"))
                     (rule "inEqSimp_subsumption1" (formula "29") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "29") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "29") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
                     (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,0"))
                     (rule "qeq_literals" (formula "29") (term "0,0"))
                     (rule "concrete_or_1" (formula "29") (term "0"))
                     (rule "concrete_and_1" (formula "29"))
                     (rule "commute_and" (formula "1") (term "0,0,0"))
                     (rule "allLeft" (formula "14") (inst "t=a_0"))
                     (rule "exLeft" (formula "14") (inst "sk=i_0"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "eqSymm" (formula "14") (term "0"))
                     (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "4"))
                     (rule "concrete_not_1" (formula "14") (term "1"))
                     (rule "concrete_or_4" (formula "14"))
                     (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "4"))
                     (rule "concrete_not_1" (formula "16") (term "0"))
                     (rule "concrete_or_2" (formula "16"))
                     (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                     (rule "concrete_not_1" (formula "15") (term "0"))
                     (rule "concrete_or_2" (formula "15"))
                     (rule "inEqSimp_homoInEq0" (formula "16"))
                     (rule "polySimp_addComm1" (formula "16") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1"))
                     (rule "polySimp_rightDist" (formula "16") (term "1"))
                     (rule "mul_literals" (formula "16") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "14"))
                     (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "4"))
                     (rule "concrete_or_1" (formula "18") (term "0"))
                     (rule "concrete_or_1" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "allLeft" (formula "12") (inst "t=hb_0"))
                     (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "10"))
                     (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                     (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "11"))
                     (rule "leq_literals" (formula "13") (term "1"))
                     (rule "concrete_or_3" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "allLeft" (formula "9") (inst "t=a_0"))
                     (rule "eqSymm" (formula "9") (term "0,0"))
                     (rule "eqSymm" (formula "9") (term "1"))
                     (rule "eqSymm" (formula "9") (term "1,0"))
                     (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "25"))
                     (rule "concrete_or_2" (formula "9") (term "0"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "26"))
                     (rule "concrete_or_2" (formula "9"))
                     (rule "close" (formula "34") (ifseqformula "9"))
                  )
               )
               (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 FALSE"
                  (rule "applyEqReverse" (formula "30") (term "1,1,1") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "eqSymm" (formula "29") (term "1,1"))
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "20"))
                  (rule "ifthenelse_false" (formula "2") (term "0"))
                  (rule "applyEqReverse" (formula "29") (term "1,1,1") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "29") (term "0,1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = hb_0 TRUE"
                     (rule "applyEqReverse" (formula "29") (term "1,0,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                     (rule "ifthenelse_true" (formula "3") (term "0"))
                     (rule "applyEqReverse" (formula "28") (term "1,1,0") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "28") (term "0,0,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "polySimp_homoEq" (formula "27") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "0,1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "27") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "27") (term "0,0,0,0,0"))
                     (rule "add_zero_left" (formula "27") (term "0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "27") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "27") (term "0,1,0"))
                     (rule "applyEq" (formula "27") (term "0,2,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "27") (term "0,0,2,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_zero_right" (formula "3") (term "0"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "19"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "27") (term "0,0,1") (ifseqformula "18"))
                     (rule "concrete_or_2" (formula "27") (term "0,1"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "27") (term "0,0,2,1,0,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "4") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "27") (term "1,0,0,0") (ifseqformula "9"))
                     (rule "polySimp_pullOutFactor2" (formula "27") (term "0,0,0"))
                     (rule "add_literals" (formula "27") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "27") (term "0,0,0"))
                     (rule "eqClose" (formula "27") (term "0,0"))
                     (rule "concrete_and_1" (formula "27") (term "0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,1,1,0,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,1,1,0,0,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,1,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,1,0,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,0,0,1,0,0") (ifseqformula "9"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "0,1,0"))
                     (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "5") (term "0"))
                     (rule "concrete_and_2" (formula "5"))
                     (rule "closeFalse" (formula "5"))
                  )
                  (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = hb_0 FALSE"
                     (rule "applyEqReverse" (formula "29") (term "1,0,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "28") (term "0,0"))
                     (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "18"))
                     (rule "ifthenelse_false" (formula "2") (term "0"))
                     (rule "applyEqReverse" (formula "28") (term "1,0,0") (ifseqformula "2"))
                     (rule "eqClose" (formula "28") (term "0,0"))
                     (rule "concrete_and_1" (formula "28") (term "0"))
                     (rule "applyEqReverse" (formula "28") (term "1,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "27") (term "0"))
                     (rule "allLeft" (formula "6") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                     (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                     (rule "exLeft" (formula "13") (inst "sk=i_0"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "eqSymm" (formula "13") (term "0"))
                     (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "3"))
                     (rule "concrete_not_1" (formula "13") (term "1"))
                     (rule "concrete_or_4" (formula "13"))
                     (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "3"))
                     (rule "concrete_not_1" (formula "15") (term "0"))
                     (rule "concrete_or_2" (formula "15"))
                     (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "3"))
                     (rule "concrete_not_1" (formula "14") (term "0"))
                     (rule "concrete_or_2" (formula "14"))
                     (rule "inEqSimp_homoInEq0" (formula "15"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1"))
                     (rule "polySimp_rightDist" (formula "15") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                     (rule "mul_literals" (formula "15") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                     (rule "allLeft" (formula "20") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                     (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "2"))
                     (rule "mul_literals" (formula "20") (term "0,0"))
                     (rule "add_zero_left" (formula "20") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1"))
                     (rule "polySimp_rightDist" (formula "20") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                     (rule "mul_literals" (formula "20") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "6"))
                     (rule "mul_literals" (formula "21") (term "0,0"))
                     (rule "add_zero_left" (formula "21") (term "0"))
                     (rule "allLeft" (formula "22") (inst "t=a_0"))
                     (rule "allLeft" (formula "7") (inst "t=a_0"))
                     (rule "inEqSimp_commuteLeq" (formula "7"))
                     (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "7"))
                     (rule "concrete_and_1" (formula "35"))
                     (rule "orRight" (formula "35"))
                     (rule "orRight" (formula "35"))
                     (rule "commute_and" (formula "1") (term "0,0,0"))
                     (rule "allLeft" (formula "9") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                     (rule "eqSymm" (formula "9") (term "1"))
                     (rule "replace_known_right" (formula "9") (term "1,0") (ifseqformula "28"))
                     (rule "concrete_or_4" (formula "9") (term "0"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "26"))
                     (rule "concrete_or_2" (formula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,1,1,0,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,1,1,0,0,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,1,1,0,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,1,0,0,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,1,1,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,1,0,0,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,1,1,0,0") (ifseqformula "9"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,1,0,0,0,1,0,0") (ifseqformula "9"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "applyEq" (formula "19") (term "0,0,2,0,0,0") (ifseqformula "15"))
                     (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "3"))
                     (rule "concrete_or_1" (formula "19") (term "0"))
                     (rule "concrete_or_1" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "allLeft" (formula "13") (inst "t=hb_0"))
                     (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "11"))
                     (rule "cut_direct" (formula "13") (term "1"))
                     (branch "CUT: leq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(hb_0))), Z(0(#))) TRUE"
                        (rule "concrete_or_3" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "inEqSimp_antiSymm" (formula "22") (ifseqformula "13"))
                        (rule "applyEq" (formula "6") (term "1") (ifseqformula "22"))
                        (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "22"))
                        (rule "add_zero_right" (formula "2") (term "1"))
                        (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "22"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "22"))
                        (rule "inEqSimp_homoInEq1" (formula "24"))
                        (rule "mul_literals" (formula "24") (term "1,0"))
                        (rule "add_zero_right" (formula "24") (term "0"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "22"))
                        (rule "inEqSimp_commuteGeq" (formula "7"))
                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "22"))
                        (rule "leq_literals" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                        (rule "qeq_literals" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "applyEq" (formula "11") (term "1") (ifseqformula "21"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22"))
                        (rule "mul_literals" (formula "22") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "22") (term "0"))
                        (rule "concrete_and_2" (formula "22"))
                        (rule "closeFalse" (formula "22"))
                     )
                     (branch "CUT: leq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(hb_0))), Z(0(#))) FALSE"
                        (rule "concrete_or_4" (formula "13"))
                        (rule "inEqSimp_leqRight" (formula "27"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "1"))
                        (rule "leq_literals" (formula "23") (term "0"))
                        (rule "concrete_or_1" (formula "23"))
                        (rule "true_left" (formula "23"))
                        (rule "allLeft" (formula "20") (inst "t=hb_0"))
                        (rule "exLeft" (formula "20") (inst "sk=i_1"))
                        (rule "andLeft" (formula "20"))
                        (rule "andLeft" (formula "20"))
                        (rule "eqSymm" (formula "20") (term "0"))
                        (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "14"))
                        (rule "concrete_not_1" (formula "22") (term "0"))
                        (rule "concrete_or_2" (formula "22"))
                        (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "14"))
                        (rule "concrete_not_1" (formula "20") (term "1"))
                        (rule "concrete_or_4" (formula "20"))
                        (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "14"))
                        (rule "concrete_not_1" (formula "21") (term "0"))
                        (rule "concrete_or_2" (formula "21"))
                        (rule "inEqSimp_homoInEq0" (formula "22"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                        (rule "mul_literals" (formula "22") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                        (rule "allLeft" (formula "24") (inst "t=i_1"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                        (rule "applyEq" (formula "24") (term "0,0,2,0,0,0") (ifseqformula "20"))
                        (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "14"))
                        (rule "concrete_or_1" (formula "24") (term "0"))
                        (rule "concrete_or_1" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "allLeft" (formula "15") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                        (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "13"))
                        (rule "leq_literals" (formula "15") (term "1"))
                        (rule "concrete_or_3" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "allLeft" (formula "15") (inst "t=a_0"))
                        (rule "allLeft" (formula "25") (inst "t=(int)(java.lang.Address::select(heap,
                                msg,
                                java.lang.Message::$sender))"))
                        (rule "allLeft" (formula "31") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender))))"))
                        (rule "allLeft" (formula "9") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender))))"))
                        (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "9"))
                        (rule "mul_literals" (formula "32") (term "0,0"))
                        (rule "add_zero_left" (formula "32") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "1"))
                        (rule "leq_literals" (formula "32") (term "0"))
                        (rule "concrete_or_1" (formula "32"))
                        (rule "true_left" (formula "32"))
                        (rule "allLeft" (formula "27") (inst "t=(int)(hb_0)"))
                        (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                        (rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(hb_0)))"))
                        (rule "allLeft" (formula "35") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(hb_0)))"))
                        (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "10"))
                        (rule "mul_literals" (formula "35") (term "0,0"))
                        (rule "add_zero_left" (formula "35") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "1"))
                        (rule "leq_literals" (formula "35") (term "0"))
                        (rule "concrete_or_1" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "allLeft" (formula "29") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                        (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                        (rule "allLeft" (formula "11") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                        (rule "allLeft" (formula "38") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                        (rule "inEqSimp_exactShadow3" (formula "38") (ifseqformula "11"))
                        (rule "mul_literals" (formula "38") (term "0,0"))
                        (rule "add_zero_left" (formula "38") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "1"))
                        (rule "leq_literals" (formula "38") (term "0"))
                        (rule "concrete_or_1" (formula "38"))
                        (rule "true_left" (formula "38"))
                        (rule "allLeft" (formula "14") (inst "t=a_0"))
                        (rule "eqSymm" (formula "14") (term "0,0"))
                        (rule "eqSymm" (formula "14") (term "1"))
                        (rule "eqSymm" (formula "14") (term "1,0"))
                        (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "51"))
                        (rule "concrete_or_2" (formula "14") (term "0"))
                        (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "52"))
                        (rule "concrete_or_2" (formula "14"))
                        (rule "close" (formula "53") (ifseqformula "14"))
                     )
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "23") (inst "sk=a_0") (userinteraction))
            (rule "andRight" (formula "23") (userinteraction))
            (branch "Case 1"
               (rule "orRight" (formula "23"))
               (rule "inEqSimp_leqRight" (formula "23"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=arr_3"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "intCastEqual" (formula "1") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "21"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "25") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=address_1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "allLeft" (formula "10") (inst "t=a_0"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "26"))
               (rule "concrete_or_2" (formula "10"))
               (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "exLeft" (formula "13") (inst "sk=i_0"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "eqSymm" (formula "13") (term "0"))
               (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "3"))
               (rule "concrete_not_1" (formula "15") (term "0"))
               (rule "concrete_or_2" (formula "15"))
               (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "3"))
               (rule "concrete_not_1" (formula "13") (term "1"))
               (rule "concrete_or_4" (formula "13"))
               (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "3"))
               (rule "concrete_not_1" (formula "14") (term "0"))
               (rule "concrete_or_2" (formula "14"))
               (rule "inEqSimp_homoInEq0" (formula "15"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1"))
               (rule "polySimp_rightDist" (formula "15") (term "1"))
               (rule "mul_literals" (formula "15") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1"))
               (rule "allLeft" (formula "20") (inst "t=a_0"))
               (rule "allLeft" (formula "6") (inst "t=a_0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "allLeft" (formula "7") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
               (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "7"))
               (rule "times_zero_1" (formula "23") (term "0,0"))
               (rule "add_zero_left" (formula "23") (term "0"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "msg.sender = a_0 TRUE"
                  (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
                  (rule "applyEq" (formula "7") (term "0,0,2,0") (ifseqformula "1"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "24"))
                  (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "1"))
                  (rule "close" (formula "32") (ifseqformula "3"))
               )
               (branch "msg.sender = a_0 FALSE"
                  (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "11") (term "0"))
                  (rule "concrete_and_2" (formula "11"))
                  (rule "closeFalse" (formula "11"))
               )
            )
            (branch "Case 2"
               (rule "equiv_right" (formula "23") (userinteraction))
               (branch "Case 1"
                  (rule "exLeft" (formula "1") (inst "sk=i_0"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "3"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=arr_3"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0"))
                  (rule "equalUnique" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "intCastEqual" (formula "1") (term "1,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "23"))
                  (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0"))
                  (rule "equalUnique" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                  (rule "simplifySelectOfStore" (formula "3"))
                  (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "3") (term "0,0"))
                  (rule "equalUnique" (formula "3") (term "1,0,0"))
                  (rule "eqSymm" (formula "3") (term "0,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "3") (term "0,0,0"))
                  (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "22"))
                  (rule "concrete_and_2" (formula "3") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "simplifySelectOfStore" (formula "3"))
                  (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "3") (term "0,0"))
                  (rule "equalUnique" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                  (rule "allLeft" (formula "7") (inst "t=a_0"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "allLeft" (formula "19") (inst "t=a_0"))
                  (rule "allLeft" (formula "12") (inst "t=a_0"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "30"))
                  (rule "concrete_or_2" (formula "12"))
                  (rule "allLeft" (formula "15") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                  (rule "exLeft" (formula "15") (inst "sk=i_1"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "eqSymm" (formula "15") (term "0"))
                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "4"))
                  (rule "concrete_not_1" (formula "16") (term "0"))
                  (rule "concrete_or_2" (formula "16"))
                  (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "4"))
                  (rule "concrete_not_1" (formula "17") (term "0"))
                  (rule "concrete_or_2" (formula "17"))
                  (rule "replace_known_left" (formula "15") (term "0,1") (ifseqformula "4"))
                  (rule "concrete_not_1" (formula "15") (term "1"))
                  (rule "concrete_or_4" (formula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "17"))
                  (rule "polySimp_addComm1" (formula "17") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1"))
                  (rule "polySimp_rightDist" (formula "17") (term "1"))
                  (rule "mul_literals" (formula "17") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                  (rule "allLeft" (formula "19") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                  (rule "applyEq" (formula "19") (term "0,0,2,0,0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "34"))
                  (rule "concrete_or_2" (formula "19") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "19") (term "0,0"))
                  (rule "concrete_and_2" (formula "19") (term "0"))
                  (rule "concrete_or_2" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                  (rule "andLeft" (formula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "19"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "1,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0"))
                  (rule "add_literals" (formula "19") (term "0"))
                  (rule "leq_literals" (formula "19"))
                  (rule "closeFalse" (formula "19"))
               )
               (branch "Case 2"
                  (rule "eqSymm" (formula "24") (term "1,0"))
                  (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_3"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "intCastEqual" (formula "1") (term "1,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
                  (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "nnf_ex2all" (formula "24"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                  (rule "allLeft" (formula "6") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                  (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "6"))
                  (rule "mul_literals" (formula "17") (term "0,0"))
                  (rule "add_zero_left" (formula "17") (term "0"))
                  (rule "allLeft" (formula "13") (inst "t=a_0"))
                  (rule "exLeft" (formula "13") (inst "sk=i_0"))
                  (rule "andLeft" (formula "13"))
                  (rule "andLeft" (formula "13"))
                  (rule "eqSymm" (formula "13") (term "0"))
                  (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "13") (term "1"))
                  (rule "concrete_or_4" (formula "13"))
                  (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "15") (term "0"))
                  (rule "concrete_or_2" (formula "15"))
                  (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
                  (rule "concrete_not_1" (formula "14") (term "0"))
                  (rule "concrete_or_2" (formula "14"))
                  (rule "inEqSimp_homoInEq0" (formula "15"))
                  (rule "polySimp_addComm1" (formula "15") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                  (rule "allLeft" (formula "21") (inst "t=a_0"))
                  (rule "allLeft" (formula "7") (inst "t=a_0"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "allLeft" (formula "17") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                  (rule "exLeft" (formula "17") (inst "sk=i_1"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "eqSymm" (formula "17") (term "0"))
                  (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "3"))
                  (rule "concrete_not_1" (formula "19") (term "0"))
                  (rule "concrete_or_2" (formula "19"))
                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "3"))
                  (rule "concrete_not_1" (formula "18") (term "0"))
                  (rule "concrete_or_2" (formula "18"))
                  (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "3"))
                  (rule "concrete_not_1" (formula "17") (term "1"))
                  (rule "concrete_or_4" (formula "17"))
                  (rule "inEqSimp_homoInEq0" (formula "19"))
                  (rule "polySimp_addComm1" (formula "19") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                  (rule "mul_literals" (formula "19") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                  (rule "allLeft" (formula "21") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "applyEq" (formula "21") (term "0,0,2,0,0,0") (ifseqformula "14"))
                  (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "2"))
                  (rule "concrete_or_1" (formula "21") (term "0"))
                  (rule "concrete_or_1" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "allLeft" (formula "1") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "16"))
                  (rule "qeq_literals" (formula "1") (term "0,1,0"))
                  (rule "concrete_and_2" (formula "1") (term "1,0"))
                  (rule "concrete_or_4" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "17"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_literals" (formula "1") (term "0,0,1"))
                  (rule "leq_literals" (formula "1") (term "0,1"))
                  (rule "concrete_and_2" (formula "1") (term "1"))
                  (rule "concrete_or_4" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_4"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0"))
                  (rule "equalUnique" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "33"))
                  (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
                  (rule "close" (formula "28") (ifseqformula "15"))
               )
            )
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "23") (inst "sk=a_0"))
         (rule "inEqSimp_geqRight" (formula "23"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_3"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0,0"))
         (rule "eqClose" (formula "1") (term "0,0,0,0"))
         (rule "concrete_and_1" (formula "1") (term "0,0,0"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "intCastEqual" (formula "1") (term "0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_4"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
         (rule "allLeft" (formula "6") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
         (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "6"))
         (rule "mul_literals" (formula "17") (term "0,0"))
         (rule "add_zero_left" (formula "17") (term "0"))
         (rule "allLeft" (formula "7") (inst "t=a_0"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
         (rule "exLeft" (formula "14") (inst "sk=i_0"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "eqSymm" (formula "14") (term "0"))
         (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "3"))
         (rule "concrete_not_1" (formula "14") (term "1"))
         (rule "concrete_or_4" (formula "14"))
         (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "3"))
         (rule "concrete_not_1" (formula "16") (term "0"))
         (rule "concrete_or_2" (formula "16"))
         (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "3"))
         (rule "concrete_not_1" (formula "15") (term "0"))
         (rule "concrete_or_2" (formula "15"))
         (rule "inEqSimp_homoInEq0" (formula "16"))
         (rule "polySimp_addComm1" (formula "16") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16"))
         (rule "polySimp_mulComm0" (formula "16") (term "1"))
         (rule "polySimp_rightDist" (formula "16") (term "1"))
         (rule "mul_literals" (formula "16") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1"))
         (rule "allLeft" (formula "22") (inst "t=a_0"))
         (rule "ifthenelse_split" (formula "1") (term "0"))
         (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 TRUE"
            (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "applyEq" (formula "2") (term "0,0,2,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "1"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
            (rule "eqSymm" (formula "23"))
            (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "20") (term "0,0,2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "13") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "2"))
            (rule "mul_literals" (formula "20") (term "0,0"))
            (rule "add_zero_left" (formula "20") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "20"))
            (rule "polySimp_mulLiterals" (formula "20") (term "0"))
            (rule "polySimp_elimOne" (formula "20") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "4"))
            (rule "qeq_literals" (formula "20") (term "0"))
            (rule "concrete_and_2" (formula "20"))
            (rule "closeFalse" (formula "20"))
         )
         (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 FALSE"
            (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "21"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (rule "concrete_and_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Case 2"
      (rule "allRight" (formula "23") (inst "sk=f_0"))
      (rule "allRight" (formula "23") (inst "sk=o_0"))
      (rule "orRight" (formula "23"))
      (rule "orRight" (formula "23"))
      (rule "orRight" (formula "23"))
      (rule "orRight" (formula "24"))
      (rule "orRight" (formula "25"))
      (rule "orRight" (formula "26"))
      (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "30"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "28"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "close" (formula "30") (ifseqformula "1"))
   )
)
(branch "self.bidded[(int)msg.sender] = TRUE FALSE"
   (rule "methodCallUnfoldTarget" (formula "23") (term "1") (inst "#v0=a_arr"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "a_arr"))
   (rule "assignLocalVariableReadAttribute" (formula "23") (term "1"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
   (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=MultiAuctionImpl_bidders_0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodCallUnfoldArguments" (formula "23") (term "1"))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_3"))
   (rule "assignLocalVariable" (formula "23") (term "1"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "var_4"))
   (rule "assignLocalVariableReadAttributeNonThis" (formula "23") (term "1"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "array_push" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "polySimp_addComm0" (formula "23") (term "3,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0,0,1,0"))
   (rule "replaceKnownSelect_taclet_19" (formula "23") (term "0,1,0,0,1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_20" (formula "23") (term "0,1,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "3,0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "3,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,3,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "2,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "1,3,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,1,3,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,1,3,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,1,3,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "1,1,3,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,1,3,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,2,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,2,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,2,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,2,0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "1,0,2,0,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,2,0,0,1,0"))
   (rule "pullOutSelect" (formula "23") (term "1,3,0,1,0") (inst "selectSK=arr_length_0"))
   (rule "applyEq" (formula "24") (term "0,2,0,0,1,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "1,3,0,1,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "24") (term "0,2,0,0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "emptyBlock" (formula "23") (term "1"))
   (rule "unfoldAssignArray1" (formula "23") (term "1") (inst "#arr=x_arr"))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_arr_3"))
   (rule "assignLocalVariableReadAttribute" (formula "23") (term "1"))
   (rule "unfoldAssignArray2" (formula "23") (term "1,1") (inst "#idxV=x"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
   (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=MultiAuctionImpl_bidded_1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_14" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_16" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_9"))
   (rule "evalCastAddressToInt2" (formula "23") (term "1"))
   (rule "assignArray" (formula "23") (term "1,1"))
   (rule "castDel" (formula "23") (term "0,2,0,0,1,1"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "sequentialToParallel2" (formula "23"))
   (rule "simplifyUpdate2" (formula "23"))
   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
   (rule "applyOnElementary" (formula "23") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "3,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,2,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,2,0,1,0"))
   (rule "applyOnRigidTerm" (formula "23") (term "0,0,2,0,1,0"))
   (rule "applyOnPV" (formula "23") (term "0,0,0,2,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "2,0,0,2,0,1,0"))
   (rule "simplifyUpdate1" (formula "23") (term "1,0,0,2,0,1,0"))
   (rule "pullOutSelect" (formula "23") (term "0,0,2,0,1,0") (inst "selectSK=java_lang_Message_sender_2"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_19" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_20" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "24") (term "0,0,2,0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "allLeft" (formula "3") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
   (rule "allLeft" (formula "14") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
   (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "3"))
   (rule "mul_literals" (formula "14") (term "0,0"))
   (rule "add_zero_left" (formula "14") (term "0"))
   (rule "functionCallEmpty" (formula "25") (term "1"))
   (rule "emptyProgram" (formula "25") (term "1"))
   (rule "applyOnRigidFormula" (formula "25"))
   (rule "applyOnRigidFormula" (formula "25") (term "1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0"))
   (rule "simplifyUpdate2" (formula "25") (term "1,0"))
   (rule "simplifyUpdate2" (formula "25") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,1"))
   (rule "simplifyUpdate2" (formula "25") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,1,1,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,0"))
   (rule "replace_known_left" (formula "25") (term "1,1,0") (ifseqformula "1"))
   (rule "concrete_and_3" (formula "25") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,1"))
   (rule "eqSymm" (formula "25") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "25") (term "0,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
   (rule "replace_known_left" (formula "25") (term "0,1,0") (ifseqformula "2"))
   (rule "concrete_and_1" (formula "25") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,0,1,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "2,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,1,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,0,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
   (rule "eqSymm" (formula "25") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,2,0,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,0,0,0,0"))
   (rule "eqSymm" (formula "25") (term "0,1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,1,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,1,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,0,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "25") (term "1,0,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,0,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
   (rule "eqSymm" (formula "25") (term "0,1,0"))
   (rule "replace_known_right" (formula "25") (term "0,1,0") (ifseqformula "16"))
   (rule "concrete_not_2" (formula "25") (term "1,0"))
   (rule "concrete_and_3" (formula "25") (term "0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,0,0,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate2" (formula "25") (term "0,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,2,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,2,0,1,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,2,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,2,0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,0,0,0"))
   (rule "eqSymm" (formula "25") (term "0,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,1,1,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,0,1,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,0,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,0,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,0,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,1,0,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,1,0,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,1,0,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,1,0,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,1,0,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,1,1,0,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,0,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,0,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,0,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,1,1,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,1,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,1,1,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,1,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,1,1,1,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "2,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate2" (formula "25") (term "0,0,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,0,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,0,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,1,0,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,1,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate2" (formula "25") (term "0,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,1,1,0,1,1,1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,2,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,2,0,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,2,0,1,1,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,2,0,1,1,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "2,0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "25") (term "1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,2,0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,2,0,1,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,2,0,1,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,2,0,1,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,0,0,0,1,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "25") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,0,1,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,0,1,0,0,0,0,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "0,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,1,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "25") (term "1,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "2,1,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "applyOnPV" (formula "25") (term "0,1,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "25") (term "1,1,1,1,1,0,0,0,1,0,1,1,0,0,0"))
   (rule "pullOutSelect" (formula "25") (term "1,0,0,1,0") (inst "selectSK=MultiAuctionImpl_balances_1"))
   (rule "applyEq" (formula "26") (term "1,0,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "26") (term "1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "26") (term "1,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "26") (term "1,0,1,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "26") (term "1,0,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_10" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_11" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "1,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "1,0,1,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "25") (term "0,0,2,0,1,0,0") (inst "selectSK=MultiAuctionImpl_auctionOwner_1"))
   (rule "applyEq" (formula "26") (term "0,2,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "26") (term "1,1,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "26") (term "0,2,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_6" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_7" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "26") (term "0,0,2,0,1,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "0,2,0,1,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "1,1,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "0,2,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "25") (term "1,0,1,0,0,0") (inst "selectSK=MultiAuctionImpl_State_AUCTION_OPEN_1"))
   (rule "applyEq" (formula "26") (term "1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_2" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_3" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "25") (term "0,0,1,0,0,0") (inst "selectSK=MultiAuctionImpl_state_1"))
   (rule "applyEq" (formula "26") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet_0" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet_1" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "26") (term "0,0,1,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_left" (formula "25") (term "0,1,0,0,0") (ifseqformula "2"))
   (rule "concrete_impl_1" (formula "25") (term "1,0,0,0"))
   (rule "replace_known_left" (formula "25") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "2"))
   (rule "concrete_not_1" (formula "25") (term "0,1,0,0,0,0,0,0,0"))
   (rule "concrete_or_2" (formula "25") (term "1,0,0,0,0,0,0,0"))
   (rule "pullOutSelect" (formula "25") (term "0,1,0,0") (inst "selectSK=arr_2"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
   (rule "concrete_and_2" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
   (rule "concrete_and_2" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "eqClose" (formula "1") (term "0,0,0"))
   (rule "concrete_and_1" (formula "1") (term "0,0"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "intCastEqual" (formula "1") (term "0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "26") (term "0,1,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_left" (formula "25") (term "1,0,0") (ifseqformula "12"))
   (rule "concrete_and_3" (formula "25") (term "0,0"))
   (rule "pullOutSelect" (formula "25") (term "0,1,0,0,0,0,0,0") (inst "selectSK=address_0"))
   (rule "applyEq" (formula "26") (term "0,1,1,0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "eqClose" (formula "1") (term "0,0,0,0"))
   (rule "concrete_and_1" (formula "1") (term "0,0,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "0,1,1,0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_left" (formula "25") (term "1,0,0,0,0,0,0") (ifseqformula "7"))
   (rule "concrete_and_3" (formula "25") (term "0,0,0,0,0,0"))
   (rule "applyEq" (formula "25") (term "0,1,1,0,0,0,0,0") (ifseqformula "7"))
   (rule "add_zero_left" (formula "25") (term "1,1,0,0,0,0,0"))
   (rule "pullOutSelect" (formula "25") (term "1,0,1,0,0,1,0,0") (inst "selectSK=MultiAuctionImpl_bidded_2"))
   (rule "applyEq" (formula "26") (term "1,0,1,1,0,1,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet1_28" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_30" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "26") (term "1,0,1,0,0,1,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "26") (term "1,0,1,1,0,1,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "25") (term "1,1,1,0,0,0,1,0,1,0,0") (inst "selectSK=arr_length_1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "eqClose" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "1") (term "0,0"))
   (rule "pullOutSelect" (formula "26") (term "1,1,1,0,0,1,0,1,0,0") (inst "selectSK=MultiAuctionImpl_bidders_1"))
   (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "replaceKnownSelect_taclet1_22" (formula "1") (term "2,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_24" (formula "1") (term "2,0"))
   (rule "equalUnique" (formula "1") (term "1,0,0,0"))
   (rule "concrete_and_4" (formula "1") (term "0,0,0"))
   (rule "concrete_and_2" (formula "1") (term "0,0"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "27") (term "1,1,1,0,0,1,0,1,0,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "2") (term "0,0,0") (ifseqformula "1"))
   (rule "eqClose" (formula "2") (term "0,0"))
   (rule "ifthenelse_true" (formula "2") (term "0"))
   (rule "applyEqReverse" (formula "27") (term "1,1,1,0,0,0,1,0,1,0,0") (ifseqformula "2"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "polySimp_addAssoc" (formula "25") (term "1,1,0,0,0,1,0,1,0,0"))
   (rule "add_literals" (formula "25") (term "0,1,1,0,0,0,1,0,1,0,0"))
   (rule "add_zero_left" (formula "25") (term "1,1,0,0,0,1,0,1,0,0"))
   (rule "allLeft" (formula "8") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "25"))
   (rule "concrete_or_2" (formula "8"))
   (rule "andRight" (formula "26") (userinteraction))
   (branch "Case 1"
      (rule "andRight" (formula "26") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "26") (userinteraction))
         (branch "Case 1"
            (rule "cut" (inst "cutFormula=geq(int::select(store(store(store(store(store(heap,
                                              net,
                                              address(java.lang.Address::select(heap,
                                                                                msg,
                                                                                java.lang.Message::$sender)),
                                              add(int::select(heap,
                                                              msg,
                                                              java.lang.Message::$value),
                                                  int::select(heap,
                                                              net,
                                                              address(java.lang.Address::select(heap,
                                                                                                msg,
                                                                                                java.lang.Message::$sender))))),
                                        int[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$balances),
                                        arr((int)(java.lang.Address::select(heap,
                                                                            msg,
                                                                            java.lang.Message::$sender))),
                                        add(int::select(heap,
                                                        msg,
                                                        java.lang.Message::$value),
                                            int::select(heap,
                                                        int[]::select(heap,
                                                                      self,
                                                                      MultiAuctionImpl::$balances),
                                                        arr((int)(java.lang.Address::select(heap,
                                                                                            msg,
                                                                                            java.lang.Message::$sender)))))),
                                  java.lang.Address[]::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$bidders),
                                  arr(int::select(heap,
                                                  java.lang.Address[]::select(heap,
                                                                              self,
                                                                              MultiAuctionImpl::$bidders),
                                                  arr_length)),
                                  java.lang.Address::select(heap,
                                                            msg,
                                                            java.lang.Message::$sender)),
                            java.lang.Address[]::select(heap,
                                                        self,
                                                        MultiAuctionImpl::$bidders),
                            arr_length,
                            add(Z(1(#)),
                                int::select(heap,
                                            java.lang.Address[]::select(heap,
                                                                        self,
                                                                        MultiAuctionImpl::$bidders),
                                            arr_length))),
                      boolean[]::select(heap,
                                        self,
                                        MultiAuctionImpl::$bidded),
                      arr((int)(java.lang.Address::select(heap,
                                                          msg,
                                                          java.lang.Message::$sender))),
                      TRUE),
                int[]::select(store(store(store(store(store(heap,
                                                            net,
                                                            address(java.lang.Address::select(heap,
                                                                                              msg,
                                                                                              java.lang.Message::$sender)),
                                                            add(int::select(heap,
                                                                            msg,
                                                                            java.lang.Message::$value),
                                                                int::select(heap,
                                                                            net,
                                                                            address(java.lang.Address::select(heap,
                                                                                                              msg,
                                                                                                              java.lang.Message::$sender))))),
                                                      int[]::select(heap,
                                                                    self,
                                                                    MultiAuctionImpl::$balances),
                                                      arr((int)(java.lang.Address::select(heap,
                                                                                          msg,
                                                                                          java.lang.Message::$sender))),
                                                      add(int::select(heap,
                                                                      msg,
                                                                      java.lang.Message::$value),
                                                          int::select(heap,
                                                                      int[]::select(heap,
                                                                                    self,
                                                                                    MultiAuctionImpl::$balances),
                                                                      arr((int)(java.lang.Address::select(heap,
                                                                                                          msg,
                                                                                                          java.lang.Message::$sender)))))),
                                                java.lang.Address[]::select(heap,
                                                                            self,
                                                                            MultiAuctionImpl::$bidders),
                                                arr(int::select(heap,
                                                                java.lang.Address[]::select(heap,
                                                                                            self,
                                                                                            MultiAuctionImpl::$bidders),
                                                                arr_length)),
                                                java.lang.Address::select(heap,
                                                                          msg,
                                                                          java.lang.Message::$sender)),
                                          java.lang.Address[]::select(heap,
                                                                      self,
                                                                      MultiAuctionImpl::$bidders),
                                          arr_length,
                                          add(Z(1(#)),
                                              int::select(heap,
                                                          java.lang.Address[]::select(heap,
                                                                                      self,
                                                                                      MultiAuctionImpl::$bidders),
                                                          arr_length))),
                                    boolean[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidded),
                                    arr((int)(java.lang.Address::select(heap,
                                                                        msg,
                                                                        java.lang.Message::$sender))),
                                    TRUE),
                              self,
                              MultiAuctionImpl::$balances),
                arr((int)(java.lang.Address::select(heap,
                                                    msg,
                                                    java.lang.Message::$sender)))),
    int::select(heap,
                int[]::select(heap,
                              self,
                              MultiAuctionImpl::$balances),
                arr((int)(hb_0))))<<origin(\"User_Interaction @ node 13131 (cut)\",\"[]\")>>") (userinteraction))
            (branch "CUT: self.balances[(int)msg.sender]@store(heap[net[msg.sender] := msg.value + int::select(heap, net, address(msg.sender))] [self.balances[(int)msg.sender] := msg.value + self.balances[(int)msg.sender]] [self.bidders[int::select(heap, self.bidders, arr_length)] := msg.sender], self.bidders, arr_length, 1 + int::select(heap, self.bidders, arr_length)) [self.bidded[(int)msg.sender] := TRUE] >= self.balances[(int)(hb_0)] TRUE"
               (rule "exRight" (formula "27") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)") (userinteraction))
               (rule "replaceKnownSelect_taclet1_34" (formula "1") (term "1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_38" (formula "1") (term "1,0"))
               (rule "allRight" (formula "27") (inst "sk=a_0"))
               (rule "eqSymm" (formula "27") (term "1,1,0"))
               (rule "eqSymm" (formula "27") (term "1"))
               (rule "eqSymm" (formula "27") (term "1,0,1,0"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_3"))
               (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "23"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "23"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "replaceKnownSelect_taclet_12" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_13" (formula "1") (term "2,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0"))
               (rule "ifthenelse_true" (formula "1") (term "0"))
               (rule "castDel" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "28") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "28") (term "1,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "27") (term "0,0"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "27") (term "1,1,1,0") (inst "selectSK=arr_4"))
               (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "22"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "intCastEqual" (formula "1") (term "0,0"))
               (rule "inEqSimp_homoInEq0" (formula "28") (term "0,0"))
               (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
               (rule "polySimp_addComm0" (formula "28") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "28") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "28") (term "0,1,0,0"))
               (rule "pullOutSelect" (formula "28") (term "0,1,1,0") (inst "selectSK=address_1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "29") (term "1,1,0"))
               (rule "pullOutSelect" (formula "29") (term "0,1") (inst "selectSK=address_2"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "concrete_not_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_true" (formula "1") (term "0"))
               (rule "castDel" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "30") (term "0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "polySimp_homoEq" (formula "29") (term "1"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
               (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
               (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0,0,1"))
               (rule "add_literals" (formula "29") (term "1,0,0,0,1"))
               (rule "times_zero_1" (formula "29") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "29") (term "0,0,1"))
               (rule "polySimp_sepNegMonomial" (formula "29") (term "1"))
               (rule "polySimp_mulLiterals" (formula "29") (term "0,1"))
               (rule "polySimp_elimOne" (formula "29") (term "0,1"))
               (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=arr_5"))
               (rule "simplifySelectOfStore" (formula "2"))
               (rule "equalUnique" (formula "2") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "2") (term "0,0,0"))
               (rule "concrete_and_2" (formula "2") (term "0,0"))
               (rule "ifthenelse_false" (formula "2") (term "0"))
               (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "6"))
               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "1,1,0"))
               (rule "times_zero_1" (formula "3") (term "1,0"))
               (rule "add_zero_right" (formula "3") (term "0"))
               (rule "polySimp_mulAssoc" (formula "3") (term "0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "5"))
               (rule "leq_literals" (formula "3") (term "0"))
               (rule "concrete_or_1" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "nnf_ex2all" (formula "30"))
               (rule "nnf_notAll" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
               (rule "commute_or" (formula "30") (term "0,1,0"))
               (rule "commute_or_2" (formula "1") (term "0,0"))
               (rule "commute_and_2" (formula "30"))
               (rule "cnf_rightDist" (formula "1") (term "0,0"))
               (rule "shift_paren_or" (formula "1") (term "1,0,0"))
               (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
               (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
               (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
               (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
               (rule "ifthenelse_split" (formula "2") (term "0"))
               (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 TRUE"
                  (rule "applyEqReverse" (formula "31") (term "1,1,1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                  (rule "ifthenelse_true" (formula "3") (term "0"))
                  (rule "applyEqReverse" (formula "30") (term "0,1,1") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "30") (term "0,1,0,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "29") (term "1,0,1") (ifseqformula "2"))
                  (rule "concrete_or_3" (formula "29") (term "0,1"))
                  (rule "concrete_or_1" (formula "29") (term "1"))
                  (rule "concrete_and_3" (formula "29"))
                  (rule "polySimp_addComm1" (formula "29") (term "1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "29") (term "0,1,0"))
                  (rule "add_literals" (formula "29") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "29") (term "0,1,0"))
                  (rule "add_zero_left" (formula "29") (term "1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0"))
                  (rule "polySimp_pullOutFactor1" (formula "29") (term "0,0"))
                  (rule "add_literals" (formula "29") (term "1,0,0"))
                  (rule "times_zero_1" (formula "29") (term "0,0"))
                  (rule "leq_literals" (formula "29") (term "0"))
                  (rule "concrete_and_1" (formula "29"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "28") (term "0,0,2,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "2"))
                  (rule "eqSymm" (formula "20"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "29") (term "0,0,2,1") (ifseqformula "2"))
                  (rule "applyEq" (formula "29") (term "0,2,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "11") (term "0,2,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "polySimp_mulAssoc" (formula "3") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "3"))
                  (rule "mul_literals" (formula "17") (term "0,0"))
                  (rule "add_zero_left" (formula "17") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
                  (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0"))
                  (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,1,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0"))
                  (rule "add_zero_right" (formula "6") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                  (rule "leq_literals" (formula "6") (term "0"))
                  (rule "concrete_or_1" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "commute_and" (formula "1") (term "0,0,0"))
                  (rule "commute_and_2" (formula "1") (term "0,0"))
                  (rule "allLeft" (formula "12") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                  (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "10"))
                  (rule "leq_literals" (formula "12") (term "1"))
                  (rule "concrete_or_3" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "allLeft" (formula "12") (inst "t=hb_0"))
                  (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "9"))
                  (rule "allLeft" (formula "8") (inst "t=a_0"))
                  (rule "eqSymm" (formula "8") (term "1,0"))
                  (rule "eqSymm" (formula "8") (term "1"))
                  (rule "eqSymm" (formula "8") (term "0,0"))
                  (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "32"))
                  (rule "concrete_or_4" (formula "8"))
                  (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "23"))
                  (rule "concrete_or_4" (formula "8"))
                  (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,0"))
                  (rule "times_zero_1" (formula "6") (term "0"))
                  (rule "leq_literals" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "applyEq" (formula "12") (term "0,0,2,0,1") (ifseqformula "7"))
                  (rule "applyEq" (formula "19") (term "0,0,2,0") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "9") (term "0,2,0") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "3") (term "0,0,2,0") (ifseqformula "7"))
                  (rule "inEqSimp_homoInEq0" (formula "3"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "applyEq" (formula "8") (term "1,0,0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "12") (term "0,0,2,0,0") (ifseqformula "7"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "29"))
                  (rule "concrete_or_2" (formula "12"))
                  (rule "applyEq" (formula "9") (term "0,0,2,1") (ifseqformula "7"))
                  (rule "close" (formula "30") (ifseqformula "9"))
               )
               (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 FALSE"
                  (rule "applyEqReverse" (formula "31") (term "1,1,1") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "eqSymm" (formula "30") (term "1,1"))
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "20"))
                  (rule "ifthenelse_false" (formula "2") (term "0"))
                  (rule "applyEqReverse" (formula "30") (term "1,1,1") (ifseqformula "2"))
                  (rule "applyEqReverse" (formula "30") (term "0,1,0,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_right" (formula "29") (term "1,0,1") (ifseqformula "19"))
                  (rule "concrete_or_4" (formula "29") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "29") (term "1,0,0"))
                  (rule "allLeft" (formula "18") (inst "t=a_0"))
                  (rule "allLeft" (formula "6") (inst "t=a_0"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "commute_and" (formula "1") (term "0,0,0"))
                  (rule "commute_and_2" (formula "1") (term "0,0"))
                  (rule "cut_direct" (formula "31") (term "0,0"))
                  (branch "CUT: geq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))), add(mul(int::select(heap, msg, java.lang.Message::$value), Z(neglit(1(#)))), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(a_0))))) TRUE"
                     (rule "concrete_and_1" (formula "32") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                     (rule "cut_direct" (formula "33") (term "0"))
                     (branch "CUT: int::select(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender))) = int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))) TRUE"
                        (rule "concrete_and_1" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "14") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "14"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "21"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,1,1,0,0,0,0,0"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "21"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,1,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,0,0,0,1,0,0,0"))
                        (rule "applyEq" (formula "21") (term "0") (ifseqformula "20"))
                        (rule "qeq_literals" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,1,1,0,1,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,1,1,0,0,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,0,1,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,1,1,0,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,1,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,1,1,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,1,1,0,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,0,0,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,0,1,1,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,0,1,0,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,1,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,1,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,1,0,1,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,1,0,1,0,0,0"))
                        (rule "applyEq" (formula "13") (term "0") (ifseqformula "20"))
                        (rule "leq_literals" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,1,0,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,1,1,0,1,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,0,1,0,0,0,0,0"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "19"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "19"))
                        (rule "inEqSimp_homoInEq1" (formula "5"))
                        (rule "mul_literals" (formula "5") (term "1,0"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,0,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,1,0,0,0,0"))
                        (rule "applyEq" (formula "1") (term "1") (ifseqformula "19"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,0,1,1,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,0,1,1,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,0,0,0,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,0,1,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,1,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,0,0,1,0,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,0,1,0,1,1,0,0"))
                        (rule "applyEq" (formula "4") (term "1,3,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "19"))
                        (rule "add_zero_right" (formula "4") (term "3,0,0,0,0,1,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "3"))
                        (rule "mul_literals" (formula "20") (term "0,0"))
                        (rule "add_zero_left" (formula "20") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "6"))
                        (rule "leq_literals" (formula "20") (term "0"))
                        (rule "concrete_or_1" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "5"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "polySimp_pullOutFactor3" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "19") (term "0,0"))
                        (rule "add_zero_left" (formula "19") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "7"))
                        (rule "leq_literals" (formula "19") (term "0"))
                        (rule "concrete_or_1" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "6"))
                        (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "9") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "2"))
                        (rule "mul_literals" (formula "21") (term "0,0"))
                        (rule "add_zero_left" (formula "21") (term "0"))
                        (rule "inEqSimp_subsumption6" (formula "21") (ifseqformula "7"))
                        (rule "greater_literals" (formula "21") (term "0,0"))
                        (rule "concrete_and_1" (formula "21") (term "0"))
                        (rule "mul_literals" (formula "21") (term "1,0"))
                        (rule "leq_literals" (formula "21") (term "0"))
                        (rule "concrete_or_1" (formula "21"))
                        (rule "true_left" (formula "21"))
                        (rule "allLeft" (formula "14") (inst "t=hb_0"))
                        (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "12"))
                        (rule "allLeft" (formula "11") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                        (rule "eqSymm" (formula "11") (term "1"))
                        (rule "replace_known_right" (formula "11") (term "1,0") (ifseqformula "26"))
                        (rule "concrete_or_4" (formula "11") (term "0"))
                        (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "1"))
                        (rule "eqSymm" (formula "11") (term "1"))
                        (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "22"))
                        (rule "concrete_or_3" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "allLeft" (formula "15") (inst "t=a_0"))
                        (rule "allLeft" (formula "16") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                        (rule "applyEq" (formula "16") (term "0,1") (ifseqformula "13"))
                        (rule "leq_literals" (formula "16") (term "1"))
                        (rule "concrete_or_3" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "allLeft" (formula "11") (inst "t=a_0"))
                        (rule "eqSymm" (formula "11") (term "1,0"))
                        (rule "eqSymm" (formula "11") (term "1"))
                        (rule "eqSymm" (formula "11") (term "0,0"))
                        (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "37"))
                        (rule "concrete_or_4" (formula "11"))
                        (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "36"))
                        (rule "concrete_or_4" (formula "11"))
                        (rule "applyEqRigid" (formula "15") (term "0,0,2,0,1") (ifseqformula "11"))
                        (rule "applyEqRigid" (formula "22") (term "0,0,2,0") (ifseqformula "11"))
                        (rule "applyEqRigid" (formula "15") (term "0,0,2,0,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "12") (term "1,0,0,0") (ifseqformula "11"))
                        (rule "applyEqRigid" (formula "13") (term "0,0,2,1") (ifseqformula "11"))
                        (rule "applyEqRigid" (formula "10") (term "0,0,2,1,0") (ifseqformula "11"))
                        (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "11"))
                        (rule "applyEqRigid" (formula "8") (term "0,0,2,0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq1" (formula "8"))
                        (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "1,0"))
                        (rule "times_zero_1" (formula "8") (term "0"))
                        (rule "leq_literals" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "applyEqRigid" (formula "3") (term "0,0,2,0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "applyEq" (formula "11") (term "0,2,0") (ifseqformula "9"))
                        (rule "close" (formula "34") (ifseqformula "11"))
                     )
                     (branch "CUT: int::select(heap, net, address(java.lang.Address::select(heap, msg, java.lang.Message::$sender))) = int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))) FALSE"
                        (rule "concrete_and_2" (formula "34"))
                        (rule "false_right" (formula "34"))
                        (rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                        (rule "eqSymm" (formula "10") (term "1"))
                        (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "34"))
                        (rule "concrete_or_4" (formula "10"))
                        (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "25"))
                        (rule "concrete_or_4" (formula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,1,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "33") (term "0,0,2,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "34") (term "0,2,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,0,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,1,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "21") (term "0,0,2,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,1,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "14") (term "0,2,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "4") (term "0,0,2,0") (ifseqformula "10"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,0,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "24") (term "0") (ifseqformula "10"))
                        (rule "eqSymm" (formula "24"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,0,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,0,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,1,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,1,3,0,0,0,0,0,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "3,0,0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,1,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,0,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,2,0,1,0,1,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "3") (term "0,2,1,3,0,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "2") (term "0,0,2,0") (ifseqformula "10"))
                        (rule "applyEq" (formula "2") (term "0,0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "9"))
                        (rule "inEqSimp_homoInEq0" (formula "6"))
                        (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "1,0"))
                        (rule "times_zero_1" (formula "6") (term "0"))
                        (rule "qeq_literals" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEq" (formula "2") (term "0,2,0,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "2") (term "0,0,2,1,3,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "2") (term "0,2,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                        (rule "applyEq" (formula "31") (term "0,0,2,1") (ifseqformula "8"))
                        (rule "close" (formula "31") (ifseqformula "10"))
                     )
                  )
                  (branch "CUT: geq(int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(java.lang.Address::select(heap, msg, java.lang.Message::$sender)))), add(mul(int::select(heap, msg, java.lang.Message::$value), Z(neglit(1(#)))), int::select(heap, int[]::select(heap, self, MultiAuctionImpl::$balances), arr((int)(a_0))))) FALSE"
                     (rule "concrete_and_2" (formula "32") (term "0"))
                     (rule "concrete_and_2" (formula "32"))
                     (rule "false_right" (formula "32"))
                     (rule "inEqSimp_geqRight" (formula "31"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                     (rule "mul_literals" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "1"))
                     (rule "mul_literals" (formula "19") (term "0,0"))
                     (rule "add_zero_left" (formula "19") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1"))
                     (rule "mul_literals" (formula "19") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "polySimp_mulAssoc" (formula "3") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                     (rule "add_literals" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "3"))
                     (rule "andLeft" (formula "8"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "polySimp_addComm0" (formula "8") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,1,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0"))
                     (rule "add_literals" (formula "8") (term "0"))
                     (rule "leq_literals" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
               )
            )
            (branch "CUT: self.balances[(int)msg.sender]@store(heap[net[msg.sender] := msg.value + int::select(heap, net, address(msg.sender))] [self.balances[(int)msg.sender] := msg.value + self.balances[(int)msg.sender]] [self.bidders[int::select(heap, self.bidders, arr_length)] := msg.sender], self.bidders, arr_length, 1 + int::select(heap, self.bidders, arr_length)) [self.bidded[(int)msg.sender] := TRUE] >= self.balances[(int)(hb_0)] FALSE"
               (rule "exRight" (formula "27") (inst "t=hb_0") (userinteraction))
               (rule "replaceKnownSelect_taclet1_34" (formula "17") (term "1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_38" (formula "17") (term "1,0"))
               (rule "allRight" (formula "27") (inst "sk=a_0"))
               (rule "eqSymm" (formula "27") (term "1,0,1,0"))
               (rule "eqSymm" (formula "27") (term "1"))
               (rule "eqSymm" (formula "27") (term "1,1,0"))
               (rule "inEqSimp_geqRight" (formula "17"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "pullOutSelect" (formula "27") (term "1,0,0") (inst "selectSK=arr_3"))
               (rule "applyEq" (formula "28") (term "1,1,1,0") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "23"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "23"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "intCastEqual" (formula "1") (term "0,0"))
               (rule "pullOutSelect" (formula "28") (term "0,0,0") (inst "selectSK=arr_4"))
               (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "23"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "intCastEqual" (formula "1") (term "0,0"))
               (rule "pullOutSelect" (formula "29") (term "0,1") (inst "selectSK=address_1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "30") (term "1"))
               (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "10"))
               (rule "pullOutSelect" (formula "30") (term "0,1,1,0") (inst "selectSK=address_2"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "eqClose" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "31") (term "1,1,0"))
               (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=arr_5"))
               (rule "simplifySelectOfStore" (formula "5"))
               (rule "equalUnique" (formula "5") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "5") (term "1,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0"))
               (rule "eqClose" (formula "5") (term "1,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0"))
               (rule "sortsDisjointModuloNull" (formula "5") (term "0,0"))
               (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "27"))
               (rule "concrete_and_4" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "simplifySelectOfStore" (formula "5"))
               (rule "equalUnique" (formula "5") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "5") (term "1,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0"))
               (rule "equalUnique" (formula "5") (term "1,0,0"))
               (rule "concrete_and_4" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "simplifySelectOfStore" (formula "5"))
               (rule "equalUnique" (formula "5") (term "1,0,0,0"))
               (rule "equalUnique" (formula "5") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "5") (term "1,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0"))
               (rule "eqSymm" (formula "5") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "5") (term "0,0,0"))
               (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "26"))
               (rule "concrete_and_2" (formula "5") (term "0,0,0"))
               (rule "concrete_and_2" (formula "5") (term "0,0"))
               (rule "ifthenelse_false" (formula "5") (term "0"))
               (rule "simplifySelectOfStore" (formula "5"))
               (rule "replaceKnownSelect_taclet_12" (formula "5") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet_13" (formula "5") (term "2,0"))
               (rule "eqClose" (formula "5") (term "1,0,0,0"))
               (rule "concrete_and_3" (formula "5") (term "0,0,0"))
               (rule "eqClose" (formula "5") (term "0,0,0"))
               (rule "concrete_and_1" (formula "5") (term "0,0"))
               (rule "equalUnique" (formula "5") (term "0,0,0"))
               (rule "concrete_not_2" (formula "5") (term "0,0"))
               (rule "ifthenelse_true" (formula "5") (term "0"))
               (rule "castDel" (formula "5") (term "0"))
               (rule "applyEqReverse" (formula "6") (term "0") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "inEqSimp_homoInEq0" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "pullOutSelect" (formula "4") (term "2,0") (inst "selectSK=arr_6"))
               (rule "simplifySelectOfStore" (formula "4"))
               (rule "equalUnique" (formula "4") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "4") (term "1,0,0"))
               (rule "concrete_and_3" (formula "4") (term "0,0"))
               (rule "equalUnique" (formula "4") (term "1,0,0"))
               (rule "concrete_and_4" (formula "4") (term "0,0"))
               (rule "ifthenelse_false" (formula "4") (term "0"))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=arr_7"))
               (rule "simplifySelectOfStore" (formula "3"))
               (rule "equalUnique" (formula "3") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "3") (term "1,0,0"))
               (rule "concrete_and_3" (formula "3") (term "0,0"))
               (rule "equalUnique" (formula "3") (term "1,0,0"))
               (rule "concrete_and_4" (formula "3") (term "0,0"))
               (rule "ifthenelse_false" (formula "3") (term "0"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "5"))
               (rule "mul_literals" (formula "20") (term "0,0"))
               (rule "add_zero_left" (formula "20") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "20"))
               (rule "polySimp_mulComm0" (formula "20") (term "1"))
               (rule "polySimp_rightDist" (formula "20") (term "1"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
               (rule "mul_literals" (formula "20") (term "0,1"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1"))
               (rule "nnf_ex2all" (formula "33"))
               (rule "nnf_notAll" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "1,0,0,0"))
               (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0"))
               (rule "commute_and_2" (formula "33"))
               (rule "commute_or_2" (formula "1") (term "0,0"))
               (rule "commute_and" (formula "33") (term "0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0"))
               (rule "shift_paren_or" (formula "1") (term "1,0,0"))
               (rule "applyEq_and_int4" (formula "33") (term "0"))
               (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
               (rule "commute_and" (formula "33") (term "0"))
               (rule "applyEq_or_int2" (formula "1") (term "0,0,0,0"))
               (rule "applyEq_or_int3" (formula "1") (term "1,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
               (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "1") (term "1,0,0,0"))
               (rule "commute_or" (formula "1") (term "0,0,0,0,0"))
               (rule "ifthenelse_split" (formula "3") (term "0"))
               (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = hb_0 TRUE"
                  (rule "applyEqReverse" (formula "34") (term "1,0,0") (ifseqformula "4"))
                  (rule "applyEqReverse" (formula "34") (term "1,1,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "3"))
                  (rule "ifthenelse_true" (formula "4") (term "0"))
                  (rule "applyEqReverse" (formula "33") (term "0,1,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "polySimp_homoEq" (formula "32") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,1,0"))
                  (rule "polySimp_addComm1" (formula "32") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0"))
                  (rule "polySimp_pullOutFactor1" (formula "32") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "32") (term "1,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "32") (term "0,0,0,1,0"))
                  (rule "add_zero_left" (formula "32") (term "0,0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                  (rule "polySimp_addComm0" (formula "32") (term "0,0,0,0"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "5") (term "0,0,2,0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "1,1,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "21") (term "0,0,2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "2") (term "0,2,1,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "22"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "13") (term "0,2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "30") (term "0,0,2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "4") (term "0,0,2,1,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "8") (term "0,0,2,0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq0" (formula "8"))
                  (rule "polySimp_pullOutFactor1" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "1,0"))
                  (rule "times_zero_1" (formula "8") (term "0"))
                  (rule "qeq_literals" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "30") (term "0,2,1,0,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "30") (term "0,0,2,0,0,0,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "30") (term "0,2,1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "30") (term "1,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "30") (term "1,0,1,0") (ifseqformula "10"))
                  (rule "polySimp_pullOutFactor2" (formula "30") (term "0,1,0"))
                  (rule "add_literals" (formula "30") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "30") (term "0,1,0"))
                  (rule "eqClose" (formula "30") (term "1,0"))
                  (rule "concrete_and_3" (formula "30") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "10"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "30") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                  (rule "concrete_and_2" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
               (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = hb_0 FALSE"
                  (rule "applyEqReverse" (formula "34") (term "1,0,0") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "34") (term "1,1,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "eqSymm" (formula "33") (term "1,0"))
                  (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "23"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "applyEqReverse" (formula "33") (term "1,1,0") (ifseqformula "3"))
                  (rule "eqClose" (formula "33") (term "1,0"))
                  (rule "concrete_and_3" (formula "33") (term "0"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "inEqSimp_commuteLeq" (formula "32") (term "0"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 TRUE"
                     (rule "applyEqReverse" (formula "33") (term "1,1,1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "2"))
                     (rule "ifthenelse_true" (formula "3") (term "0"))
                     (rule "applyEqReverse" (formula "32") (term "0,1,1") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "polySimp_homoEq" (formula "31") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,1,1"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1" (formula "31") (term "0,0,0,1,1"))
                     (rule "add_literals" (formula "31") (term "1,0,0,0,1,1"))
                     (rule "times_zero_1" (formula "31") (term "0,0,0,1,1"))
                     (rule "add_zero_left" (formula "31") (term "0,0,1,1"))
                     (rule "inEqSimp_homoInEq1" (formula "31") (term "0"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "21"))
                     (rule "replace_known_right" (formula "31") (term "0,0,1") (ifseqformula "21"))
                     (rule "concrete_or_2" (formula "31") (term "0,1"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "31") (term "0,2,1,0,1,1") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "22"))
                     (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "22"))
                     (rule "concrete_or_2" (formula "31") (term "1"))
                     (rule "applyEq" (formula "31") (term "0,0,2,1,0,0") (ifseqformula "2"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "30") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "6"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "11") (term "0,2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,1,3,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "19") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,2,1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,0,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "24") (term "0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0,2,0,1,1,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,1,1,1,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "0,0,2,0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "3,0,0,0,1,0,1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "31") (term "0,0,2,0,0,0,1") (ifseqformula "2"))
                     (rule "polySimp_sepPosMonomial" (formula "31") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "0,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                     (rule "mul_literals" (formula "3") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                     (rule "inEqSimp_subsumption1" (formula "31") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "31") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "31") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "31") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "31") (term "1,1,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "31") (term "0,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0"))
                     (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                     (rule "add_literals" (formula "31") (term "0,0,0"))
                     (rule "qeq_literals" (formula "31") (term "0,0"))
                     (rule "concrete_or_1" (formula "31") (term "0"))
                     (rule "concrete_and_1" (formula "31"))
                     (rule "commute_and" (formula "1") (term "0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "12") (inst "t=hb_0"))
                     (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "9"))
                     (rule "allLeft" (formula "13") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                     (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "10"))
                     (rule "leq_literals" (formula "13") (term "1"))
                     (rule "concrete_or_3" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "allLeft" (formula "8") (inst "t=a_0"))
                     (rule "eqSymm" (formula "8") (term "1"))
                     (rule "eqSymm" (formula "8") (term "1,0"))
                     (rule "eqSymm" (formula "8") (term "0,0"))
                     (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "33"))
                     (rule "concrete_or_4" (formula "8"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "23"))
                     (rule "concrete_or_2" (formula "8"))
                     (rule "close" (formula "24") (ifseqformula "8"))
                  )
                  (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 FALSE"
                     (rule "applyEqReverse" (formula "33") (term "1,1,1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "32") (term "1,1"))
                     (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "21"))
                     (rule "ifthenelse_false" (formula "2") (term "0"))
                     (rule "applyEqReverse" (formula "32") (term "1,1,1") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "allLeft" (formula "6") (inst "t=a_0"))
                     (rule "inEqSimp_commuteLeq" (formula "6"))
                     (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "6"))
                     (rule "concrete_and_1" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "allLeft" (formula "20") (inst "t=a_0"))
                     (rule "commute_and" (formula "1") (term "0,0,0"))
                     (rule "commute_and_2" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "8") (inst "t=java.lang.Address::select(heap,
                          msg,
                          java.lang.Message::$sender)"))
                     (rule "eqSymm" (formula "8") (term "1"))
                     (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "24"))
                     (rule "concrete_or_2" (formula "8") (term "0"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "25"))
                     (rule "concrete_or_2" (formula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "8"))
                     (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "12"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "20"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,1,1,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "20"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,0,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "20"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,0,1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,1,0,0") (ifseqformula "20"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "20"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "20"))
                     (rule "leq_literals" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "19"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "19"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,1,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,0,1,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "18"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "18"))
                     (rule "qeq_literals" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,0,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,1,1,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,1,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,1,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,1,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,1,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,0,1,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,1,1,0,0,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,1,1,1,0,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,1,1,0,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,1,1,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,0,1,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,0,1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,0,0,0,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,0,1,1,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,1,0,1,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,0,1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,1,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,0,1,1,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,0,1,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,1,0,1,1,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,1,0,1,0,0,0,0"))
                     (rule "applyEq" (formula "7") (term "1") (ifseqformula "18"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,0,1,0,1,0,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,0,1,0,1,0,0,0,0"))
                     (rule "applyEq" (formula "1") (term "1,3,0,0,0,0,1,0,0,0,1,0,0,0") (ifseqformula "18"))
                     (rule "add_zero_right" (formula "1") (term "3,0,0,0,0,1,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "allLeft" (formula "10") (inst "t=java.lang.Address::select(heap,
                          self,
                          MultiAuctionImpl::$auctionOwner)"))
                     (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "9"))
                     (rule "leq_literals" (formula "10") (term "1"))
                     (rule "concrete_or_3" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "allLeft" (formula "10") (inst "t=hb_0"))
                     (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "8"))
                     (rule "allLeft" (formula "11") (inst "t=a_0"))
                     (rule "allLeft" (formula "15") (inst "t=(int)(java.lang.Address::select(heap,
                                self,
                                MultiAuctionImpl::$auctionOwner))"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                     (rule "allLeft" (formula "5") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                     (rule "allLeft" (formula "23") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              self,
                                                              MultiAuctionImpl::$auctionOwner))))"))
                     (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "5"))
                     (rule "mul_literals" (formula "23") (term "0,0"))
                     (rule "add_zero_left" (formula "23") (term "0"))
                     (rule "allLeft" (formula "17") (inst "t=(int)(java.lang.Address::select(heap,
                                msg,
                                java.lang.Message::$sender))"))
                     (rule "allLeft" (formula "25") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender))))"))
                     (rule "allLeft" (formula "6") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(java.lang.Address::select(heap,
                                                              msg,
                                                              java.lang.Message::$sender))))"))
                     (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "6"))
                     (rule "mul_literals" (formula "26") (term "0,0"))
                     (rule "add_zero_left" (formula "26") (term "0"))
                     (rule "allLeft" (formula "19") (inst "t=(int)(hb_0)"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "allLeft" (formula "28") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(hb_0)))"))
                     (rule "allLeft" (formula "7") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(hb_0)))"))
                     (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "7"))
                     (rule "times_zero_1" (formula "29") (term "0,0"))
                     (rule "add_zero_left" (formula "29") (term "0"))
                     (rule "allLeft" (formula "21") (inst "t=(int)(a_0)"))
                     (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                     (rule "allLeft" (formula "31") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(a_0)))"))
                     (rule "allLeft" (formula "8") (inst "t=java.lang.Address::select(heap,
                          java.lang.Address[]::select(heap,
                                                      self,
                                                      MultiAuctionImpl::$bidders),
                          arr((int)(a_0)))"))
                     (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "8"))
                     (rule "mul_literals" (formula "32") (term "0,0"))
                     (rule "add_zero_left" (formula "32") (term "0"))
                     (rule "allLeft" (formula "11") (inst "t=a_0"))
                     (rule "eqSymm" (formula "11") (term "1"))
                     (rule "eqSymm" (formula "11") (term "1,0"))
                     (rule "eqSymm" (formula "11") (term "0,0"))
                     (rule "replace_known_right" (formula "11") (term "1,0") (ifseqformula "47"))
                     (rule "concrete_or_4" (formula "11") (term "0"))
                     (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "46"))
                     (rule "concrete_or_2" (formula "11"))
                     (rule "close" (formula "48") (ifseqformula "11"))
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "26") (inst "sk=a_0") (userinteraction))
            (rule "andRight" (formula "26") (userinteraction))
            (branch "Case 1"
               (rule "orRight" (formula "26"))
               (rule "inEqSimp_leqRight" (formula "26"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_3"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "intCastEqual" (formula "1") (term "0,0"))
               (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "28"))
               (rule "false_to_not_true" (formula "1"))
               (rule "ifthenelse_concrete3" (formula "1") (term "0"))
               (rule "notLeft" (formula "1"))
               (rule "orRight" (formula "18"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=address_1"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "19"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=arr_4"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "equalUnique" (formula "1") (term "1,0,0"))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "24"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "intCastEqual" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "19"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "1,0,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "hideAuxiliaryEqConcrete2" (formula "29"))
               (rule "allLeft" (formula "10") (inst "t=a_0"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "20"))
               (rule "concrete_or_2" (formula "10"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (rule "concrete_and_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Case 2"
               (rule "equiv_right" (formula "26") (userinteraction))
               (branch "Case 1"
                  (rule "exLeft" (formula "1") (inst "sk=i_0"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "3"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=arr_3"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "eqClose" (formula "1") (term "0,0,0,0"))
                  (rule "concrete_and_1" (formula "1") (term "0,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "intCastEqual" (formula "1") (term "0,0"))
                  (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "30"))
                  (rule "false_to_not_true" (formula "1"))
                  (rule "ifthenelse_concrete3" (formula "1") (term "0"))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "20"))
                  (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_4"))
                  (rule "simplifySelectOfStore" (formula "3"))
                  (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                  (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "3") (term "0,0"))
                  (rule "eqSymm" (formula "3") (term "0,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "3") (term "0,0,0"))
                  (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "26"))
                  (rule "concrete_and_2" (formula "3") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "simplifySelectOfStore" (formula "3"))
                  (rule "equalUnique" (formula "3") (term "1,0,0,0"))
                  (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "simplifySelectOfStore" (formula "3"))
                  (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "3") (term "0,0"))
                  (rule "eqClose" (formula "3") (term "0,0,0"))
                  (rule "concrete_and_1" (formula "3") (term "0,0"))
                  (rule "equalUnique" (formula "3") (term "0,0"))
                  (rule "castDel" (formula "3") (term "1,0"))
                  (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                  (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=arr_5"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0"))
                  (rule "equalUnique" (formula "1") (term "1,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "30"))
                  (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                  (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "1") (term "0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "intCastEqual" (formula "1") (term "1,0,0"))
                  (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "22"))
                  (rule "concrete_and_4" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                  (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0,0"))
                  (rule "ifthenelse_false" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=arr_6"))
                  (rule "simplifySelectOfStore" (formula "3"))
                  (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "3") (term "0,0"))
                  (rule "equalUnique" (formula "3") (term "1,0,0"))
                  (rule "eqSymm" (formula "3") (term "0,0,0"))
                  (rule "sortsDisjointModuloNull" (formula "3") (term "0,0,0"))
                  (rule "replace_known_right" (formula "3") (term "1,0,0,0") (ifseqformula "28"))
                  (rule "concrete_and_4" (formula "3") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "simplifySelectOfStore" (formula "3"))
                  (rule "equalUnique" (formula "3") (term "0,1,0,0"))
                  (rule "concrete_not_2" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "3") (term "0,0"))
                  (rule "equalUnique" (formula "3") (term "1,0,0"))
                  (rule "concrete_and_4" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "hideAuxiliaryEqConcrete2" (formula "32"))
                  (rule "allLeft" (formula "20") (inst "t=a_0"))
                  (rule "allLeft" (formula "13") (inst "t=a_0"))
                  (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "24"))
                  (rule "concrete_or_2" (formula "13"))
                  (rule "allLeft" (formula "8") (inst "t=a_0"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch " int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length) = i_0 TRUE"
                     (rule "close" (formula "25") (ifseqformula "4"))
                  )
                  (branch " int::select(heap, java.lang.Address[]::select(heap, self, MultiAuctionImpl::$bidders), arr_length) = i_0 FALSE"
                     (rule "inEqSimp_strengthen1" (formula "2") (ifseqformula "24"))
                     (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
                     (rule "add_literals" (formula "24") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "24") (term "1,0,0"))
                     (rule "add_literals" (formula "24") (term "0,0"))
                     (rule "leq_literals" (formula "24") (term "0"))
                     (rule "concrete_and_2" (formula "24"))
                     (rule "false_right" (formula "24"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "applyEq" (formula "18") (term "0,0,2,0,0,0") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "26"))
                     (rule "concrete_or_2" (formula "18") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                     (rule "concrete_and_2" (formula "18") (term "0"))
                     (rule "concrete_or_2" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                     (rule "andLeft" (formula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "18"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,1,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0"))
                     (rule "add_zero_right" (formula "18") (term "0"))
                     (rule "leq_literals" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
               )
               (branch "Case 2"
                  (rule "cut" (inst "cutFormula=(  java.lang.Address::select(heap,
                             msg,
                             java.lang.Message::$sender)
 = a_0)<<origin(\"User_Interaction @ node 28261 (cut)\",\"[]\")>>") (userinteraction))
                  (branch "CUT: java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 TRUE"
                     (rule "exRight" (formula "28") (inst "t=int::select(heap,
            java.lang.Address[]::select(heap,
                                        self,
                                        MultiAuctionImpl::$bidders),
            arr_length)") (userinteraction))
                     (rule "eqSymm" (formula "28") (term "1"))
                     (rule "eqSymm" (formula "29") (term "1,0"))
                     (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "12"))
                     (rule "concrete_and_1" (formula "28") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                     (rule "polySimp_pullOutFactor1" (formula "28") (term "0,0"))
                     (rule "add_literals" (formula "28") (term "1,0,0"))
                     (rule "times_zero_1" (formula "28") (term "0,0"))
                     (rule "qeq_literals" (formula "28") (term "0"))
                     (rule "concrete_and_1" (formula "28"))
                     (rule "applyEq" (formula "29") (term "0,0,2,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "29") (term "3,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "29") (term "0,0,2,0,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "29") (term "0,2,0,0,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "29") (term "0,2,1,3,0,0,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "17") (term "0,0,2,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "29") (term "0,0,2,1,3,0,0,0,0,0,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,2,1,3,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,0,2,1,3,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,2,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "3,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,0,2,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "28") (term "0,0,2,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "19"))
                     (rule "applyEq" (formula "2") (term "0,2,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "5") (term "0,0,2,0") (ifseqformula "1"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "applyEq" (formula "2") (term "0,0,2,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0,0,2,1,3,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0,2,1,3,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "27") (term "0,0,2,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "3,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "0,2,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0,0,2,0,0,0,0,0") (ifseqformula "1"))
                     (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "26"))
                     (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "eqClose" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_1" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "eqClose" (formula "1") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                     (rule "eqClose" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_1" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "0,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_true" (formula "1") (term "0"))
                     (rule "castDel" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
                     (rule "eqClose" (formula "29"))
                     (rule "closeTrue" (formula "29"))
                  )
                  (branch "CUT: java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 FALSE"
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "eqClose" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_1" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "intCastEqual" (formula "1") (term "0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "19"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "26"))
                     (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "intCastEqual" (formula "1") (term "1,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "19"))
                     (rule "concrete_and_4" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "instAll" (formula "1") (term "0,0,2,0") (ifseqformula "12") (userinteraction))
                     (rule "exLeft" (formula "1") (inst "sk=i_0") (userinteraction))
                     (rule "andLeft" (formula "1") (userinteraction))
                     (rule "andLeft" (formula "1") (userinteraction))
                     (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "4") (userinteraction))
                     (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "4") (userinteraction))
                     (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "4") (userinteraction))
                     (rule "concrete_not_1" (formula "1") (term "1") (userinteraction))
                     (rule "concrete_or_4" (formula "1") (userinteraction))
                     (rule "instEx" (formula "1") (term "0,2,1") (ifseqformula "31") (userinteraction))
                     (rule "concrete_not_1" (formula "2") (term "0"))
                     (rule "concrete_or_2" (formula "2"))
                     (rule "concrete_not_1" (formula "3") (term "0"))
                     (rule "concrete_or_2" (formula "3"))
                     (rule "eqSymm" (formula "1"))
                     (rule "eqSymm" (formula "32") (term "1,0"))
                     (rule "eqSymm" (formula "21") (term "1"))
                     (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "2"))
                     (rule "concrete_and_1" (formula "21") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "21") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_subsumption1" (formula "21") (term "0") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0"))
                     (rule "qeq_literals" (formula "21") (term "0,0"))
                     (rule "concrete_or_1" (formula "21") (term "0"))
                     (rule "concrete_and_1" (formula "21"))
                     (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=arr_4"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "30"))
                     (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "1,0,0,0"))
                     (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "eqClose" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_1" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "inEqSimp_contradEq7" (formula "1") (term "0,0") (ifseqformula "4"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                     (rule "leq_literals" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
                     (rule "concrete_and_4" (formula "1") (term "0,0,0"))
                     (rule "concrete_and_2" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "equalUnique" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_4" (formula "1") (term "0,0"))
                     (rule "ifthenelse_false" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "22") (ifseqformula "2"))
                  )
               )
            )
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "26") (inst "sk=a_0"))
         (rule "inEqSimp_geqRight" (formula "26"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_3"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
         (rule "concrete_and_2" (formula "1") (term "0,0,0"))
         (rule "concrete_and_2" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0,0"))
         (rule "concrete_and_2" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0"))
         (rule "equalUnique" (formula "1") (term "1,0,0"))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "22"))
         (rule "concrete_and_2" (formula "1") (term "0,0,0"))
         (rule "concrete_and_2" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "0,1,0,0"))
         (rule "concrete_not_2" (formula "1") (term "1,0,0"))
         (rule "concrete_and_3" (formula "1") (term "0,0"))
         (rule "eqClose" (formula "1") (term "0,0,0"))
         (rule "concrete_and_1" (formula "1") (term "0,0"))
         (rule "equalUnique" (formula "1") (term "0,0"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "intCastEqual" (formula "1") (term "0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=arr_4"))
         (rule "simplifySelectOfStore" (formula "1"))
         (rule "equalUnique" (formula "1") (term "1,0,0,0"))
         (rule "concrete_and_4" (formula "1") (term "0,0,0"))
         (rule "concrete_and_2" (formula "1") (term "0,0"))
         (rule "ifthenelse_false" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "allLeft" (formula "18") (inst "t=a_0"))
         (rule "allLeft" (formula "6") (inst "t=a_0"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
         (rule "ifthenelse_split" (formula "1") (term "0"))
         (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 TRUE"
            (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "22") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "2") (term "0,0,2,0,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "28") (term "0,0,2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "5") (term "0,0,2,0") (ifseqformula "1"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
            (rule "eqSymm" (formula "19"))
            (rule "applyEq" (formula "10") (term "0,2,0") (ifseqformula "1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "2"))
            (rule "times_zero_1" (formula "17") (term "0,0"))
            (rule "add_zero_left" (formula "17") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "17"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0"))
            (rule "polySimp_elimOne" (formula "17") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "3"))
            (rule "qeq_literals" (formula "17") (term "0"))
            (rule "concrete_and_2" (formula "17"))
            (rule "closeFalse" (formula "17"))
         )
         (branch " java.lang.Address::select(heap, msg, java.lang.Message::$sender) = a_0 FALSE"
            (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "18"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (rule "concrete_and_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Case 2"
      (rule "allRight" (formula "26") (inst "sk=f_0"))
      (rule "allRight" (formula "26") (inst "sk=o_0"))
      (rule "orRight" (formula "26"))
      (rule "orRight" (formula "26"))
      (rule "orRight" (formula "26"))
      (rule "orRight" (formula "27"))
      (rule "orRight" (formula "28"))
      (rule "orRight" (formula "29"))
      (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "33"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "30"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "29"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "28"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "27"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "simplifySelectOfStore" (formula "1"))
      (rule "equalUnique" (formula "1") (term "0,1,0,0"))
      (rule "concrete_not_2" (formula "1") (term "1,0,0"))
      (rule "concrete_and_3" (formula "1") (term "0,0"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "eqSymm" (formula "1") (term "1,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "close" (formula "33") (ifseqformula "1"))
   )
)
)
}
