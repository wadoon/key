\profile "Solidity";

\javaSource ".";

\withOptions transfer:noCallBack;


\programVariables {
  Address caller;
  Message msg;
  int _result;
int a;
int _a;
Address ad;
Address _ad;
Lib.AddressSet adset;
Lib.AddressSet _adset;

}

\problem {
caller != null &
caller.<created> = TRUE & 
caller != net &
caller != gross_to &
caller != gross_from &
gross_to != gross_from 
&
msg.value = 0 &
caller.balance!= null &
a != null &
ad != null &
adset != null &
adset._indexes != null &
adset._values != null &
(\forall Address addr; ((int::select(heap,(int[]::select(heap,adset,Lib.AddressSet::$_indexes)), arr((int)addr))) = 0)) & (a > 0) 
    ->
    {savedHeap:=heap  || _a := a || _ad := ad || _adset := adset} 
     \[{ _result = caller.foo(msg,_a,_ad,_adset)@Lib;
    }\] (   
          (\forall Address addr; ((int::select(heap,(int[]::select(heap,adset,Lib.AddressSet::$_indexes)), arr((int)addr))) = 0)) & ((_result = (a+5)) & ((int::select(heap,(int[]::select(heap,adset,Lib.AddressSet::$_indexes)), arr(0))) = 2))& (\forall Field f; \forall java.lang.Object o; (elementOf(o,f,singleton(net,address(ad))) |  !o = null & !o.<created>@savedHeap = TRUE | o.f = o.f@savedHeap))
    )

}


