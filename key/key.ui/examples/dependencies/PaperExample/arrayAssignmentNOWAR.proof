\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jul 02 18:48:35 CEST 2019
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_HIGH
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_LOW
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_HIGH
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , dependencies-dependencies\\:on
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Tue Jul 02 18:48:35 CEST 2019
name=ArrayAssignment[ArrayAssignment\\:\\:arrayAssignment([I)].JML normal_behavior operation contract.0
contract=ArrayAssignment[ArrayAssignment\\:\\:arrayAssignment([I)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Asma" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "1551")

(branch "dummy ID"
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1") (newnames "array,exc,heapAtPre,o,f"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,1,0,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,0,0,1,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "6"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "6"))
(rule "concrete_or_2" (formula "2"))
(rule "polySimp_elimSub" (formula "7") (term "2,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,2,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "4") (term "2,0"))
(rule "mul_literals" (formula "4") (term "1,2,0"))
(rule "polySimp_elimSub" (formula "5") (term "2,0"))
(rule "mul_literals" (formula "5") (term "1,2,0"))
(rule "polySimp_addComm0" (formula "7") (term "2,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "4") (term "2,0"))
(rule "polySimp_addComm0" (formula "5") (term "2,0"))
(rule "assignment" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "applyOnElementary" (formula "7") (term "1,0"))
(rule "simplifyUpdate1" (formula "7") (term "0,1,0"))
(rule "sequentialToParallel2" (formula "7"))
(rule "applyOnElementary" (formula "7") (term "1,0"))
(rule "simplifyUpdate1" (formula "7") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "7") (term "0,1,0"))
(rule "all_unused" (formula "7") (term "1,0,1"))
(rule "all_unused" (formula "7") (term "1,0,1"))
(rule "concrete_and_3" (formula "7") (term "0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_arrayAssignment,savedHeapBefore_arrayAssignment,_arrayBefore_arrayAssignment"))
(rule "sequentialToParallel2" (formula "7"))
(rule "applyOnParallel" (formula "7") (term "1,0"))
(rule "applyOnParallel" (formula "7") (term "0,1,0"))
(rule "applyOnElementary" (formula "7") (term "1,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "0,1,1,0"))
(rule "applyOnPV" (formula "7") (term "0,1,1,0"))
(rule "applyOnElementary" (formula "7") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "0,0,0,1,0"))
(rule "applyOnElementary" (formula "7") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "0,1,0,1,0"))
(rule "parallelUpdateAssociative" (formula "7") (term "0"))
(rule "parallelUpdateAssociative" (formula "7") (term "0,0"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "i"))
(rule "assignment" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "applyOnElementary" (formula "7") (term "1,0"))
(rule "simplifyUpdate1" (formula "7") (term "0,1,0"))
(rule "sequentialToParallel2" (formula "7"))
(rule "applyOnElementary" (formula "7") (term "1,0"))
(rule "simplifyUpdate1" (formula "7") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "7") (term "1,0,1,0"))
(rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
(rule "applyOnPV" (formula "7") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,1,0"))
(rule "add_literals" (formula "7") (term "0,0,1,0"))
(builtin "Loop (Scope) Invariant" (formula "7") (newnames "heapBefore_LOOP,iBefore_LOOP,i_0,timestamp_0,heap_After_LOOP,anon_heap_LOOP,anon_MemAcc_LOOP,o,f,variant"))
(branch "Invariant Initially Valid"
   (rule "translateJavaSubInt" (formula "7") (term "2,0,1,0,1"))
   (rule "polySimp_elimSub" (formula "7") (term "2,0,1,0,1"))
   (rule "mul_literals" (formula "7") (term "1,2,0,1,0,1"))
   (rule "polySimp_addComm0" (formula "7") (term "2,0,1,0,1"))
   (rule "applyOnRigidFormula" (formula "7"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "1"))
   (rule "concrete_and_3" (formula "7"))
   (rule "applyOnRigidFormula" (formula "7"))
   (rule "simplifyUpdate2" (formula "7") (term "0"))
   (rule "propagateNonEventUpdateONnoWaR" (formula "7") (term "1"))
   (rule "simplifyUpdate1" (formula "7") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "7") (term "0"))
   (rule "simplifyUpdate2" (formula "7") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "0,1"))
   (rule "simplifyUpdate1" (formula "7") (term "1,0,1"))
   (rule "applyOnPV" (formula "7") (term "0,0,1"))
   (rule "applyOnRigidFormula" (formula "7") (term "1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,1,0"))
   (rule "applyOnPV" (formula "7") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "7") (term "0,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,0,0"))
   (rule "applyOnPV" (formula "7") (term "0,0,0"))
   (rule "qeq_literals" (formula "7") (term "0,0"))
   (rule "concrete_and_1" (formula "7") (term "0"))
   (rule "applyOnRigidTerm" (formula "7") (term "2,0,1"))
   (rule "simplifyUpdate1" (formula "7") (term "0,2,0,1"))
   (rule "applyOnRigidTerm" (formula "7") (term "1,0"))
   (rule "applyOnPV" (formula "7") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "1,2,0,1"))
   (rule "applyOnPV" (formula "7") (term "0,1,2,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0"))
   (rule "commute_and" (formula "7"))
   (rule "arrayLengthIsAnInt" (formula "4") (term "1,2,0"))
   (rule "inInt" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "arrayLengthNotNegative" (formula "4") (term "1,2,0"))
   (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "4"))
   (rule "concrete_and_3" (formula "8"))
   (rule "noReadORWriteAndNoWaR" (formula "8") (userinteraction))
   (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "6"))
   (rule "concrete_or_3" (formula "8") (term "0"))
   (rule "ifthenelse_true_for" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
(branch "Invariant Preserved and Used"
   (rule "false_to_not_true" (formula "9") (term "0,1,0,1,1,1,1"))
   (rule "inInt" (formula "6") (term "1,1,1"))
   (rule "concrete_and_3" (formula "6") (term "1,1"))
   (rule "translateJavaSubInt" (formula "6") (term "2,1,0,1,0,0,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "2,2,0,0,0,0,1,0,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "2,0,1,0,0,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,0,1,1,1"))
   (rule "translateJavaSubInt" (formula "9") (term "2,1,0,1,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "6") (term "2,0,1,1,1"))
   (rule "eqSymm" (formula "9") (term "1,0,0,1,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "6") (term "2,1,0,1,0,0,1"))
   (rule "mul_literals" (formula "6") (term "1,2,1,0,1,0,0,1"))
   (rule "polySimp_elimSub" (formula "9") (term "0,1,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "2,2,0,0,0,0,1,0,1,1,0,1,1,1,1"))
   (rule "mul_literals" (formula "9") (term "1,2,2,0,0,0,0,1,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "2,0,1,0,0,1,1,0,1,1,1,1"))
   (rule "mul_literals" (formula "9") (term "1,2,0,1,0,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "0,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "9") (term "2,1,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "9") (term "1,2,1,0,1,0,0,1,1"))
   (rule "polySimp_elimSub" (formula "6") (term "2,0,1,1,1"))
   (rule "mul_literals" (formula "6") (term "1,2,0,1,1,1"))
   (rule "sequentialToParallel2" (formula "9"))
   (rule "applyOnParallel" (formula "9") (term "1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "0,1,1,0"))
   (rule "applyOnPV" (formula "9") (term "0,1,1,0"))
   (rule "applyOnElementary" (formula "9") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "0,0,1,0"))
   (rule "sequentialToParallel2" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "simplifyUpdate2" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "simplifyUpdate2" (formula "6"))
   (rule "applyOnParallel" (formula "6") (term "0"))
   (rule "applyOnParallel" (formula "8") (term "1,0"))
   (rule "applyOnParallel" (formula "7") (term "1,0"))
   (rule "applyUpdateOnEventStar" (formula "6") (term "1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "6") (term "0,1,0"))
   (rule "applyOnElementary" (formula "6") (term "0,0"))
   (rule "simplifyUpdate1" (formula "6") (term "0,0,0"))
   (rule "applyOnParallel" (formula "8") (term "0,1,0"))
   (rule "applyUpdateOnEventStar" (formula "8") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,1,1,0"))
   (rule "applyUpdateOnEventStar" (formula "7") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,1,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,1,1,0"))
   (rule "applyOnElementary" (formula "7") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,0,1,0"))
   (rule "applyOnElementary" (formula "8") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,1,0,1,0"))
   (rule "applyOnParallel" (formula "8") (term "0,0,1,0"))
   (rule "applyOnElementary" (formula "8") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,1,0,0,1,0"))
   (rule "applyOnElementary" (formula "8") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,0,0,0,1,0"))
   (rule "sequentialToParallel2" (formula "11") (term "1"))
   (rule "applyOnElementary" (formula "11") (term "1,0,1"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,0,1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "applyOnParallel" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,1,0"))
   (rule "applyOnParallel" (formula "11") (term "0,1,0"))
   (rule "applyOnParallel" (formula "11") (term "0,0,1,0"))
   (rule "applyUpdateOnEventStar" (formula "11") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1,0"))
   (rule "applyOnParallel" (formula "11") (term "0,0,0,1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,0,0,1,0"))
   (rule "applyOnElementary" (formula "11") (term "0,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,0,0,0,1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,0,0,0,1,0"))
   (rule "sequentialToParallel1" (formula "11") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,1,0"))
   (rule "applyOnParallel" (formula "11") (term "1,0,0,1,1,0"))
   (rule "applyUpdateOnEventStar" (formula "11") (term "1,1,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,1,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,1,0,0,1,1,0"))
   (rule "applyOnElementary" (formula "11") (term "0,1,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "8") (term "2,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "2,1,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "2,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "2,2,0,0,0,0,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "2,1,1,0,1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "1,0,1,1,0"))
   (rule "applyOnRigidFormula" (formula "6"))
   (rule "simplifyUpdate1" (formula "6") (term "1"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "6") (term "0"))
   (rule "elimEventOnRigidTerm1" (formula "6") (term "1"))
   (rule "applyOnPV" (formula "6") (term "0"))
   (rule "applyOnRigidFormula" (formula "7"))
   (rule "simplifyUpdate1" (formula "7") (term "0"))
   (rule "simplifyUpdate1" (formula "7") (term "1"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "7") (term "0"))
   (rule "applyOnPV" (formula "7") (term "0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0,0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "1"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "7") (term "0,1"))
   (rule "applyOnPV" (formula "7") (term "0,1"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "8") (term "0,1,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1,0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0,1,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "0,1,0,1,1,0"))
   (rule "elimEventOnRigidTerm1" (formula "11") (term "1,1,0,1,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "2,1,0,1,0,1,0"))
   (rule "elimEventOnRigidTerm1" (formula "8") (term "0,2,1,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "2,1,0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,2,1,0,1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,1,1,0,1"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,0,1,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "0,1,0,1,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "1,2,1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "8") (term "0,1,2,1,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,2,1,0,1,0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,2,1,0,1,0,0,1,0"))
   (rule "parallelUpdateAssociative" (formula "8") (term "0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0"))
   (rule "parallelUpdateAssociative" (formula "8") (term "0,0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0,0"))
   (rule "parallelUpdateAssociative" (formula "8") (term "0,0,0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0,0,0"))
   (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "11") (term "0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
   (rule "assignment" (formula "11") (term "1"))
   (rule "sequentialToParallel2" (formula "11") (term "1"))
   (rule "applyOnElementary" (formula "11") (term "1,0,1"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,0,1"))
   (rule "sequentialToParallel2" (formula "11"))
   (rule "applyOnParallel" (formula "11") (term "1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,1,0"))
   (rule "applyOnElementary" (formula "11") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
   (rule "elimEventStarOnRigidTerm1" (formula "11") (term "0,0,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "1,0,1,1,0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0"))
   (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "11") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "1,0,1,0"))
   (rule "elimEventOnRigidTerm1" (formula "11") (term "0,0,1,0"))
   (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "11") (term "0"))
   (rule "elementOfArrayRange" (formula "11") (term "0,0,0,0,1,0,1,1,0,1") (inst "iv=iv"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1"))
   (rule "arrayLengthNotNegative" (formula "4") (term "1,2,0"))
   (rule "arrayLengthIsAnInt" (formula "5") (term "1,2,0"))
   (rule "inInt" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
   (rule "compound_less_equal_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_3") (inst "#v0=x_2"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_2"))
   (rule "assignment" (formula "12") (term "1"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "applyOnElementary" (formula "12") (term "1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,1,0"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "applyOnElementary" (formula "12") (term "1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
   (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "1,0,1,0"))
   (rule "elimEventOnRigidTerm1" (formula "12") (term "0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
   (rule "add_literals" (formula "12") (term "0,0,1,0"))
   (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
   (rule "compound_subtraction_1" (formula "12") (term "1") (inst "#v=x_4"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_4"))
   (rule "assignment_read_length" (formula "12"))
   (branch "Normal Execution (_array != null)"
      (rule "sequentialToParallel2" (formula "12"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "0,1,0"))
      (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0"))
      (rule "applyOnRigidTerm" (formula "12") (term "0,1,0,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0,1,0,0"))
      (rule "applyOnPV" (formula "12") (term "0,0,1,0,0"))
      (rule "assignmentSubtractionInt" (formula "12") (term "1"))
      (rule "translateJavaSubInt" (formula "12") (term "0,0,1"))
      (rule "polySimp_elimSub" (formula "12") (term "0,0,1"))
      (rule "mul_literals" (formula "12") (term "1,0,0,1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
      (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0"))
      (rule "applyOnRigidTerm" (formula "12") (term "0,1,0,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,0"))
      (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0,0"))
      (rule "applyOnPV" (formula "12") (term "1,0,1,0,0"))
      (rule "elimEventOnRigidTerm1" (formula "12") (term "0,0,1,0,0"))
      (rule "less_equal_than_comparison_simple" (formula "12") (term "1"))
      (rule "sequentialToParallel2" (formula "12"))
      (rule "applyOnElementary" (formula "12") (term "1,0"))
      (rule "simplifyUpdate1" (formula "12") (term "0,1,0"))
      (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0"))
      (rule "applyOnRigidTerm" (formula "12") (term "0,1,0,0"))
      (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0,0"))
      (rule "elimEventOnRigidTerm1" (formula "12") (term "2,0,1,0,0"))
      (rule "elimEventOnRigidTerm1" (formula "12") (term "1,0,1,0,0"))
      (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0,0"))
      (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0,0"))
      (rule "simplifyUpdate1" (formula "12") (term "0,0,0,1,0,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,0,1,0,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0,0,1,0,0"))
      (rule "applyOnPV" (formula "12") (term "1,0,0,1,0,0"))
      (rule "applyOnPV" (formula "12") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0,0"))
      (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
      (rule "inInt" (formula "9") (term "1"))
      (rule "true_left" (formula "9"))
      (rule "pullOut" (formula "9") (term "0,1") (inst "sk=arrayRange_0"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "simplifyEventUpdateNoWaR" (formula "10"))
      (rule "applyOnRigidFormula" (formula "9"))
      (rule "simplifyUpdate1" (formula "9") (term "1"))
      (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
      (rule "applyOnRigidTerm" (formula "9") (term "0"))
      (rule "elimEventOnRigidTerm1" (formula "9") (term "1,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
      (rule "applyOnPV" (formula "9") (term "0,0"))
      (rule "applyOnRigidTerm" (formula "9") (term "2,0"))
      (rule "simplifyUpdate1" (formula "9") (term "0,2,0"))
      (rule "elimEventOnRigidTerm1" (formula "9") (term "0,2,0"))
      (rule "applyOnRigidTerm" (formula "9") (term "1,2,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,1,2,0"))
      (rule "applyOnPV" (formula "9") (term "0,1,2,0"))
      (rule "applyEq" (formula "13") (term "1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "9"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
      (rule "applyEq" (formula "5") (term "0") (ifseqformula "9"))
      (rule "ifSplit" (formula "13"))
      (branch "if x_1 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "replace_known_left" (formula "14") (term "0,0,1,0,0") (ifseqformula "1"))
         (rule "ifthenelse_true" (formula "14") (term "0,1,0,0"))
         (rule "assignment_to_primitive_array_component" (formula "14"))
         (branch "Normal Execution (_array != null)"
            (rule "sequentialToParallel2" (formula "14"))
            (rule "applyOnElementary" (formula "14") (term "1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,1,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "14") (term "3,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "14") (term "1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "2,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,2,0,1,0"))
            (rule "applyOnPV" (formula "14") (term "0,2,0,1,0"))
            (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "qeq_literals" (formula "9") (term "0"))
            (rule "concrete_or_1" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "postincrement" (formula "13") (term "1"))
            (rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x_1"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_5"))
            (rule "remove_parentheses_right" (formula "13") (term "1"))
            (rule "assignmentAdditionInt" (formula "13") (term "1"))
            (rule "translateJavaAddInt" (formula "13") (term "0,0,1"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "applyOnElementary" (formula "13") (term "1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "0,0,1,0"))
            (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "13") (term "0"))
            (rule "widening_identity_cast_5" (formula "13") (term "1"))
            (rule "assignment" (formula "13") (term "1"))
            (rule "sequentialToParallel2" (formula "13") (term "1"))
            (rule "applyOnElementary" (formula "13") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "13") (term "0,1,0,1"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "applyOnParallel" (formula "13") (term "1,0"))
            (rule "applyOnElementary" (formula "13") (term "1,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,1,1,0"))
            (rule "applyOnElementary" (formula "13") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "0,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,0"))
            (rule "parallelUpdateAssociative" (formula "13") (term "0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,0"))
            (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "13") (term "0,0"))
            (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "13") (term "0"))
            (rule "assignment" (formula "13") (term "1"))
            (rule "sequentialToParallel2" (formula "13") (term "1"))
            (rule "applyOnElementary" (formula "13") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "13") (term "0,1,0,1"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "applyOnParallel" (formula "13") (term "1,0"))
            (rule "applyOnElementary" (formula "13") (term "1,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,1,1,0"))
            (rule "applyOnElementary" (formula "13") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
            (rule "elimEventStarOnRigidTerm1" (formula "13") (term "0,0,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "1,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,1,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,0,1,1,0"))
            (rule "applyOnPV" (formula "13") (term "1,0,1,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,1,0"))
            (rule "parallelUpdateAssociative" (formula "13") (term "0"))
            (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "13") (term "0,0"))
            (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "13") (term "0"))
            (rule "emptyIndexedLoopScope" (formula "13") (term "1"))
            (rule "applyOnRigidFormula" (formula "13"))
            (rule "simplifyUpdate2" (formula "13") (term "0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "1,0"))
            (rule "applyOnPV" (formula "13") (term "0,0"))
            (rule "boolean_not_equal_2" (formula "13") (term "0"))
            (rule "ifthenelse_false_for" (formula "13"))
            (rule "emptyModality" (formula "13") (term "1"))
            (rule "applyOnRigidFormula" (formula "13"))
            (rule "applyOnRigidFormula" (formula "13") (term "1"))
            (rule "simplifyUpdate2" (formula "13") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "13") (term "0"))
            (rule "simplifyUpdate2" (formula "13") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,1"))
            (rule "simplifyUpdate2" (formula "13") (term "1,1,1"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,0"))
            (rule "simplifyUpdate2" (formula "13") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0,0"))
            (rule "elimEventStarOnRigidTerm1" (formula "13") (term "1,0,0"))
            (rule "applyOnPV" (formula "13") (term "0,0,0"))
            (rule "boolean_not_equal_2" (formula "13") (term "0,0"))
            (rule "concrete_impl_2" (formula "13") (term "0"))
            (rule "concrete_and_1" (formula "13"))
            (rule "impRight" (formula "13"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "14") (term "0"))
            (rule "simplifyUpdate2" (formula "14") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "14") (term "1"))
            (rule "simplifyUpdate1" (formula "14") (term "0,1"))
            (rule "simplifyUpdate1" (formula "14") (term "1,1"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,1"))
            (rule "applyOnPV" (formula "14") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "12"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0"))
            (rule "simplifyUpdate1" (formula "12") (term "1"))
            (rule "applyOnPV" (formula "12") (term "0"))
            (rule "elimEventOnRigidTerm1" (formula "12") (term "1"))
            (rule "boolean_not_equal_2" (formula "12"))
            (rule "false_right" (formula "12"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0"))
            (rule "simplifyUpdate2" (formula "13") (term "0,0,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,1"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "13") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,0"))
            (rule "simplifyUpdate2" (formula "13") (term "0,0,0,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "1,0,1"))
            (rule "simplifyUpdate1" (formula "13") (term "1,1,0,1"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,1,0,1"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "1,1,0,1"))
            (rule "applyOnPV" (formula "13") (term "0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,0,0,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,1,0,0,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,1,0,0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "1,1,0,0,0"))
            (rule "applyOnPV" (formula "13") (term "1,1,0,0,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,0,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,0,0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0,0,0,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "1,0,0,0,0"))
            (rule "applyOnPV" (formula "13") (term "0,0,0,0,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
            (rule "simplifyUpdate2" (formula "13") (term "1,0,0,1,0"))
            (rule "simplifyUpdate2" (formula "13") (term "0,0,0,1,0"))
            (rule "precOfInt" (formula "13") (term "1"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,1,0,0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0,1,0,0,0"))
            (rule "applyOnPV" (formula "13") (term "0,0,1,0,0,0"))
            (rule "replace_known_left" (formula "13") (term "1,0,0,0") (ifseqformula "1"))
            (rule "concrete_and_3" (formula "13") (term "0,0,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,1,0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,0,1,0"))
            (rule "simplifyUpdate2" (formula "13") (term "1,0,0,0,1,0"))
            (rule "simplifyUpdate2" (formula "13") (term "0,0,0,0,1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "1,0,1,1"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,1,0,1,1"))
            (rule "applyOnPV" (formula "13") (term "0,1,0,1,1"))
            (rule "applyOnRigidTerm" (formula "13") (term "1,1,0,1"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,1,1,0,1"))
            (rule "applyOnPV" (formula "13") (term "0,1,1,0,1"))
            (rule "applyOnRigidTerm" (formula "13") (term "1,1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "2,1,1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,1,1,0,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "2,1,1,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "1,1,1,0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "eqSymm" (formula "13") (term "1,0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,0,0,0,1,0"))
            (rule "simplifyUpdate2" (formula "13") (term "0,1,0,0,0,1,0"))
            (rule "elimEventOnRigidFormula1" (formula "13") (term "0,1,0,0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,0,0,1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "1,1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "2,1,1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,1,1,0,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "2,1,1,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "1,1,1,0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "0,1,1,0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,1,0,0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,0,0,0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,0,0,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "1,0,0,0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,0,0,0,0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "1,0,0,0,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "0,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,1"))
            (rule "polySimp_mulAssoc" (formula "13") (term "0,1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,1,1,0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,1,1,0,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "1,0,1,1,0,0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,1,0,0,0,0,1,0"))
            (rule "simplifyUpdate2" (formula "13") (term "0,0,1,0,0,0,0,1,0"))
            (rule "elimEventOnRigidFormula1" (formula "13") (term "0,0,1,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1"))
            (rule "polySimp_pullOutFactor2b" (formula "13") (term "0,1,1"))
            (rule "add_literals" (formula "13") (term "1,1,0,1,1"))
            (rule "times_zero_1" (formula "13") (term "1,0,1,1"))
            (rule "add_zero_right" (formula "13") (term "0,1,1"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,0,1,1,0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "2,0,0,1,1,0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,1,0,0,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0,0,1,1,0,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "2,0,0,1,1,0,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "1,0,0,1,1,0,0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "0,0,0,1,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,1"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1"))
            (rule "add_literals" (formula "13") (term "1,0,1,1"))
            (rule "times_zero_1" (formula "13") (term "0,1,1"))
            (rule "leq_literals" (formula "13") (term "1,1"))
            (rule "concrete_and_3" (formula "13") (term "1"))
            (rule "applyOnRigidFormula" (formula "13") (term "1,0,1,0,0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "0,1,0,1,0,0,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "0,1,0,1,0,0,0,0,1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "1,1,0,1,0,0,0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "0,1,1,0,1,0,0,0,0,1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "1,1,1,0,1,0,0,0,0,1,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,1,1,1,0,1,0,0,0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "0,1,1,1,0,1,0,0,0,0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "13") (term "1"))
            (rule "times_zero_2" (formula "13") (term "1,0,1"))
            (rule "add_zero_right" (formula "13") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1"))
            (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
            (rule "concrete_and_3" (formula "13"))
            (rule "inEqSimp_subsumption1" (formula "13") (term "0,0") (ifseqformula "8"))
            (rule "leq_literals" (formula "13") (term "0,0,0"))
            (rule "concrete_or_1" (formula "13") (term "0,0"))
            (rule "concrete_and_1" (formula "13") (term "0"))
            (rule "ex_pull_out1" (formula "13") (term "0,0,0,0,1"))
            (rule "andRight" (formula "13"))
            (branch "Case 1"
               (rule "pullOut" (formula "13") (term "0,1") (inst "sk=arrayRange_1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyEventUpdateNoWaR" (formula "14"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0"))
               (rule "applyOnPV" (formula "1") (term "0,0"))
               (rule "elimEventOnRigidTerm1" (formula "1") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
               (rule "simplifyUpdate1" (formula "1") (term "0,2,0"))
               (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1,2,0"))
               (rule "applyOnPV" (formula "1") (term "0,1,2,0"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "14") (term "0,1") (ifseqformula "10"))
               (rule "close" (formula "14") (ifseqformula "11"))
            )
            (branch "Case 2"
               (rule "allRight" (formula "13") (inst "sk=f_0"))
               (rule "allRight" (formula "13") (inst "sk=o_0"))
               (rule "orRight" (formula "13"))
               (rule "orRight" (formula "13"))
               (rule "eqSymm" (formula "13") (term "0,0,1,0"))
               (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
               (rule "equalUnique" (formula "1") (term "0,1,0,0"))
               (rule "concrete_not_2" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "16"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "16"))
               (rule "concrete_or_4" (formula "1") (term "0,0"))
               (rule "elementOfArrayRangeEQ" (formula "1") (term "0,0,0") (inst "iv=iv") (ifseqformula "11"))
               (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
               (rule "nnf_ex2all" (formula "15"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "1,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,1,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,1,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,1,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0,1,0"))
               (rule "commute_or" (formula "1") (term "0"))
               (rule "commute_and" (formula "3") (term "0,0"))
               (rule "cut_direct" (formula "1") (term "0,1,0"))
               (branch "CUT: o_0 = array TRUE"
                  (rule "concrete_not_1" (formula "2") (term "1,0"))
                  (rule "concrete_or_4" (formula "2") (term "0"))
                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "concrete_and_1" (formula "3") (term "0,0,0"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "1"))
                  (rule "concrete_and_3" (formula "4") (term "0,0"))
                  (rule "applyEq" (formula "17") (term "1,0,0,1") (ifseqformula "1"))
                  (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "7"))
                  (rule "concrete_not_1" (formula "17") (term "1"))
                  (rule "concrete_and_4" (formula "17"))
                  (rule "false_right" (formula "17"))
                  (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                  (rule "allLeft" (formula "2") (inst "t=i_0"))
                  (rule "eqSymm" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "2") (term "0,0,1"))
                  (rule "leq_literals" (formula "2") (term "0,1"))
                  (rule "concrete_and_2" (formula "2") (term "1"))
                  (rule "concrete_or_4" (formula "2"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "2") (term "0,1"))
                  (rule "concrete_and_2" (formula "2") (term "1"))
                  (rule "concrete_or_4" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "16"))
                  (rule "ifthenelse_false" (formula "4") (term "0"))
                  (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch " exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= -1 + array.length) & !f_0 = java.lang.Object::<created> TRUE"
                     (rule "andLeft" (formula "3"))
                     (rule "notLeft" (formula "4"))
                     (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "applyEqReverse" (formula "21") (term "1") (ifseqformula "6"))
                     (rule "hideAuxiliaryEq" (formula "6"))
                     (rule "eqSymm" (formula "3"))
                     (rule "eqSymm" (formula "20"))
                     (rule "inEqSimp_homoInEq0" (formula "5"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "3"))
                     (rule "equalUnique" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "3"))
                     (rule "equalUnique" (formula "17"))
                     (rule "applyEq" (formula "2") (term "1,0,0,0,0") (ifseqformula "3"))
                     (rule "equalUnique" (formula "2") (term "0,0,0,0"))
                     (rule "applyEq" (formula "19") (term "2,1") (ifseqformula "3"))
                     (rule "narrowSelectArrayType" (formula "19") (term "1") (ifseqformula "7") (ifseqformula "18"))
                     (rule "applyEq" (formula "19") (term "2,0") (ifseqformula "3"))
                     (rule "narrowSelectArrayType" (formula "19") (term "0") (ifseqformula "16") (ifseqformula "18"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "mul_literals" (formula "5") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                     (rule "commute_or" (formula "2") (term "0,0"))
                     (rule "commute_or_2" (formula "2") (term "0"))
                     (rule "elim_forall4" (formula "2"))
                     (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "4"))
                     (rule "qeq_literals" (formula "2") (term "0,0"))
                     (rule "concrete_and_2" (formula "2") (term "0"))
                     (rule "concrete_or_2" (formula "2"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch " exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= -1 + array.length) & !f_0 = java.lang.Object::<created> FALSE"
                     (rule "close" (formula "18") (ifseqformula "3"))
                  )
               )
               (branch "CUT: o_0 = array FALSE"
                  (rule "concrete_not_2" (formula "1") (term "1,0"))
                  (rule "concrete_or_3" (formula "1") (term "0"))
                  (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "15"))
                  (rule "concrete_and_4" (formula "3") (term "0,0"))
                  (rule "ifthenelse_false" (formula "3") (term "0"))
                  (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "14"))
                  (rule "concrete_and_2" (formula "2") (term "0,0,0"))
                  (rule "concrete_and_2" (formula "2") (term "0,0"))
                  (rule "ifthenelse_false" (formula "2") (term "0"))
                  (rule "close" (formula "17") (ifseqformula "2"))
               )
            )
         )
         (branch "Null Reference (_array = null)"
            (rule "false_right" (formula "15"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
            (rule "close" (formula "14") (ifseqformula "1"))
         )
         (branch "Index Out of Bounds (_array != null, but i Out of Bounds!)"
            (rule "false_right" (formula "15"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "applyOnRigidFormula" (formula "14"))
            (rule "simplifyUpdate1" (formula "14") (term "1"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0"))
            (rule "elimEventOnRigidTerm1" (formula "14") (term "1"))
            (rule "applyOnPV" (formula "14") (term "0"))
            (rule "applyOnRigidFormula" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0"))
            (rule "simplifyUpdate1" (formula "1") (term "0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,0"))
            (rule "applyOnPV" (formula "1") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "1") (term "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1,1"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1"))
            (rule "elimEventOnRigidTerm1" (formula "1") (term "1,1"))
            (rule "applyOnPV" (formula "1") (term "0,1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0,0"))
            (rule "applyOnPV" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0"))
            (rule "qeq_literals" (formula "10") (term "0"))
            (rule "concrete_or_1" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
            (rule "concrete_and_2" (formula "1") (term "0"))
            (rule "concrete_or_2" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (rule "concrete_and_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x_1 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "12"))
         (rule "simplifyUpdate1" (formula "12") (term "1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0"))
         (rule "elimEventOnRigidTerm1" (formula "12") (term "1"))
         (rule "applyOnPV" (formula "12") (term "0"))
         (rule "ifthenelse_concrete3" (formula "12"))
         (rule "boolean_not_equal_2" (formula "12") (term "1"))
         (rule "concrete_or_4" (formula "12"))
         (rule "replace_known_right" (formula "14") (term "0,0,1,0,0") (ifseqformula "12"))
         (rule "ifthenelse_false" (formula "14") (term "0,1,0,0"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq1" (formula "10"))
         (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
         (rule "add_literals" (formula "10") (term "1,0"))
         (rule "times_zero_1" (formula "10") (term "0"))
         (rule "leq_literals" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "13") (term "1,0,1,0,0,0") (ifseqformula "8"))
         (rule "applyEq" (formula "4") (term "0") (ifseqformula "8"))
         (rule "applyEq" (formula "12") (term "0,1,0,0,0,0") (ifseqformula "7"))
         (rule "applyEq" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
         (rule "polySimp_pullOutFactor2" (formula "12") (term "0,1,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "0,1,0,0,0,0,0,0,0,0,0"))
         (rule "applyEq" (formula "8") (term "1,2,0") (ifseqformula "7"))
         (rule "emptyIndexedLoopScope" (formula "12") (term "1"))
         (rule "applyOnRigidFormula" (formula "12"))
         (rule "simplifyUpdate2" (formula "12") (term "0"))
         (rule "applyOnRigidFormula" (formula "12") (term "0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0"))
         (rule "elimEventOnRigidTerm1" (formula "12") (term "1,0"))
         (rule "applyOnPV" (formula "12") (term "0,0"))
         (rule "boolean_equal" (formula "12") (term "0"))
         (rule "ifthenelse_true_for" (formula "12"))
         (rule "methodCallEmpty" (formula "12") (term "1"))
         (rule "tryEmpty" (formula "12") (term "1"))
         (rule "emptyModality" (formula "12") (term "1"))
         (rule "applyOnRigidFormula" (formula "12"))
         (rule "applyOnRigidFormula" (formula "12") (term "1"))
         (rule "simplifyUpdate2" (formula "12") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "12") (term "0"))
         (rule "simplifyUpdate2" (formula "12") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "12") (term "1,1"))
         (rule "simplifyUpdate2" (formula "12") (term "1,1,1"))
         (rule "applyOnRigidFormula" (formula "12") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "12") (term "1,0"))
         (rule "simplifyUpdate2" (formula "12") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0,0"))
         (rule "elimEventStarOnRigidTerm1" (formula "12") (term "1,0,0"))
         (rule "applyOnPV" (formula "12") (term "0,0,0"))
         (rule "boolean_equal" (formula "12") (term "0,0"))
         (rule "concrete_impl_1" (formula "12") (term "0"))
         (rule "applyOnRigidFormula" (formula "12") (term "0,1,1"))
         (rule "simplifyUpdate2" (formula "12") (term "1,0,1,1"))
         (rule "applyOnRigidFormula" (formula "12") (term "1,1,1"))
         (rule "simplifyUpdate1" (formula "12") (term "1,1,1,1"))
         (rule "simplifyUpdate1" (formula "12") (term "0,1,1,1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,1,1,1"))
         (rule "applyOnPV" (formula "12") (term "1,1,1,1"))
         (rule "applyOnRigidFormula" (formula "12") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0,0,1"))
         (rule "elimEventOnRigidTerm1" (formula "12") (term "1,0,0,1"))
         (rule "applyOnPV" (formula "12") (term "0,0,0,1"))
         (rule "boolean_equal" (formula "12") (term "0,0,1"))
         (rule "concrete_not_1" (formula "12") (term "0,1"))
         (rule "concrete_impl_2" (formula "12") (term "1"))
         (rule "concrete_and_3" (formula "12"))
         (rule "applyOnRigidFormula" (formula "12") (term "1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1"))
         (rule "simplifyUpdate1" (formula "12") (term "1,1"))
         (rule "applyOnPV" (formula "12") (term "0,1"))
         (rule "elimEventOnRigidTerm1" (formula "12") (term "1,1"))
         (rule "eqClose" (formula "12") (term "1"))
         (rule "concrete_and_3" (formula "12"))
         (rule "pullOut" (formula "12") (term "0,1") (inst "sk=arrayRange_1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyEventUpdateNoWaR" (formula "13"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "elimEventOnRigidTerm1" (formula "1") (term "1,0"))
         (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
         (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
         (rule "elimEventStarOnPV" (formula "1") (term "0,1,2,0"))
         (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "8"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "9"))
         (rule "applyEqRigid" (formula "13") (term "0,1") (ifseqformula "9"))
         (rule "close" (formula "13") (ifseqformula "10"))
      )
   )
   (branch "Null Reference (_array = null)"
      (rule "false_right" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
      (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "close" (formula "12") (ifseqformula "1"))
   )
)
)
}
