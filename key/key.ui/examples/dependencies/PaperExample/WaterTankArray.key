/*
Loop invariant generated by us (not by predicate abstraction).
Closed.
*/

\predicates{
  
}

\programVariables {
  int[] currentAmount;
  Heap oldHeap;
  int i;
}

\problem {
 /* loop invariant:
     i>=0 & i<=currentAmount.length & (\forall int x; (x>=0 & x < i -> currentAmount[x] = old(currentAmount[x+1])))
     modifies: allFields(currentAmount)
     variant: currentAmount.length - i
  */
  currentAmount!=null & wellFormed(heap) & noW(allFields(currentAmount)) & noRaW(allFields(currentAmount)) 
   -> {i:=0 || oldHeap:=heap} \<{ 
                  while(i<currentAmount.length-1){
   					currentAmount[i]=currentAmount[i+1];
   					i++;
   				} 
   			}\>(i=currentAmount.length-1 & (\forall int x; (x>=0 & x < currentAmount.length -> currentAmount[x] = int::select(oldHeap, currentAmount, arr(x+1)))) & noRaW(allFields(currentAmount))) 
}
 