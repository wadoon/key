\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Jun 28 16:19:39 CEST 2019
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_HIGH
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_LOW
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_HIGH
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , dependencies-dependencies\\:on
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Fri Jun 28 16:19:39 CEST 2019
name=ArrayShift[ArrayShift\\:\\:shift([I)].JML normal_behavior operation contract.0
contract=ArrayShift[ArrayShift\\:\\:shift([I)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Asma" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "Asma" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "12484")

(branch "dummy ID"
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1") (newnames "array,exc,heapAtPre,o,f"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,0,0,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "2,0,1,0,1,1,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
(rule "concrete_or_2" (formula "2"))
(rule "polySimp_elimSub" (formula "8") (term "2,0,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,2,0,0,0,0,1"))
(rule "polySimp_elimSub" (formula "5") (term "2,0"))
(rule "mul_literals" (formula "5") (term "1,2,0"))
(rule "polySimp_elimSub" (formula "6") (term "2,0"))
(rule "mul_literals" (formula "6") (term "1,2,0"))
(rule "polySimp_addComm0" (formula "8") (term "2,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "2,0"))
(rule "polySimp_addComm0" (formula "6") (term "2,0"))
(rule "inEqSimp_gtToGeq" (formula "4"))
(rule "times_zero_1" (formula "4") (term "1,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0"))
(rule "assignment" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8") (term "1"))
(rule "applyOnElementary" (formula "8") (term "1,0,1"))
(rule "simplifyUpdate1" (formula "8") (term "0,1,0,1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "applyOnParallel" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,1,1,0"))
(rule "applyOnElementary" (formula "8") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
(rule "polySimp_addComm0" (formula "8") (term "0,1,1,0"))
(rule "parallelUpdateAssociative" (formula "8") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "all_unused" (formula "8") (term "1,0,1"))
(rule "all_unused" (formula "8") (term "1,0,1"))
(rule "concrete_and_3" (formula "8") (term "0,1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_shift,savedHeapBefore_shift,_arrayBefore_shift"))
(rule "sequentialToParallel2" (formula "8"))
(rule "applyOnParallel" (formula "8") (term "1,0"))
(rule "applyOnElementary" (formula "8") (term "1,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,1,1,0"))
(rule "applyOnPV" (formula "8") (term "0,1,1,0"))
(rule "applyOnParallel" (formula "8") (term "0,1,0"))
(rule "applyOnElementary" (formula "8") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,1,0,1,0"))
(rule "applyOnElementary" (formula "8") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,0,1,0"))
(rule "parallelUpdateAssociative" (formula "8") (term "0"))
(rule "parallelUpdateAssociative" (formula "8") (term "0,0"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "i"))
(rule "assignment" (formula "8") (term "1"))
(rule "sequentialToParallel2" (formula "8"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,1,0"))
(rule "sequentialToParallel2" (formula "8"))
(rule "applyOnElementary" (formula "8") (term "1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "8") (term "1,0,1,0"))
(rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
(rule "applyOnPV" (formula "8") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,1,0"))
(rule "add_literals" (formula "8") (term "0,0,1,0"))
(builtin "Loop (Scope) Invariant" (formula "8") (newnames "heapBefore_LOOP,iBefore_LOOP,i_0,timestamp_0,heap_After_LOOP,anon_heap_LOOP,anon_MemAcc_LOOP,o,f,variant"))
(branch "Invariant Initially Valid"
   (rule "translateJavaSubInt" (formula "8") (term "1,1,0,0,0,0,1"))
   (rule "translateJavaSubInt" (formula "8") (term "2,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "8") (term "2,0,1,0,0,0,1"))
   (rule "translateJavaSubInt" (formula "8") (term "2,0,1,0,0,1"))
   (rule "translateJavaAddInt" (formula "8") (term "1,0,1,0,0,1"))
   (rule "polySimp_elimSub" (formula "8") (term "1,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "8") (term "1,1,1,0,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "8") (term "2,0,1,1,0,1"))
   (rule "mul_literals" (formula "8") (term "1,2,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "8") (term "2,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "8") (term "1,2,0,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "8") (term "2,0,1,0,0,1"))
   (rule "mul_literals" (formula "8") (term "1,2,0,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "1,0,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "2,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "2,0,1,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "2,0,1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "8"))
   (rule "simplifyUpdate2" (formula "8") (term "1"))
   (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "1"))
   (rule "concrete_and_3" (formula "8"))
   (rule "applyOnRigidFormula" (formula "8"))
   (rule "applyOnRigidFormula" (formula "8") (term "1"))
   (rule "simplifyUpdate2" (formula "8") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "8") (term "0"))
   (rule "applyOnRigidFormula" (formula "8") (term "0,1"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,1"))
   (rule "applyOnPV" (formula "8") (term "0,0,1"))
   (rule "greater_literals" (formula "8") (term "0,1"))
   (rule "concrete_impl_2" (formula "8") (term "1"))
   (rule "concrete_and_3" (formula "8"))
   (rule "applyOnRigidFormula" (formula "8") (term "0"))
   (rule "simplifyUpdate2" (formula "8") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "8") (term "0,0"))
   (rule "simplifyUpdate2" (formula "8") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "8") (term "1,0,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,1,0,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,1,0,0"))
   (rule "applyOnPV" (formula "8") (term "0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "8") (term "0,0,0"))
   (rule "applyOnPV" (formula "8") (term "0,0,0,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,0,0"))
   (rule "qeq_literals" (formula "8") (term "0,0,0"))
   (rule "concrete_and_1" (formula "8") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "1,0,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "1,1,0,0"))
   (rule "applyOnPV" (formula "8") (term "0,1,1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "8") (term "0,0"))
   (rule "times_zero_2" (formula "8") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0"))
   (rule "replace_known_left" (formula "8") (term "0,0") (ifseqformula "4"))
   (rule "concrete_and_1" (formula "8") (term "0"))
   (rule "commute_and" (formula "8"))
   (rule "propagateNonEventUpdateONnoW" (formula "8") (term "1"))
   (rule "simplifyUpdate1" (formula "8") (term "0,1"))
   (rule "applyOnRigidTerm" (formula "8") (term "0,1"))
   (rule "simplifyUpdate1" (formula "8") (term "0,0,1"))
   (rule "simplifyUpdate1" (formula "8") (term "2,0,1"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0,1"))
   (rule "applyOnPV" (formula "8") (term "0,0,1"))
   (rule "applyOnPV" (formula "8") (term "1,0,1"))
   (rule "applyOnRigidTerm" (formula "8") (term "2,0,1"))
   (rule "simplifyUpdate1" (formula "8") (term "0,2,0,1"))
   (rule "applyOnRigidTerm" (formula "8") (term "1,2,0,1"))
   (rule "applyOnPV" (formula "8") (term "0,1,2,0,1"))
   (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "6"))
   (rule "concrete_and_3" (formula "8"))
   (rule "propagateNonEventUpdateONnoR" (formula "8"))
   (rule "simplifyUpdate1" (formula "8") (term "0"))
   (rule "applyOnRigidTerm" (formula "8") (term "0"))
   (rule "simplifyUpdate1" (formula "8") (term "2,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,0"))
   (rule "applyOnPV" (formula "8") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "2,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,2,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "1,0"))
   (rule "applyOnPV" (formula "8") (term "1,1,0"))
   (rule "add_zero_right" (formula "8") (term "1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "1,2,0"))
   (rule "applyOnPV" (formula "8") (term "0,1,2,0"))
   (rule "arrayLengthIsAnInt" (formula "5") (term "1,2,0"))
   (rule "inInt" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "arrayLengthNotNegative" (formula "5") (term "1,2,0"))
   (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "4"))
   (rule "leq_literals" (formula "5") (term "0"))
   (rule "concrete_or_1" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "noReadKnownForSuperset" (formula "8") (ifseqformula "5") (userinteraction))
   (rule "ifthenelse_split_for" (formula "8"))
   (branch " arrayRange(array, 1, -1 + array.length) subset arrayRange(array, 0, -1 + array.length) TRUE"
      (rule "closeTrue" (formula "9"))
   )
   (branch " arrayRange(array, 1, -1 + array.length) subset arrayRange(array, 0, -1 + array.length) FALSE"
      (rule "subsetToElementOfRight" (formula "8") (inst "ov=ov") (inst "fv=fv"))
      (rule "allRight" (formula "8") (inst "sk=ov_0"))
      (rule "allRight" (formula "8") (inst "sk=fv_0"))
      (rule "impRight" (formula "8"))
      (rule "elementOfArrayRange" (formula "1") (inst "iv=iv"))
      (rule "andLeft" (formula "1"))
      (rule "exLeft" (formula "2") (inst "sk=iv_0"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "inEqSimp_homoInEq0" (formula "4"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "2"))
      (rule "elementOfArrayRangeConcrete" (formula "12"))
      (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "12") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
      (rule "polySimp_addComm1" (formula "12") (term "0,1"))
      (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "4"))
      (rule "concrete_and_3" (formula "12"))
      (rule "inEqSimp_geqRight" (formula "12"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5"))
      (rule "polySimp_mulComm0" (formula "5") (term "1"))
      (rule "polySimp_rightDist" (formula "5") (term "1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
      (rule "mul_literals" (formula "5") (term "0,1"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
      (rule "qeq_literals" (formula "4") (term "0"))
      (rule "concrete_and_2" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
(branch "Invariant Preserved and Used"
   (rule "false_to_not_true" (formula "10") (term "0,1,0,1,1,1,1"))
   (rule "inInt" (formula "7") (term "1,1,1"))
   (rule "concrete_and_3" (formula "7") (term "1,1"))
   (rule "translateJavaSubInt" (formula "7") (term "2,1,0,1,0,0,1"))
   (rule "translateJavaSubInt" (formula "10") (term "2,0,1,0,0,0,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "2,2,0,0,0,0,1,0,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "2,0,1,1,0,0,1,1,0,1,1,1,1"))
   (rule "translateJavaAddInt" (formula "10") (term "1,0,1,0,0,0,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "2,0,1,0,0,0,0,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,0,0,0,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "0,0,1,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "2,1,0,1,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "7") (term "2,0,1,0,1,1"))
   (rule "translateJavaAddInt" (formula "7") (term "1,0,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "7") (term "1,1,0,0,0,1,1"))
   (rule "translateJavaSubInt" (formula "7") (term "2,0,1,1,1,1"))
   (rule "translateJavaSubInt" (formula "7") (term "2,0,1,0,0,1,1"))
   (rule "eqSymm" (formula "10") (term "1,0,0,1,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "7") (term "2,1,0,1,0,0,1"))
   (rule "mul_literals" (formula "7") (term "1,2,1,0,1,0,0,1"))
   (rule "polySimp_elimSub" (formula "10") (term "2,0,1,0,0,0,1,1,0,1,1,1,1"))
   (rule "mul_literals" (formula "10") (term "1,2,0,1,0,0,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "10") (term "2,2,0,0,0,0,1,0,1,1,0,1,1,1,1"))
   (rule "mul_literals" (formula "10") (term "1,2,2,0,0,0,0,1,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "10") (term "2,0,1,1,0,0,1,1,0,1,1,1,1"))
   (rule "mul_literals" (formula "10") (term "1,2,0,1,1,0,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "10") (term "2,0,1,0,0,0,0,1,1,0,1,1,1,1"))
   (rule "mul_literals" (formula "10") (term "1,2,0,1,0,0,0,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,0,0,0,0,0,1,1,0,1,1,1,1"))
   (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0,0,0,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "10") (term "0,0,1,1,1"))
   (rule "polySimp_elimSub" (formula "10") (term "0,1,1,1,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "10") (term "2,1,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "10") (term "1,2,1,0,1,0,0,1,1"))
   (rule "polySimp_elimSub" (formula "7") (term "2,0,1,0,1,1"))
   (rule "mul_literals" (formula "7") (term "1,2,0,1,0,1,1"))
   (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "7") (term "1,1,1,0,0,0,1,1"))
   (rule "polySimp_elimSub" (formula "7") (term "2,0,1,1,1,1"))
   (rule "mul_literals" (formula "7") (term "1,2,0,1,1,1,1"))
   (rule "polySimp_elimSub" (formula "7") (term "2,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "7") (term "1,2,0,1,0,0,1,1"))
   (rule "sequentialToParallel2" (formula "10") (term "1"))
   (rule "applyOnParallel" (formula "10") (term "1,0,1"))
   (rule "applyUpdateOnEventStar" (formula "10") (term "1,1,0,1"))
   (rule "simplifyUpdate1" (formula "10") (term "1,1,1,0,1"))
   (rule "simplifyUpdate1" (formula "10") (term "0,1,1,0,1"))
   (rule "applyOnParallel" (formula "10") (term "0,1,0,1"))
   (rule "applyOnElementary" (formula "10") (term "1,0,1,0,1"))
   (rule "simplifyUpdate1" (formula "10") (term "0,1,0,1,0,1"))
   (rule "applyOnParallel" (formula "10") (term "0,0,1,0,1"))
   (rule "applyOnElementary" (formula "10") (term "1,0,0,1,0,1"))
   (rule "simplifyUpdate1" (formula "10") (term "0,1,0,0,1,0,1"))
   (rule "applyOnElementary" (formula "10") (term "0,0,0,1,0,1"))
   (rule "simplifyUpdate1" (formula "10") (term "0,0,0,0,1,0,1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "applyOnParallel" (formula "7") (term "0"))
   (rule "applyOnParallel" (formula "11") (term "1,0"))
   (rule "applyOnParallel" (formula "10") (term "1,0"))
   (rule "applyOnParallel" (formula "9") (term "1,0"))
   (rule "applyOnParallel" (formula "8") (term "1,0"))
   (rule "applyUpdateOnEventStar" (formula "7") (term "1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,1,0"))
   (rule "applyOnElementary" (formula "7") (term "0,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,0,0"))
   (rule "applyUpdateOnEventStar" (formula "11") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,1,0"))
   (rule "applyOnParallel" (formula "11") (term "0,1,0"))
   (rule "applyOnParallel" (formula "10") (term "0,1,0"))
   (rule "applyUpdateOnEventStar" (formula "10") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,1,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,1,1,0"))
   (rule "applyOnParallel" (formula "9") (term "0,1,0"))
   (rule "applyUpdateOnEventStar" (formula "9") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,1,1,0"))
   (rule "applyUpdateOnEventStar" (formula "8") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "1,1,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,1,1,0"))
   (rule "applyOnElementary" (formula "8") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "8") (term "0,0,1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,0,1,0"))
   (rule "applyOnParallel" (formula "11") (term "0,0,1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,1,0,1,0"))
   (rule "applyOnParallel" (formula "10") (term "0,0,1,0"))
   (rule "applyOnParallel" (formula "9") (term "0,0,1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "0,1,0,1,0"))
   (rule "applyOnElementary" (formula "11") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,1,0,0,1,0"))
   (rule "applyOnElementary" (formula "11") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,0,0,1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,1,0,0,1,0"))
   (rule "applyOnElementary" (formula "10") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,0,0,0,1,0"))
   (rule "applyOnElementary" (formula "9") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "0,1,0,0,1,0"))
   (rule "applyOnElementary" (formula "9") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "9") (term "0,0,0,0,1,0"))
   (rule "sequentialToParallel2" (formula "14") (term "1"))
   (rule "applyOnElementary" (formula "14") (term "1,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "2,0,1,1"))
   (rule "polySimp_addComm0" (formula "10") (term "2,0,1"))
   (rule "polySimp_addComm0" (formula "10") (term "1,0,1"))
   (rule "polySimp_addComm0" (formula "9") (term "2,0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "1,1"))
   (rule "sequentialToParallel2" (formula "14"))
   (rule "applyOnParallel" (formula "14") (term "1,0"))
   (rule "applyOnElementary" (formula "14") (term "1,1,0"))
   (rule "applyOnParallel" (formula "14") (term "0,1,0"))
   (rule "applyOnParallel" (formula "14") (term "1,0,1,0"))
   (rule "applyOnParallel" (formula "14") (term "0,0,1,0"))
   (rule "applyOnParallel" (formula "14") (term "0,1,0,1,0"))
   (rule "applyUpdateOnEventStar" (formula "14") (term "1,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0,1,0"))
   (rule "applyOnElementary" (formula "14") (term "1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,0,0,1,0"))
   (rule "applyOnElementary" (formula "14") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,0,0,1,0"))
   (rule "applyOnElementary" (formula "14") (term "1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,1,0,1,0"))
   (rule "applyOnParallel" (formula "14") (term "0,0,1,0,1,0"))
   (rule "applyOnElementary" (formula "14") (term "1,0,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,1,0,1,0"))
   (rule "applyOnElementary" (formula "14") (term "0,0,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,0,0,1,0,1,0"))
   (rule "sequentialToParallel1" (formula "14") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0"))
   (rule "applyOnParallel" (formula "14") (term "1,0,0,1,1,0"))
   (rule "applyUpdateOnEventStar" (formula "14") (term "1,1,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,1,1,0"))
   (rule "applyOnElementary" (formula "14") (term "0,1,0,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "11") (term "2,1,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "2,1,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "9") (term "2,1,1,0,1,0,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,0,1,0,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "1,0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,0,1,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "2,2,0,0,0,0,1,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "0,1,1,1,0,1"))
   (rule "applyOnRigidFormula" (formula "7"))
   (rule "simplifyUpdate1" (formula "7") (term "1"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "7") (term "0"))
   (rule "elimEventOnRigidTerm1" (formula "7") (term "1"))
   (rule "applyOnPV" (formula "7") (term "0"))
   (rule "polySimp_addComm0" (formula "14") (term "2,1,1,0,1,0,1,0,1,0"))
   (rule "inEqSimp_gtToGeq" (formula "11") (term "0,1"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,0,1"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,1"))
   (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,0"))
   (rule "parallelUpdateAssociative" (formula "8") (term "0"))
   (rule "inEqSimp_gtToGeq" (formula "14") (term "0,1,0,0,1,1,0,1"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,0,0,1,1,0,1"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,1,0,0,1,1,0,1"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0,1,0"))
   (rule "parallelUpdateAssociative" (formula "9") (term "0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "8"))
   (rule "simplifyUpdate1" (formula "8") (term "1"))
   (rule "simplifyUpdate1" (formula "8") (term "0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "8") (term "0"))
   (rule "applyOnPV" (formula "8") (term "0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "0,1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,1,0,1,0,1,0"))
   (rule "parallelUpdateAssociative" (formula "9") (term "0,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "1"))
   (rule "simplifyUpdate1" (formula "8") (term "0,1"))
   (rule "elimEventOnRigidTerm1" (formula "8") (term "0,1"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,0,1,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,0,1,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0,1,1,0"))
   (rule "elimEventOnRigidTerm1" (formula "14") (term "1,1,0,1,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,0,1,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "11") (term "2,1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,2,1,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "2,1,0,1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,2,1,0,1,0,1,0"))
   (rule "parallelUpdateAssociative" (formula "9") (term "0,0,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "0,0,1,0,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0,1,0"))
   (rule "applyOnRigidTerm" (formula "8") (term "1,1"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "8") (term "0,1,1"))
   (rule "applyOnPV" (formula "8") (term "0,1,1"))
   (rule "applyOnRigidTerm" (formula "11") (term "1,2,1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "11") (term "0,1,2,1,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "1,2,1,0,1,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "0,1,2,1,0,1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "1,0,1,0,0"))
   (rule "simplifyUpdate1" (formula "9") (term "1,1,0,1,0,0"))
   (rule "applyOnPV" (formula "9") (term "0,1,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,0,1,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1,0,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,0,1,0,0,1,0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0"))
   (rule "parallelUpdateAssociative" (formula "10") (term "0"))
   (rule "applyOnRigidTerm" (formula "9") (term "2,1,0,1,0,0"))
   (rule "elimEventOnRigidTerm1" (formula "9") (term "0,2,1,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "2,1,0,1,0,0,1,0"))
   (rule "elimEventOnRigidTerm1" (formula "14") (term "0,2,1,0,1,0,0,1,0"))
   (rule "applyOnRigidFormula" (formula "11"))
   (rule "simplifyUpdate2" (formula "11") (term "0"))
   (rule "parallelUpdateAssociative" (formula "10") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "9") (term "1,2,1,0,1,0,0"))
   (rule "applyOnPV" (formula "9") (term "0,1,2,1,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "1,2,1,0,1,0,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,2,1,0,1,0,0,1,0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0,0,1"))
   (rule "applyOnRigidFormula" (formula "11") (term "0"))
   (rule "simplifyUpdate1" (formula "11") (term "1,0"))
   (rule "elimEventOnRigidTerm1" (formula "11") (term "1,0"))
   (rule "parallelUpdateAssociative" (formula "10") (term "0,0,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0"))
   (rule "parallelUpdateAssociative" (formula "11") (term "0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "11") (term "0,0"))
   (rule "simplifyUpdate1" (formula "11") (term "0,0,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "1,0,0"))
   (rule "elimEventOnRigidTerm1" (formula "11") (term "0,0,0"))
   (rule "applyOnPV" (formula "11") (term "1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0,0,0,1,1,0,1"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,0,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,0,0,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,0,0,0,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "8"))
   (rule "polySimp_addComm1" (formula "8") (term "0"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
   (rule "assignment" (formula "14") (term "1"))
   (rule "sequentialToParallel2" (formula "14") (term "1"))
   (rule "applyOnElementary" (formula "14") (term "1,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,1"))
   (rule "sequentialToParallel2" (formula "14"))
   (rule "applyOnParallel" (formula "14") (term "1,0"))
   (rule "applyOnElementary" (formula "14") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0"))
   (rule "applyOnElementary" (formula "14") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
   (rule "elimEventStarOnRigidTerm1" (formula "14") (term "0,0,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,1,0"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,1,0"))
   (rule "elimEventOnRigidTerm1" (formula "14") (term "0,0,1,1,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0"))
   (rule "mul_literals" (formula "11") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8"))
   (rule "polySimp_mulComm0" (formula "8") (term "1"))
   (rule "polySimp_rightDist" (formula "8") (term "1"))
   (rule "mul_literals" (formula "8") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "14") (term "1,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0,0,1,1,0,1"))
   (rule "elementOfArrayRange" (formula "14") (term "0,0,0,0,1,0,1,1,0,1") (inst "iv=iv"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1"))
   (rule "arrayLengthNotNegative" (formula "5") (term "1,2,0"))
   (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "4"))
   (rule "leq_literals" (formula "5") (term "0"))
   (rule "concrete_or_1" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "arrayLengthIsAnInt" (formula "5") (term "1,2,0"))
   (rule "inInt" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0"))
   (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0"))
   (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0"))
   (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x_1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_1"))
   (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v0=x_2") (inst "#v1=x_3"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_2"))
   (rule "assignment" (formula "14") (term "1"))
   (rule "sequentialToParallel2" (formula "14") (term "1"))
   (rule "applyOnElementary" (formula "14") (term "1,0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,0,1"))
   (rule "sequentialToParallel2" (formula "14"))
   (rule "applyOnParallel" (formula "14") (term "1,0"))
   (rule "applyOnElementary" (formula "14") (term "1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0"))
   (rule "applyOnElementary" (formula "14") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
   (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,0"))
   (rule "applyOnRigidTerm" (formula "14") (term "0,1,1,0"))
   (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "0,0,1,1,0"))
   (rule "applyOnPV" (formula "14") (term "1,0,1,1,0"))
   (rule "elimEventOnRigidTerm1" (formula "14") (term "0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,0"))
   (rule "add_literals" (formula "14") (term "0,0,1,1,0"))
   (rule "parallelUpdateAssociative" (formula "14") (term "0"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
   (rule "compound_subtraction_1" (formula "14") (term "1") (inst "#v=x_4"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
   (rule "assignment_read_length" (formula "14"))
   (branch "Normal Execution (_array != null)"
      (rule "sequentialToParallel2" (formula "14"))
      (rule "applyOnElementary" (formula "14") (term "1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "0,1,0"))
      (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "14") (term "0,0,1,0"))
      (rule "assignmentSubtractionInt" (formula "14") (term "1"))
      (rule "translateJavaSubInt" (formula "14") (term "0,0,1"))
      (rule "polySimp_elimSub" (formula "14") (term "0,0,1"))
      (rule "mul_literals" (formula "14") (term "1,0,0,1"))
      (rule "sequentialToParallel2" (formula "14"))
      (rule "applyOnElementary" (formula "14") (term "1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,0,1,0"))
      (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
      (rule "elimEventOnRigidTerm1" (formula "14") (term "0,0,1,0"))
      (rule "less_than_comparison_simple" (formula "14") (term "1"))
      (rule "sequentialToParallel2" (formula "14"))
      (rule "applyOnElementary" (formula "14") (term "1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "0,1,0"))
      (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
      (rule "elimEventOnRigidTerm1" (formula "14") (term "2,0,1,0"))
      (rule "elimEventOnRigidTerm1" (formula "14") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "14") (term "0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
      (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,1,0,1,0,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,0"))
      (rule "applyOnPV" (formula "14") (term "1,0,1,0,0"))
      (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0"))
      (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,1,0,0,1,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,1,0,0,1,0"))
      (rule "applyOnPV" (formula "14") (term "1,1,0,0,1,0"))
      (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,0,0,0,1,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,0,1,0"))
      (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
      (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
      (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0"))
      (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
      (rule "simplifyUpdate2" (formula "9"))
      (rule "applyOnRigidFormula" (formula "9"))
      (rule "simplifyUpdate1" (formula "9") (term "1"))
      (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
      (rule "applyOnRigidTerm" (formula "9") (term "0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
      (rule "applyOnPV" (formula "9") (term "0,0"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "4"))
      (rule "leq_literals" (formula "9") (term "0"))
      (rule "concrete_or_1" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
      (rule "inInt" (formula "9") (term "1"))
      (rule "true_left" (formula "9"))
      (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,0,0,1,0"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,0,1,0"))
      (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
      (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0"))
      (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0"))
      (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0"))
      (rule "ifSplit" (formula "14"))
      (branch "if x_1 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
         (rule "ifthenelse_concrete3" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "replace_known_left" (formula "15") (term "0,0,1,0,0") (ifseqformula "1"))
         (rule "ifthenelse_true" (formula "15") (term "0,1,0,0"))
         (rule "eval_order_array_access3" (formula "15") (term "1") (inst "#v0=x_arr") (inst "#v2=x_1") (inst "#v1=x_2"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr"))
         (rule "assignment" (formula "15") (term "1"))
         (rule "sequentialToParallel2" (formula "15"))
         (rule "applyOnElementary" (formula "15") (term "1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,0"))
         (rule "applyOnPV" (formula "15") (term "0,1,0"))
         (rule "sequentialToParallel2" (formula "15"))
         (rule "applyOnElementary" (formula "15") (term "1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "15") (term "1,0,1,0"))
         (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "15") (term "1,0,1,0"))
         (rule "elimEventOnRigidTerm1" (formula "15") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "15") (term "0,1,0"))
         (rule "add_literals" (formula "15") (term "0,0,1,0"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_5"))
         (rule "assignment" (formula "15") (term "1"))
         (rule "sequentialToParallel2" (formula "15") (term "1"))
         (rule "applyOnElementary" (formula "15") (term "1,0,1"))
         (rule "simplifyUpdate1" (formula "15") (term "0,1,0,1"))
         (rule "sequentialToParallel2" (formula "15"))
         (rule "applyOnParallel" (formula "15") (term "1,0"))
         (rule "applyOnElementary" (formula "15") (term "1,1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,1,1,0"))
         (rule "applyOnElementary" (formula "15") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "15") (term "0,0,1,0"))
         (rule "polySimp_addComm0" (formula "15") (term "1,0,1,1,0"))
         (rule "parallelUpdateAssociative" (formula "15") (term "0"))
         (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0"))
         (rule "elimEventOnRigidTerm1" (formula "15") (term "0,0,1,0"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_6"))
         (rule "eval_order_array_access5" (formula "15") (term "1") (inst "#ar1=x_arr_1") (inst "#v1=x_7"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_arr_1"))
         (rule "assignment" (formula "15") (term "1"))
         (rule "sequentialToParallel2" (formula "15"))
         (rule "applyOnElementary" (formula "15") (term "1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,0"))
         (rule "applyOnPV" (formula "15") (term "0,1,0"))
         (rule "sequentialToParallel2" (formula "15"))
         (rule "applyOnElementary" (formula "15") (term "1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "15") (term "1,0,1,0"))
         (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0"))
         (rule "elimEventOnRigidTerm1" (formula "15") (term "0,0,1,0"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_7"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
         (rule "add_literals" (formula "9") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "9") (term "1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0"))
         (rule "qeq_literals" (formula "9") (term "0"))
         (rule "concrete_or_1" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "assignmentAdditionInt" (formula "14") (term "1"))
         (rule "translateJavaAddInt" (formula "14") (term "0,0,1"))
         (rule "sequentialToParallel2" (formula "14"))
         (rule "applyOnElementary" (formula "14") (term "1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "14") (term "1,0,1,0"))
         (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "14") (term "1,0,1,0"))
         (rule "elimEventOnRigidTerm1" (formula "14") (term "0,0,1,0"))
         (rule "assignment_array2" (formula "14"))
         (branch "Normal Execution (x_arr_1 != null)"
            (rule "sequentialToParallel2" (formula "14"))
            (rule "applyOnElementary" (formula "14") (term "1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,1,0"))
            (rule "sequentialToParallel2" (formula "14") (term "1"))
            (rule "applyOnElementary" (formula "14") (term "1,0,1"))
            (rule "sequentialToParallel2" (formula "14"))
            (rule "applyOnParallel" (formula "14") (term "1,0"))
            (rule "applyOnElementary" (formula "14") (term "1,1,0"))
            (rule "applyUpdateOnEvent" (formula "14") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "14") (term "0,0,1,0"))
            (rule "sequentialToParallel1" (formula "14") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0"))
            (rule "applyUpdateOnEvent" (formula "14") (term "1,0,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "2,1,0,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "1,1,0,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,1,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "14") (term "0,1,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "1,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,0"))
            (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,1,0,0"))
            (rule "applyOnPV" (formula "14") (term "0,0,1,0,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "1,1,0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,1,1,0,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "2,0,1,0,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "1,1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "14") (term "1,1,1,0,0,1,1,0"))
            (rule "parallelUpdateAssociative" (formula "14") (term "0"))
            (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
            (rule "elimEventOnRigidTerm1" (formula "14") (term "0,0,1,0"))
            (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0"))
            (rule "pullOutSelect" (formula "14") (term "0,1,0,0,0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
            (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
            (rule "equalUnique" (formula "1") (term "0,1,0,0,0"))
            (rule "concrete_not_2" (formula "1") (term "1,0,0,0"))
            (rule "concrete_and_3" (formula "1") (term "0,0,0"))
            (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,0,0"))
            (rule "assignment_to_primitive_array_component" (formula "15"))
            (branch "Normal Execution (x_arr != null)"
               (rule "sequentialToParallel2" (formula "15"))
               (rule "applyOnElementary" (formula "15") (term "1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
               (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "3,0,1,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,0,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "15") (term "0,0,1,0"))
               (rule "applyOnRigidTerm" (formula "15") (term "2,0,1,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "1,0,1,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "3,0,1,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,2,0,1,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0"))
               (rule "commute_or" (formula "1") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
               (rule "commute_or" (formula "1") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
               (rule "commute_or" (formula "1") (term "1,0,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "commute_or" (formula "1") (term "1,0,1,0,0"))
               (rule "commute_or" (formula "1") (term "0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
               (rule "commute_or" (formula "1") (term "1,0,0,0,0"))
               (rule "postincrement" (formula "15") (term "1"))
               (rule "shift_paren_and" (formula "1") (term "0,0"))
               (rule "compound_int_cast_expression" (formula "15") (term "1") (inst "#v=x_1"))
               (rule "variableDeclarationAssign" (formula "15") (term "1"))
               (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_8"))
               (rule "shift_paren_and" (formula "1") (term "0,0,0"))
               (rule "remove_parentheses_right" (formula "15") (term "1"))
               (rule "assignmentAdditionInt" (formula "15") (term "1"))
               (rule "translateJavaAddInt" (formula "15") (term "0,0,1"))
               (rule "sequentialToParallel2" (formula "15"))
               (rule "applyOnElementary" (formula "15") (term "1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "1,0,1,0"))
               (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "0,0,1,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "1,0,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0"))
               (rule "widening_identity_cast_5" (formula "15") (term "1"))
               (rule "assignment" (formula "15") (term "1"))
               (rule "sequentialToParallel2" (formula "15"))
               (rule "applyOnElementary" (formula "15") (term "1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
               (rule "sequentialToParallel2" (formula "15"))
               (rule "applyOnElementary" (formula "15") (term "1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "1,0,1,0"))
               (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "0,0,1,0"))
               (rule "assignment" (formula "15") (term "1"))
               (rule "sequentialToParallel2" (formula "15"))
               (rule "applyOnElementary" (formula "15") (term "1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "0,1,0"))
               (rule "sequentialToParallel2" (formula "15"))
               (rule "applyOnElementary" (formula "15") (term "1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "15") (term "1,0,1,0"))
               (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "0,0,1,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0,2,2,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,2,2,0"))
               (rule "applyOnPV" (formula "1") (term "0,2,2,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,1,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,1,0"))
               (rule "applyOnPV" (formula "1") (term "1,1,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0,2,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,2,1,0"))
               (rule "applyOnPV" (formula "1") (term "0,2,1,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,1,2,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,2,0"))
               (rule "applyOnPV" (formula "1") (term "1,2,0"))
               (rule "emptyIndexedLoopScope" (formula "15") (term "1"))
               (rule "applyOnRigidFormula" (formula "15"))
               (rule "simplifyUpdate2" (formula "15") (term "0"))
               (rule "applyOnRigidFormula" (formula "15") (term "0"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,1,0,0,0,1,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,0,0,0,1,0,0"))
               (rule "applyOnPV" (formula "1") (term "1,0,0,0,1,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "0,1,0,0"))
               (rule "concrete_or_2" (formula "1") (term "1,0,0"))
               (rule "commute_and_2" (formula "1") (term "0,0"))
               (rule "commute_and_2" (formula "1") (term "0,0,0"))
               (rule "commute_and_2" (formula "1") (term "0,0,0,0"))
               (rule "commute_and_2" (formula "1") (term "0,0,0,0,0"))
               (rule "commute_and" (formula "1") (term "0,0,0,0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,0,0,1,0,1,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,0,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0,0,0,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,0,0,0,0,1"))
               (rule "parallelUpdateAssociative" (formula "15") (term "0,0,1,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,1,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,0,0,0,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,2,1,0,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,0,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,0,1,0,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,1,0,0,1,0,1,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0,1,0,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,1,0,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,2,1,0,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,2,1,0,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,2,1,0,0,0,0,0,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,2,1,0,0,0,0,0,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,2,1,0,0,0,0,0,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,1,0,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,0,0,0,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,2"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,3,0,1,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "3,0,1,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "3,0,1,0,0,0,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,1,0,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,2,0,1,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,2,0,1,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,2,0,1,0,0,0,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,0,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,0,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,3,0,1,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "3,0,1,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "3,0,1,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,1,1,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,0,1,0,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,2,0,1,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,2,0,1,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "0,2,0,1,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,0,1,0,2,1,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,2,1,0,0,0,0"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,2,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,2,1,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,2,1,0,0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,0,0"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0,1,1,1,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,0,0,0"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,1,0,0,0,1,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,0,0,0,1,0,0"))
               (rule "applyOnPV" (formula "1") (term "1,0,0,0,1,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "0,1,0,0"))
               (rule "concrete_or_2" (formula "1") (term "1,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,1,0,0,1,1,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,0,0,1,1,0,0,0"))
               (rule "applyOnPV" (formula "1") (term "1,0,0,1,1,0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,1,1,0,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "1,1,0,0,0"))
               (rule "concrete_or_4" (formula "1") (term "1,0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0,0,0,1,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0,0,1,0,0,0,0"))
               (rule "applyOnPV" (formula "1") (term "0,0,0,1,0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,1,0,0,0,0") (ifseqformula "14"))
               (rule "concrete_not_2" (formula "1") (term "0,1,0,0,0,0"))
               (rule "concrete_or_1" (formula "1") (term "1,0,0,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,0,0,0,0,0,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,2,1,0,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,2,1,0,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,2,1,0,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,2,1,0,0,1,0,1,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,2,1,0,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "2,1,0,0,0,1,0,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,0,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,2,1,0,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,0,0,0,0,0,0,2"))
               (rule "commute_and_2" (formula "1") (term "0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,0,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,0,0,0,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,0,0,0,0,0,0,2"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "commute_and_2" (formula "1") (term "0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,2,1,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,0,0"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,2,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,1,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,2,1,0,0,0,0"))
               (rule "commute_and_2" (formula "1") (term "0,0,0,0"))
               (rule "commute_and_2" (formula "1") (term "0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,2,1,0,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,2,1,0,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,2,1,0,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,2,1,0,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "2,1,0,0,1,0,1,0,1"))
               (rule "add_literals" (formula "15") (term "0,2,1,0,0,1,0,1,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,0,1,0,1,0,1,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,0,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,0,0,1"))
               (rule "commute_and" (formula "1") (term "0,0,0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "1,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "2,1,0,0,0,1,0,0,0,0,2"))
               (rule "add_literals" (formula "15") (term "0,2,1,0,0,0,1,0,0,0,0,2"))
               (rule "methodCallEmpty" (formula "15") (term "1,1"))
               (rule "emptyModality" (formula "15") (term "1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,0,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,0,2"))
               (rule "simplifyUpdate2" (formula "15") (term "1,1,0,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0,0,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,0,0,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "1,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,1,0,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,1,1,0,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,1,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,0,0,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,1,1,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,2"))
               (rule "eqClose" (formula "15") (term "1,1,0,2"))
               (rule "concrete_and_3" (formula "15") (term "1,0,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,0,1,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "1,1,1,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,1,1,1,2"))
               (rule "applyOnPV" (formula "15") (term "1,1,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "0,1,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "0,0,1,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1,1,2"))
               (rule "polySimp_addComm0" (formula "15") (term "0,1,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,1,0,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,1,0,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "0,0,1,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "1,0,1,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,1,0,1,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,1,0,1,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,1,0,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,0,1,0,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "1,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,0,0,1,1,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0,0,1,1,1,2"))
               (rule "applyOnPV" (formula "15") (term "0,0,0,1,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,0,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0,0,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,1,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "1,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,0,0,0,1,0,1,1,2"))
               (rule "precOfInt" (formula "15") (term "1,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0,0,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0,0,0,0,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,1,0,0,0,0,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,0,0,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0,0,0,0,0,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,0,0,0,0,0,0,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "2,1,1,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,1,1,0,0,1,0,1,1,2"))
               (rule "eqSymm" (formula "15") (term "1,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,1,0,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidFormula1" (formula "15") (term "0,1,0,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,0,1,0,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,0,0,0,0,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,0,0,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,1,0,0,0,0,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "0,1,1,0,0,0,0,0,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "2,1,1,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,1,1,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "2,1,1,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,1,1,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,1,0,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "0,0,0,0,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "0,0,0,0,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,0,1,0,0,0,0,0,1,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0,1,0,0,0,0,0,1,1,2"))
               (rule "applyOnPV" (formula "15") (term "0,0,1,0,0,0,0,0,1,1,2"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1,1,1,2"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,1,1,1,2"))
               (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,0,1,1,1,1,2"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,1,1,1,1,2"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,1,1,1,2"))
               (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,1,1,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,1,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,1,1,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "0,1,0,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate2" (formula "15") (term "0,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidFormula1" (formula "15") (term "0,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "1,0,0,0,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,0,0,0,0,1,0,1,1,2"))
               (rule "applyOnPV" (formula "15") (term "1,0,0,0,0,0,1,0,1,1,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,1,1,1,2"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,1,1,1,2"))
               (rule "polySimp_pullOutFactor2b" (formula "15") (term "0,0,1,1,1,1,2"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,1,1,1,1,2"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,1,1,1,1,2"))
               (rule "add_zero_right" (formula "15") (term "0,0,1,1,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "0,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "2,0,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1,0,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "2,0,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "applyOnRigidFormula" (formula "15") (term "1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "0,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,0,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "applyOnPV" (formula "15") (term "0,0,0,1,1,0,0,0,1,0,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "1,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "simplifyUpdate1" (formula "15") (term "0,1,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "0,1,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "applyOnRigidTerm" (formula "15") (term "1,1,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,1,1,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,1,1,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "applyOnPV" (formula "15") (term "0,1,1,1,0,1,0,0,0,0,1,0,1,1,2"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1,1,1,2"))
               (rule "times_zero_2" (formula "15") (term "1,0,0,1,1,1,2"))
               (rule "add_zero_right" (formula "15") (term "0,0,1,1,1,2"))
               (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,0,0,0,0,1,1,2"))
               (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,0,0,0,1,1,2"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,1,1,1,2"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,1,1,1,1,2"))
               (rule "polySimp_elimOne" (formula "15") (term "0,1,1,1,1,2"))
               (rule "inEqSimp_sepNegMonomial1" (formula "15") (term "0,1,1,1,2"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1,1,1,2"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0,1,1,1,2"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,0,1,1,2"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0,0,1,1,2"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0,0,1,1,2"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0,0,1,1,2"))
               (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0,0,1,1,2"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0,0,1,1,2"))
               (rule "commute_and_2" (formula "1") (term "0,0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1,0,1,0,1,0,1,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,1,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "2,1,0,0,0,0,0,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,2,1,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,1,0,1,0,1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0,1,1,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1,1,0,0"))
               (rule "applyOnPV" (formula "1") (term "0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,1,1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "1") (term "1,1,0,0") (ifseqformula "9"))
               (rule "leq_literals" (formula "1") (term "0,1,1,0,0"))
               (rule "concrete_or_1" (formula "1") (term "1,1,0,0"))
               (rule "concrete_or_3" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,2,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,0,0,1"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,2,1,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,0,0"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,0,0,2"))
               (rule "parallelUpdateAssociative" (formula "15") (term "0,0,0,0,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,0,0,2"))
               (rule "boolean_not_equal_2" (formula "15") (term "0,0,2"))
               (rule "concrete_impl_2" (formula "15") (term "0,2"))
               (rule "concrete_and_1" (formula "15") (term "2"))
               (rule "commute_and" (formula "15") (term "1,1,2"))
               (rule "commute_and_2" (formula "15") (term "0,0,0,1,2"))
               (rule "commute_and_2" (formula "15") (term "0,0,0,0,1,2"))
               (rule "commute_and_2" (formula "15") (term "0,0,0,1,2"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,1,0,1,0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "1,0,1,0,1,0,1,0,1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,0,0,0,0,0,0,1"))
               (rule "commute_and" (formula "15") (term "0,0,0,0,0,1,2"))
               (rule "commute_and_2" (formula "15") (term "0,0,0,0,1,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0,1,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1,0,0,0,0"))
               (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_subsumption1" (formula "1") (term "1,0,0,0,0") (ifseqformula "9"))
               (rule "leq_literals" (formula "1") (term "0,1,0,0,0,0"))
               (rule "concrete_or_1" (formula "1") (term "1,0,0,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0,1,1,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1,1,0,0"))
               (rule "applyOnPV" (formula "1") (term "0,1,1,0,0"))
               (rule "eqClose" (formula "1") (term "1,1,0,0"))
               (rule "concrete_or_3" (formula "1") (term "1,0,0"))
               (rule "concrete_and_3" (formula "1") (term "0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,0,0,1"))
               (rule "parallelUpdateAssociative" (formula "15") (term "0,1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "1,0,1,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,0,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,0,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,0,1,0,0,1,2"))
               (rule "parallelUpdateAssociative" (formula "15") (term "0,0,0,1,0,0,1,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,0,1,0,0,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0,1,0,0,1,2"))
               (rule "applyOnPV" (formula "15") (term "0,0,1,0,0,1,2"))
               (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,2,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,2"))
               (rule "applyOnPV" (formula "15") (term "2,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,0,0,2"))
               (rule "parallelUpdateAssociative" (formula "15") (term "0,0,0,0,2"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0,0,0,2"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0,0,2"))
               (rule "applyOnPV" (formula "15") (term "0,0,0,2"))
               (rule "boolean_not_equal_2" (formula "15") (term "0,0,2"))
               (rule "concrete_not_2" (formula "15") (term "0,2"))
               (rule "concrete_impl_1" (formula "15") (term "2"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,1,0,1,0,1"))
               (rule "parallelUpdateAssociative" (formula "15") (term "0,1,0,1,0,1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "1,0,1,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "1,0,1,0,1"))
               (rule "applyOnPV" (formula "15") (term "1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "15") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,1"))
               (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0,0,0"))
               (rule "applyOnPV" (formula "1") (term "0,0,0,0"))
               (rule "eqClose" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "15") (term "0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0,0"))
               (rule "applyOnPV" (formula "15") (term "0,0"))
               (rule "boolean_not_equal_2" (formula "15") (term "0"))
               (rule "ifthenelse_false_for" (formula "15"))
               (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0,0"))
               (rule "applyOnPV" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
               (rule "ifthenelse_true" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "15") (term "3,0,1,0,0,0,0,0,0,1,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "3,0,1,0,0,0,1,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "3,0,1,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "3,0,1,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,2,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "2,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "applyOnPV" (formula "14") (term "2,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,1,0,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,0,1,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,2,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "2,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0"))
               (rule "applyOnPV" (formula "14") (term "2,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0,0,0,0,1,0,0,0,0,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,0,0,0,0,1,0,0,0,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,1,2,1,0,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,2,1,0,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "applyOnPV" (formula "14") (term "1,2,1,0,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "2,1,0,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,2,1,0,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,1,0,0,0"))
               (rule "parallelUpdateAssociative" (formula "14") (term "0,0,1,0,0,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,0,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0,0,0"))
               (rule "applyOnPV" (formula "14") (term "0,1,0,0,0"))
               (rule "commute_and_2" (formula "14") (term "0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,2,1,0,0,0,0,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,2,1,0,0,0,0,1"))
               (rule "applyOnPV" (formula "14") (term "1,2,1,0,0,0,0,1"))
               (rule "polySimp_addAssoc" (formula "14") (term "2,1,0,0,0,0,1"))
               (rule "add_literals" (formula "14") (term "0,2,1,0,0,0,0,1"))
               (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0,1,0,0,0,1,1,0,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,0,0,1,1,0,0"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,1"))
               (rule "commute_and" (formula "14") (term "1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0,1,0,1,0,1,0,1,1,0,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,1,0,1,0,1,1,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,1,0,0,0,0,1,1,0,0"))
               (rule "parallelUpdateAssociative" (formula "14") (term "0,0,1,0,0,0,0,1,1,0,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,0,0,0,0,1,1,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0,0,0,0,1,1,0,0"))
               (rule "applyOnPV" (formula "14") (term "0,1,0,0,0,0,1,1,0,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,1,0,1,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,2,1,0,0,0,0,1,0,0,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,2,1,0,0,0,0,1,0,0,1,0"))
               (rule "applyOnPV" (formula "14") (term "1,2,1,0,0,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "2,1,0,0,0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "14") (term "0,2,1,0,0,0,0,1,0,0,1,0"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0"))
               (rule "ex_pull_out1" (formula "14") (term "0,0,0,0,1,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,0,0,1,0,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,1,0,0"))
               (rule "applyOnPV" (formula "14") (term "0,0,1,0,0"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
               (rule "inEqSimp_invertInEq0" (formula "14") (term "0,1,0,0"))
               (rule "times_zero_2" (formula "14") (term "1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0,0"))
               (rule "replace_known_left" (formula "14") (term "0,1,0,0") (ifseqformula "8"))
               (rule "concrete_impl_1" (formula "14") (term "1,0,0"))
               (rule "commute_and_2" (formula "14") (term "0,0"))
               (rule "commute_and_2" (formula "14") (term "0,0,0"))
               (rule "commute_and_2" (formula "14") (term "0,0,0,0"))
               (rule "commute_and" (formula "14") (term "0,0,0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,1,0,0,1,1"))
               (rule "parallelUpdateAssociative" (formula "14") (term "0,0,1,0,0,1,1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,0,0,1,1"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0,0,1,1"))
               (rule "applyOnPV" (formula "14") (term "0,1,0,0,1,1"))
               (rule "commute_and" (formula "14") (term "1"))
               (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,1,0,0,1,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,0,1,0,0,1,0"))
               (rule "cut_direct" (formula "11") (term "0"))
               (branch "CUT: i_0 >= 1 TRUE"
                  (rule "concrete_impl_1" (formula "12"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "11"))
                  (rule "leq_literals" (formula "8") (term "0"))
                  (rule "concrete_or_1" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,0,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,0,1,0,1,0,0,0,0"))
                  (rule "parallelUpdateAssociative" (formula "14") (term "0,1,0,1,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,1,0,0,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,2,1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "2,1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "2,1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,0,1,0,0,0,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0,0,0,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "0,1,0,0,0,0,1,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0,1,0,0,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "parallelUpdateAssociative" (formula "14") (term "0,1,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0,1,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,1,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,0,1"))
                  (rule "parallelUpdateAssociative" (formula "14") (term "0,0,0,1"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,0,1"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,1"))
                  (rule "applyOnPV" (formula "14") (term "0,0,1"))
                  (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0,1"))
                  (rule "add_literals" (formula "14") (term "1,0,0,1"))
                  (rule "times_zero_1" (formula "14") (term "0,0,1"))
                  (rule "leq_literals" (formula "14") (term "0,1"))
                  (rule "concrete_and_1" (formula "14") (term "1"))
                  (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,0,0,1,0,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,0,1,0,0,1,0"))
                  (rule "applyOnPV" (formula "14") (term "0,0,1,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1,0,0,1,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "0,1,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0"))
                  (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "1"))
                  (rule "concrete_and_3" (formula "14") (term "0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,1"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1"))
                  (rule "applyOnPV" (formula "14") (term "0,1"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0,0"))
                  (rule "applyOnPV" (formula "14") (term "0,1,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0,1,0,0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,0,0,1,0,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,1,0,1,0,1,0,1,0,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,1,0,1,0,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,1,0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,1,0,1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,1,0,1,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,0,1,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,1,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,2,1,0,0,1,0,1,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "2,1,0,0,1,0,1,0,1,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "2,1,0,0,1,0,1,0,1,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,2,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,2,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,2,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "2,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,2,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "commute_and_2" (formula "14") (term "0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,1"))
                  (rule "parallelUpdateAssociative" (formula "14") (term "0,0,1"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "0,1"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1"))
                  (rule "applyOnPV" (formula "14") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "14") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "14") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "14") (term "0,0,1"))
                  (rule "qeq_literals" (formula "14") (term "0,1"))
                  (rule "concrete_or_1" (formula "14") (term "1"))
                  (rule "concrete_and_3" (formula "14"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,1,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,1,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,1,0,1,0,0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,0,0,1,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,1,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0,1,0,1,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,1,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,1,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "14") (term "0,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0"))
                  (rule "applyOnPV" (formula "14") (term "0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0"))
                  (rule "mul_literals" (formula "14") (term "1,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "14") (term "1,0") (ifseqformula "10"))
                  (rule "leq_literals" (formula "14") (term "0,1,0"))
                  (rule "concrete_or_1" (formula "14") (term "1,0"))
                  (rule "concrete_and_3" (formula "14") (term "0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,0,1,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,1,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,1,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,0,1,0,1,0,0"))
                  (rule "parallelUpdateAssociative" (formula "14") (term "0,1,0,1,0,1,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "14") (term "1,0,1,0,1,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,1,0,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,1,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,1,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,1,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,0,1,0,0,0,0,0,0,0,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,0,1,0"))
                  (rule "applyOnPV" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,1,2,1,0,0,0,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "1,2,1,0,0,0,0,1,0"))
                  (rule "applyOnPV" (formula "14") (term "1,2,1,0,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "2,1,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "14") (term "0,2,1,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0,1,0,0,0,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0,1,0,0,0,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "14") (term "0,1,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0,0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "14") (term "0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "14") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "14") (term "0"))
                  (rule "commute_and" (formula "14") (term "0,0"))
                  (rule "andRight" (formula "14"))
                  (branch "Case 1"
                     (rule "andRight" (formula "14"))
                     (branch "Case 1"
                        (rule "andRight" (formula "14"))
                        (branch "Case 1"
                           (rule "updateParallelToReadEventOnNoR" (formula "14") (inst "tempVar=tempVar_0"))
                           (branch "Case 1"
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "disjointWithSingleton2" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "2,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
                              (rule "elimEventOnRigidTerm1" (formula "1") (term "0,1,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
                              (rule "applyOnPV" (formula "1") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "1,1,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,1,0"))
                              (rule "applyOnPV" (formula "1") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "1,0"))
                              (rule "add_literals" (formula "1") (term "0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1,2,0"))
                              (rule "applyOnPV" (formula "1") (term "0,1,2,0"))
                              (rule "elementOfArrayRangeEQ" (formula "14") (inst "iv=iv") (ifseqformula "1"))
                              (rule "eqClose" (formula "14") (term "0"))
                              (rule "concrete_and_1" (formula "14"))
                              (rule "equalUnique" (formula "14") (term "0,0,0"))
                              (rule "eqSymm" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                              (rule "nnf_ex2all" (formula "14"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                              (rule "commute_or" (formula "1") (term "0,0"))
                              (rule "commute_or_2" (formula "1") (term "0"))
                              (rule "elim_forall4" (formula "1"))
                              (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (rule "concrete_or_1" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "eventStarBeforNoR" (formula "15"))
                              (rule "arrayLengthNotNegative" (formula "10") (term "1,2,1,0,1,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "6"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (rule "concrete_or_1" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
                              (rule "inInt" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
                              (rule "inInt" (formula "9") (term "1"))
                              (rule "true_left" (formula "9"))
                              (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                              (rule "simplifyUpdate2" (formula "9"))
                              (rule "applyOnRigidFormula" (formula "9"))
                              (rule "simplifyUpdate1" (formula "9") (term "1"))
                              (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                              (rule "applyOnRigidTerm" (formula "9") (term "0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                              (rule "applyOnPV" (formula "9") (term "0,0"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "6"))
                              (rule "leq_literals" (formula "9") (term "0"))
                              (rule "concrete_or_1" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "pullOut" (formula "10") (term "0,1") (inst "sk=arrayRange_0") (userinteraction))
                              (rule "simplifyUpdate2" (formula "10"))
                              (rule "applyOnRigidFormula" (formula "10"))
                              (rule "simplifyUpdate1" (formula "10") (term "1"))
                              (rule "elimEventOnRigidTerm1" (formula "10") (term "1"))
                              (rule "applyOnRigidTerm" (formula "10") (term "0"))
                              (rule "simplifyUpdate1" (formula "10") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "10") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "10") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "0,0"))
                              (rule "applyOnPV" (formula "10") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "10") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "10") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "10") (term "0,2,0"))
                              (rule "applyOnRigidTerm" (formula "10") (term "1,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "1,1,0"))
                              (rule "simplifyUpdate1" (formula "10") (term "0,1,0"))
                              (rule "applyOnPV" (formula "10") (term "1,1,0"))
                              (rule "elimEventOnRigidTerm1" (formula "10") (term "0,1,0"))
                              (rule "applyOnRigidTerm" (formula "10") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "0,1,2,0"))
                              (rule "applyOnPV" (formula "10") (term "0,1,2,0"))
                              (rule "eventStarBeforNoR" (formula "11"))
                              (rule "noReadKnownForSuperset" (formula "16") (term "1") (ifseqformula "11") (userinteraction))
                              (rule "applyOnRigidFormula" (formula "16"))
                              (rule "elimEventStarOnRigidFormula1" (formula "16") (term "0"))
                              (rule "ifthenelse_split_for" (formula "16"))
                              (branch "tempVar_0 subset arrayRange_0 TRUE"
                                 (rule "closeTrue" (formula "17"))
                              )
                              (branch "tempVar_0 subset arrayRange_0 FALSE"
                                 (rule "subsetToElementOfRight" (formula "16") (inst "ov=ov") (inst "fv=fv"))
                                 (rule "allRight" (formula "16") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "16") (inst "sk=fv_0"))
                                 (rule "impRight" (formula "16"))
                                 (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "elementOfArrayRangeEQ" (formula "20") (inst "iv=iv") (ifseqformula "14"))
                                 (rule "eqSymm" (formula "20") (term "0,0,0,1"))
                                 (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "1"))
                                 (rule "concrete_and_1" (formula "20"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "4"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "applyEqRigid" (formula "20") (term "1,0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "20") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1"))
                                 (rule "mul_literals" (formula "4") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                 (rule "nnf_ex2all" (formula "20"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (rule "elim_forall4" (formula "1"))
                                 (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                 (rule "leq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Case 2"
                              (rule "false_right" (formula "16"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "eqSymm" (formula "1"))
                              (rule "disjointWithSingleton1" (formula "14"))
                              (rule "notRight" (formula "14"))
                              (rule "applyOnRigidTerm" (formula "2") (term "0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "2") (term "1,0"))
                              (rule "elimEventOnRigidTerm1" (formula "2") (term "0,1,0"))
                              (rule "applyOnRigidTerm" (formula "2") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "2") (term "0,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,0"))
                              (rule "applyOnPV" (formula "2") (term "0,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "1,1,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,1,0"))
                              (rule "applyOnPV" (formula "2") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "1,0"))
                              (rule "add_literals" (formula "2") (term "0,1,0"))
                              (rule "applyOnRigidTerm" (formula "2") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "0,1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,1,2,0"))
                              (rule "applyOnPV" (formula "2") (term "0,1,2,0"))
                              (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                              (rule "eqClose" (formula "1") (term "0"))
                              (rule "concrete_and_1" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,0,0"))
                              (rule "exLeft" (formula "1") (inst "sk=iv_0"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                              (rule "mul_literals" (formula "2") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,1,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch "Case 2"
                           (rule "updateParallelToReadEventOnNoRaW" (formula "14") (inst "tempVar=tempVar_0"))
                           (branch "Case 1"
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "disjointWithSingleton2" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                              (rule "elimEventOnRigidTerm1" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
                              (rule "applyOnPV" (formula "1") (term "0,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,2,0"))
                              (rule "applyOnPV" (formula "1") (term "1,2,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "2,0"))
                              (rule "add_literals" (formula "1") (term "0,2,0"))
                              (rule "add_zero_left" (formula "1") (term "2,0"))
                              (rule "elementOfArrayRangeEQ" (formula "14") (inst "iv=iv") (ifseqformula "1"))
                              (rule "eqClose" (formula "14") (term "0"))
                              (rule "concrete_and_1" (formula "14"))
                              (rule "equalUnique" (formula "14") (term "0,0,0"))
                              (rule "eqSymm" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
                              (rule "nnf_ex2all" (formula "14"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                              (rule "commute_or" (formula "1") (term "0,0"))
                              (rule "commute_or_2" (formula "1") (term "0"))
                              (rule "elim_forall4" (formula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1"))
                              (rule "add_literals" (formula "1") (term "1,0,1"))
                              (rule "times_zero_1" (formula "1") (term "0,1"))
                              (rule "leq_literals" (formula "1") (term "1"))
                              (rule "concrete_or_3" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "simplifyEventUpdateNoRaW" (formula "15"))
                              (rule "arrayLengthIsAnInt" (formula "12") (term "1,2,1,0,1,0,0"))
                              (rule "inInt" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
                              (rule "inInt" (formula "9") (term "1"))
                              (rule "true_left" (formula "9"))
                              (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                              (rule "simplifyUpdate2" (formula "9"))
                              (rule "applyOnRigidFormula" (formula "9"))
                              (rule "simplifyUpdate1" (formula "9") (term "1"))
                              (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                              (rule "applyOnRigidTerm" (formula "9") (term "0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                              (rule "applyOnPV" (formula "9") (term "0,0"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "6"))
                              (rule "leq_literals" (formula "9") (term "0"))
                              (rule "concrete_or_1" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "arrayLengthNotNegative" (formula "9") (term "1,2,1,0,1,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "6"))
                              (rule "leq_literals" (formula "9") (term "0"))
                              (rule "concrete_or_1" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "pullOut" (formula "12") (term "0,1") (inst "sk=arrayRange_0") (userinteraction))
                              (rule "simplifyUpdate2" (formula "12"))
                              (rule "applyOnRigidFormula" (formula "12"))
                              (rule "simplifyUpdate1" (formula "12") (term "1"))
                              (rule "elimEventOnRigidTerm1" (formula "12") (term "1"))
                              (rule "applyOnRigidTerm" (formula "12") (term "0"))
                              (rule "simplifyUpdate1" (formula "12") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "0,0"))
                              (rule "elimEventOnRigidTerm1" (formula "12") (term "1,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0"))
                              (rule "applyOnPV" (formula "12") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "12") (term "2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,2,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "0,2,0"))
                              (rule "applyOnPV" (formula "12") (term "1,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "12") (term "0,2,0"))
                              (rule "simplifyEventUpdateNoRaW" (formula "13"))
                              (rule "noRaWKnownForSuperset" (formula "16") (term "1") (ifseqformula "13") (userinteraction))
                              (rule "applyOnRigidFormula" (formula "16"))
                              (rule "elimEventOnRigidFormula1" (formula "16") (term "0"))
                              (rule "ifthenelse_split_for" (formula "16"))
                              (branch "tempVar_0 subset arrayRange_0 TRUE"
                                 (rule "closeTrue" (formula "17"))
                              )
                              (branch "tempVar_0 subset arrayRange_0 FALSE"
                                 (rule "subsetToElementOfRight" (formula "16") (inst "ov=ov") (inst "fv=fv"))
                                 (rule "allRight" (formula "16") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "16") (inst "sk=fv_0"))
                                 (rule "impRight" (formula "16"))
                                 (rule "elementOfArrayRangeEQ" (formula "17") (inst "iv=iv") (ifseqformula "13"))
                                 (rule "eqSymm" (formula "17") (term "0,0,0,1"))
                                 (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "1"))
                                 (rule "concrete_and_1" (formula "20"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0"))
                                 (rule "applyEqRigid" (formula "20") (term "1,0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "20") (term "0,0,0"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                 (rule "times_zero_1" (formula "3") (term "0,0"))
                                 (rule "add_zero_left" (formula "3") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                 (rule "concrete_or_1" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "nnf_ex2all" (formula "20"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (rule "elim_forall4" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "5"))
                                 (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,0"))
                                 (rule "times_zero_1" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "5"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,0"))
                                 (rule "times_zero_1" (formula "5") (term "0"))
                                 (rule "qeq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "3") (term "0,1") (ifseqformula "1"))
                                 (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "15"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                 (rule "concrete_or_1" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "noReadAndNoRaW" (formula "19") (term "1") (userinteraction))
                                 (rule "applyOnRigidFormula" (formula "19"))
                                 (rule "applyOnRigidFormula" (formula "19") (term "0"))
                                 (rule "ifthenelse_split_for" (formula "19"))
                                 (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(tempVar_0) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(tempVar_0) TRUE"
                                    (rule "closeTrue" (formula "20"))
                                 )
                                 (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(tempVar_0) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(tempVar_0) FALSE"
                                    (rule "orRight" (formula "19"))
                                    (rule "pullOut" (formula "12") (term "0,1") (inst "sk=arrayRange_1") (userinteraction))
                                    (rule "simplifyUpdate2" (formula "12"))
                                    (rule "applyOnRigidFormula" (formula "12"))
                                    (rule "simplifyUpdate1" (formula "12") (term "1"))
                                    (rule "elimEventOnRigidTerm1" (formula "12") (term "1"))
                                    (rule "applyOnRigidTerm" (formula "12") (term "0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "2,0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "1,0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "0,0"))
                                    (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0"))
                                    (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0"))
                                    (rule "applyOnPV" (formula "12") (term "1,0"))
                                    (rule "applyOnPV" (formula "12") (term "0,0"))
                                    (rule "applyOnRigidTerm" (formula "12") (term "2,0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "0,2,0"))
                                    (rule "elimEventOnRigidTerm1" (formula "12") (term "0,2,0"))
                                    (rule "applyOnRigidTerm" (formula "12") (term "1,2,0"))
                                    (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1,2,0"))
                                    (rule "applyOnPV" (formula "12") (term "0,1,2,0"))
                                    (rule "eventStarBeforNoW" (formula "13"))
                                    (rule "noWriteKnownForSuperset" (formula "21") (term "1") (ifseqformula "13") (userinteraction))
                                    (rule "applyOnRigidFormula" (formula "21"))
                                    (rule "elimEventOnRigidFormula1" (formula "21") (term "0"))
                                    (rule "ifthenelse_split_for" (formula "21"))
                                    (branch "tempVar_0 subset arrayRange_1 TRUE"
                                       (rule "closeTrue" (formula "22"))
                                    )
                                    (branch "tempVar_0 subset arrayRange_1 FALSE"
                                       (rule "subsetToElementOfRight" (formula "21") (inst "ov=ov") (inst "fv=fv"))
                                       (rule "allRight" (formula "21") (inst "sk=ov_1"))
                                       (rule "allRight" (formula "21") (inst "sk=fv_1"))
                                       (rule "impRight" (formula "21"))
                                       (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "5"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "exLeft" (formula "2") (inst "sk=iv_1"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "elementOfArrayRangeEQ" (formula "25") (inst "iv=iv") (ifseqformula "16"))
                                       (rule "eqSymm" (formula "25") (term "0,0,0,1"))
                                       (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                       (rule "concrete_and_1" (formula "25"))
                                       (rule "inEqSimp_commuteLeq" (formula "3"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "1,0,0"))
                                       (rule "applyEq" (formula "25") (term "1,0,0,0") (ifseqformula "2"))
                                       (rule "equalUnique" (formula "25") (term "0,0,0"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                       (rule "times_zero_1" (formula "3") (term "0,0"))
                                       (rule "add_zero_left" (formula "3") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "20"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                       (rule "concrete_or_1" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "nnf_ex2all" (formula "25"))
                                       (rule "nnf_notAnd" (formula "1") (term "0"))
                                       (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                       (rule "commute_or" (formula "1") (term "0,0"))
                                       (rule "commute_or_2" (formula "1") (term "0"))
                                       (rule "elim_forall4" (formula "1"))
                                       (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                       (rule "cut_direct" (formula "1") (term "1"))
                                       (branch "CUT: array.length <= iv_1 TRUE"
                                          (rule "concrete_or_3" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                                          (rule "mul_literals" (formula "14") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                          (rule "mul_literals" (formula "14") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "14"))
                                          (rule "leq_literals" (formula "4") (term "0"))
                                          (rule "concrete_or_1" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                                          (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                          (rule "mul_literals" (formula "9") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1"))
                                          (rule "polySimp_rightDist" (formula "9") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                                          (rule "mul_literals" (formula "9") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "9"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_homoInEq1" (formula "4"))
                                          (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                                          (rule "add_literals" (formula "4") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "4") (term "1,0"))
                                          (rule "add_literals" (formula "4") (term "0"))
                                          (rule "leq_literals" (formula "4"))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                       (branch "CUT: array.length <= iv_1 FALSE"
                                          (rule "concrete_or_4" (formula "1"))
                                          (rule "inEqSimp_leqRight" (formula "24"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
                                          (rule "add_literals" (formula "6") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "6") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "6") (term "0,0"))
                                          (rule "qeq_literals" (formula "6") (term "0"))
                                          (rule "concrete_or_1" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "2"))
                                          (rule "mul_literals" (formula "5") (term "0,0"))
                                          (rule "add_zero_left" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                          (rule "mul_literals" (formula "5") (term "1"))
                                          (rule "cut" (inst "cutFormula=  union(arrayRange(array, Z(0(#)), sub(i_0, Z(1(#)))),
        arrayRange(array, i_0, i_0))
= arrayRange(array, Z(0(#)), i_0)") (userinteraction))
                                          (branch "CUT: arrayRange(array, 0, i_0 - 1) cup arrayRange(array, i_0, i_0) = arrayRange(array, 0, i_0) TRUE"
                                             (rule "pullOut" (formula "1") (term "0,0") (inst "sk=arrayRange_2") (userinteraction))
                                             (rule "pullOut" (formula "2") (term "1,0") (inst "sk=arrayRange_3") (userinteraction))
                                             (rule "applyEq" (formula "3") (term "1") (ifseqformula "12") (userinteraction))
                                             (rule "eqSymm" (formula "3") (userinteraction))
                                             (rule "applyEqRigid" (formula "29") (term "0,1") (ifseqformula "3") (userinteraction))
                                             (rule "applyEqRigid" (formula "30") (term "0,1") (ifseqformula "3") (userinteraction))
                                             (rule "splitNoRaW" (formula "30") (term "1") (userinteraction))
                                             (rule "polySimp_elimSub" (formula "1") (term "2,0"))
                                             (rule "mul_literals" (formula "1") (term "1,2,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "2,0"))
                                             (rule "applyOnRigidFormula" (formula "30"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "24"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "applyEq" (formula "12") (term "1") (ifseqformula "3"))
                                             (rule "applyEqRigid" (formula "28") (term "0,1") (ifseqformula "3"))
                                             (rule "applyEqRigid" (formula "3") (term "0,1") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "29") (term "0,0,1") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "30") (term "0,1,0") (ifseqformula "1"))
                                             (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "25"))
                                             (rule "concrete_and_1" (formula "30"))
                                             (rule "applyEqRigid" (formula "12") (term "0,1") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "28") (term "0,0,1") (ifseqformula "1"))
                                             (rule "noReadAndNoRaW" (formula "30") (term "1") (userinteraction))
                                             (rule "applyOnRigidFormula" (formula "30"))
                                             (rule "applyOnRigidFormula" (formula "30") (term "0"))
                                             (rule "ifthenelse_split_for" (formula "30"))
                                             (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_3) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_3) TRUE"
                                                (rule "closeTrue" (formula "31"))
                                             )
                                             (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_3) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_3) FALSE"
                                                (rule "orRight" (formula "30"))
                                                (rule "noRaWKnownForSuperset" (formula "32") (term "1") (ifseqformula "25") (userinteraction))
                                                (rule "applyOnRigidFormula" (formula "32"))
                                                (rule "elimEventOnRigidFormula1" (formula "32") (term "0"))
                                                (rule "ifthenelse_split_for" (formula "32"))
                                                (branch "arrayRange_3 subset arrayRange_0 TRUE"
                                                   (rule "closeTrue" (formula "33"))
                                                )
                                                (branch "arrayRange_3 subset arrayRange_0 FALSE"
                                                   (rule "subsetToElementOfRight" (formula "32") (inst "ov=ov") (inst "fv=fv"))
                                                   (rule "allRight" (formula "32") (inst "sk=ov_2"))
                                                   (rule "allRight" (formula "32") (inst "sk=fv_2"))
                                                   (rule "impRight" (formula "32"))
                                                   (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "3"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "exLeft" (formula "2") (inst "sk=iv_2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "elementOfArrayRangeEQ" (formula "36") (inst "iv=iv") (ifseqformula "28"))
                                                   (rule "eqSymm" (formula "36") (term "0,0,0,1"))
                                                   (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "1"))
                                                   (rule "concrete_and_1" (formula "36"))
                                                   (rule "inEqSimp_commuteLeq" (formula "3"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36") (term "1,0,0"))
                                                   (rule "applyEqRigid" (formula "36") (term "1,0,0,0") (ifseqformula "2"))
                                                   (rule "equalUnique" (formula "36") (term "0,0,0"))
                                                   (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
                                                   (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq0" (formula "5"))
                                                   (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                                   (rule "add_literals" (formula "5") (term "1,0"))
                                                   (rule "times_zero_1" (formula "5") (term "0"))
                                                   (rule "qeq_literals" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                   (rule "add_literals" (formula "4") (term "1,0"))
                                                   (rule "times_zero_1" (formula "4") (term "0"))
                                                   (rule "leq_literals" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "applyEq" (formula "35") (term "1,0,0,0") (ifseqformula "3"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1") (ifseqformula "3"))
                                                   (rule "nnf_ex2all" (formula "35"))
                                                   (rule "nnf_notAnd" (formula "1") (term "0"))
                                                   (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                                   (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "commute_or_2" (formula "1") (term "0"))
                                                   (rule "elim_forall4" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                                   (rule "polySimp_pullOutFactor1" (formula "1") (term "0,1"))
                                                   (rule "add_literals" (formula "1") (term "1,0,1"))
                                                   (rule "times_zero_1" (formula "1") (term "0,1"))
                                                   (rule "leq_literals" (formula "1") (term "1"))
                                                   (rule "concrete_or_3" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "noWriteKnownForSuperset" (formula "34") (term "1") (ifseqformula "24") (userinteraction))
                                                   (rule "applyOnRigidFormula" (formula "34"))
                                                   (rule "elimEventStarOnRigidFormula1" (formula "34") (term "0"))
                                                   (rule "ifthenelse_split_for" (formula "34"))
                                                   (branch "arrayRange_3 subset arrayRange_1 TRUE"
                                                      (rule "closeTrue" (formula "35"))
                                                   )
                                                   (branch "arrayRange_3 subset arrayRange_1 FALSE"
                                                      (rule "subsetToElementOfRight" (formula "34") (inst "ov=ov") (inst "fv=fv"))
                                                      (rule "allRight" (formula "34") (inst "sk=ov_3"))
                                                      (rule "allRight" (formula "34") (inst "sk=fv_3"))
                                                      (rule "impRight" (formula "34"))
                                                      (rule "elementOfArrayRangeEQ" (formula "35") (inst "iv=iv") (ifseqformula "24"))
                                                      (rule "eqSymm" (formula "35") (term "0,0,0,1"))
                                                      (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "6"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "exLeft" (formula "2") (inst "sk=iv_3"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "1"))
                                                      (rule "concrete_and_1" (formula "38"))
                                                      (rule "inEqSimp_commuteLeq" (formula "3"))
                                                      (rule "inEqSimp_commuteLeq" (formula "38") (term "1,0,0"))
                                                      (rule "applyEq" (formula "38") (term "1,0,0,0") (ifseqformula "2"))
                                                      (rule "equalUnique" (formula "38") (term "0,0,0"))
                                                      (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "4"))
                                                      (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                      (rule "add_literals" (formula "4") (term "1,0"))
                                                      (rule "times_zero_1" (formula "4") (term "0"))
                                                      (rule "leq_literals" (formula "4"))
                                                      (rule "true_left" (formula "4"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq0" (formula "4"))
                                                      (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                      (rule "add_literals" (formula "4") (term "1,0"))
                                                      (rule "times_zero_1" (formula "4") (term "0"))
                                                      (rule "qeq_literals" (formula "4"))
                                                      (rule "true_left" (formula "4"))
                                                      (rule "applyEqRigid" (formula "2") (term "0,1") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "37") (term "1,0,0,0") (ifseqformula "3"))
                                                      (rule "nnf_ex2all" (formula "37"))
                                                      (rule "nnf_notAnd" (formula "1") (term "0"))
                                                      (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                                      (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                      (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                                      (rule "commute_or" (formula "1") (term "0,0"))
                                                      (rule "commute_or_2" (formula "1") (term "0"))
                                                      (rule "elim_forall4" (formula "1"))
                                                      (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                      (rule "concrete_or_2" (formula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "20"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0"))
                                                      (rule "add_literals" (formula "1") (term "0"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: arrayRange(array, 0, i_0 - 1) cup arrayRange(array, i_0, i_0) = arrayRange(array, 0, i_0) FALSE"
                                             (rule "polySimp_elimSub" (formula "24") (term "2,0,0"))
                                             (rule "mul_literals" (formula "24") (term "1,2,0,0"))
                                             (rule "polySimp_addComm0" (formula "24") (term "2,0,0"))
                                             (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "21"))
                                             (rule "applyEq" (formula "24") (term "1") (ifseqformula "9"))
                                             (rule "equalityToElementOfRight" (formula "24") (inst "ov=ov") (inst "fv=fv"))
                                             (rule "allRight" (formula "24") (inst "sk=ov_2"))
                                             (rule "allRight" (formula "24") (inst "sk=fv_2"))
                                             (rule "elementOfArrayRangeEQ" (formula "24") (term "1") (inst "iv=iv") (ifseqformula "9"))
                                             (rule "eqSymm" (formula "24") (term "0,0,0,1,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,1,1"))
                                             (rule "elementOfUnion" (formula "24") (term "0"))
                                             (rule "elementOfArrayRangeEQ" (formula "24") (term "0,0") (inst "iv=iv") (ifseqformula "21"))
                                             (rule "eqSymm" (formula "24") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,1,0,0"))
                                             (rule "elementOfArrayRange" (formula "24") (term "1,0") (inst "iv=iv"))
                                             (rule "eqSymm" (formula "24") (term "0,0,0,1,1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,1,1,0"))
                                             (rule "equiv_right" (formula "24"))
                                             (branch "Case 1"
                                                (rule "orLeft" (formula "1"))
                                                (branch " ov_2 = array & exists int iv; (arr(iv) = fv_2 & iv >= 0 & iv <= -1 + i_0)"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "exLeft" (formula "2") (inst "sk=iv_2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "eqSymm" (formula "2"))
                                                   (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                                                   (rule "concrete_and_1" (formula "28"))
                                                   (rule "applyEq" (formula "28") (term "1,0,0,0") (ifseqformula "2"))
                                                   (rule "equalUnique" (formula "28") (term "0,0,0"))
                                                   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                                   (rule "times_zero_1" (formula "3") (term "0,0"))
                                                   (rule "add_zero_left" (formula "3") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                                   (rule "mul_literals" (formula "3") (term "1"))
                                                   (rule "nnf_ex2all" (formula "28"))
                                                   (rule "nnf_notAnd" (formula "1") (term "0"))
                                                   (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                                   (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "commute_or_2" (formula "1") (term "0"))
                                                   (rule "elim_forall4" (formula "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                                                   (rule "qeq_literals" (formula "1") (term "0,0"))
                                                   (rule "concrete_and_2" (formula "1") (term "0"))
                                                   (rule "concrete_or_2" (formula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0"))
                                                   (rule "add_literals" (formula "1") (term "0"))
                                                   (rule "leq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch " ov_2 = array & exists int iv; (arr(iv) = fv_2 & iv >= i_0 & iv <= i_0)"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "exLeft" (formula "2") (inst "sk=iv_2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "eqSymm" (formula "2"))
                                                   (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                                                   (rule "concrete_and_1" (formula "28"))
                                                   (rule "applyEqRigid" (formula "28") (term "1,0,0,0") (ifseqformula "2"))
                                                   (rule "equalUnique" (formula "28") (term "0,0,0"))
                                                   (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq0" (formula "5"))
                                                   (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                                   (rule "add_literals" (formula "5") (term "1,0"))
                                                   (rule "times_zero_1" (formula "5") (term "0"))
                                                   (rule "qeq_literals" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_homoInEq1" (formula "4"))
                                                   (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                   (rule "add_literals" (formula "4") (term "1,0"))
                                                   (rule "times_zero_1" (formula "4") (term "0"))
                                                   (rule "leq_literals" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "applyEqRigid" (formula "2") (term "0,1") (ifseqformula "3"))
                                                   (rule "applyEqRigid" (formula "27") (term "1,0,0,0") (ifseqformula "3"))
                                                   (rule "nnf_ex2all" (formula "27"))
                                                   (rule "nnf_notAnd" (formula "1") (term "0"))
                                                   (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                                                   (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "commute_or_2" (formula "1") (term "0"))
                                                   (rule "elim_forall4" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0,1"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0,1"))
                                                   (rule "add_literals" (formula "1") (term "0,1"))
                                                   (rule "leq_literals" (formula "1") (term "1"))
                                                   (rule "concrete_or_4" (formula "1"))
                                                   (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "24") (term "0"))
                                                   (rule "concrete_and_2" (formula "24"))
                                                   (rule "closeFalse" (formula "24"))
                                                )
                                             )
                                             (branch "Case 2"
                                                (rule "orRight" (formula "25"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "exLeft" (formula "2") (inst "sk=iv_2"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "eqSymm" (formula "2"))
                                                (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                                (rule "concrete_and_1" (formula "29"))
                                                (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                                                (rule "concrete_and_1" (formula "28"))
                                                (rule "applyEqRigid" (formula "29") (term "1,0,0,0") (ifseqformula "2"))
                                                (rule "equalUnique" (formula "29") (term "0,0,0"))
                                                (rule "applyEqRigid" (formula "28") (term "1,0,0,0") (ifseqformula "2"))
                                                (rule "equalUnique" (formula "28") (term "0,0,0"))
                                                (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                                                (rule "times_zero_1" (formula "3") (term "0,0"))
                                                (rule "add_zero_left" (formula "3") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "25"))
                                                (rule "leq_literals" (formula "3") (term "0"))
                                                (rule "concrete_or_1" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "nnf_ex2all" (formula "29"))
                                                (rule "nnf_ex2all" (formula "29"))
                                                (rule "nnf_notAnd" (formula "2") (term "0"))
                                                (rule "inEqSimp_notLeq" (formula "2") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0"))
                                                (rule "nnf_notAnd" (formula "1") (term "0"))
                                                (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                                (rule "nnf_notAnd" (formula "2") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_or_antiSymm1" (formula "2") (term "0"))
                                                (rule "polySimp_homoEq" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "1,0,1,1,0"))
                                                (rule "add_literals" (formula "2") (term "0,1,0,1,1,0"))
                                                (rule "add_zero_left" (formula "2") (term "1,0,1,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "1,0,0,1,0"))
                                                (rule "add_literals" (formula "2") (term "0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0,0,1,0"))
                                                (rule "add_zero_left" (formula "2") (term "0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "2") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "2") (term "1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "0,0,1,0"))
                                                (rule "eqClose" (formula "2") (term "0,1,0"))
                                                (rule "ifthenelse_true_for" (formula "2") (term "1,0"))
                                                (rule "elim_forall4" (formula "2"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "eqSymm" (formula "29"))
                                                (rule "inEqSimp_strengthen0" (formula "5") (ifseqformula "29"))
                                                (rule "inEqSimp_contradEq3" (formula "29") (ifseqformula "5"))
                                                (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                                (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "29") (term "0,0"))
                                                (rule "qeq_literals" (formula "29") (term "0"))
                                                (rule "concrete_and_2" (formula "29"))
                                                (rule "false_right" (formula "29"))
                                                (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                                                (rule "times_zero_1" (formula "4") (term "0,0"))
                                                (rule "add_zero_left" (formula "4") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                                (rule "mul_literals" (formula "4") (term "1"))
                                                (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                                (rule "commute_or" (formula "1") (term "0,0"))
                                                (rule "commute_or_2" (formula "1") (term "0"))
                                                (rule "elim_forall4" (formula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "5"))
                                                (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                                (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "1") (term "0,0,1"))
                                                (rule "leq_literals" (formula "1") (term "0,1"))
                                                (rule "concrete_and_2" (formula "1") (term "1"))
                                                (rule "concrete_or_4" (formula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "4") (term "0"))
                                                (rule "concrete_and_2" (formula "4"))
                                                (rule "closeFalse" (formula "4"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "eqSymm" (formula "1"))
                              (rule "disjointWithSingleton1" (formula "14"))
                              (rule "notRight" (formula "14"))
                              (rule "applyOnRigidTerm" (formula "2") (term "0"))
                              (rule "simplifyUpdate1" (formula "2") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                              (rule "elimEventOnRigidTerm1" (formula "2") (term "1,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,0"))
                              (rule "applyOnPV" (formula "2") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "2") (term "2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "2") (term "0,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,2,0"))
                              (rule "applyOnPV" (formula "2") (term "1,2,0"))
                              (rule "polySimp_addAssoc" (formula "2") (term "2,0"))
                              (rule "add_literals" (formula "2") (term "0,2,0"))
                              (rule "add_zero_left" (formula "2") (term "2,0"))
                              (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                              (rule "eqClose" (formula "1") (term "0"))
                              (rule "concrete_and_1" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,0,0"))
                              (rule "exLeft" (formula "1") (inst "sk=iv_0"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                              (rule "add_literals" (formula "3") (term "1,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0"))
                              (rule "add_zero_right" (formula "3") (term "0"))
                              (rule "qeq_literals" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "updateParallelToReadEventOnNoW" (formula "14") (inst "tempVar=tempVar_0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "0,2,0"))
                        (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
                        (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "1,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,0"))
                        (rule "applyOnPV" (formula "1") (term "1,0"))
                        (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
                        (rule "applyOnPV" (formula "1") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
                        (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,1,2,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1,2,0"))
                        (rule "applyOnPV" (formula "1") (term "0,1,2,0"))
                        (rule "eventStarBeforNoW" (formula "15"))
                        (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "7"))
                        (rule "leq_literals" (formula "2") (term "0"))
                        (rule "concrete_or_1" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,1,0,1,0,0"))
                        (rule "inInt" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "arrayLengthIsAnInt" (formula "10") (term "1,2,0,1"))
                        (rule "inInt" (formula "10") (term "1"))
                        (rule "true_left" (formula "10"))
                        (rule "arrayLengthNotNegative" (formula "10") (term "1,2,0,1"))
                        (rule "simplifyUpdate2" (formula "10"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "simplifyUpdate1" (formula "10") (term "1"))
                        (rule "elimEventOnRigidTerm1" (formula "10") (term "1"))
                        (rule "applyOnRigidTerm" (formula "10") (term "0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "0,0"))
                        (rule "applyOnPV" (formula "10") (term "0,0"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "6"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (rule "concrete_or_1" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "pullOut" (formula "9") (term "0,1") (inst "sk=arrayRange_0") (userinteraction))
                        (rule "simplifyUpdate2" (formula "9"))
                        (rule "applyOnRigidFormula" (formula "9"))
                        (rule "simplifyUpdate1" (formula "9") (term "1"))
                        (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                        (rule "applyOnRigidTerm" (formula "9") (term "0"))
                        (rule "simplifyUpdate1" (formula "9") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "9") (term "1,0"))
                        (rule "simplifyUpdate1" (formula "9") (term "0,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "1,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                        (rule "applyOnPV" (formula "9") (term "1,0"))
                        (rule "applyOnPV" (formula "9") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "9") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "9") (term "0,2,0"))
                        (rule "elimEventOnRigidTerm1" (formula "9") (term "0,2,0"))
                        (rule "applyOnRigidTerm" (formula "9") (term "1,2,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,1,2,0"))
                        (rule "applyOnPV" (formula "9") (term "0,1,2,0"))
                        (rule "eventStarBeforNoW" (formula "10"))
                        (rule "noWriteKnownForSuperset" (formula "16") (term "1") (ifseqformula "10") (userinteraction))
                        (rule "applyOnRigidFormula" (formula "16"))
                        (rule "elimEventStarOnRigidFormula1" (formula "16") (term "0"))
                        (rule "ifthenelse_split_for" (formula "16"))
                        (branch "tempVar_0 subset arrayRange_0 TRUE"
                           (rule "closeTrue" (formula "17"))
                        )
                        (branch "tempVar_0 subset arrayRange_0 FALSE"
                           (rule "subsetToElementOfRight" (formula "16") (inst "ov=ov") (inst "fv=fv"))
                           (rule "allRight" (formula "16") (inst "sk=ov_0"))
                           (rule "allRight" (formula "16") (inst "sk=fv_0"))
                           (rule "impRight" (formula "16"))
                           (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "elementOfArrayRangeEQ" (formula "20") (inst "iv=iv") (ifseqformula "13"))
                           (rule "eqSymm" (formula "20") (term "0,0,0,1"))
                           (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "applyEqRigid" (formula "20") (term "1,0,0,0") (ifseqformula "2"))
                           (rule "equalUnique" (formula "20") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "nnf_ex2all" (formula "20"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "commute_or_2" (formula "1") (term "0"))
                           (rule "elim_forall4" (formula "1"))
                           (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "leq_literals" (formula "1") (term "0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
                           (rule "andLeft" (formula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "5"))
                           (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "1,1,0"))
                           (rule "times_zero_1" (formula "5") (term "1,0"))
                           (rule "add_zero_right" (formula "5") (term "0"))
                           (rule "leq_literals" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "14") (inst "sk=f_0"))
                     (rule "allRight" (formula "14") (inst "sk=o_0"))
                     (rule "orRight" (formula "14"))
                     (rule "orRight" (formula "14"))
                     (rule "eqSymm" (formula "14") (term "0,0,1,0"))
                     (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "17"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "17"))
                     (rule "concrete_or_4" (formula "1") (term "0,0"))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "nnf_ex2all" (formula "16"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "1,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,1,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "cut_direct" (formula "1") (term "0,1,0"))
                     (branch "CUT: o_0 = array TRUE"
                        (rule "concrete_not_1" (formula "2") (term "1,0"))
                        (rule "concrete_or_4" (formula "2") (term "0"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "1"))
                        (rule "concrete_and_3" (formula "4") (term "0,0"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "concrete_and_1" (formula "3") (term "0,0,0"))
                        (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "18") (term "1,0,0,1") (ifseqformula "1"))
                        (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "7"))
                        (rule "concrete_not_1" (formula "18") (term "1"))
                        (rule "concrete_and_4" (formula "18"))
                        (rule "false_right" (formula "18"))
                        (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                        (rule "allLeft" (formula "2") (inst "t=add(Z(1(#)), i_0)"))
                        (rule "eqSymm" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                        (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,1,0"))
                        (rule "add_literals" (formula "2") (term "0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0,1"))
                        (rule "add_literals" (formula "2") (term "0,0,0,0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1"))
                        (rule "leq_literals" (formula "2") (term "0,1"))
                        (rule "concrete_and_2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "concrete_and_2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "allLeft" (formula "2") (inst "t=i_0"))
                        (rule "eqSymm" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "2") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "2") (term "1,0"))
                        (rule "concrete_or_4" (formula "2") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1"))
                        (rule "leq_literals" (formula "2") (term "0,1"))
                        (rule "concrete_and_2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "17"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "20") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch " exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= -1 + array.length) & !f_0 = java.lang.Object::<created> TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "4"))
                           (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "eqSymm" (formula "3"))
                           (rule "eqSymm" (formula "22"))
                           (rule "inEqSimp_homoInEq0" (formula "5"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "applyEqRigid" (formula "22") (term "2,0") (ifseqformula "3"))
                           (rule "narrowSelectArrayType" (formula "22") (term "0") (ifseqformula "17") (ifseqformula "21"))
                           (rule "eqSymm" (formula "22"))
                           (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "3"))
                           (rule "equalUnique" (formula "18"))
                           (rule "false_right" (formula "18"))
                           (rule "applyEq" (formula "2") (term "1,0,0,0,0") (ifseqformula "3"))
                           (rule "equalUnique" (formula "2") (term "0,0,0,0"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "3"))
                           (rule "equalUnique" (formula "19"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "3"))
                           (rule "equalUnique" (formula "18"))
                           (rule "applyEq" (formula "21") (term "2,0") (ifseqformula "3"))
                           (rule "narrowSelectArrayType" (formula "21") (term "0") (ifseqformula "7") (ifseqformula "20"))
                           (rule "eqSymm" (formula "21"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "commute_or" (formula "2") (term "0,0"))
                           (rule "commute_or_2" (formula "2") (term "0"))
                           (rule "elim_forall4" (formula "2"))
                           (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                           (rule "add_literals" (formula "2") (term "0,0,1"))
                           (rule "leq_literals" (formula "2") (term "0,1"))
                           (rule "concrete_and_2" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (rule "concrete_and_2" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch " exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= -1 + array.length) & !f_0 = java.lang.Object::<created> FALSE"
                           (rule "close" (formula "20") (ifseqformula "3"))
                        )
                     )
                     (branch "CUT: o_0 = array FALSE"
                        (rule "concrete_not_2" (formula "1") (term "1,0"))
                        (rule "concrete_or_3" (formula "1") (term "0"))
                        (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "16"))
                        (rule "concrete_and_4" (formula "3") (term "0,0"))
                        (rule "ifthenelse_false" (formula "3") (term "0"))
                        (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "15"))
                        (rule "concrete_and_2" (formula "2") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "2") (term "0,0"))
                        (rule "ifthenelse_false" (formula "2") (term "0"))
                        (rule "close" (formula "18") (ifseqformula "2"))
                     )
                  )
               )
               (branch "CUT: i_0 >= 1 FALSE"
                  (rule "concrete_impl_2" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_geqRight" (formula "12"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
                  (rule "applyEq" (formula "15") (term "1,1,0,1") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "1,0,1"))
                  (rule "applyEq" (formula "15") (term "1,0,2,3,0,1,0,0,0,1,0,0,1,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,2,3,0,1,0,0,0,1,0,0,1,0"))
                  (rule "applyEq" (formula "15") (term "1,0,1,1,1,0,0,0,1,0,0,1,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,0,1,0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "15") (term "1,0,1,0,0,1,0,0,1,1") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,0,0,1,0,0,1,1"))
                  (rule "applyEq" (formula "12") (term "0,1,0,0,0,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "15") (term "1,0,2,3,0,1,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,2,3,0,1,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEq" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyEqRigid" (formula "15") (term "1,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                  (rule "applyEq" (formula "15") (term "1,0,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0"))
                  (rule "applyEq" (formula "15") (term "1,0,1,0,0,1,0,0,1,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,0,0,1,0,0,1,0,0"))
                  (rule "applyEq" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "15") (term "1,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0"))
                  (rule "applyEq" (formula "15") (term "1,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEq" (formula "15") (term "1,0,1,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEq" (formula "15") (term "1,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyEqRigid" (formula "15") (term "1,0,2,3,0,1,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,2,3,0,1,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyEqRigid" (formula "15") (term "1,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1,0,0,0,0"))
                  (rule "applyEqRigid" (formula "15") (term "1,0,1,1,1,0,0,0,1,0,0,1,1") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,0,1,0,0,1,1"))
                  (rule "applyEqRigid" (formula "15") (term "1,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "9"))
                  (rule "qeq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEqRigid" (formula "14") (term "1,0,1,1,1,0,0,0,1,0,0,0") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "14") (term "0,1,1,1,0,0,0,1,0,0,0"))
                  (rule "applyEqRigid" (formula "14") (term "0,2,0,1,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "14") (term "1,0,1,1,1,0,0,0,0,1") (ifseqformula "9"))
                  (rule "add_zero_right" (formula "14") (term "0,1,1,1,0,0,0,0,1"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "13") (term "0,2,0,1,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "13") (term "1,0,1,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,0,0,0,1") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,1"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,0,0,1,0,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,0,0,1,0,0,0,0,1,0,0,0,0"))
                  (rule "applyEq" (formula "13") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq" (formula "13") (term "1,0,2,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,2,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyEq" (formula "13") (term "0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "1") (term "1,1") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "applyEqRigid" (formula "9") (term "0,1,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq" (formula "13") (term "1,0,1,1,1,0,0,0,1,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,1,1,0,0,0,1,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "13") (term "1,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0"))
                  (rule "applyEq" (formula "13") (term "1,0,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,2,3,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,0,0,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyEq" (formula "13") (term "1,0,1,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,0,0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "1,0,1,0,0,1,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,1,0,0,1,0,0,0"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "applyEqRigid" (formula "13") (term "0,2,0,1,0,0,0,1,0,0,1,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "13") (term "1,0,2,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "add_zero_right" (formula "13") (term "0,2,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                  (rule "times_zero_2" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyEq" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                  (rule "times_zero_2" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0") (ifseqformula "8"))
                  (rule "times_zero_2" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                  (rule "leq_literals" (formula "5") (term "0"))
                  (rule "concrete_or_1" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,2,1,0,0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,2,1,0,0,0,1,0,0"))
                  (rule "applyOnPV" (formula "12") (term "1,2,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "2,1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,2,1,0,0,0,1,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,2,1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "2,1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "2,1,0,0,1,0,1,0,0,0,1,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "2,1,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,2,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "2,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "2,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "1,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,2,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,0,1,0,1,0,1,0,0,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,1,0,1,0,0,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,1,0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,1,0,1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,1,0,1,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,1,0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,1,0,0,1,1"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "0,1,0,0,1,1"))
                  (rule "commute_and" (formula "12") (term "1"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,1,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "1,0,1,0,0,0,1,0,0,0,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,0,1,0,0,0,0,1,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1,0,0,0,0,1,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "0,1,0,0,0,0,1,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,1,0,1,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "1,0,1,0,1,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "parallelUpdateAssociative" (formula "12") (term "0,0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "0,1,0,0,0,0,1,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,0,1,0,0,0"))
                  (rule "parallelUpdateAssociative" (formula "12") (term "0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "0,1,0,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                  (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "1"))
                  (rule "concrete_and_3" (formula "12") (term "0,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,0,0,1,0,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0,1,0,0,1,0"))
                  (rule "applyOnPV" (formula "12") (term "0,0,1,0,0,1,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,0,1,0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "applyOnPV" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,0,1,1"))
                  (rule "parallelUpdateAssociative" (formula "12") (term "0,0,1,1"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "0,1,1"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1,1"))
                  (rule "applyOnPV" (formula "12") (term "0,1,1"))
                  (rule "qeq_literals" (formula "12") (term "1,1"))
                  (rule "concrete_and_3" (formula "12") (term "1"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "applyOnRigidFormula" (formula "9"))
                  (rule "simplifyUpdate1" (formula "9") (term "1"))
                  (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                  (rule "applyOnPV" (formula "9") (term "0,0"))
                  (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
                  (rule "leq_literals" (formula "9") (term "0"))
                  (rule "concrete_or_1" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
                  (rule "inInt" (formula "9") (term "1"))
                  (rule "true_left" (formula "9"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,1,0,0,0,0"))
                  (rule "commute_and" (formula "12") (term "0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,0,1,0,0,0,1,0,0,0"))
                  (rule "parallelUpdateAssociative" (formula "12") (term "0,1,0,1,0,0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "1,0,1,0,0,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,0,0,1,0,0,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,1,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,1,0,1,0,1,0,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "1,0,1,0,1,0,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "commute_and_2" (formula "12") (term "0,0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "0,1,0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,0,1"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1"))
                  (rule "applyOnPV" (formula "12") (term "0,1"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "commute_and_2" (formula "12") (term "0,0,0"))
                  (rule "commute_and" (formula "12") (term "0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1,0,0"))
                  (rule "applyOnPV" (formula "12") (term "0,1,0,0"))
                  (rule "qeq_literals" (formula "12") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "12") (term "0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,0,1"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,1"))
                  (rule "applyOnPV" (formula "12") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "12") (term "1") (ifseqformula "1"))
                  (rule "leq_literals" (formula "12") (term "0,1"))
                  (rule "concrete_or_1" (formula "12") (term "1"))
                  (rule "concrete_and_3" (formula "12"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,1,0,1,0,1,0,1,0,1,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "1,0,1,0,1,0,1,0,1,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,1,0,0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,0,1,0,1,0"))
                  (rule "parallelUpdateAssociative" (formula "12") (term "0,1,0,1,0,1,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,0,1,0,1,0,1,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,1,0,1,0,1,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,1,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,1,0,1,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,1,0,1,0,1,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,1,0,1,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,1,0,1,0,0,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,0,0,1,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,1,0,1,0,1,0"))
                  (rule "applyUpdateParallelToEventOnPV" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "12") (term "0,1,0,1,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,1,0,0"))
                  (rule "commute_and" (formula "12") (term "0,0"))
                  (rule "shiftEventWithUpdateAtFirstPlace" (formula "12") (term "0,1,0"))
                  (rule "commute_and_2" (formula "12") (term "0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "12") (term "0,1,0,1,0,0,1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,0,1,0,0,1,0"))
                  (rule "applyOnPV" (formula "12") (term "1,0,1,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,1,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,0,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,1,0,0"))
                  (rule "shiftOnlyEventWithUpdateAtFirstPlace" (formula "12") (term "0,0,1,0"))
                  (rule "andRight" (formula "12"))
                  (branch "Case 1"
                     (rule "andRight" (formula "12"))
                     (branch "Case 1"
                        (rule "andRight" (formula "12"))
                        (branch "Case 1"
                           (rule "updateParallelToReadEventOnNoR" (formula "12") (inst "tempVar=tempVar_0"))
                           (branch "Case 1"
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "disjointWithSingleton2" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "2,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
                              (rule "elimEventOnRigidTerm1" (formula "1") (term "0,1,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
                              (rule "applyOnPV" (formula "1") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "1,1,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,1,0"))
                              (rule "applyOnPV" (formula "1") (term "1,1,0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1,2,0"))
                              (rule "applyOnPV" (formula "1") (term "0,1,2,0"))
                              (rule "elementOfArrayRangeEQ" (formula "12") (inst "iv=iv") (ifseqformula "1"))
                              (rule "eqClose" (formula "12") (term "0"))
                              (rule "concrete_and_1" (formula "12"))
                              (rule "equalUnique" (formula "12") (term "0,0,0"))
                              (rule "eqSymm" (formula "12") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                              (rule "nnf_ex2all" (formula "12"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                              (rule "commute_or" (formula "1") (term "0,0"))
                              (rule "commute_or_2" (formula "1") (term "0"))
                              (rule "elim_forall4" (formula "1"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (rule "concrete_or_1" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "eventStarBeforNoR" (formula "13"))
                              (rule "arrayLengthIsAnInt" (formula "6") (term "1,2,0"))
                              (rule "inInt" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                              (rule "leq_literals" (formula "2") (term "0"))
                              (rule "concrete_or_1" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
                              (rule "inInt" (formula "9") (term "1"))
                              (rule "true_left" (formula "9"))
                              (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                              (rule "simplifyUpdate2" (formula "9"))
                              (rule "applyOnRigidFormula" (formula "9"))
                              (rule "simplifyUpdate1" (formula "9") (term "1"))
                              (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                              (rule "applyOnRigidTerm" (formula "9") (term "0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                              (rule "applyOnPV" (formula "9") (term "0,0"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "2"))
                              (rule "leq_literals" (formula "9") (term "0"))
                              (rule "concrete_or_1" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "pullOut" (formula "10") (term "0,1") (inst "sk=arrayRange_0") (userinteraction))
                              (rule "simplifyUpdate2" (formula "10"))
                              (rule "applyOnRigidFormula" (formula "10"))
                              (rule "simplifyUpdate1" (formula "10") (term "1"))
                              (rule "elimEventOnRigidTerm1" (formula "10") (term "1"))
                              (rule "applyOnRigidTerm" (formula "10") (term "0"))
                              (rule "simplifyUpdate1" (formula "10") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "10") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "10") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "0,0"))
                              (rule "applyOnPV" (formula "10") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "10") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "10") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "10") (term "0,2,0"))
                              (rule "applyOnRigidTerm" (formula "10") (term "1,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "1,1,0"))
                              (rule "simplifyUpdate1" (formula "10") (term "0,1,0"))
                              (rule "applyOnPV" (formula "10") (term "1,1,0"))
                              (rule "add_zero_right" (formula "10") (term "1,0"))
                              (rule "elimEventOnRigidTerm1" (formula "10") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "10") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "0,1,2,0"))
                              (rule "applyOnPV" (formula "10") (term "0,1,2,0"))
                              (rule "eventStarBeforNoR" (formula "11"))
                              (rule "noReadKnownForSuperset" (formula "14") (term "1") (ifseqformula "11") (userinteraction))
                              (rule "applyOnRigidFormula" (formula "14"))
                              (rule "elimEventOnRigidFormula1" (formula "14") (term "0"))
                              (rule "ifthenelse_split_for" (formula "14"))
                              (branch "tempVar_0 subset arrayRange_0 TRUE"
                                 (rule "closeTrue" (formula "15"))
                              )
                              (branch "tempVar_0 subset arrayRange_0 FALSE"
                                 (rule "subsetToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
                                 (rule "allRight" (formula "14") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "14") (inst "sk=fv_0"))
                                 (rule "impRight" (formula "14"))
                                 (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "elementOfArrayRangeEQ" (formula "18") (inst "iv=iv") (ifseqformula "14"))
                                 (rule "eqSymm" (formula "18") (term "0,0,0,1"))
                                 (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                                 (rule "concrete_and_1" (formula "18"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0"))
                                 (rule "inEqSimp_homoInEq0" (formula "4"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "18") (term "1,0,0,0") (ifseqformula "2"))
                                 (rule "equalUnique" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                 (rule "mul_literals" (formula "4") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                 (rule "nnf_ex2all" (formula "18"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,1,0,0"))
                                 (rule "commute_or" (formula "1") (term "0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0"))
                                 (rule "elim_forall4" (formula "1"))
                                 (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0"))
                                 (rule "concrete_or_2" (formula "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
                                 (rule "andLeft" (formula "5"))
                                 (rule "inEqSimp_homoInEq1" (formula "5"))
                                 (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "leq_literals" (formula "5"))
                                 (rule "closeFalse" (formula "5"))
                              )
                           )
                           (branch "Case 2"
                              (rule "false_right" (formula "14"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "eqSymm" (formula "1"))
                              (rule "disjointWithSingleton1" (formula "12"))
                              (rule "notRight" (formula "12"))
                              (rule "applyOnRigidTerm" (formula "2") (term "0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "2,0"))
                              (rule "applyOnRigidTerm" (formula "2") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "0,1,0"))
                              (rule "elimEventOnRigidTerm1" (formula "2") (term "0,1,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,0"))
                              (rule "applyOnPV" (formula "2") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "2") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "2") (term "0,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "1,1,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,1,0"))
                              (rule "applyOnPV" (formula "2") (term "1,1,0"))
                              (rule "add_literals" (formula "2") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "2") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "0,1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,1,2,0"))
                              (rule "applyOnPV" (formula "2") (term "0,1,2,0"))
                              (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                              (rule "eqClose" (formula "1") (term "0"))
                              (rule "concrete_and_1" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,0,0"))
                              (rule "exLeft" (formula "1") (inst "sk=iv_0"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "inEqSimp_homoInEq0" (formula "3"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch "Case 2"
                           (rule "updateParallelToReadEventOnNoRaW" (formula "12") (inst "tempVar=tempVar_0"))
                           (branch "Case 1"
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "disjointWithSingleton2" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "1") (term "1,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
                              (rule "applyOnPV" (formula "1") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,2,0"))
                              (rule "applyOnPV" (formula "1") (term "1,2,0"))
                              (rule "add_literals" (formula "1") (term "2,0"))
                              (rule "elementOfArrayRangeEQ" (formula "12") (inst "iv=iv") (ifseqformula "1"))
                              (rule "eqClose" (formula "12") (term "0"))
                              (rule "concrete_and_1" (formula "12"))
                              (rule "equalUnique" (formula "12") (term "0,0,0"))
                              (rule "eqSymm" (formula "12") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0"))
                              (rule "nnf_ex2all" (formula "12"))
                              (rule "nnf_notAnd" (formula "1") (term "0"))
                              (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,0"))
                              (rule "nnf_notAnd" (formula "1") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                              (rule "inEqSimp_or_antiSymm1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0,1,1,0"))
                              (rule "add_literals" (formula "1") (term "0,0,1,0"))
                              (rule "eqClose" (formula "1") (term "0,1,0"))
                              (rule "ifthenelse_true_for" (formula "1") (term "1,0"))
                              (rule "elim_forall4" (formula "1"))
                              (rule "equal_literals" (formula "1") (term "0"))
                              (rule "concrete_not_2" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "simplifyEventUpdateNoRaW" (formula "13"))
                              (rule "arrayLengthIsAnInt" (formula "6") (term "1,2,0"))
                              (rule "inInt" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "arrayLengthNotNegative" (formula "6") (term "1,2,0"))
                              (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
                              (rule "leq_literals" (formula "6") (term "0"))
                              (rule "concrete_or_1" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
                              (rule "inInt" (formula "9") (term "1"))
                              (rule "true_left" (formula "9"))
                              (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                              (rule "simplifyUpdate2" (formula "9"))
                              (rule "applyOnRigidFormula" (formula "9"))
                              (rule "simplifyUpdate1" (formula "9") (term "1"))
                              (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                              (rule "applyOnRigidTerm" (formula "9") (term "0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                              (rule "applyOnPV" (formula "9") (term "0,0"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "2"))
                              (rule "leq_literals" (formula "9") (term "0"))
                              (rule "concrete_or_1" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "noReadAndNoRaW" (formula "13") (term "1") (userinteraction))
                              (rule "applyOnRigidFormula" (formula "13"))
                              (rule "applyOnRigidFormula" (formula "13") (term "0"))
                              (rule "ifthenelse_split_for" (formula "13"))
                              (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(tempVar_0) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(tempVar_0) TRUE"
                                 (rule "closeTrue" (formula "14"))
                              )
                              (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(tempVar_0) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(tempVar_0) FALSE"
                                 (rule "orRight" (formula "13"))
                                 (rule "pullOut" (formula "9") (term "0,1") (inst "sk=arrayRange_0") (userinteraction))
                                 (rule "simplifyUpdate2" (formula "9"))
                                 (rule "applyOnRigidFormula" (formula "9"))
                                 (rule "simplifyUpdate1" (formula "9") (term "1"))
                                 (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                                 (rule "applyOnRigidTerm" (formula "9") (term "0"))
                                 (rule "simplifyUpdate1" (formula "9") (term "1,0"))
                                 (rule "simplifyUpdate1" (formula "9") (term "0,0"))
                                 (rule "simplifyUpdate1" (formula "9") (term "2,0"))
                                 (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "1,0"))
                                 (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                                 (rule "applyOnPV" (formula "9") (term "1,0"))
                                 (rule "applyOnPV" (formula "9") (term "0,0"))
                                 (rule "applyOnRigidTerm" (formula "9") (term "2,0"))
                                 (rule "simplifyUpdate1" (formula "9") (term "0,2,0"))
                                 (rule "elimEventOnRigidTerm1" (formula "9") (term "0,2,0"))
                                 (rule "applyOnRigidTerm" (formula "9") (term "1,2,0"))
                                 (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,1,2,0"))
                                 (rule "applyOnPV" (formula "9") (term "0,1,2,0"))
                                 (rule "applyEq" (formula "11") (term "1,0,1,0,0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "9"))
                                 (rule "applyEq" (formula "10") (term "1,0,1,0,0") (ifseqformula "9"))
                                 (rule "eventStarBeforNoW" (formula "10"))
                                 (rule "arrayLengthIsAnInt" (formula "11") (term "1,2,0,1"))
                                 (rule "inInt" (formula "11") (term "1"))
                                 (rule "true_left" (formula "11"))
                                 (rule "arrayLengthNotNegative" (formula "11") (term "1,2,0,1"))
                                 (rule "simplifyUpdate2" (formula "11"))
                                 (rule "applyOnRigidFormula" (formula "11"))
                                 (rule "simplifyUpdate1" (formula "11") (term "1"))
                                 (rule "elimEventOnRigidTerm1" (formula "11") (term "1"))
                                 (rule "applyOnRigidTerm" (formula "11") (term "0"))
                                 (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "0,0"))
                                 (rule "applyOnPV" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "2"))
                                 (rule "leq_literals" (formula "11") (term "0"))
                                 (rule "concrete_or_1" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "noWriteKnownForSuperset" (formula "15") (term "1") (ifseqformula "10") (userinteraction))
                                 (rule "applyOnRigidFormula" (formula "15"))
                                 (rule "elimEventOnRigidFormula1" (formula "15") (term "0"))
                                 (rule "ifthenelse_split_for" (formula "15"))
                                 (branch "tempVar_0 subset arrayRange_0 TRUE"
                                    (rule "closeTrue" (formula "16"))
                                 )
                                 (branch "tempVar_0 subset arrayRange_0 FALSE"
                                    (rule "subsetToElementOfRight" (formula "15") (inst "ov=ov") (inst "fv=fv"))
                                    (rule "allRight" (formula "15") (inst "sk=ov_0"))
                                    (rule "allRight" (formula "15") (inst "sk=fv_0"))
                                    (rule "impRight" (formula "15"))
                                    (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "elementOfArrayRangeEQ" (formula "19") (inst "iv=iv") (ifseqformula "13"))
                                    (rule "eqSymm" (formula "19") (term "0,0,0,1"))
                                    (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "1"))
                                    (rule "concrete_and_1" (formula "19"))
                                    (rule "inEqSimp_commuteLeq" (formula "3"))
                                    (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0"))
                                    (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "2"))
                                    (rule "equalUnique" (formula "19") (term "0,0,0"))
                                    (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
                                    (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "5"))
                                    (rule "true_left" (formula "5"))
                                    (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEqRigid" (formula "2") (term "0,1") (ifseqformula "3"))
                                    (rule "applyEqRigid" (formula "18") (term "1,0,0,0") (ifseqformula "3"))
                                    (rule "nnf_ex2all" (formula "18"))
                                    (rule "nnf_notAnd" (formula "1") (term "0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0"))
                                    (rule "commute_or_2" (formula "1") (term "0"))
                                    (rule "elim_forall4" (formula "1"))
                                    (rule "leq_literals" (formula "1") (term "0"))
                                    (rule "concrete_or_2" (formula "1"))
                                    (rule "inEqSimp_commuteGeq" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (rule "concrete_and_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "eqSymm" (formula "1"))
                              (rule "disjointWithSingleton1" (formula "12"))
                              (rule "notRight" (formula "12"))
                              (rule "applyOnRigidTerm" (formula "2") (term "0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "2") (term "1,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "0,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,0"))
                              (rule "applyOnPV" (formula "2") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "2") (term "2,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "0,2,0"))
                              (rule "elimEventOnRigidTerm1" (formula "2") (term "0,2,0"))
                              (rule "applyUpdateParallelToEventOnPV" (formula "2") (term "1,2,0"))
                              (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,2,0"))
                              (rule "applyOnPV" (formula "2") (term "1,2,0"))
                              (rule "add_literals" (formula "2") (term "2,0"))
                              (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                              (rule "eqClose" (formula "1") (term "0"))
                              (rule "concrete_and_1" (formula "1"))
                              (rule "equalUnique" (formula "1") (term "0,0,0"))
                              (rule "exLeft" (formula "1") (inst "sk=iv_0"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "1"))
                              (rule "inEqSimp_commuteLeq" (formula "2"))
                              (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "leq_literals" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "updateParallelToReadEventOnNoW" (formula "12") (inst "tempVar=tempVar_0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "0,2,0"))
                        (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
                        (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
                        (rule "applyOnPV" (formula "1") (term "0,0"))
                        (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "1,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "1,0"))
                        (rule "applyOnPV" (formula "1") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
                        (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,1,2,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,1,2,0"))
                        (rule "applyOnPV" (formula "1") (term "0,1,2,0"))
                        (rule "eventStarBeforNoW" (formula "13"))
                        (rule "arrayLengthIsAnInt" (formula "6") (term "1,2,0"))
                        (rule "inInt" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                        (rule "leq_literals" (formula "2") (term "0"))
                        (rule "concrete_or_1" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
                        (rule "inInt" (formula "9") (term "1"))
                        (rule "true_left" (formula "9"))
                        (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                        (rule "simplifyUpdate2" (formula "9"))
                        (rule "applyOnRigidFormula" (formula "9"))
                        (rule "simplifyUpdate1" (formula "9") (term "1"))
                        (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                        (rule "applyOnRigidTerm" (formula "9") (term "0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                        (rule "applyOnPV" (formula "9") (term "0,0"))
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "2"))
                        (rule "leq_literals" (formula "9") (term "0"))
                        (rule "concrete_or_1" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "pullOut" (formula "9") (term "0,1") (inst "sk=arrayRange_0") (userinteraction))
                        (rule "simplifyUpdate2" (formula "9"))
                        (rule "applyOnRigidFormula" (formula "9"))
                        (rule "simplifyUpdate1" (formula "9") (term "1"))
                        (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                        (rule "applyOnRigidTerm" (formula "9") (term "0"))
                        (rule "simplifyUpdate1" (formula "9") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "9") (term "1,0"))
                        (rule "simplifyUpdate1" (formula "9") (term "0,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "1,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                        (rule "applyOnPV" (formula "9") (term "1,0"))
                        (rule "applyOnPV" (formula "9") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "9") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "9") (term "0,2,0"))
                        (rule "elimEventOnRigidTerm1" (formula "9") (term "0,2,0"))
                        (rule "applyOnRigidTerm" (formula "9") (term "1,2,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,1,2,0"))
                        (rule "applyOnPV" (formula "9") (term "0,1,2,0"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "9"))
                        (rule "applyEq" (formula "10") (term "1,0,1,0,0") (ifseqformula "9"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
                        (rule "applyEq" (formula "11") (term "1,0,1,0,0") (ifseqformula "9"))
                        (rule "eventStarBeforNoW" (formula "10"))
                        (rule "arrayLengthNotNegative" (formula "11") (term "1,2,0,1"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "applyOnRigidFormula" (formula "11"))
                        (rule "simplifyUpdate1" (formula "11") (term "1"))
                        (rule "elimEventOnRigidTerm1" (formula "11") (term "1"))
                        (rule "applyOnRigidTerm" (formula "11") (term "0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "0,0"))
                        (rule "applyOnPV" (formula "11") (term "0,0"))
                        (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "2"))
                        (rule "leq_literals" (formula "11") (term "0"))
                        (rule "concrete_or_1" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "arrayLengthIsAnInt" (formula "11") (term "1,2,0,1"))
                        (rule "inInt" (formula "11") (term "1"))
                        (rule "true_left" (formula "11"))
                        (rule "noWriteKnownForSuperset" (formula "14") (term "1") (ifseqformula "10") (userinteraction))
                        (rule "applyOnRigidFormula" (formula "14"))
                        (rule "elimEventOnRigidFormula1" (formula "14") (term "0"))
                        (rule "ifthenelse_split_for" (formula "14"))
                        (branch "tempVar_0 subset arrayRange_0 TRUE"
                           (rule "closeTrue" (formula "15"))
                        )
                        (branch "tempVar_0 subset arrayRange_0 FALSE"
                           (rule "subsetToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
                           (rule "allRight" (formula "14") (inst "sk=ov_0"))
                           (rule "allRight" (formula "14") (inst "sk=fv_0"))
                           (rule "impRight" (formula "14"))
                           (rule "elementOfArrayRangeEQ" (formula "1") (inst "iv=iv") (ifseqformula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "elementOfArrayRangeEQ" (formula "18") (inst "iv=iv") (ifseqformula "13"))
                           (rule "eqSymm" (formula "18") (term "0,0,0,1"))
                           (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "18"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "applyEqRigid" (formula "18") (term "1,0,0,0") (ifseqformula "2"))
                           (rule "equalUnique" (formula "18") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "nnf_ex2all" (formula "18"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "commute_or_2" (formula "1") (term "0"))
                           (rule "elim_forall4" (formula "1"))
                           (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1"))
                           (rule "leq_literals" (formula "1") (term "0,1"))
                           (rule "concrete_and_2" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (rule "concrete_and_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "12") (inst "sk=f_0"))
                     (rule "allRight" (formula "12") (inst "sk=o_0"))
                     (rule "orRight" (formula "12"))
                     (rule "orRight" (formula "12"))
                     (rule "eqSymm" (formula "12") (term "0,0,1,0"))
                     (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (rule "equalUnique" (formula "1") (term "0,1,0,0"))
                     (rule "concrete_not_2" (formula "1") (term "1,0,0"))
                     (rule "concrete_and_3" (formula "1") (term "0,0"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "15"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "15"))
                     (rule "concrete_or_4" (formula "1") (term "0,0"))
                     (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "nnf_ex2all" (formula "14"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "1,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,1,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,1,0"))
                     (rule "add_literals" (formula "1") (term "0,0,1,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "1") (term "1,1,0,1,0"))
                     (rule "commute_or" (formula "1") (term "0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "cut_direct" (formula "1") (term "0,1,0"))
                     (branch "CUT: o_0 = array TRUE"
                        (rule "concrete_not_1" (formula "2") (term "1,0"))
                        (rule "concrete_or_4" (formula "2") (term "0"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "1"))
                        (rule "concrete_and_3" (formula "4") (term "0,0"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                        (rule "concrete_and_1" (formula "3") (term "0,0,0"))
                        (rule "applyEq" (formula "16") (term "1,0,0,1") (ifseqformula "1"))
                        (rule "replace_known_left" (formula "16") (term "0,1") (ifseqformula "7"))
                        (rule "concrete_not_1" (formula "16") (term "1"))
                        (rule "concrete_and_4" (formula "16"))
                        (rule "false_right" (formula "16"))
                        (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "1"))
                        (rule "allLeft" (formula "2") (inst "t=Z(1(#))"))
                        (rule "leq_literals" (formula "2") (term "1,0"))
                        (rule "concrete_or_4" (formula "2") (term "0"))
                        (rule "eqSymm" (formula "2") (term "0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "concrete_and_2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "allLeft" (formula "2") (inst "t=Z(0(#))"))
                        (rule "leq_literals" (formula "2") (term "1,0"))
                        (rule "concrete_or_4" (formula "2") (term "0"))
                        (rule "eqSymm" (formula "2") (term "0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "2") (term "0,1"))
                        (rule "concrete_and_2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "15"))
                        (rule "ifthenelse_false" (formula "4") (term "0"))
                        (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch " exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= -1 + array.length) & !f_0 = java.lang.Object::<created> TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "4"))
                           (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "applyEqReverse" (formula "21") (term "1") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "eqSymm" (formula "3"))
                           (rule "eqSymm" (formula "20"))
                           (rule "inEqSimp_homoInEq0" (formula "5"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "3"))
                           (rule "equalUnique" (formula "17"))
                           (rule "applyEqRigid" (formula "2") (term "1,0,0,0,0") (ifseqformula "3"))
                           (rule "equalUnique" (formula "2") (term "0,0,0,0"))
                           (rule "applyEqRigid" (formula "20") (term "2,1") (ifseqformula "3"))
                           (rule "narrowSelectArrayType" (formula "20") (term "1") (ifseqformula "7") (ifseqformula "19"))
                           (rule "applyEq" (formula "20") (term "2,0") (ifseqformula "3"))
                           (rule "narrowSelectArrayType" (formula "20") (term "0") (ifseqformula "15") (ifseqformula "19"))
                           (rule "applyEq" (formula "18") (term "0") (ifseqformula "3"))
                           (rule "equalUnique" (formula "18"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "3"))
                           (rule "equalUnique" (formula "16"))
                           (rule "false_right" (formula "16"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "mul_literals" (formula "5") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "16"))
                           (rule "add_zero_right" (formula "4") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "4"))
                           (rule "mul_literals" (formula "16") (term "1,0,0"))
                           (rule "add_zero_right" (formula "16") (term "0,0"))
                           (rule "leq_literals" (formula "16") (term "0"))
                           (rule "concrete_and_2" (formula "16"))
                           (rule "false_right" (formula "16"))
                           (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "16"))
                           (rule "add_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "4"))
                           (rule "mul_literals" (formula "16") (term "1,0,0"))
                           (rule "add_literals" (formula "16") (term "0,0"))
                           (rule "leq_literals" (formula "16") (term "0"))
                           (rule "concrete_and_2" (formula "16"))
                           (rule "false_right" (formula "16"))
                           (rule "commute_or" (formula "2") (term "0,0"))
                           (rule "commute_or_2" (formula "2") (term "0"))
                           (rule "elim_forall4" (formula "2"))
                           (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "2") (term "0,0"))
                           (rule "concrete_and_2" (formula "2") (term "0"))
                           (rule "concrete_or_2" (formula "2"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "5"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch " exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= -1 + array.length) & !f_0 = java.lang.Object::<created> FALSE"
                           (rule "close" (formula "18") (ifseqformula "3"))
                        )
                     )
                     (branch "CUT: o_0 = array FALSE"
                        (rule "concrete_not_2" (formula "1") (term "1,0"))
                        (rule "concrete_or_3" (formula "1") (term "0"))
                        (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "14"))
                        (rule "concrete_and_2" (formula "2") (term "0,0,0"))
                        (rule "concrete_and_2" (formula "2") (term "0,0"))
                        (rule "ifthenelse_false" (formula "2") (term "0"))
                        (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "13"))
                        (rule "concrete_and_4" (formula "2") (term "0,0"))
                        (rule "ifthenelse_false" (formula "2") (term "0"))
                        (rule "close" (formula "16") (ifseqformula "2"))
                     )
                  )
               )
            )
            (branch "Null Reference (x_arr = null)"
               (rule "false_right" (formula "16"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0"))
               (rule "commute_or" (formula "2") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
               (rule "commute_or" (formula "2") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
               (rule "commute_or" (formula "2") (term "1,0,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
               (rule "commute_or" (formula "2") (term "1,0,1,0,0"))
               (rule "commute_or" (formula "2") (term "0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
               (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
               (rule "shift_paren_and" (formula "2") (term "0,0"))
               (rule "shift_paren_and" (formula "2") (term "0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,1,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,1,0"))
               (rule "applyOnPV" (formula "2") (term "1,1,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "2") (term "0,1,2,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,2,0"))
               (rule "applyOnPV" (formula "2") (term "1,2,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,0,2,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,2,1,0"))
               (rule "applyOnPV" (formula "2") (term "0,2,1,0"))
               (rule "shiftEventStarParallelToUpdate" (formula "2") (term "0,0,2,2,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,2,2,0"))
               (rule "applyOnPV" (formula "2") (term "0,2,2,0"))
               (rule "cut_direct" (formula "13") (term "0"))
               (branch "CUT: i_0 >= 1 TRUE"
                  (rule "concrete_impl_1" (formula "14"))
                  (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "13"))
                  (rule "leq_literals" (formula "10") (term "0"))
                  (rule "concrete_or_1" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "close" (formula "15") (ifseqformula "1"))
               )
               (branch "CUT: i_0 >= 1 FALSE"
                  (rule "concrete_impl_2" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "inEqSimp_geqRight" (formula "14"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "3") (term "1,0,1,0,0,1,1,0,0,0") (ifseqformula "11"))
                  (rule "add_zero_right" (formula "3") (term "0,1,0,0,1,1,0,0,0"))
                  (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "11"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "3") (term "1"))
                  (rule "applyEq" (formula "2") (term "1,0,1,0,0,1,1,0,0,0,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,1,0,0,1,1,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "2") (term "1,0,2,1,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,2,1,0"))
                  (rule "applyEq" (formula "12") (term "0,1,0,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "2") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,1,0,0,1,1,0,0"))
                  (rule "applyEq" (formula "2") (term "1,0,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "1,0,2,2,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,2,2,0"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
                  (rule "leq_literals" (formula "7") (term "0"))
                  (rule "concrete_or_1" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "close" (formula "13") (ifseqformula "1"))
               )
            )
            (branch "Index Out of Bounds (x_arr != null, but x_5 Out of Bounds!)"
               (rule "false_right" (formula "16"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate2" (formula "1") (term "1"))
               (rule "applyOnRigidFormula" (formula "15"))
               (rule "simplifyUpdate1" (formula "15") (term "1"))
               (rule "elimEventOnRigidTerm1" (formula "15") (term "1"))
               (rule "applyOnRigidFormula" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0"))
               (rule "simplifyUpdate1" (formula "1") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "1") (term "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1,1"))
               (rule "elimEventOnRigidTerm1" (formula "1") (term "1,1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "15") (term "0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
               (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,1"))
               (rule "applyUpdateParallelToEventOnPV" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "commute_or" (formula "1"))
               (rule "cnf_rightDist" (formula "2") (term "0,0"))
               (rule "commute_or" (formula "2") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
               (rule "commute_or" (formula "2") (term "1,1,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
               (rule "commute_or" (formula "2") (term "1,0,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
               (rule "commute_or" (formula "2") (term "1,0,1,0,0"))
               (rule "commute_or" (formula "2") (term "0,0,1,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
               (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
               (rule "shift_paren_and" (formula "2") (term "0,0"))
               (rule "shift_paren_and" (formula "2") (term "0,0,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,0,2,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,2,1,0"))
               (rule "applyOnPV" (formula "2") (term "0,2,1,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,0,2,2,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,2,2,0"))
               (rule "applyOnPV" (formula "2") (term "0,2,2,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,1,1,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,1,0"))
               (rule "applyOnPV" (formula "2") (term "1,1,0"))
               (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,1,2,0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,2,0"))
               (rule "applyOnPV" (formula "2") (term "1,2,0"))
               (rule "cut_direct" (formula "13") (term "0"))
               (branch "CUT: i_0 >= 1 TRUE"
                  (rule "concrete_impl_1" (formula "14"))
                  (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "13"))
                  (rule "leq_literals" (formula "10") (term "0"))
                  (rule "concrete_or_1" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "shiftEventStarParallelToUpdate" (formula "15") (term "0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "15") (term "0"))
                  (rule "applyOnPV" (formula "15") (term "0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0,0,1"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0,1"))
                  (rule "applyOnPV" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "applyOnPV" (formula "1") (term "0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "12"))
                  (rule "qeq_literals" (formula "1") (term "0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,0,1,1,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,1,1,0,0"))
                  (rule "applyOnPV" (formula "2") (term "0,1,1,0,0"))
                  (rule "inEqSimp_homoInEq0" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0,1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0,1,1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,1,0,0"))
                  (rule "replace_known_left" (formula "2") (term "1,1,0,0") (ifseqformula "3"))
                  (rule "concrete_or_3" (formula "2") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "2") (term "0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteGeq" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "CUT: i_0 >= 1 FALSE"
                  (rule "concrete_impl_2" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "inEqSimp_geqRight" (formula "14"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "11"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEqRigid" (formula "1") (term "0,1,0,0,0") (ifseqformula "10"))
                  (rule "applyEqRigid" (formula "2") (term "1,0,1,0,0,1,1,0,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,1,0,0,1,1,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "1,0,1,0,0,1,1,0,0,0,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,1,0,0,1,1,0,0,0,0,0"))
                  (rule "applyEq" (formula "12") (term "0,1,0,0,0,0") (ifseqformula "10"))
                  (rule "applyEq" (formula "2") (term "1,0,2,2,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,2,2,0"))
                  (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "3") (term "1"))
                  (rule "applyEqRigid" (formula "1") (term "0,1,0,1,1") (ifseqformula "10"))
                  (rule "applyEq" (formula "2") (term "1,0,2,1,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,2,1,0"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "10"))
                  (rule "applyEqRigid" (formula "2") (term "1,0,1,0,0,1,1,0,0,0,0,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "applyEqRigid" (formula "2") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "10"))
                  (rule "add_zero_right" (formula "2") (term "0,1,0,0,1,1,0,0"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
                  (rule "leq_literals" (formula "7") (term "0"))
                  (rule "concrete_or_1" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "shiftEventStarParallelToUpdate" (formula "13") (term "0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0"))
                  (rule "applyOnPV" (formula "13") (term "0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0,0,1"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0,1"))
                  (rule "applyOnPV" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,1,0,0,0,1,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "1,0,0,0,1,0,0"))
                  (rule "applyOnPV" (formula "2") (term "1,0,0,0,1,0,0"))
                  (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "5"))
                  (rule "concrete_not_1" (formula "2") (term "0,1,0,0"))
                  (rule "concrete_or_2" (formula "2") (term "1,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "applyOnPV" (formula "1") (term "0,0"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "commute_and" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "shiftOnlyEventParallelToElementry" (formula "2") (term "0,0,1,1,0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "2") (term "0,1,1,0,0"))
                  (rule "applyOnPV" (formula "2") (term "0,1,1,0,0"))
                  (rule "qeq_literals" (formula "2") (term "1,1,0,0"))
                  (rule "concrete_or_3" (formula "2") (term "1,0,0"))
                  (rule "concrete_and_3" (formula "2") (term "0,0"))
                  (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "inEqSimp_commuteGeq" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (rule "concrete_and_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Null Reference (x_arr_1 = null)"
            (rule "false_right" (formula "15"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
            (rule "shiftOnlyEventParallelToElementry" (formula "1") (term "0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "close" (formula "14") (ifseqformula "1"))
         )
         (branch "Index Out of Bounds (x_arr_1 != null, but x_7 Out of Bounds!)"
            (rule "false_right" (formula "15"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "applyOnRigidFormula" (formula "14"))
            (rule "simplifyUpdate1" (formula "14") (term "1"))
            (rule "elimEventOnRigidTerm1" (formula "14") (term "1"))
            (rule "applyOnRigidFormula" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "1") (term "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1,1"))
            (rule "elimEventOnRigidTerm1" (formula "1") (term "1,1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "commute_or" (formula "1"))
            (rule "shiftOnlyEventParallelToElementry" (formula "14") (term "0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "14") (term "0"))
            (rule "applyOnPV" (formula "14") (term "0"))
            (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0,0,1"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0,1"))
            (rule "applyOnPV" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1"))
            (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0,0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "9"))
            (rule "qeq_literals" (formula "1") (term "0,0"))
            (rule "concrete_and_2" (formula "1") (term "0"))
            (rule "concrete_or_2" (formula "1"))
            (rule "shiftEventStarParallelToUpdate" (formula "1") (term "0,0"))
            (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "inEqSimp_commuteGeq" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x_1 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "13"))
         (rule "simplifyUpdate1" (formula "13") (term "1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0"))
         (rule "elimEventOnRigidTerm1" (formula "13") (term "1"))
         (rule "applyOnPV" (formula "13") (term "0"))
         (rule "ifthenelse_concrete3" (formula "13"))
         (rule "boolean_not_equal_2" (formula "13") (term "1"))
         (rule "concrete_or_4" (formula "13"))
         (rule "replace_known_right" (formula "15") (term "0,0,1,0,0") (ifseqformula "13"))
         (rule "ifthenelse_false" (formula "15") (term "0,1,0,0"))
         (rule "inEqSimp_geqRight" (formula "13"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
         (rule "applyEq" (formula "12") (term "1,2,1,0,1,0,0") (ifseqformula "9"))
         (rule "polySimp_addAssoc" (formula "12") (term "2,1,0,1,0,0"))
         (rule "add_literals" (formula "12") (term "0,2,1,0,1,0,0"))
         (rule "add_zero_left" (formula "12") (term "2,1,0,1,0,0"))
         (rule "applyEq" (formula "11") (term "1,2,1,0,1,0,0") (ifseqformula "9"))
         (rule "polySimp_addAssoc" (formula "11") (term "2,1,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,2,1,0,1,0,0"))
         (rule "add_zero_left" (formula "11") (term "2,1,0,1,0,0"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq1" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "0,0"))
         (rule "add_zero_left" (formula "5") (term "0"))
         (rule "applyEq" (formula "16") (term "1,0,1,0,0,0") (ifseqformula "9"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,1,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,1,0,0,0"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq1" (formula "10"))
         (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
         (rule "add_literals" (formula "10") (term "1,0"))
         (rule "times_zero_1" (formula "10") (term "0"))
         (rule "leq_literals" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "applyEq" (formula "15") (term "1,2,1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "9"))
         (rule "polySimp_addAssoc" (formula "15") (term "2,1,0,1,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "15") (term "0,2,1,0,1,0,0,0,0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "15") (term "2,1,0,1,0,0,0,0,0,0,0,0,0,0"))
         (rule "applyEq" (formula "12") (term "1,2,1,0,1,0,0,1") (ifseqformula "9"))
         (rule "polySimp_addAssoc" (formula "12") (term "2,1,0,1,0,0,1"))
         (rule "add_literals" (formula "12") (term "0,2,1,0,1,0,0,1"))
         (rule "add_zero_left" (formula "12") (term "2,1,0,1,0,0,1"))
         (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "9"))
         (rule "polySimp_addAssoc" (formula "7") (term "2,0"))
         (rule "add_literals" (formula "7") (term "0,2,0"))
         (rule "add_zero_left" (formula "7") (term "2,0"))
         (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "9"))
         (rule "polySimp_addAssoc" (formula "6") (term "2,0"))
         (rule "add_literals" (formula "6") (term "0,2,0"))
         (rule "add_zero_left" (formula "6") (term "2,0"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_addComm0" (formula "14") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,1,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "14") (term "1,1,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,1,0,0,0,0,0,0,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,1,0,0,0,0,0,0,0,0,0"))
         (rule "applyEq" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "8"))
         (rule "inEqSimp_invertInEq0" (formula "4"))
         (rule "times_zero_2" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "emptyIndexedLoopScope" (formula "13") (term "1"))
         (rule "applyOnRigidFormula" (formula "13"))
         (rule "simplifyUpdate2" (formula "13") (term "0"))
         (rule "applyOnRigidFormula" (formula "13") (term "0"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0"))
         (rule "elimEventOnRigidTerm1" (formula "13") (term "1,0"))
         (rule "applyOnPV" (formula "13") (term "0,0"))
         (rule "boolean_equal" (formula "13") (term "0"))
         (rule "ifthenelse_true_for" (formula "13"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (rule "tryEmpty" (formula "13") (term "1"))
         (rule "emptyModality" (formula "13") (term "1"))
         (rule "applyOnRigidFormula" (formula "13"))
         (rule "applyOnRigidFormula" (formula "13") (term "0"))
         (rule "simplifyUpdate2" (formula "13") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "13") (term "1"))
         (rule "simplifyUpdate2" (formula "13") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "13") (term "1,0"))
         (rule "simplifyUpdate2" (formula "13") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "13") (term "0,0"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0,0"))
         (rule "elimEventStarOnRigidTerm1" (formula "13") (term "1,0,0"))
         (rule "applyOnPV" (formula "13") (term "0,0,0"))
         (rule "boolean_equal" (formula "13") (term "0,0"))
         (rule "concrete_impl_1" (formula "13") (term "0"))
         (rule "applyOnRigidFormula" (formula "13") (term "1,1"))
         (rule "simplifyUpdate2" (formula "13") (term "1,1,1"))
         (rule "applyOnRigidFormula" (formula "13") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "13") (term "1,0"))
         (rule "simplifyUpdate1" (formula "13") (term "1,1,0"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,1,0"))
         (rule "elimEventOnRigidTerm1" (formula "13") (term "1,1,0"))
         (rule "applyOnPV" (formula "13") (term "0,1,0"))
         (rule "eqClose" (formula "13") (term "1,0"))
         (rule "concrete_and_3" (formula "13") (term "0"))
         (rule "applyOnRigidFormula" (formula "13") (term "0,1,1"))
         (rule "simplifyUpdate2" (formula "13") (term "1,0,1,1"))
         (rule "applyOnRigidFormula" (formula "13") (term "1,1,1"))
         (rule "simplifyUpdate1" (formula "13") (term "1,1,1,1"))
         (rule "simplifyUpdate1" (formula "13") (term "0,1,1,1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "1,1,1,1"))
         (rule "applyOnPV" (formula "13") (term "1,1,1,1"))
         (rule "applyOnRigidFormula" (formula "13") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1"))
         (rule "applyUpdateParallelToEventStarOnPV" (formula "13") (term "0,0,0,1"))
         (rule "elimEventStarOnRigidTerm1" (formula "13") (term "1,0,0,1"))
         (rule "applyOnPV" (formula "13") (term "0,0,0,1"))
         (rule "boolean_equal" (formula "13") (term "0,0,1"))
         (rule "concrete_not_1" (formula "13") (term "0,1"))
         (rule "concrete_impl_2" (formula "13") (term "1"))
         (rule "concrete_and_3" (formula "13"))
         (rule "updateParallelToEventStarOnNoRaW" (formula "13"))
         (branch "Case 1"
            (rule "simplifyUpdate1" (formula "13") (term "0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0"))
            (rule "elimEventStarOnPV" (formula "13") (term "0,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "2,0"))
            (rule "elimEventOnRigidTerm1" (formula "13") (term "0,2,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "1,2,0"))
            (rule "elimEventStarOnPV" (formula "13") (term "0,1,2,0"))
            (rule "applyEq" (formula "13") (term "1,2,0") (ifseqformula "7"))
            (rule "polySimp_addAssoc" (formula "13") (term "2,0"))
            (rule "add_literals" (formula "13") (term "0,2,0"))
            (rule "add_zero_left" (formula "13") (term "2,0"))
            (rule "cut_direct" (formula "10") (term "0"))
            (branch "CUT: i_0 >= 1 TRUE"
               (rule "concrete_impl_1" (formula "11"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "10"))
               (rule "leq_literals" (formula "6") (term "0"))
               (rule "concrete_or_1" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1"))
               (rule "inInt" (formula "8") (term "1"))
               (rule "true_left" (formula "8"))
               (rule "arrayLengthNotNegative" (formula "8") (term "1,2,0,1"))
               (rule "simplifyUpdate2" (formula "8"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate1" (formula "8") (term "1"))
               (rule "elimEventOnRigidTerm1" (formula "8") (term "1"))
               (rule "applyOnRigidTerm" (formula "8") (term "0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "8") (term "0,0"))
               (rule "applyOnPV" (formula "8") (term "0,0"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8"))
               (rule "mul_literals" (formula "8") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
               (rule "leq_literals" (formula "8") (term "0"))
               (rule "concrete_or_1" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1"))
               (rule "inInt" (formula "8") (term "1"))
               (rule "true_left" (formula "8"))
               (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
               (rule "inInt" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "arrayLengthNotNegative" (formula "8") (term "1,2,0,1"))
               (rule "simplifyUpdate2" (formula "8"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate1" (formula "8") (term "1"))
               (rule "elimEventOnRigidTerm1" (formula "8") (term "1"))
               (rule "applyOnRigidTerm" (formula "8") (term "0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "8") (term "0,0"))
               (rule "applyOnPV" (formula "8") (term "0,0"))
               (rule "arrayLengthNotNegative" (formula "6") (term "0"))
               (rule "noReadAndNoRaW" (formula "14") (userinteraction))
               (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "5"))
               (rule "concrete_or_3" (formula "14") (term "0"))
               (rule "ifthenelse_true_for" (formula "14"))
               (rule "closeTrue" (formula "14"))
            )
            (branch "CUT: i_0 >= 1 FALSE"
               (rule "concrete_impl_2" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "inEqSimp_geqRight" (formula "11"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
               (rule "applyEq" (formula "10") (term "0,1,0,0,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEqRigid" (formula "10") (term "2,1,0,1,0,0") (ifseqformula "6"))
               (rule "applyEqRigid" (formula "10") (term "0,1,0,0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "9") (term "2,1,0,1,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "applyEqRigid" (formula "4") (term "2,0") (ifseqformula "6"))
               (rule "applyEq" (formula "5") (term "2,0") (ifseqformula "6"))
               (rule "applyEqRigid" (formula "12") (term "2,0") (ifseqformula "6"))
               (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "6"))
               (rule "add_zero_right" (formula "7") (term "1"))
               (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
               (rule "inInt" (formula "9") (term "1"))
               (rule "true_left" (formula "9"))
               (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
               (rule "simplifyUpdate2" (formula "9"))
               (rule "applyOnRigidFormula" (formula "9"))
               (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
               (rule "applyOnRigidTerm" (formula "9") (term "0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
               (rule "applyOnPV" (formula "9") (term "0,0"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
               (rule "inInt" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
               (rule "inInt" (formula "9") (term "1"))
               (rule "true_left" (formula "9"))
               (rule "arrayLengthNotNegative" (formula "7") (term "0"))
               (rule "arrayLengthNotNegative" (formula "10") (term "1,2,0,1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "applyOnRigidFormula" (formula "10"))
               (rule "simplifyUpdate1" (formula "10") (term "1"))
               (rule "elimEventOnRigidTerm1" (formula "10") (term "1"))
               (rule "applyOnRigidTerm" (formula "10") (term "0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "0,0"))
               (rule "applyOnPV" (formula "10") (term "0,0"))
               (rule "noReadAndNoRaW" (formula "13") (userinteraction))
               (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "4"))
               (rule "concrete_or_1" (formula "13") (term "0"))
               (rule "ifthenelse_true_for" (formula "13"))
               (rule "closeTrue" (formula "13"))
            )
         )
         (branch "Case 2"
            (rule "orRight" (formula "13"))
            (rule "cut_direct" (formula "10") (term "0"))
            (branch "CUT: i_0 >= 1 TRUE"
               (rule "concrete_impl_1" (formula "11"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "10"))
               (rule "leq_literals" (formula "6") (term "0"))
               (rule "concrete_or_1" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1"))
               (rule "inInt" (formula "8") (term "1"))
               (rule "true_left" (formula "8"))
               (rule "arrayLengthNotNegative" (formula "8") (term "1,2,0,1"))
               (rule "simplifyUpdate2" (formula "8"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate1" (formula "8") (term "1"))
               (rule "elimEventOnRigidTerm1" (formula "8") (term "1"))
               (rule "applyOnRigidTerm" (formula "8") (term "0"))
               (rule "applyUpdateParallelToEventStarOnPV" (formula "8") (term "0,0"))
               (rule "applyOnPV" (formula "8") (term "0,0"))
               (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
               (rule "inEqSimp_sepPosMonomial1" (formula "8"))
               (rule "mul_literals" (formula "8") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
               (rule "leq_literals" (formula "8") (term "0"))
               (rule "concrete_or_1" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "arrayLengthIsAnInt" (formula "15") (term "1,2,0,1"))
               (rule "inInt" (formula "1") (term "1"))
               (rule "true_left" (formula "1"))
               (rule "arrayLengthNotNegative" (formula "15") (term "1,2,0,1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0"))
               (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
               (rule "updateParallelToEventStarOnNoRaW" (formula "16"))
               (branch "Case 1"
                  (rule "simplifyUpdate1" (formula "16") (term "0"))
                  (rule "applyOnRigidTerm" (formula "16") (term "0"))
                  (rule "elimEventOnRigidTerm1" (formula "16") (term "1,0"))
                  (rule "elimEventStarOnPV" (formula "16") (term "0,0"))
                  (rule "applyOnRigidTerm" (formula "16") (term "2,0"))
                  (rule "elimEventOnRigidTerm1" (formula "16") (term "0,2,0"))
                  (rule "applyOnRigidTerm" (formula "16") (term "1,2,0"))
                  (rule "elimEventStarOnPV" (formula "16") (term "0,1,2,0"))
                  (rule "applyEq" (formula "16") (term "1,2,0") (ifseqformula "7"))
                  (rule "polySimp_addAssoc" (formula "16") (term "2,0"))
                  (rule "add_literals" (formula "16") (term "0,2,0"))
                  (rule "add_zero_left" (formula "16") (term "2,0"))
                  (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                  (rule "inInt" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1"))
                  (rule "inInt" (formula "8") (term "1"))
                  (rule "true_left" (formula "8"))
                  (rule "arrayLengthIsAnInt" (formula "14") (term "1,2,0,1"))
                  (rule "inInt" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "14") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0"))
                  (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "8") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "8"))
                  (rule "applyOnRigidFormula" (formula "8"))
                  (rule "simplifyUpdate1" (formula "8") (term "1"))
                  (rule "elimEventOnRigidTerm1" (formula "8") (term "1"))
                  (rule "applyOnRigidTerm" (formula "8") (term "0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "8") (term "0,0"))
                  (rule "applyOnPV" (formula "8") (term "0,0"))
                  (rule "noReadAndNoRaW" (formula "16") (userinteraction))
                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "5"))
                  (rule "concrete_or_1" (formula "16") (term "0"))
                  (rule "ifthenelse_true_for" (formula "16"))
                  (rule "closeTrue" (formula "16"))
               )
               (branch "Case 2"
                  (rule "orRight" (formula "16"))
                  (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
                  (rule "inInt" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthIsAnInt" (formula "16") (term "1,2,0,1"))
                  (rule "inInt" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "16") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0"))
                  (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                  (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1"))
                  (rule "inInt" (formula "8") (term "1"))
                  (rule "true_left" (formula "8"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "applyOnRigidFormula" (formula "9"))
                  (rule "simplifyUpdate1" (formula "9") (term "1"))
                  (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                  (rule "applyOnPV" (formula "9") (term "0,0"))
                  (rule "pullOut" (formula "16") (term "0,1") (inst "sk=arrayRange_0") (userinteraction))
                  (rule "pullOut" (formula "12") (term "0,1") (inst "sk=arrayRange_1") (userinteraction))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                  (rule "applyOnRigidFormula" (formula "12"))
                  (rule "simplifyUpdate1" (formula "12") (term "1"))
                  (rule "elimEventOnRigidTerm1" (formula "12") (term "1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "1,0"))
                  (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "applyOnRigidTerm" (formula "12") (term "0"))
                  (rule "simplifyUpdate1" (formula "12") (term "0,0"))
                  (rule "simplifyUpdate1" (formula "12") (term "2,0"))
                  (rule "simplifyUpdate1" (formula "12") (term "1,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0"))
                  (rule "elimEventOnRigidTerm1" (formula "12") (term "1,0"))
                  (rule "applyOnPV" (formula "12") (term "0,0"))
                  (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "0,2,0"))
                  (rule "applyOnRigidTerm" (formula "12") (term "2,0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "1,2,0"))
                  (rule "simplifyUpdate1" (formula "12") (term "0,2,0"))
                  (rule "applyOnPV" (formula "12") (term "1,2,0"))
                  (rule "elimEventOnRigidTerm1" (formula "12") (term "0,2,0"))
                  (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
                  (rule "elimEventStarOnPV" (formula "1") (term "0,1,2,0"))
                  (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "8"))
                  (rule "polySimp_addAssoc" (formula "1") (term "2,0"))
                  (rule "add_literals" (formula "1") (term "0,2,0"))
                  (rule "add_zero_left" (formula "1") (term "2,0"))
                  (rule "applyEq" (formula "16") (term "1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "9") (term "1,0,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "18") (term "1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                  (rule "applyEq" (formula "10") (term "1,0,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "1"))
                  (rule "applyEq" (formula "13") (term "1,0,1,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "17") (term "1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                  (rule "simplifyEventUpdateNoRaW" (formula "18"))
                  (rule "simplifyEventUpdateNoRaW" (formula "13"))
                  (rule "arrayLengthNotNegative" (formula "16") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0"))
                  (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "arrayLengthIsAnInt" (formula "16") (term "1,2,0,1"))
                  (rule "inInt" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
                  (rule "inInt" (formula "9") (term "1"))
                  (rule "true_left" (formula "9"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "applyOnRigidFormula" (formula "9"))
                  (rule "simplifyUpdate1" (formula "9") (term "1"))
                  (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                  (rule "applyOnPV" (formula "9") (term "0,0"))
                  (rule "cut" (inst "cutFormula=  union(arrayRange(array, Z(0(#)), sub(i_0, Z(1(#)))),
        arrayRange(array, i_0, i_0))
= arrayRange(array, Z(0(#)), i_0)") (userinteraction))
                  (branch "CUT: arrayRange(array, 0, i_0 - 1) cup arrayRange(array, i_0, i_0) = arrayRange(array, 0, i_0) TRUE"
                     (rule "polySimp_elimSub" (formula "1") (term "2,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,2,0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "2,0,0"))
                     (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "13"))
                     (rule "pullOut" (formula "1") (term "1,0") (inst "sk=arrayRange_2") (userinteraction))
                     (rule "eqSymm" (formula "2") (userinteraction))
                     (rule "applyEqRigid" (formula "20") (term "0,1") (ifseqformula "2") (userinteraction))
                     (rule "splitNoRaW" (formula "20") (term "1") (userinteraction))
                     (rule "eqSymm" (formula "2"))
                     (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "15"))
                     (rule "concrete_and_1" (formula "20") (term "1"))
                     (rule "noReadAndNoRaW" (formula "20") (term "1") (userinteraction))
                     (rule "applyOnRigidFormula" (formula "20"))
                     (rule "applyOnRigidFormula" (formula "20") (term "0"))
                     (rule "ifthenelse_split_for" (formula "20"))
                     (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) TRUE"
                        (rule "closeTrue" (formula "21"))
                     )
                     (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) FALSE"
                        (rule "orRight" (formula "20"))
                        (rule "pullOut" (formula "11") (term "0,1") (inst "sk=arrayRange_3") (userinteraction))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "applyOnRigidFormula" (formula "11"))
                        (rule "simplifyUpdate1" (formula "11") (term "1"))
                        (rule "elimEventOnRigidTerm1" (formula "11") (term "1"))
                        (rule "applyOnRigidTerm" (formula "11") (term "0"))
                        (rule "simplifyUpdate1" (formula "11") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "0,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "1,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "0,0"))
                        (rule "applyOnPV" (formula "11") (term "1,0"))
                        (rule "applyOnPV" (formula "11") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "11") (term "2,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "0,2,0"))
                        (rule "elimEventOnRigidTerm1" (formula "11") (term "0,2,0"))
                        (rule "applyOnRigidTerm" (formula "11") (term "1,2,0"))
                        (rule "applyUpdateParallelToEventStarOnPV" (formula "11") (term "0,1,2,0"))
                        (rule "applyOnPV" (formula "11") (term "0,1,2,0"))
                        (rule "applyEq" (formula "11") (term "1,2,0") (ifseqformula "10"))
                        (rule "polySimp_addAssoc" (formula "11") (term "2,0"))
                        (rule "add_literals" (formula "11") (term "0,2,0"))
                        (rule "add_zero_left" (formula "11") (term "2,0"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "11"))
                        (rule "applyEqRigid" (formula "12") (term "0,1") (ifseqformula "11"))
                        (rule "eventStarBeforNoW" (formula "12"))
                        (rule "close" (formula "22") (ifseqformula "12"))
                     )
                  )
                  (branch "CUT: arrayRange(array, 0, i_0 - 1) cup arrayRange(array, i_0, i_0) = arrayRange(array, 0, i_0) FALSE"
                     (rule "polySimp_elimSub" (formula "15") (term "2,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,2,0,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "2,0,0"))
                     (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "12"))
                     (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
                     (rule "equalityToElementOfRight" (formula "15") (inst "ov=ov") (inst "fv=fv"))
                     (rule "allRight" (formula "15") (inst "sk=ov_0"))
                     (rule "allRight" (formula "15") (inst "sk=fv_0"))
                     (rule "elementOfArrayRangeEQ" (formula "15") (term "1") (inst "iv=iv") (ifseqformula "1"))
                     (rule "eqSymm" (formula "15") (term "0,0,0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1,1"))
                     (rule "elementOfUnion" (formula "15") (term "0"))
                     (rule "elementOfArrayRangeEQ" (formula "15") (term "0,0") (inst "iv=iv") (ifseqformula "12"))
                     (rule "eqSymm" (formula "15") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1,0,0"))
                     (rule "elementOfArrayRange" (formula "15") (term "1,0") (inst "iv=iv"))
                     (rule "eqSymm" (formula "15") (term "0,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "1,0,0,1,1,0"))
                     (rule "equiv_right" (formula "15"))
                     (branch "Case 1"
                        (rule "orLeft" (formula "1"))
                        (branch " ov_0 = array & exists int iv; (arr(iv) = fv_0 & iv >= 0 & iv <= -1 + i_0)"
                           (rule "andLeft" (formula "1"))
                           (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "eqSymm" (formula "2"))
                           (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "19"))
                           (rule "applyEqRigid" (formula "19") (term "1,0,0,0") (ifseqformula "2"))
                           (rule "equalUnique" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                           (rule "times_zero_1" (formula "3") (term "0,0"))
                           (rule "add_zero_left" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "nnf_ex2all" (formula "19"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "commute_or_2" (formula "1") (term "0"))
                           (rule "elim_forall4" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "1") (term "0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch " ov_0 = array & exists int iv; (arr(iv) = fv_0 & iv >= i_0 & iv <= i_0)"
                           (rule "andLeft" (formula "1"))
                           (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "eqSymm" (formula "2"))
                           (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "19"))
                           (rule "applyEqRigid" (formula "19") (term "1,0,0,0") (ifseqformula "2"))
                           (rule "equalUnique" (formula "19") (term "0,0,0"))
                           (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
                           (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "times_zero_1" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "times_zero_1" (formula "4") (term "0"))
                           (rule "qeq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEq" (formula "18") (term "1,0,0,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "2") (term "0,1") (ifseqformula "3"))
                           (rule "nnf_ex2all" (formula "18"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0"))
                           (rule "commute_or_2" (formula "1") (term "0"))
                           (rule "elim_forall4" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1"))
                           (rule "add_literals" (formula "1") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,1"))
                           (rule "add_literals" (formula "1") (term "0,1"))
                           (rule "leq_literals" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (rule "concrete_and_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "orRight" (formula "16"))
                        (rule "andLeft" (formula "1"))
                        (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "eqSymm" (formula "2"))
                        (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "1"))
                        (rule "concrete_and_1" (formula "19"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "1"))
                        (rule "concrete_and_1" (formula "20"))
                        (rule "applyEqRigid" (formula "19") (term "1,0,0,0") (ifseqformula "2"))
                        (rule "equalUnique" (formula "19") (term "0,0,0"))
                        (rule "applyEq" (formula "20") (term "1,0,0,0") (ifseqformula "2"))
                        (rule "equalUnique" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
                        (rule "mul_literals" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "16"))
                        (rule "leq_literals" (formula "3") (term "0"))
                        (rule "concrete_or_1" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "nnf_ex2all" (formula "19"))
                        (rule "nnf_ex2all" (formula "20"))
                        (rule "nnf_notAnd" (formula "2") (term "0"))
                        (rule "inEqSimp_notLeq" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
                        (rule "add_zero_left" (formula "2") (term "0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0"))
                        (rule "inEqSimp_notLeq" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
                        (rule "nnf_notAnd" (formula "2") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "2") (term "1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                        (rule "mul_literals" (formula "2") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "1") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "inEqSimp_or_antiSymm1" (formula "1") (term "0"))
                        (rule "polySimp_homoEq" (formula "1") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "1,0,1,1,0"))
                        (rule "add_literals" (formula "1") (term "0,1,0,1,1,0"))
                        (rule "add_zero_left" (formula "1") (term "1,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "1") (term "0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0,0,1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "1") (term "0,0,1,0"))
                        (rule "add_literals" (formula "1") (term "1,0,0,1,0"))
                        (rule "times_zero_1" (formula "1") (term "0,0,1,0"))
                        (rule "eqClose" (formula "1") (term "0,1,0"))
                        (rule "ifthenelse_true_for" (formula "1") (term "1,0"))
                        (rule "elim_forall4" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "20"))
                        (rule "inEqSimp_strengthen0" (formula "5") (ifseqformula "20"))
                        (rule "inEqSimp_contradEq3" (formula "20") (ifseqformula "5"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0"))
                        (rule "qeq_literals" (formula "20") (term "0"))
                        (rule "concrete_and_2" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "4") (term "0,0"))
                        (rule "add_zero_left" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1"))
                        (rule "commute_or" (formula "1") (term "0,0"))
                        (rule "commute_or_2" (formula "1") (term "0"))
                        (rule "elim_forall4" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "1") (term "0,0"))
                        (rule "concrete_and_2" (formula "1") (term "0"))
                        (rule "concrete_or_2" (formula "1"))
                        (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "5"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_literals" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
            (branch "CUT: i_0 >= 1 FALSE"
               (rule "concrete_impl_2" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "inEqSimp_geqRight" (formula "11"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "16") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "14") (term "0,1,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "6") (term "2,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "16") (term "0,1,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "10") (term "2,1,0,1,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "14") (term "1,0,1,0,0,0,0") (ifseqformula "7"))
               (rule "add_zero_right" (formula "14") (term "0,1,0,0,0,0"))
               (rule "applyEqRigid" (formula "15") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "15") (term "1,0,1,0,0,0,0") (ifseqformula "7"))
               (rule "add_zero_right" (formula "15") (term "0,1,0,0,0,0"))
               (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "applyEqRigid" (formula "14") (term "0,1,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "10") (term "2,1,0,1,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "14") (term "2,1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "13") (term "2,1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "14") (term "0,1,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "13") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "10") (term "0,1,0,0,0,0") (ifseqformula "7"))
               (rule "applyEqRigid" (formula "5") (term "2,0") (ifseqformula "7"))
               (rule "applyEq" (formula "15") (term "1,0,1,0,0,0,0") (ifseqformula "7"))
               (rule "add_zero_right" (formula "15") (term "0,1,0,0,0,0"))
               (rule "applyEqRigid" (formula "15") (term "2,1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "14") (term "0,1,0,0,0,0,0,0") (ifseqformula "6"))
               (rule "applyEqRigid" (formula "8") (term "0,1,0,0,0,0") (ifseqformula "6"))
               (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "6"))
               (rule "add_zero_right" (formula "7") (term "1"))
               (rule "updateParallelToEventStarOnNoRaW" (formula "14"))
               (branch "Case 1"
                  (rule "simplifyUpdate1" (formula "14") (term "0"))
                  (rule "applyOnRigidTerm" (formula "14") (term "0"))
                  (rule "elimEventStarOnPV" (formula "14") (term "0,0"))
                  (rule "elimEventOnRigidTerm1" (formula "14") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "14") (term "2,0"))
                  (rule "elimEventOnRigidTerm1" (formula "14") (term "0,2,0"))
                  (rule "applyOnRigidTerm" (formula "14") (term "1,2,0"))
                  (rule "elimEventStarOnPV" (formula "14") (term "0,1,2,0"))
                  (rule "applyEq" (formula "14") (term "1,2,0") (ifseqformula "7"))
                  (rule "add_literals" (formula "14") (term "2,0"))
                  (rule "arrayLengthNotNegative" (formula "13") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0"))
                  (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthIsAnInt" (formula "13") (term "1,2,0,1"))
                  (rule "inInt" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthIsAnInt" (formula "9") (term "1,2,0,1"))
                  (rule "inInt" (formula "9") (term "1"))
                  (rule "true_left" (formula "9"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "applyOnRigidFormula" (formula "9"))
                  (rule "simplifyUpdate1" (formula "9") (term "1"))
                  (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                  (rule "applyOnPV" (formula "9") (term "0,0"))
                  (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1"))
                  (rule "inInt" (formula "8") (term "1"))
                  (rule "true_left" (formula "8"))
                  (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                  (rule "inInt" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                  (rule "arrayLengthNotNegative" (formula "10") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "10"))
                  (rule "applyOnRigidFormula" (formula "10"))
                  (rule "simplifyUpdate1" (formula "10") (term "1"))
                  (rule "elimEventOnRigidTerm1" (formula "10") (term "1"))
                  (rule "applyOnRigidTerm" (formula "10") (term "0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "0,0"))
                  (rule "applyOnPV" (formula "10") (term "0,0"))
                  (rule "arrayLengthIsAnInt" (formula "13") (term "1,2,0,1"))
                  (rule "inInt" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "14") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0"))
                  (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "noReadAndNoRaW" (formula "15") (userinteraction))
                  (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                  (rule "concrete_or_1" (formula "15") (term "0"))
                  (rule "ifthenelse_true_for" (formula "15"))
                  (rule "closeTrue" (formula "15"))
               )
               (branch "Case 2"
                  (rule "orRight" (formula "14"))
                  (rule "arrayLengthIsAnInt" (formula "13") (term "1,2,0,1"))
                  (rule "inInt" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "13") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0"))
                  (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "1,2,0,1"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "applyOnRigidFormula" (formula "9"))
                  (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0"))
                  (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                  (rule "applyOnPV" (formula "9") (term "0,0"))
                  (rule "arrayLengthIsAnInt" (formula "10") (term "1,2,0,1"))
                  (rule "inInt" (formula "10") (term "1"))
                  (rule "true_left" (formula "10"))
                  (rule "updateParallelToEventStarOnNoRaW" (formula "15"))
                  (branch "Case 1"
                     (rule "simplifyUpdate1" (formula "15") (term "0"))
                     (rule "applyOnRigidTerm" (formula "15") (term "0"))
                     (rule "elimEventOnRigidTerm1" (formula "15") (term "1,0"))
                     (rule "elimEventStarOnPV" (formula "15") (term "0,0"))
                     (rule "applyOnRigidTerm" (formula "15") (term "2,0"))
                     (rule "elimEventOnRigidTerm1" (formula "15") (term "0,2,0"))
                     (rule "applyOnRigidTerm" (formula "15") (term "1,2,0"))
                     (rule "elimEventStarOnPV" (formula "15") (term "0,1,2,0"))
                     (rule "applyEq" (formula "15") (term "1,2,0") (ifseqformula "7"))
                     (rule "add_literals" (formula "15") (term "2,0"))
                     (rule "arrayLengthIsAnInt" (formula "10") (term "1,2,0,1"))
                     (rule "inInt" (formula "10") (term "1"))
                     (rule "true_left" (formula "10"))
                     (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                     (rule "inInt" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "arrayLengthIsAnInt" (formula "14") (term "1,2,0,1"))
                     (rule "inInt" (formula "1") (term "1"))
                     (rule "true_left" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "14") (term "1,2,0,1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                     (rule "arrayLengthNotNegative" (formula "10") (term "1,2,0,1"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "applyOnRigidFormula" (formula "10"))
                     (rule "simplifyUpdate1" (formula "10") (term "1"))
                     (rule "elimEventOnRigidTerm1" (formula "10") (term "1"))
                     (rule "applyOnRigidTerm" (formula "10") (term "0"))
                     (rule "applyUpdateParallelToEventStarOnPV" (formula "10") (term "0,0"))
                     (rule "applyOnPV" (formula "10") (term "0,0"))
                     (rule "noReadAndNoRaW" (formula "15") (userinteraction))
                     (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                     (rule "concrete_or_1" (formula "15") (term "0"))
                     (rule "ifthenelse_true_for" (formula "15"))
                     (rule "closeTrue" (formula "15"))
                  )
                  (branch "Case 2"
                     (rule "orRight" (formula "15"))
                     (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1"))
                     (rule "inInt" (formula "8") (term "1"))
                     (rule "true_left" (formula "8"))
                     (rule "arrayLengthIsAnInt" (formula "15") (term "1,2,0,1"))
                     (rule "inInt" (formula "1") (term "1"))
                     (rule "true_left" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                     (rule "arrayLengthNotNegative" (formula "15") (term "1,2,0,1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                     (rule "arrayLengthNotNegative" (formula "8") (term "1,2,0,1"))
                     (rule "simplifyUpdate2" (formula "8"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "elimEventOnRigidTerm1" (formula "8") (term "1"))
                     (rule "applyOnRigidTerm" (formula "8") (term "0"))
                     (rule "applyUpdateParallelToEventStarOnPV" (formula "8") (term "0,0"))
                     (rule "applyOnPV" (formula "8") (term "0,0"))
                     (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                     (rule "inInt" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "pullOut" (formula "15") (term "0,1") (inst "sk=arrayRange_0") (userinteraction))
                     (rule "pullOut" (formula "9") (term "0,1") (inst "sk=arrayRange_1") (userinteraction))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "9"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                     (rule "applyOnRigidFormula" (formula "9"))
                     (rule "simplifyUpdate1" (formula "9") (term "1"))
                     (rule "elimEventOnRigidTerm1" (formula "9") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "elimEventOnRigidTerm1" (formula "1") (term "1,0"))
                     (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                     (rule "applyOnRigidTerm" (formula "9") (term "0"))
                     (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "9") (term "2,0"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,0"))
                     (rule "simplifyUpdate1" (formula "9") (term "0,0"))
                     (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "1,0"))
                     (rule "applyOnPV" (formula "9") (term "0,0"))
                     (rule "applyOnPV" (formula "9") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "2,0"))
                     (rule "elimEventStarOnRigidTerm1" (formula "1") (term "0,2,0"))
                     (rule "applyOnRigidTerm" (formula "9") (term "2,0"))
                     (rule "simplifyUpdate1" (formula "9") (term "0,2,0"))
                     (rule "elimEventOnRigidTerm1" (formula "9") (term "0,2,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,2,0"))
                     (rule "elimEventStarOnPV" (formula "1") (term "0,1,2,0"))
                     (rule "applyOnRigidTerm" (formula "9") (term "1,2,0"))
                     (rule "applyUpdateParallelToEventStarOnPV" (formula "9") (term "0,1,2,0"))
                     (rule "applyOnPV" (formula "9") (term "0,1,2,0"))
                     (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "9"))
                     (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "8"))
                     (rule "add_literals" (formula "1") (term "2,0"))
                     (rule "applyEqRigid" (formula "10") (term "0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "10") (term "1,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "17") (term "1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "12") (term "1,0,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "16") (term "1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "15") (term "1,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                     (rule "eventStarBeforNoW" (formula "10"))
                     (rule "simplifyEventUpdateNoRaW" (formula "17"))
                     (rule "arrayLengthNotNegative" (formula "12") (term "1,2,0,1"))
                     (rule "simplifyUpdate2" (formula "12"))
                     (rule "applyOnRigidFormula" (formula "12"))
                     (rule "simplifyUpdate1" (formula "12") (term "1"))
                     (rule "elimEventOnRigidTerm1" (formula "12") (term "1"))
                     (rule "applyOnRigidTerm" (formula "12") (term "0"))
                     (rule "applyUpdateParallelToEventStarOnPV" (formula "12") (term "0,0"))
                     (rule "applyOnPV" (formula "12") (term "0,0"))
                     (rule "arrayLengthIsAnInt" (formula "12") (term "1,2,0,1"))
                     (rule "inInt" (formula "12") (term "1"))
                     (rule "true_left" (formula "12"))
                     (rule "arrayLengthNotNegative" (formula "16") (term "1,2,0,1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "elimEventStarOnPV" (formula "1") (term "0,0"))
                     (rule "arrayLengthIsAnInt" (formula "16") (term "1,2,0,1"))
                     (rule "inInt" (formula "1") (term "1"))
                     (rule "true_left" (formula "1"))
                     (rule "cut" (inst "cutFormula=  union(arrayRange(array, Z(0(#)), sub(i_0, Z(1(#)))),
        arrayRange(array, i_0, i_0))
= arrayRange(array, Z(0(#)), i_0)") (userinteraction))
                     (branch "CUT: arrayRange(array, 0, i_0 - 1) cup arrayRange(array, i_0, i_0) = arrayRange(array, 0, i_0) TRUE"
                        (rule "polySimp_elimSub" (formula "1") (term "2,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,2,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "2,0,0"))
                        (rule "applyEq" (formula "1") (term "1,2,0,0") (ifseqformula "8"))
                        (rule "add_zero_right" (formula "1") (term "2,0,0"))
                        (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "8"))
                        (rule "applyEqRigid" (formula "1") (term "2,1,0") (ifseqformula "8"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "8"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                        (rule "commuteUnion" (formula "1") (term "0"))
                        (rule "pullOut" (formula "1") (term "1,0") (inst "sk=arrayRange_2") (userinteraction))
                        (rule "eqSymm" (formula "2") (userinteraction))
                        (rule "applyEqRigid" (formula "19") (term "0,1") (ifseqformula "2") (userinteraction))
                        (rule "splitNoRaW" (formula "19") (term "1") (userinteraction))
                        (rule "eqSymm" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "19"))
                        (rule "andRight" (formula "19"))
                        (branch "Case 1"
                           (rule "pullOut" (formula "19") (term "0,1") (inst "sk=arrayRange_0_0") (userinteraction))
                           (rule "elimEventStarOnRigidFormula1" (formula "1"))
                           (rule "eqSymm" (formula "1"))
                           (rule "applyEqRigid" (formula "20") (term "0,1") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (userinteraction))
                           (rule "applyEqRigid" (formula "20") (term "0,1") (ifseqformula "3") (userinteraction))
                           (rule "splitNoRaW" (formula "20") (term "1") (userinteraction))
                           (rule "eqSymm" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "20"))
                           (rule "andRight" (formula "20"))
                           (branch "Case 1"
                              (rule "eqSymm" (formula "3") (userinteraction))
                              (rule "applyEqRigid" (formula "20") (term "0,1") (ifseqformula "3") (userinteraction))
                              (rule "splitNoRaW" (formula "20") (term "1") (userinteraction))
                              (rule "eqSymm" (formula "3"))
                              (rule "applyOnRigidFormula" (formula "20"))
                              (rule "andRight" (formula "20"))
                              (branch "Case 1"
                                 (rule "eqSymm" (formula "3") (userinteraction))
                                 (rule "applyEqRigid" (formula "20") (term "0,1") (ifseqformula "3") (userinteraction))
                                 (rule "splitNoRaW" (formula "20") (term "1") (userinteraction))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "applyOnRigidFormula" (formula "20"))
                                 (rule "andRight" (formula "20"))
                                 (branch "Case 1"
                                    (rule "noReadAndNoRaW" (formula "20") (term "1") (userinteraction))
                                    (rule "replace_known_left" (formula "20") (term "1,0,1") (ifseqformula "13") (userinteraction))
                                    (rule "concrete_or_3" (formula "20") (term "0,1"))
                                    (rule "ifthenelse_true_for" (formula "20") (term "1"))
                                    (rule "closeTrue" (formula "20"))
                                 )
                                 (branch "Case 2"
                                    (rule "noReadAndNoRaW" (formula "20") (term "1") (userinteraction))
                                    (rule "applyOnRigidFormula" (formula "20"))
                                    (rule "applyOnRigidFormula" (formula "20") (term "0"))
                                    (rule "ifthenelse_split_for" (formula "20"))
                                    (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) TRUE"
                                       (rule "closeTrue" (formula "21"))
                                    )
                                    (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) FALSE"
                                       (rule "orRight" (formula "20"))
                                       (rule "noWriteKnownForSuperset" (formula "21") (term "1") (ifseqformula "13") (userinteraction))
                                       (rule "applyOnRigidFormula" (formula "21"))
                                       (rule "elimEventOnRigidFormula1" (formula "21") (term "0"))
                                       (rule "subsetOfUnionWithItSelfEQ2" (formula "21") (term "0") (ifseqformula "3"))
                                       (rule "ifthenelse_true_for" (formula "21"))
                                       (rule "closeTrue" (formula "21"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "noReadAndNoRaW" (formula "20") (term "1") (userinteraction))
                                 (rule "applyOnRigidFormula" (formula "20"))
                                 (rule "applyOnRigidFormula" (formula "20") (term "0"))
                                 (rule "ifthenelse_split_for" (formula "20"))
                                 (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) TRUE"
                                    (rule "closeTrue" (formula "21"))
                                 )
                                 (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) FALSE"
                                    (rule "orRight" (formula "20"))
                                    (rule "noWriteKnownForSuperset" (formula "21") (term "1") (ifseqformula "13") (userinteraction))
                                    (rule "applyOnRigidFormula" (formula "21"))
                                    (rule "elimEventOnRigidFormula1" (formula "21") (term "0"))
                                    (rule "subsetOfUnionWithItSelfEQ2" (formula "21") (term "0") (ifseqformula "3"))
                                    (rule "ifthenelse_true_for" (formula "21"))
                                    (rule "closeTrue" (formula "21"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "noReadAndNoRaW" (formula "20") (term "1") (userinteraction))
                              (rule "applyOnRigidFormula" (formula "20"))
                              (rule "applyOnRigidFormula" (formula "20") (term "0"))
                              (rule "ifthenelse_split_for" (formula "20"))
                              (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) TRUE"
                                 (rule "closeTrue" (formula "21"))
                              )
                              (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) FALSE"
                                 (rule "orRight" (formula "20"))
                                 (rule "noWriteKnownForSuperset" (formula "21") (term "1") (ifseqformula "13") (userinteraction))
                                 (rule "applyOnRigidFormula" (formula "21"))
                                 (rule "elimEventOnRigidFormula1" (formula "21") (term "0"))
                                 (rule "subsetOfUnionWithItSelfEQ2" (formula "21") (term "0") (ifseqformula "3"))
                                 (rule "ifthenelse_true_for" (formula "21"))
                                 (rule "closeTrue" (formula "21"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "noReadAndNoRaW" (formula "19") (term "1") (userinteraction))
                           (rule "applyOnRigidFormula" (formula "19"))
                           (rule "applyOnRigidFormula" (formula "19") (term "0"))
                           (rule "ifthenelse_split_for" (formula "19"))
                           (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) TRUE"
                              (rule "closeTrue" (formula "20"))
                           )
                           (branch " {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noR(arrayRange_2) | {eventStar(timestamp_0, anon_MemAcc_LOOP<<anonHeapFunction>>)} noW(arrayRange_2) FALSE"
                              (rule "orRight" (formula "19"))
                              (rule "noWriteKnownForSuperset" (formula "20") (term "1") (ifseqformula "12") (userinteraction))
                              (rule "applyOnRigidFormula" (formula "20"))
                              (rule "elimEventOnRigidFormula1" (formula "20") (term "0"))
                              (rule "subsetOfUnionWithItSelfEQ2" (formula "20") (term "0") (ifseqformula "2"))
                              (rule "ifthenelse_true_for" (formula "20"))
                              (rule "closeTrue" (formula "20"))
                           )
                        )
                     )
                     (branch "CUT: arrayRange(array, 0, i_0 - 1) cup arrayRange(array, i_0, i_0) = arrayRange(array, 0, i_0) FALSE"
                        (rule "polySimp_elimSub" (formula "14") (term "2,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,2,0,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "2,0,0"))
                        (rule "applyEq" (formula "14") (term "1,2,0,0") (ifseqformula "7"))
                        (rule "add_zero_right" (formula "14") (term "2,0,0"))
                        (rule "applyEq" (formula "14") (term "2,1,0") (ifseqformula "7"))
                        (rule "applyEq" (formula "14") (term "1,1,0") (ifseqformula "7"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "7"))
                        (rule "eqSymm" (formula "14"))
                        (rule "applyEq" (formula "14") (term "1") (ifseqformula "1"))
                        (rule "commuteUnion" (formula "14") (term "0"))
                        (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
                        (rule "allRight" (formula "14") (inst "sk=ov_0"))
                        (rule "allRight" (formula "14") (inst "sk=fv_0"))
                        (rule "elementOfArrayRangeEQ" (formula "14") (term "1") (inst "iv=iv") (ifseqformula "1"))
                        (rule "eqSymm" (formula "14") (term "0,0,0,1,1"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1,1"))
                        (rule "elementOfUnion" (formula "14") (term "0"))
                        (rule "elementOfArrayRangeEQ" (formula "14") (term "0,0") (inst "iv=iv") (ifseqformula "1"))
                        (rule "eqSymm" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "elementOfArrayRange" (formula "14") (term "1,0") (inst "iv=iv"))
                        (rule "eqSymm" (formula "14") (term "0,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1,1,0"))
                        (rule "equiv_right" (formula "14"))
                        (branch "Case 1"
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "15"))
                           (rule "concrete_or_2" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "exLeft" (formula "2") (inst "sk=iv_0"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "eqSymm" (formula "2"))
                           (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                           (rule "concrete_and_1" (formula "18"))
                           (rule "applyEq" (formula "18") (term "1,0,0,0") (ifseqformula "2"))
                           (rule "equalUnique" (formula "18") (term "0,0,0"))
                           (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                           (rule "concrete_and_2" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch "Case 2"
                           (rule "orRight" (formula "15"))
                           (rule "close" (formula "15") (ifseqformula "1"))
                        )
                     )
                  )
               )
            )
         )
      )
   )
   (branch "Null Reference (_array = null)"
      (rule "false_right" (formula "15"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyUpdateParallelToEventStarOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "elimEventOnRigidTerm1" (formula "1") (term "1"))
      (rule "close" (formula "14") (ifseqformula "1"))
   )
)
)
}
