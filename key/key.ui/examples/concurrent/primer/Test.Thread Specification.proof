\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jul 21 14:37:28 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:off , concurrency-concurrency\\:RG , permissions-permissions\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Tue Jul 21 14:37:28 CEST 2015
threadSpec=JML Thread Specification for Test
name=Test.Thread Specification
class=de.uka.ilkd.key.proof.init.GuaranteePO
";

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "2228401523")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "impRight" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "4"))
(rule "polySimp_elimSub" (formula "9") (term "1,0,1,1,1,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,1,0,1,1,1,1,0,0,1"))
(rule "polySimp_elimSub" (formula "9") (term "1,0,0,1,0,0,0,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,1,0,0,1,0,0,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "1,0,1,1,1,1,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "1,0,0,1,0,0,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0,1"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "9") (term "0,1,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,1,1,0,0,1"))
(rule "add_literals" (formula "9") (term "0,0,0,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "2"))
(rule "times_zero_1" (formula "2") (term "1,0,0"))
(rule "add_zero_right" (formula "2") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "9") (term "1,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,1,0,0,1"))
(rule "polySimp_addComm1" (formula "9") (term "0,1,1,1,0,0,1"))
(rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
(rule "applyEq" (formula "6") (term "1,0") (ifseqformula "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,1,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,1,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2"))
(rule "mul_literals" (formula "2") (term "1"))
(rule "inEqSimp_sepNegMonomial1" (formula "7") (term "1,1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "0,1,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "0,1,1,1,0,0,1"))
(rule "elementOfUnion" (formula "7") (term "0,0,0,0,1,0,0,1"))
(rule "elementOfSingleton" (formula "7") (term "1,0,0,0,0,1,0,0,1"))
(rule "elementOfSetMinus" (formula "7") (term "0,0,0,0,0,1,0,0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "elementOfSingleton" (formula "7") (term "0,0,0,0,0,0,1,0,0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "nnf_imp2or" (formula "7") (term "0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,0,1"))
(rule "nnf_notAnd" (formula "7") (term "0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0,0,1"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "7") (term "0,0,0,0,0,0,1"))
(rule "methodCallUnfoldTarget" (formula "7") (term "1") (inst "#v0=r"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "r"))
(rule "assignment_read_final_attribute" (formula "7"))
(branch "Normal Execution (thread != null)"
   (builtin "One Step Simplification" (formula "7"))
   (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "3"))
   (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "7"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "methodCall" (formula "8"))
   (branch "Normal Execution (r != null )"
      (rule "ifElseSplit" (formula "8"))
      (branch "if r instanceof Test true"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
         (rule "true_left" (formula "1"))
         (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_run,savedHeapBefore_run"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "compound_assignment_op_mul_attr" (formula "8") (term "1") (inst "#v=t"))
         (rule "variableDeclarationAssign" (formula "8") (term "1"))
         (rule "variableDeclaration" (formula "8") (term "1") (newnames "t"))
         (rule "assignment" (formula "8") (term "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "castDel" (formula "8") (term "0,1,0"))
         (rule "eval_order_access4" (formula "8") (inst "#v1=x") (inst "#v0=t_1"))
         (branch "Normal Execution (t != null)"
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "t_1"))
            (rule "assignment" (formula "8") (term "1"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
            (rule "compound_int_cast_expression" (formula "8") (term "1") (inst "#v=x_1"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
            (rule "remove_parentheses_right" (formula "8") (term "1"))
            (rule "compound_multiplication_1" (formula "8") (term "1") (inst "#v=x_2"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
            (rule "Rely_Test_assignmentReadAttributeUpdate" (formula "8") (ifseqformula "6"))
            (branch "Normal Execution (t != null)"
               (builtin "One Step Simplification" (formula "8"))
               (rule "pullOutSelect" (formula "8") (term "0,1,1,1,1,0") (inst "selectSK=Test_x_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "6")))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "9") (term "0,1,1,1,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "translateJavaMulInt" (formula "8") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "8") (term "1"))
               (rule "assignment" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "assignment_write_attribute" (formula "8"))
               (branch "Normal Execution (t_1 != null)"
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "methodCallEmpty" (formula "8") (term "1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "tryEmpty" (formula "8") (term "1"))
                  (rule "methodCallEmpty" (formula "8") (term "1"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "Rely_Test_EmptyModalityUpdate" (formula "8") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "allRight" (formula "8") (inst "sk=i_0"))
                  (rule "orRight" (formula "8"))
                  (rule "orRight" (formula "8"))
                  (rule "notRight" (formula "9"))
                  (rule "orRight" (formula "9"))
                  (rule "lenOfSeqConcat" (formula "10") (term "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_addComm0" (formula "10") (term "1"))
                  (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_addComm0" (formula "10") (term "1,1"))
                  (rule "polySimp_addAssoc" (formula "10") (term "1"))
                  (rule "add_literals" (formula "10") (term "0,1"))
                  (rule "lenOfSeqConcat" (formula "10") (term "1,1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "add_literals" (formula "10") (term "1,1"))
                  (rule "add_literals" (formula "10") (term "1"))
                  (rule "inEqSimp_leqRight" (formula "9"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_geqRight" (formula "10"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "getOfSeqConcat" (formula "11") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,0,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,0,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,1,2,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,2,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,1,1,2,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,2,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,2,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,1,2,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,1,0,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "1,0,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,1,2,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "0,1,1,2,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,1,2,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,1,2,0,1,1,1"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,0,1,1,1"))
                  (rule "castDel" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,1"))
                  (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1"))
                  (rule "mul_literals" (formula "11") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1"))
                  (rule "getOfSeqConcat" (formula "3") (term "0"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,2,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,0,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,1,2,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,2,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,1,1,2,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,2,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,1,2,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "1,2,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,1,2,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,1,0,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "add_literals" (formula "3") (term "1,0,0"))
                  (rule "getOfSeqSingleton" (formula "3") (term "2,0"))
                  (rule "castDel" (formula "3") (term "1,2,0"))
                  (rule "castDel" (formula "3") (term "2,2,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,2,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "add_literals" (formula "3") (term "0,1,0,0,2,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,2,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0,2,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "3") (term "0,2,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,2,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0"))
                  (rule "getOfSeqConcat" (formula "11") (term "0,0,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,0,0,0"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,0,0,0,0"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,0,0,0"))
                  (rule "castDel" (formula "11") (term "1,2,0,0,0"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,1,0,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,0,0"))
                  (rule "add_literals" (formula "11") (term "1,0,0,0,0"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,0,0,2,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,2,0,0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,2,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,2,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,2,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,2,0,0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,0,0,2,0,0,0"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,0,0,2,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "0,1,0,0,2,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,2,0,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,2,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,2,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                  (rule "getOfSeqConcat" (formula "3") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,2,1,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,0,1,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "add_literals" (formula "3") (term "1,0,1,0"))
                  (rule "getOfSeqSingleton" (formula "3") (term "2,1,0"))
                  (rule "castDel" (formula "3") (term "2,2,1,0"))
                  (rule "castDel" (formula "3") (term "1,2,1,0"))
                  (rule "lenOfSeqConcat" (formula "3") (term "0,1,0,0,2,1,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "add_literals" (formula "3") (term "0,1,0,0,2,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,2,1,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "0,0,2,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,1,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "3") (term "0,2,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,2,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,1,0"))
                  (rule "getOfSeqConcat" (formula "11") (term "1,0,0,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,1,0,0,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,0,1,0,0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "1,0,1,0,0,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,1,2,1,0,0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "0,1,1,2,1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,1,2,1,0,0,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,2,1,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,1,0,0,1"))
                  (rule "castDel" (formula "11") (term "1,2,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,1,0,0,1"))
                  (rule "getOfSeqConcat" (formula "3") (term "1,1,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,2,1,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,1,2,1,1,0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,2,1,1,0"))
                  (rule "getOfSeqSingleton" (formula "3") (term "1,1,1,0"))
                  (rule "castDel" (formula "3") (term "2,1,1,1,0"))
                  (rule "castDel" (formula "3") (term "1,1,1,1,0"))
                  (rule "getOfSeqSingleton" (formula "3") (term "2,1,1,0"))
                  (rule "castDel" (formula "3") (term "1,2,1,1,0"))
                  (rule "castDel" (formula "3") (term "2,2,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,1,1,0"))
                  (rule "add_zero_left" (formula "3") (term "0,0,1,1,0"))
                  (rule "polySimp_sepPosMonomial" (formula "3") (term "0,2,1,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,2,1,1,0"))
                  (rule "inEqSimp_contradEq7" (formula "3") (term "0,1,1,1,0") (ifseqformula "2"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0,0,1,1,1,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1,0"))
                  (rule "leq_literals" (formula "3") (term "0,0,1,1,1,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (term "0,1,1,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "3") (term "0,0,1,1,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "getOfSeqConcat" (formula "11") (term "1,1,0,0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,1,1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,1,2,1,1,0,0,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,2,1,1,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "11") (term "1,1,1,0,0,1"))
                  (rule "castDel" (formula "11") (term "1,1,1,1,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,1,1,0,0,1"))
                  (rule "castDel" (formula "11") (term "1,2,1,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,0,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,1,0,0,1"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,1,0,0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,1,1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,1,1,0,0,1"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "0,1,1,1,0,0,1") (ifseqformula "2"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,1,1,0,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,1,1,1,0,0,1"))
                  (rule "leq_literals" (formula "11") (term "0,0,1,1,1,0,0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "0,1,1,0,0,1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "11") (term "0,0,1,1,0,0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "getOfSeqConcat" (formula "11") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,0,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,0,0,1,1,1"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,0,1,1,1"))
                  (rule "castDel" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,1,0,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "1,0,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,0,0,2,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,2,0,1,1,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0,2,0,1,1,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,2,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,2,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,2,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,0,2,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,2,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,0,0,2,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "0,1,0,0,2,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,2,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,2,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,2,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,1"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,1,0,1"))
                  (rule "replace_known_left" (formula "11") (term "0,0,1,0,1") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,1"))
                  (rule "getOfSeqConcat" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,1,0,0,0"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,0,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "1,0,1,0,0,0"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,1,2,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "0,1,1,2,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,2,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,2,1,0,0,0"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,1,0,0,0"))
                  (rule "castDel" (formula "11") (term "1,2,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,1,0,0,0"))
                  (rule "getOfSeqConcat" (formula "11") (term "0,1,1,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "1,0,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "1,0,0,1,1,1"))
                  (rule "lenOfSeqConcat" (formula "11") (term "0,1,1,2,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "add_literals" (formula "11") (term "0,1,1,2,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,1,2,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,1,2,0,1,1,1"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,0,1,1,1"))
                  (rule "castDel" (formula "11") (term "1,2,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,1"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,1,0,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,1"))
                  (rule "getOfSeqConcat" (formula "11") (term "1,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,2,1,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,2,1,1,0,0,0"))
                  (rule "getOfSeqSingleton" (formula "11") (term "1,1,1,0,0,0"))
                  (rule "castDel" (formula "11") (term "1,1,1,1,0,0,0"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,1,1,0,0,0"))
                  (rule "castDel" (formula "11") (term "1,2,1,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,1,0,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,1,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,1,1,0,0,0"))
                  (rule "inEqSimp_contradEq7" (formula "11") (term "0,1,1,1,0,0,0") (ifseqformula "2"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,1,1,1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,1,1,1,0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,0,1,1,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "0,1,1,0,0,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "11") (term "0,0,1,1,0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "getOfSeqConcat" (formula "11") (term "1,0,1,1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,2,1,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,1,2,1,0,1,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "1,2,1,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,1,2,1,0,1,1,1"))
                  (rule "getOfSeqSingleton" (formula "11") (term "1,1,0,1,1,1"))
                  (rule "castDel" (formula "11") (term "1,1,1,0,1,1,1"))
                  (rule "getOfSeqSingleton" (formula "11") (term "2,1,0,1,1,1"))
                  (rule "castDel" (formula "11") (term "1,2,1,0,1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,0,1,1,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,1,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,1,1,1"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,1,1,1"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,2,1,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,2,1,0,1,0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,1,1,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,1,1,0,1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,1,0,1,0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,1,0,1,0,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,1"))
                  (rule "pullOutSelect" (formula "11") (term "0,0") (inst "selectSK=Test_x_1"))
                  (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "12") (term "1"))
                  (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1"))
                  (rule "pullOutSelect" (formula "12") (term "0,1") (inst "selectSK=Test_x_2"))
                  (rule "ifthenelse_split" (formula "5") (term "0"))
                  (branch "i_0 ≤ 2 TRUE"
                     (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "5"))
                     (rule "leq_literals" (formula "3") (term "0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Test_x_3"))
                     (rule "applyEqReverse" (formula "14") (term "1,1,1") (ifseqformula "3"))
                     (rule "applyEqReverse" (formula "14") (term "0,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "inEqSimp_homoInEq0" (formula "13") (term "1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1"))
                     (rule "mul_literals" (formula "13") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Test_x_4"))
                     (rule "applyEqReverse" (formula "14") (term "1,1,1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "13") (term "1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1"))
                     (rule "mul_literals" (formula "13") (term "0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1"))
                     (rule "ifthenelse_split" (formula "5") (term "0"))
                     (branch "i_0 ≤ 1 TRUE"
                        (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "5"))
                        (rule "leq_literals" (formula "4") (term "0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "4"))
                        (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "replaceKnownSelect_taclet00000_0" (formula "2") (term "0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000_1" (formula "2") (term "0"))
                        (rule "applyEqReverse" (formula "14") (term "1,1,1") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "14") (term "0,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                     (branch "i_0 ≤ 1 FALSE"
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_leqRight" (formula "12"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                        (rule "leq_literals" (formula "4") (term "0"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "4"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "replaceKnownSelect_taclet00000_0" (formula "3") (term "0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000_1" (formula "3") (term "0"))
                        (rule "applyEqReverse" (formula "14") (term "0,1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "simplifySelectOfStore" (formula "3"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "castDel" (formula "3") (term "0"))
                        (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "3"))
                        (rule "applyEqReverse" (formula "13") (term "1,1,1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                        (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,1"))
                        (rule "add_literals" (formula "11") (term "1,1,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,0,1"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                        (rule "leq_literals" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1"))
                        (rule "mul_literals" (formula "9") (term "1,1"))
                        (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "inEqSimp_geqRight" (formula "9"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_contradInEq5" (formula "1") (ifseqformula "5"))
                        (rule "greater_literals" (formula "1") (term "0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1,0"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "i_0 ≤ 2 FALSE"
                     (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_leqRight" (formula "12"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
                     (rule "leq_literals" (formula "5") (term "0"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "4"))
                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "simplifySelectOfAnon" (formula "4"))
                     (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "13")) (ifInst ""  (formula "11")))
                     (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "closeFalse" (formula "6"))
                  )
               )
               (branch "Null Reference (t_1 = null)"
                  (builtin "One Step Simplification" (formula "9"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (t = null)"
               (builtin "One Step Simplification" (formula "9"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (t = null)"
            (builtin "One Step Simplification" (formula "9"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if r instanceof Test false"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (r = null)"
      (rule "false_right" (formula "9"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Null Reference (thread = null)"
   (rule "false_right" (formula "8"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
   (rule "closeFalse" (formula "1"))
)
)

}
