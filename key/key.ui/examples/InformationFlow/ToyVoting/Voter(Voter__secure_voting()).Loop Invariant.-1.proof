\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 18 11:46:21 CEST 2020
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=javaLoopTreatment-javaLoopTreatment\\:efficient , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , moreSeqRules-moreSeqRules\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\problem {
{heap:=heap_Before_LOOP<<anonHeapFunction>>}
  !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)
    & heap = heap_Before_LOOP<<anonHeapFunction>>
    & !self = null
    &   boolean::select(heap,
                        self,
                        java.lang.Object::<created>)
      = TRUE
    & Voter::exactInstance(self) = TRUE
    & inInt(i_Before)
    & ((  (leq(Z(0(#)), i_Before)<<origin("loop_invariant @ file Voter.java @ line 35","[]")>>
        & leq(i_Before,
              Voter.low_NUM_OF_VOTERS<<origin("loop_invariant @ file Voter.java @ line 35","[]")>>)<<origin("loop_invariant @ file Voter.java @ line 35","[]")>>)<<SC,
                                                                                                                                                                   origin("loop_invariant @ file Voter.java @ line 35","[]")>>
        & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,
                                  self))<<SC>>)
    & {self:=self || i:=i_Before}
        (  \[{method-frame(source=secure_voting()@Voter,this=self): {
                 b=i<low_NUM_OF_VOTERS;
               }
             }\] (  b = b_Before
                  & (   b_Before = TRUE
                     -> \<{method-frame(source=secure_voting()@Voter,this=self): { {
                                int high_vote = inputVote(); {
                                  if (isValid(high_vote)) {
                                    this.high_voteValid=true;
                                    this.low_sendSuccessful=sendVote(high_vote);
                                  }
                                  else  {
                                    this.high_voteValid=false;
                                    this.low_sendSuccessful=sendVote(0);
                                  }
                                } {
                                  low_numOfVotes=(this.low_sendSuccessful ?low_numOfVotes+1 :low_numOfVotes);
                                }
                              }
                              i++;
                            }
                          }\> (  self_After_LOOP = self
                               & \[{method-frame(source=secure_voting()@Voter,this=self): {
                                       b=i<low_NUM_OF_VOTERS;
                                     }
                                   }\] b_After = b
                               & i_After = i
                               & heap_After_LOOP = heap)))
         & (   b_Before = FALSE
            ->   self_After_LOOP = self
               & \[{method-frame(source=secure_voting()@Voter,this=self): {
                       b=i<low_NUM_OF_VOTERS;
                     }
                   }\] b_After = b
               & i_After = i
               & heap_After_LOOP = heap)))

}

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "47a02b8a40"))

(autoModeTime "3457")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "variableDeclarationAssign" (formula "7") (term "1,1,0,1"))
(rule "variableDeclaration" (formula "7") (term "1,1,0,1") (newnames "high_vote"))
(rule "boxToDiamond" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "Class_invariant_axiom_for_Voter" (formula "6") (ifseqformula "3"))
(rule "true_left" (formula "6"))
(rule "commute_and_2" (formula "6") (term "1"))
(rule "commute_and_2" (formula "6") (term "0,1"))
(rule "less_than_comparison_simple" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodCallEmpty" (formula "7") (term "1"))
(rule "emptyModality" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "notRight" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "1"))
(rule "cut_direct" (formula "8") (term "0,0"))
(branch "CUT: b_Before = TRUE TRUE"
    (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "diamondToBox" (formula "2") (term "1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "notLeft" (formula "2"))
    (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_inputVote,result,exc_0,heapAfter_inputVote,anon_heap_inputVote") (contract "Voter[Voter::inputVote()].JML normal_behavior operation contract.0"))
   (branch "Post (inputVote)"
       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")))
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "assignment" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "Class_invariant_axiom_for_Voter" (formula "11") (ifseqformula "4"))
      (rule "true_left" (formula "11"))
      (rule "Class_invariant_axiom_for_Voter" (formula "12") (ifseqformula "4"))
      (rule "true_left" (formula "12"))
      (rule "elim_double_block_9" (formula "12") (term "1"))
      (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
       (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_isValid,result_0,exc_1,heapAfter_isValid,anon_heap_isValid") (contract "Voter[Voter::isValid(int)].JML normal_behavior operation contract.0"))
      (branch "Post (isValid)"
          (builtin "One Step Simplification" (formula "14"))
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "15"))
         (rule "assignment" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "Class_invariant_axiom_for_Voter" (formula "15") (ifseqformula "4"))
         (rule "true_left" (formula "15"))
         (rule "Class_invariant_axiom_for_Voter" (formula "16") (ifseqformula "4"))
         (rule "true_left" (formula "16"))
         (rule "ifElseSplit" (formula "17"))
         (branch "if x true"
             (builtin "One Step Simplification" (formula "18"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "assignment_write_attribute_this" (formula "18"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "eval_order_access4_this" (formula "18") (term "1") (inst "#v1=x"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
             (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_sendVote,result_1,exc_2,heapAfter_sendVote,anon_heap_sendVote") (contract "Voter[Voter::sendVote(int)].JML normal_behavior operation contract.0"))
            (branch "Post (sendVote)"
                (builtin "One Step Simplification" (formula "21"))
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "19"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "andLeft" (formula "21"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "21"))
               (rule "assignment" (formula "25") (term "1"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "assignment_write_attribute_this" (formula "25"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "blockEmpty" (formula "25") (term "1"))
               (rule "activeUseStaticFieldWriteAccess" (formula "25") (term "1") (inst "#v0=x"))
               (rule "variableDeclarationAssign" (formula "25") (term "1"))
               (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_2"))
               (rule "Class_invariant_axiom_for_Voter" (formula "21") (ifseqformula "5"))
               (rule "true_left" (formula "21"))
               (rule "Class_invariant_axiom_for_Voter" (formula "22") (ifseqformula "5"))
               (rule "true_left" (formula "22"))
               (rule "remove_parentheses_right" (formula "23") (term "1"))
               (rule "condition" (formula "23") (term "1"))
               (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_3"))
               (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_3"))
               (rule "assignment_read_attribute_this" (formula "23"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=Voter_low_sendSuccessful_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "0"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00000_4" (formula "23") (term "0,1,0"))
               (rule "ifElseSplit" (formula "23"))
               (branch "if x_3 true"
                   (builtin "One Step Simplification" (formula "24"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "compound_addition_1" (formula "24") (term "1") (inst "#v=x_3"))
                  (rule "variableDeclarationAssign" (formula "24") (term "1"))
                  (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_4"))
                  (rule "activeUseStaticFieldReadAccess" (formula "24") (term "1"))
                  (rule "assignment_read_static_attribute" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                  (rule "pullOutSelect" (formula "24") (term "0,1,0") (inst "selectSK=Voter_low_numOfVotes_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000000_6" (formula "24") (term "0,1,0"))
                  (rule "assignmentAdditionInt" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                  (rule "blockEmpty" (formula "24") (term "1"))
                  (rule "assignment_write_static_attribute" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "blockEmpty" (formula "24") (term "1"))
                  (rule "postincrement" (formula "24") (term "1"))
                  (rule "compound_int_cast_expression" (formula "24") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "24") (term "1"))
                  (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_5"))
                  (rule "remove_parentheses_right" (formula "24") (term "1"))
                  (rule "assignmentAdditionInt" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "24") (term "1"))
                  (rule "assignment" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "methodCallEmpty" (formula "24") (term "1"))
                  (rule "emptyModality" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "notRight" (formula "24"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "4"))
                  (rule "boxToDiamond" (formula "2") (term "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "less_than_comparison_simple" (formula "27") (term "1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "methodCallEmpty" (formula "27") (term "1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "emptyModality" (formula "27") (term "1"))
                   (opengoal "{heap:=heap_Before_LOOP<<anonHeapFunction>>}   !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)     & heap = heap_Before_LOOP<<anonHeapFunction>>     & !self = null     &   boolean::select(heap,                         self,                         java.lang.Object::<created>)       = TRUE     & Voter::exactInstance(self) = TRUE     & inInt(i_Before)     & ((  (leq(Z(0(#)), i_Before)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & leq(i_Before,               Voter.low_NUM_OF_VOTERS<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<SC,                                                                                                                                                                    origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   self))<<SC>>)     & {self:=self || i:=i_Before}         (  \\[{method-frame(source=secure_voting()@Voter,this=self): {                  b=i<low_NUM_OF_VOTERS;                }              }\\] (  b = b_Before                   & (   b_Before = TRUE                      -> \\<{method-frame(source=secure_voting()@Voter,this=self): { {                                 int high_vote = inputVote(); {                                   if (isValid(high_vote)) {                                     this.high_voteValid=true;                                     this.low_sendSuccessful=sendVote(high_vote);                                   }                                   else  {                                     this.high_voteValid=false;                                     this.low_sendSuccessful=sendVote(0);                                   }                                 } {                                   low_numOfVotes=(this.low_sendSuccessful ?low_numOfVotes+1 :low_numOfVotes);                                 }                               }                               i++;                             }                           }\\> (  self_After_LOOP = self                                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                                        b=i<low_NUM_OF_VOTERS;                                      }                                    }\\] b_After = b                                & i_After = i                                & heap_After_LOOP = heap)))          & (   b_Before = FALSE             ->   self_After_LOOP = self                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                        b=i<low_NUM_OF_VOTERS;                      }                    }\\] b_After = b                & i_After = i                & heap_After_LOOP = heap))) ")
               )
               (branch "if x_3 false"
                   (builtin "One Step Simplification" (formula "24"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "activeUseStaticFieldReadAccess" (formula "24") (term "1"))
                  (rule "assignment_read_static_attribute" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                  (rule "pullOutSelect" (formula "24") (term "0,1,0") (inst "selectSK=Voter_low_numOfVotes_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100000_6" (formula "24") (term "0,1,0"))
                  (rule "blockEmpty" (formula "24") (term "1"))
                  (rule "assignment_write_static_attribute" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "blockEmpty" (formula "24") (term "1"))
                  (rule "apply_eq_boolean" (formula "24") (term "3,0,0,1,0") (ifseqformula "23"))
                  (rule "apply_eq_boolean" (formula "21") (term "4") (ifseqformula "23"))
                  (rule "postincrement" (formula "24") (term "1"))
                  (rule "compound_int_cast_expression" (formula "24") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "24") (term "1"))
                  (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_4"))
                  (rule "remove_parentheses_right" (formula "24") (term "1"))
                  (rule "assignmentAdditionInt" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "24") (term "1"))
                  (rule "assignment" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "methodCallEmpty" (formula "24") (term "1"))
                  (rule "emptyModality" (formula "24") (term "1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "notRight" (formula "24"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "4"))
                  (rule "boxToDiamond" (formula "2") (term "1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "less_than_comparison_simple" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "emptyModality" (formula "26") (term "1"))
                   (opengoal "{heap:=heap_Before_LOOP<<anonHeapFunction>>}   !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)     & heap = heap_Before_LOOP<<anonHeapFunction>>     & !self = null     &   boolean::select(heap,                         self,                         java.lang.Object::<created>)       = TRUE     & Voter::exactInstance(self) = TRUE     & inInt(i_Before)     & ((  (leq(Z(0(#)), i_Before)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & leq(i_Before,               Voter.low_NUM_OF_VOTERS<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<SC,                                                                                                                                                                    origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   self))<<SC>>)     & {self:=self || i:=i_Before}         (  \\[{method-frame(source=secure_voting()@Voter,this=self): {                  b=i<low_NUM_OF_VOTERS;                }              }\\] (  b = b_Before                   & (   b_Before = TRUE                      -> \\<{method-frame(source=secure_voting()@Voter,this=self): { {                                 int high_vote = inputVote(); {                                   if (isValid(high_vote)) {                                     this.high_voteValid=true;                                     this.low_sendSuccessful=sendVote(high_vote);                                   }                                   else  {                                     this.high_voteValid=false;                                     this.low_sendSuccessful=sendVote(0);                                   }                                 } {                                   low_numOfVotes=(this.low_sendSuccessful ?low_numOfVotes+1 :low_numOfVotes);                                 }                               }                               i++;                             }                           }\\> (  self_After_LOOP = self                                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                                        b=i<low_NUM_OF_VOTERS;                                      }                                    }\\] b_After = b                                & i_After = i                                & heap_After_LOOP = heap)))          & (   b_Before = FALSE             ->   self_After_LOOP = self                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                        b=i<low_NUM_OF_VOTERS;                      }                    }\\] b_After = b                & i_After = i                & heap_After_LOOP = heap))) ")
               )
            )
            (branch "Exceptional Post (sendVote)"
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "22"))
               (rule "notLeft" (formula "20"))
               (rule "close" (formula "23") (ifseqformula "22"))
            )
            (branch "Pre (sendVote)"
                (builtin "One Step Simplification" (formula "18"))
               (rule "wellFormedStorePrimitive" (formula "18") (term "1"))
               (rule "wellFormedAnonEQ" (formula "18") (term "1") (ifseqformula "14"))
               (rule "wellFormedAnonEQ" (formula "18") (term "0,1") (ifseqformula "10"))
               (rule "replace_known_left" (formula "18") (term "1,0,1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")) (ifInst ""  (formula "13")))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEq" (formula "16") (term "4") (ifseqformula "1"))
               (rule "applyEq" (formula "16") (term "5") (ifseqformula "15"))
               (rule "applyEq" (formula "12") (term "4") (ifseqformula "11"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "2"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "Class_invariant_axiom_for_Voter" (formula "17") (ifseqformula "5"))
               (rule "closeTrue" (formula "17"))
            )
         )
         (branch "if x false"
             (builtin "One Step Simplification" (formula "18"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "assignment_write_attribute_this" (formula "18"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "eval_order_access4" (formula "18") (term "1") (inst "#v1=x") (inst "#v0=v"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "v"))
            (rule "assignment" (formula "18") (term "1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_1"))
            (rule "apply_eq_boolean" (formula "15") (term "4") (ifseqformula "17"))
             (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_sendVote,result_1,exc_2,heapAfter_sendVote,anon_heap_sendVote") (contract "Voter[Voter::sendVote(int)].JML normal_behavior operation contract.0"))
            (branch "Post (sendVote)"
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "19"))
                (builtin "One Step Simplification" (formula "18"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "assignment" (formula "25") (term "1"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "assignment_write_attribute" (formula "25"))
               (branch "Normal Execution (v != null)"
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "blockEmpty" (formula "25") (term "1"))
                  (rule "activeUseStaticFieldWriteAccess" (formula "25") (term "1") (inst "#v0=x"))
                  (rule "variableDeclarationAssign" (formula "25") (term "1"))
                  (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_2"))
                  (rule "Class_invariant_axiom_for_Voter" (formula "20") (ifseqformula "4"))
                  (rule "true_left" (formula "20"))
                  (rule "Class_invariant_axiom_for_Voter" (formula "21") (ifseqformula "4"))
                  (rule "true_left" (formula "21"))
                  (rule "remove_parentheses_right" (formula "23") (term "1"))
                  (rule "condition" (formula "23") (term "1"))
                  (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_3"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_3"))
                  (rule "assignment_read_attribute_this" (formula "23"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "pullOutSelect" (formula "23") (term "0,1,0") (inst "selectSK=Voter_low_sendSuccessful_0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "0"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet001000_4" (formula "23") (term "0,1,0"))
                  (rule "ifElseSplit" (formula "23"))
                  (branch "if x_3 true"
                      (builtin "One Step Simplification" (formula "24"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "compound_addition_1" (formula "24") (term "1") (inst "#v=x_3"))
                     (rule "variableDeclarationAssign" (formula "24") (term "1"))
                     (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_4"))
                     (rule "activeUseStaticFieldReadAccess" (formula "24") (term "1"))
                     (rule "assignment_read_static_attribute" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                     (rule "pullOutSelect" (formula "24") (term "0,1,0") (inst "selectSK=Voter_low_numOfVotes_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0001000_6" (formula "24") (term "0,1,0"))
                     (rule "assignmentAdditionInt" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                     (rule "blockEmpty" (formula "24") (term "1"))
                     (rule "assignment_write_static_attribute" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "blockEmpty" (formula "24") (term "1"))
                     (rule "postincrement" (formula "24") (term "1"))
                     (rule "compound_int_cast_expression" (formula "24") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "24") (term "1"))
                     (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_5"))
                     (rule "remove_parentheses_right" (formula "24") (term "1"))
                     (rule "assignmentAdditionInt" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "24") (term "1"))
                     (rule "assignment" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "methodCallEmpty" (formula "24") (term "1"))
                     (rule "emptyModality" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "notRight" (formula "24"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "eqSymm" (formula "4"))
                     (rule "boxToDiamond" (formula "2") (term "1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "less_than_comparison_simple" (formula "26") (term "1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "methodCallEmpty" (formula "26") (term "1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "emptyModality" (formula "26") (term "1"))
                      (opengoal "{heap:=heap_Before_LOOP<<anonHeapFunction>>}   !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)     & heap = heap_Before_LOOP<<anonHeapFunction>>     & !self = null     &   boolean::select(heap,                         self,                         java.lang.Object::<created>)       = TRUE     & Voter::exactInstance(self) = TRUE     & inInt(i_Before)     & ((  (leq(Z(0(#)), i_Before)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & leq(i_Before,               Voter.low_NUM_OF_VOTERS<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<SC,                                                                                                                                                                    origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   self))<<SC>>)     & {self:=self || i:=i_Before}         (  \\[{method-frame(source=secure_voting()@Voter,this=self): {                  b=i<low_NUM_OF_VOTERS;                }              }\\] (  b = b_Before                   & (   b_Before = TRUE                      -> \\<{method-frame(source=secure_voting()@Voter,this=self): { {                                 int high_vote = inputVote(); {                                   if (isValid(high_vote)) {                                     this.high_voteValid=true;                                     this.low_sendSuccessful=sendVote(high_vote);                                   }                                   else  {                                     this.high_voteValid=false;                                     this.low_sendSuccessful=sendVote(0);                                   }                                 } {                                   low_numOfVotes=(this.low_sendSuccessful ?low_numOfVotes+1 :low_numOfVotes);                                 }                               }                               i++;                             }                           }\\> (  self_After_LOOP = self                                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                                        b=i<low_NUM_OF_VOTERS;                                      }                                    }\\] b_After = b                                & i_After = i                                & heap_After_LOOP = heap)))          & (   b_Before = FALSE             ->   self_After_LOOP = self                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                        b=i<low_NUM_OF_VOTERS;                      }                    }\\] b_After = b                & i_After = i                & heap_After_LOOP = heap))) ")
                  )
                  (branch "if x_3 false"
                      (builtin "One Step Simplification" (formula "24"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "activeUseStaticFieldReadAccess" (formula "24") (term "1"))
                     (rule "assignment_read_static_attribute" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "dismissNonSelectedField" (formula "24") (term "0,1,0"))
                     (rule "pullOutSelect" (formula "24") (term "0,1,0") (inst "selectSK=Voter_low_numOfVotes_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1001000_6" (formula "24") (term "0,1,0"))
                     (rule "blockEmpty" (formula "24") (term "1"))
                     (rule "assignment_write_static_attribute" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "blockEmpty" (formula "24") (term "1"))
                     (rule "apply_eq_boolean" (formula "20") (term "4") (ifseqformula "22"))
                     (rule "apply_eq_boolean" (formula "24") (term "3,0,0,1,0") (ifseqformula "22"))
                     (rule "postincrement" (formula "24") (term "1"))
                     (rule "compound_int_cast_expression" (formula "24") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "24") (term "1"))
                     (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_4"))
                     (rule "remove_parentheses_right" (formula "24") (term "1"))
                     (rule "assignmentAdditionInt" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "translateJavaAddInt" (formula "24") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "24") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "24") (term "1"))
                     (rule "assignment" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "methodCallEmpty" (formula "24") (term "1"))
                     (rule "emptyModality" (formula "24") (term "1"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "notRight" (formula "24"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "eqSymm" (formula "4"))
                     (rule "boxToDiamond" (formula "2") (term "1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "less_than_comparison_simple" (formula "25") (term "1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "methodCallEmpty" (formula "25") (term "1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "emptyModality" (formula "25") (term "1"))
                      (opengoal "{heap:=heap_Before_LOOP<<anonHeapFunction>>}   !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)     & heap = heap_Before_LOOP<<anonHeapFunction>>     & !self = null     &   boolean::select(heap,                         self,                         java.lang.Object::<created>)       = TRUE     & Voter::exactInstance(self) = TRUE     & inInt(i_Before)     & ((  (leq(Z(0(#)), i_Before)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & leq(i_Before,               Voter.low_NUM_OF_VOTERS<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<SC,                                                                                                                                                                    origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   self))<<SC>>)     & {self:=self || i:=i_Before}         (  \\[{method-frame(source=secure_voting()@Voter,this=self): {                  b=i<low_NUM_OF_VOTERS;                }              }\\] (  b = b_Before                   & (   b_Before = TRUE                      -> \\<{method-frame(source=secure_voting()@Voter,this=self): { {                                 int high_vote = inputVote(); {                                   if (isValid(high_vote)) {                                     this.high_voteValid=true;                                     this.low_sendSuccessful=sendVote(high_vote);                                   }                                   else  {                                     this.high_voteValid=false;                                     this.low_sendSuccessful=sendVote(0);                                   }                                 } {                                   low_numOfVotes=(this.low_sendSuccessful ?low_numOfVotes+1 :low_numOfVotes);                                 }                               }                               i++;                             }                           }\\> (  self_After_LOOP = self                                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                                        b=i<low_NUM_OF_VOTERS;                                      }                                    }\\] b_After = b                                & i_After = i                                & heap_After_LOOP = heap)))          & (   b_Before = FALSE             ->   self_After_LOOP = self                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                        b=i<low_NUM_OF_VOTERS;                      }                    }\\] b_After = b                & i_After = i                & heap_After_LOOP = heap))) ")
                  )
               )
               (branch "Null Reference (v = null)"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Exceptional Post (sendVote)"
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,0") (ifseqformula "18"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "andLeft" (formula "19"))
               (rule "notLeft" (formula "19"))
               (rule "close" (formula "22") (ifseqformula "21"))
            )
            (branch "Pre (sendVote)"
                (builtin "One Step Simplification" (formula "18"))
               (rule "wellFormedStorePrimitive" (formula "18") (term "1"))
               (rule "wellFormedAnonEQ" (formula "18") (term "1") (ifseqformula "13"))
               (rule "wellFormedAnonEQ" (formula "18") (term "0,1") (ifseqformula "9"))
               (rule "replace_known_left" (formula "18") (term "1,1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")) (ifInst ""  (formula "8")))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "applyEq" (formula "1") (term "1") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "11") (term "4") (ifseqformula "10"))
               (rule "applyEq" (formula "15") (term "5") (ifseqformula "14"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "1"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "Class_invariant_axiom_for_Voter" (formula "17") (ifseqformula "4"))
               (rule "closeTrue" (formula "17"))
            )
         )
      )
      (branch "Exceptional Post (isValid)"
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "andLeft" (formula "13"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,0") (ifseqformula "13"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "0,1,0") (ifseqformula "9"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "16"))
         (rule "notLeft" (formula "14"))
         (rule "close" (formula "17") (ifseqformula "16"))
      )
      (branch "Pre (isValid)"
          (builtin "One Step Simplification" (formula "12"))
         (rule "wellFormedAnonEQ" (formula "12") (term "1") (ifseqformula "9"))
         (rule "replace_known_left" (formula "12") (term "1,1") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "applyEq" (formula "1") (term "1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEq" (formula "11") (term "4") (ifseqformula "10"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "1"))
         (rule "leq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "Class_invariant_axiom_for_Voter" (formula "11") (ifseqformula "4"))
         (rule "closeTrue" (formula "11"))
      )
   )
   (branch "Exceptional Post (inputVote)"
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1,0") (ifseqformula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "12"))
      (rule "notLeft" (formula "10"))
      (rule "close" (formula "13") (ifseqformula "12"))
   )
   (branch "Pre (inputVote)"
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "applyEq" (formula "1") (term "1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "1"))
      (rule "leq_literals" (formula "6") (term "0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "Class_invariant_axiom_for_Voter" (formula "7") (ifseqformula "4"))
      (rule "closeTrue" (formula "7"))
   )
)
(branch "CUT: b_Before = TRUE FALSE"
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "boxToDiamond" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "notLeft" (formula "8"))
   (rule "less_than_comparison_simple" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "replace_known_right" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "emptyModality" (formula "9") (term "1"))
    (opengoal "{heap:=heap_Before_LOOP<<anonHeapFunction>>}   !(  wellFormed(heap_Before_LOOP<<anonHeapFunction>>)     & heap = heap_Before_LOOP<<anonHeapFunction>>     & !self = null     &   boolean::select(heap,                         self,                         java.lang.Object::<created>)       = TRUE     & Voter::exactInstance(self) = TRUE     & inInt(i_Before)     & ((  (leq(Z(0(#)), i_Before)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & leq(i_Before,               Voter.low_NUM_OF_VOTERS<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>)<<SC,                                                                                                                                                                    origin(\"loop_invariant @ file Voter.java @ line 35\",\"[]\")>>         & java.lang.Object::<inv>(heap_Before_LOOP<<anonHeapFunction>>,                                   self))<<SC>>)     & {self:=self || i:=i_Before}         (  \\[{method-frame(source=secure_voting()@Voter,this=self): {                  b=i<low_NUM_OF_VOTERS;                }              }\\] (  b = b_Before                   & (   b_Before = TRUE                      -> \\<{method-frame(source=secure_voting()@Voter,this=self): { {                                 int high_vote = inputVote(); {                                   if (isValid(high_vote)) {                                     this.high_voteValid=true;                                     this.low_sendSuccessful=sendVote(high_vote);                                   }                                   else  {                                     this.high_voteValid=false;                                     this.low_sendSuccessful=sendVote(0);                                   }                                 } {                                   low_numOfVotes=(this.low_sendSuccessful ?low_numOfVotes+1 :low_numOfVotes);                                 }                               }                               i++;                             }                           }\\> (  self_After_LOOP = self                                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                                        b=i<low_NUM_OF_VOTERS;                                      }                                    }\\] b_After = b                                & i_After = i                                & heap_After_LOOP = heap)))          & (   b_Before = FALSE             ->   self_After_LOOP = self                & \\[{method-frame(source=secure_voting()@Voter,this=self): {                        b=i<low_NUM_OF_VOTERS;                      }                    }\\] b_After = b                & i_After = i                & heap_After_LOOP = heap))) ")
)
)
}
