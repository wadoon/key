\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 18 11:45:27 CEST 2020
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=javaLoopTreatment-javaLoopTreatment\\:efficient , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , moreSeqRules-moreSeqRules\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\problem {
{heap:=heap_Before_BLOCK}
  !(  wellFormed(heap_Before_BLOCK)
    & heap = heap_Before_BLOCK
    & !self = null
    &   boolean::select(heap,
                        self,
                        java.lang.Object::<created>)
      = TRUE
    & Voter::exactInstance(self) = TRUE
    & inInt(high_vote)
    & {self:=self || high_vote:=high_vote}
        \[{method-frame(source=secure_voting()@Voter,this=self): {java.lang.Throwable exc#3 = null;breakOut:try { {
                  if (isValid(high_vote)) {
                    this.high_voteValid=true;
                    this.low_sendSuccessful=sendVote(high_vote);
                  }
                  else  {
                    this.high_voteValid=false;
                    this.low_sendSuccessful=sendVote(0);
                  }
                }
              }     catch (java.lang.Throwable e#15) {
                exc#3=e#15;
              }
            }
          }\] (  self_After_BLOCK = self
               & high_vote = high_vote
               & exc#3_After_BLOCK = exc#3
               & heap_After_BLOCK = heap))

}

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "e42f17dd75"))

(autoModeTime "677")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "variableDeclarationAssign" (formula "4") (term "1"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "exc_1"))
(rule "assignment" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "boxToDiamond" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "ifElseUnfold" (formula "4") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "4") (term "1") (newnames "x"))
 (builtin "Use Operation Contract" (formula "4") (newnames "heapBefore_isValid,result,exc_0,heapAfter_isValid,anon_heap_isValid") (contract "Voter[Voter::isValid(int)].JML normal_behavior operation contract.0"))
(branch "Post (isValid)"
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "assignment" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "Class_invariant_axiom_for_Voter" (formula "7") (ifseqformula "3"))
   (rule "true_left" (formula "7"))
   (rule "Class_invariant_axiom_for_Voter" (formula "8") (ifseqformula "3"))
   (rule "true_left" (formula "8"))
   (rule "ifElseSplit" (formula "8"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "assignment_write_attribute_this" (formula "9"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "eval_order_access4_this" (formula "9") (term "1") (inst "#v1=x"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
       (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_sendVote,result_0,exc_2,heapAfter_sendVote,anon_heap_sendVote") (contract "Voter[Voter::sendVote(int)].JML normal_behavior operation contract.0"))
      (branch "Post (sendVote)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "assignment" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "assignment_write_attribute_this" (formula "16"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "Class_invariant_axiom_for_Voter" (formula "12") (ifseqformula "4"))
         (rule "true_left" (formula "12"))
         (rule "Class_invariant_axiom_for_Voter" (formula "13") (ifseqformula "4"))
         (rule "true_left" (formula "13"))
         (rule "tryEmpty" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "blockEmptyLabel" (formula "14") (term "1"))
         (rule "blockEmpty" (formula "14") (term "1"))
         (rule "methodCallEmpty" (formula "14") (term "1"))
         (rule "emptyModality" (formula "14") (term "1"))
          (opengoal "{heap:=heap_Before_BLOCK}   !(  wellFormed(heap_Before_BLOCK)     & heap = heap_Before_BLOCK     & !self = null     &   boolean::select(heap,                         self,                         java.lang.Object::<created>)       = TRUE     & Voter::exactInstance(self) = TRUE     & inInt(high_vote)     & {self:=self || high_vote:=high_vote}         \\[{method-frame(source=secure_voting()@Voter,this=self): {java.lang.Throwable exc#3 = null;breakOut:try { {                   if (isValid(high_vote)) {                     this.high_voteValid=true;                     this.low_sendSuccessful=sendVote(high_vote);                   }                   else  {                     this.high_voteValid=false;                     this.low_sendSuccessful=sendVote(0);                   }                 }               }     catch (java.lang.Throwable e#15) {                 exc#3=e#15;               }             }           }\\] (  self_After_BLOCK = self                & high_vote = high_vote                & exc#3_After_BLOCK = exc#3                & heap_After_BLOCK = heap)) ")
      )
      (branch "Exceptional Post (sendVote)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "11"))
         (rule "close" (formula "14") (ifseqformula "13"))
      )
      (branch "Pre (sendVote)"
          (builtin "One Step Simplification" (formula "9"))
         (rule "wellFormedStorePrimitive" (formula "9") (term "1"))
         (rule "wellFormedAnonEQ" (formula "9") (term "1") (ifseqformula "6"))
         (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "5")))
         (rule "applyEq" (formula "8") (term "4") (ifseqformula "1"))
         (rule "applyEq" (formula "8") (term "5") (ifseqformula "7"))
         (rule "Class_invariant_axiom_for_Voter" (formula "9") (ifseqformula "4"))
         (rule "closeTrue" (formula "9"))
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "assignment_write_attribute_this" (formula "9"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "eval_order_access4" (formula "9") (term "1") (inst "#v1=x") (inst "#v0=v"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "v"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
      (rule "apply_eq_boolean" (formula "7") (term "4") (ifseqformula "8"))
       (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_sendVote,result_0,exc_2,heapAfter_sendVote,anon_heap_sendVote") (contract "Voter[Voter::sendVote(int)].JML normal_behavior operation contract.0"))
      (branch "Post (sendVote)"
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "assignment" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "assignment_write_attribute" (formula "16"))
         (branch "Normal Execution (v != null)"
             (builtin "One Step Simplification" (formula "16"))
            (rule "Class_invariant_axiom_for_Voter" (formula "11") (ifseqformula "3"))
            (rule "true_left" (formula "11"))
            (rule "Class_invariant_axiom_for_Voter" (formula "12") (ifseqformula "3"))
            (rule "true_left" (formula "12"))
            (rule "tryEmpty" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "blockEmptyLabel" (formula "14") (term "1"))
            (rule "blockEmpty" (formula "14") (term "1"))
            (rule "methodCallEmpty" (formula "14") (term "1"))
            (rule "emptyModality" (formula "14") (term "1"))
             (opengoal "{heap:=heap_Before_BLOCK}   !(  wellFormed(heap_Before_BLOCK)     & heap = heap_Before_BLOCK     & !self = null     &   boolean::select(heap,                         self,                         java.lang.Object::<created>)       = TRUE     & Voter::exactInstance(self) = TRUE     & inInt(high_vote)     & {self:=self || high_vote:=high_vote}         \\[{method-frame(source=secure_voting()@Voter,this=self): {java.lang.Throwable exc#3 = null;breakOut:try { {                   if (isValid(high_vote)) {                     this.high_voteValid=true;                     this.low_sendSuccessful=sendVote(high_vote);                   }                   else  {                     this.high_voteValid=false;                     this.low_sendSuccessful=sendVote(0);                   }                 }               }     catch (java.lang.Throwable e#15) {                 exc#3=e#15;               }             }           }\\] (  self_After_BLOCK = self                & high_vote = high_vote                & exc#3_After_BLOCK = exc#3                & heap_After_BLOCK = heap)) ")
         )
         (branch "Null Reference (v = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Exceptional Post (sendVote)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "10") (term "1,0") (ifseqformula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "10"))
         (rule "close" (formula "13") (ifseqformula "12"))
      )
      (branch "Pre (sendVote)"
          (builtin "One Step Simplification" (formula "9"))
         (rule "wellFormedStorePrimitive" (formula "9") (term "1"))
         (rule "wellFormedAnonEQ" (formula "9") (term "1") (ifseqformula "5"))
         (rule "replace_known_left" (formula "9") (term "1,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
         (rule "applyEq" (formula "7") (term "5") (ifseqformula "6"))
         (rule "Class_invariant_axiom_for_Voter" (formula "9") (ifseqformula "3"))
         (rule "closeTrue" (formula "9"))
      )
   )
)
(branch "Exceptional Post (isValid)"
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "close" (formula "9") (ifseqformula "8"))
)
(branch "Pre (isValid)"
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_Voter" (formula "4") (ifseqformula "3"))
   (rule "closeTrue" (formula "4"))
)
)
}
