\rules {
	assignmentStorageLocalFrom {
        	\schemaVar \modalOperator {box_transaction, diamond_transaction, box, diamond} #allmodal;
 		\schemaVar \formula post;
			      
                \schemaVar \program Variable #a;
		\schemaVar \program SimpleExpression #se;
                
		\find ( ==> \modality{#allmodal}{ .. this.#a = #se; ... }\endmodality(post))
		\varcond( /* \isStorage(#v),  */ \not \isReference(\typeof(#se))   )
		\replacewith ( ==> { storage := writeField(storage, #memberPVToField(#a), #se) }
		                        \modality{#allmodal}{ ..  ... }\endmodality(post))
		\heuristics ( simplify_prog_subset, simplify_prog )
		\displayname "assignment"
	};


	eliminateVarStorageDeclaration {
		\schemaVar \modalOperator {box_transaction, diamond_transaction, box, diamond} #allmodal;
                \schemaVar \formula post;

		\schemaVar \program Variable #v, #v0;
		\schemaVar \program Type #tr;
		\schemaVar \program SimpleExpression #se;
		
		\find ( ==> \modality{#allmodal}{ .. final #tr #v; ... }\endmodality(post))
	
		\replacewith ( ==> \modality{#allmodal}{ ..  ... }\endmodality(post) )
		\addprogvars(#v)
		\heuristics ( simplify_prog_subset, simplify_prog )
		\displayname "storage var declaration"
	};

        unfoldStorageDeclaration {
		\schemaVar \modalOperator {box_transaction, diamond_transaction, box, diamond} #allmodal;
                \schemaVar \formula post;

		\schemaVar \program Variable #v;
		\schemaVar \program VariableInitializer #vi;

		\schemaVar \program Type #tr;
		\schemaVar \program SimpleExpression #se;
		
		\find ( ==> \modality{#allmodal}{ .. final #tr #v = #vi; ... }\endmodality(post))
		\varcond( \isStorage(#vi) )
		\replacewith ( ==> \modality{#allmodal}{ .. final #tr #v; #v = #vi; ... }\endmodality(post) )
		\heuristics ( simplify_prog_subset, simplify_prog )
	};
	
	testDataLocation {
         	\schemaVar \modalOperator {box_transaction, diamond_transaction, box, diamond} #allmodal;
 		\schemaVar \formula post;
			      
                \schemaVar \program Variable #v, #a;
		\schemaVar \program SimpleExpression #se;
                
		\find ( ==> \modality{#allmodal}{ .. #v = this.#a; ... }\endmodality(post))
		\varcond( \isStorage(#v) )
		\replacewith ( ==> false )
		\heuristics ( simplify_prog_subset, simplify_prog )
	};


}