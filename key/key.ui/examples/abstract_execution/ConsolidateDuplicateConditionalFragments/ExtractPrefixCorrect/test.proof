\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Nov 01 10:52:00 CET 2019
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_EXTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=8000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\javaSource ".";

\functions {
   \unique LocSet frameP;
   \unique LocSet footprintP;
   \unique LocSet frameE;
   \unique LocSet footprintE;
   Object _result;
}

\predicates {
   Post(Object);
}

\programVariables {
   Object result;
   ConsolidateDuplicateConditionalFragments objUnderTest;
}

\problem {
     !objUnderTest = null
   &   ConsolidateDuplicateConditionalFragments::exactInstance(objUnderTest)
     = TRUE
   & wellFormed(heap)
   & measuredByEmpty
   &   boolean::select(heap,
                       objUnderTest,
                       java.lang.Object::<created>)
     = TRUE
-> (    {result:=_result}
          \<{ try {
                result=objUnderTest.before(result)@ConsolidateDuplicateConditionalFragments;
              }   catch (Throwable t) {
                result=t;
              }
            }\> Post(result)
    <-> {result:=_result}
          \<{ try {
                 result=objUnderTest.after(result)@ConsolidateDuplicateConditionalFragments;
              }   catch (Throwable t) {
                result=t;
              }
            }\> Post(result))

}

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "x.z.y"))

(autoModeTime "99014")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "equiv_right" (formula "6"))
(branch "Case '->'"
   (rule "diamondToBox" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_after,savedHeapBefore_after"))
   (rule "sequentialToParallel2" (formula "7"))
    (builtin "Block Contract (External)" (formula "7") (newnames "result#14,exc#15,heap_Before_BLOCK,savedHeap_Before_BLOCK"))
   (branch "Precondition"
      (rule "simplifyUpdate2" (formula "7"))
      (rule "applyOnSkip" (formula "7") (term "0"))
      (rule "applySkip2" (formula "7"))
      (rule "replace_known_left" (formula "7") (term "1,1") (ifseqformula "1"))
      (rule "concrete_and_3" (formula "7") (term "1"))
      (rule "replace_known_left" (formula "7") (term "1,1") (ifseqformula "4"))
      (rule "concrete_and_3" (formula "7") (term "1"))
      (rule "replace_known_right" (formula "7") (term "0,1") (ifseqformula "6"))
      (rule "concrete_not_2" (formula "7") (term "1"))
      (rule "concrete_and_3" (formula "7"))
      (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "2"))
      (rule "concrete_and_3" (formula "7"))
      (rule "close" (formula "7") (ifseqformula "3"))
   )
   (branch "Usage"
      (rule "neq_or" (formula "5") (term "1,1,1"))
      (rule "concrete_and_3" (formula "5") (term "1,1"))
      (rule "inInt" (formula "5") (term "0,1,1,1"))
      (rule "concrete_and_1" (formula "5") (term "1,1,1"))
      (rule "simplifyUpdate2" (formula "5"))
      (rule "simplifyUpdate3" (formula "5") (term "0"))
      (rule "applySkip2" (formula "5"))
      (rule "simplifyUpdate2" (formula "5"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "6"))
      (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "5"))
      (rule "concrete_or_1" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "sequentialToParallel2" (formula "10"))
      (rule "simplifyUpdate3" (formula "10") (term "1,0"))
      (rule "disjointDefinition" (formula "6"))
      (rule "disjointDefinition" (formula "7"))
      (rule "commuteIntersection" (formula "6") (term "0"))
      (rule "commuteIntersection" (formula "7") (term "0"))
      (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_before,savedHeapBefore_before"))
      (rule "sequentialToParallel2" (formula "8"))
       (builtin "Block Contract (External)" (formula "8") (newnames "result#0,exc#1,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0"))
      (branch "Precondition"
         (rule "simplifyUpdate2" (formula "8"))
         (rule "applyOnSkip" (formula "8") (term "0"))
         (rule "applySkip2" (formula "8"))
         (rule "replace_known_left" (formula "8") (term "1,0,1") (ifseqformula "4"))
         (rule "concrete_and_3" (formula "8") (term "0,1"))
         (rule "replace_known_right" (formula "8") (term "0,0,1") (ifseqformula "9"))
         (rule "concrete_not_2" (formula "8") (term "0,1"))
         (rule "concrete_and_1" (formula "8") (term "1"))
         (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "1"))
         (rule "concrete_and_3" (formula "8"))
         (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "2"))
         (rule "concrete_and_3" (formula "8"))
         (rule "close" (formula "8") (ifseqformula "3"))
      )
      (branch "Usage"
         (rule "neq_or" (formula "8") (term "1,1,1"))
         (rule "concrete_and_3" (formula "8") (term "1,1"))
         (rule "inInt" (formula "8") (term "0,1,1,1"))
         (rule "concrete_and_1" (formula "8") (term "1,1,1"))
         (rule "simplifyUpdate2" (formula "8"))
         (rule "simplifyUpdate3" (formula "8") (term "0"))
         (rule "applySkip2" (formula "8"))
         (rule "simplifyUpdate2" (formula "8"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "9"))
         (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "8"))
         (rule "concrete_or_1" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "sequentialToParallel2" (formula "11"))
         (rule "simplifyUpdate3" (formula "11") (term "1,0"))
         (rule "disjointDefinition" (formula "9"))
         (rule "disjointDefinition" (formula "10"))
         (rule "commuteIntersection" (formula "9") (term "0"))
         (rule "commuteIntersection" (formula "9") (term "0"))
         (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=boolv"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "boolv"))
         (rule "inequality_comparison_simple" (formula "11") (term "1"))
         (rule "sequentialToParallel2" (formula "11"))
         (rule "simplifyUpdate3" (formula "11") (term "1,0"))
         (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "5"))
         (rule "ifthenelse_true" (formula "11") (term "0,1,0"))
         (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=boolv"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv_1"))
         (rule "inequality_comparison_simple" (formula "9") (term "1"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "replace_known_left" (formula "9") (term "0,0,1,0") (ifseqformula "8"))
         (rule "ifthenelse_true" (formula "9") (term "0,1,0"))
          (builtin "simplifyUpdatesAbstract" (formula "11"))
          (builtin "simplifyUpdatesAbstract" (formula "9"))
         (rule "ifSplit" (formula "11"))
         (branch "if boolv true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if boolv false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "9"))
            (rule "simplifyUpdate1" (formula "9") (term "1"))
            (rule "applyOnPV" (formula "9") (term "0"))
            (rule "boolean_not_equal_2" (formula "9"))
            (rule "false_right" (formula "9"))
            (rule "blockEmpty" (formula "11") (term "1"))
            (rule "abstractExecutionNonVoid" (formula "11") (term "1") (inst "#label=_label11") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
            (rule "concrete_and_3" (formula "11") (term "1,1,0,1"))
            (rule "concrete_and_3" (formula "11") (term "1,1,0,1"))
            (rule "concrete_and_3" (formula "11") (term "1,1,0,1"))
            (rule "impRight" (formula "11"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1"))
            (rule "sequentialToParallel2" (formula "14"))
            (rule "applyOnAbstractUpdate" (formula "14") (term "1,0"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "applyOnAbstractUpdate" (formula "3") (term "0"))
            (rule "sequentialToParallel2" (formula "1"))
            (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
            (rule "sequentialToParallel2" (formula "2") (term "1"))
            (rule "simplifyUpdate2" (formula "2") (term "1"))
            (rule "simplifyUpdate3" (formula "2") (term "0,1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "sequentialToParallel2" (formula "14"))
            (rule "simplifyUpdate3" (formula "14") (term "1,0"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "simplifyUpdate3" (formula "3") (term "0"))
            (rule "sequentialToParallel2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate2" (formula "3") (term "0"))
            (rule "simplifyUpdate2" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1"))
            (rule "simplifyUpdate2" (formula "2") (term "0,1"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "3") (term "0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0"))
            (rule "applyOnPV" (formula "3") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1"))
            (rule "simplifyUpdate2" (formula "3") (term "1,1"))
            (rule "simplifyUpdate2" (formula "3") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
            (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
            (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
            (rule "applyOnPV" (formula "3") (term "0,1,1"))
            (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
            (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
            (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
            (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
            (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
            (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
            (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
            (rule "simplifyUpdate1Rigid" (formula "3") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
            (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0"))
            (rule "commute_or" (formula "2") (term "0,0"))
            (rule "cnf_rightDist" (formula "2") (term "1,0"))
            (rule "eq_or" (formula "2") (term "1,1,0"))
            (rule "commute_or" (formula "2") (term "0,1,0"))
            (rule "commute_and" (formula "2") (term "1,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0"))
            (rule "neq_or" (formula "2") (term "0,0,0"))
            (rule "concrete_and_1" (formula "2") (term "0,0"))
            (rule "commute_or" (formula "2") (term "0,0"))
            (rule "shift_paren_and" (formula "2") (term "0"))
            (rule "cnf_rightDist" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or" (formula "2"))
            (rule "cnf_rightDist" (formula "3"))
            (rule "neq_or_3" (formula "3") (term "1"))
            (rule "concrete_and_3" (formula "3"))
            (rule "cnf_rightDist" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or_2" (formula "3"))
            (rule "eq_or" (formula "3") (term "0"))
            (rule "cnf_rightDist" (formula "4"))
            (rule "neq_or" (formula "4") (term "1"))
            (rule "concrete_and_3" (formula "4"))
            (rule "shift_paren_or" (formula "4"))
            (rule "commute_or" (formula "4") (term "0"))
            (rule "neq_or_4" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "cnf_rightDist" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or" (formula "3"))
            (rule "shift_paren_or" (formula "2"))
            (rule "neq_or_2" (formula "2") (term "0"))
            (rule "concrete_or_1" (formula "2"))
            (rule "true_left" (formula "2"))
             (builtin "simplifyUpdatesAbstract" (formula "14"))
             (builtin "simplifyUpdatesAbstract" (formula "1") (term "0"))
            (rule "ifSplit" (formula "12"))
            (branch "if boolv_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "12"))
               (rule "applyOnPV" (formula "12") (term "0"))
               (rule "simplifyUpdate1" (formula "12") (term "1"))
               (rule "boolean_not_equal_2" (formula "12"))
               (rule "false_right" (formula "12"))
               (rule "blockEmpty" (formula "12") (term "1"))
                (builtin "simplifyUpdatesAbstract" (formula "14") (term "0,1,0,0"))
                (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0"))
                (builtin "simplifyUpdatesAbstract" (formula "12"))
               (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=boolv"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "boolv_2"))
               (rule "abstractExpression" (formula "12") (term "1") (inst "exc=exc_0") (inst "normal=normal_0"))
               (rule "concrete_and_3" (formula "12") (term "0,1,1,0,1"))
               (rule "impRight" (formula "12"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "applyOnAbstractUpdate" (formula "14") (term "1,0"))
               (rule "sequentialToParallel2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnAbstractUpdate" (formula "1") (term "0"))
               (rule "sequentialToParallel2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "applyOnAbstractUpdate" (formula "2") (term "0"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0"))
               (rule "sequentialToParallel2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate3" (formula "1") (term "0"))
               (rule "sequentialToParallel2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate3" (formula "2") (term "0"))
               (rule "abstractUpdateToElementaryUpdates" (formula "14") (term "1,0,0"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1") (term "0"))
               (rule "replace_known_left" (formula "1") (term "1,1") (ifseqformula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1"))
               (rule "concrete_eq_3" (formula "1"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "applyOnPV" (formula "2") (term "0"))
               (rule "simplifyUpdate1" (formula "2") (term "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyEqRigid" (formula "14") (term "0,1,1,0") (ifseqformula "2"))
               (rule "applyEq" (formula "14") (term "0,0,1,0") (ifseqformula "1"))
               (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=boolv_3"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "boolv_3"))
               (rule "inequality_comparison_simple" (formula "14") (term "1"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0"))
               (rule "applyOnElementary" (formula "14") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
               (rule "eqClose" (formula "14") (term "0,0,1,0"))
               (rule "ifthenelse_true" (formula "14") (term "0,1,0"))
               (rule "ifSplit" (formula "16"))
               (branch "if returns true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
                  (rule "concrete_not_1" (formula "5") (term "0"))
                  (rule "concrete_or_2" (formula "5"))
                  (rule "replace_known_left" (formula "6") (term "1,1") (ifseqformula "5"))
                  (rule "concrete_and_3" (formula "6") (term "1"))
                  (rule "replace_known_left" (formula "6") (term "0,1") (ifseqformula "1"))
                  (rule "concrete_not_1" (formula "6") (term "1"))
                  (rule "concrete_eq_4" (formula "6"))
                  (rule "notLeft" (formula "6"))
                  (rule "blockReturn" (formula "17") (term "1"))
                  (rule "applyEqRigid" (formula "17") (term "0,1,0,1,0") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "17") (term "0,0,0,1,0") (ifseqformula "5"))
                  (rule "methodCallReturn" (formula "17") (term "1"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "assignment" (formula "17") (term "1"))
                  (rule "sequentialToParallel2" (formula "17"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                  (rule "applyOnElementary" (formula "17") (term "1,0"))
                  (rule "applyOnPV" (formula "17") (term "0,1,0"))
                  (rule "methodCallEmpty" (formula "17") (term "1"))
                  (rule "tryEmpty" (formula "17") (term "1"))
                  (rule "simplifyUpdate2" (formula "17"))
                  (rule "emptyModality" (formula "17") (term "1"))
                  (rule "applyOnRigidFormula" (formula "17"))
                  (rule "applyOnPV" (formula "17") (term "0"))
                   (builtin "simplifyUpdatesAbstract" (formula "15"))
                  (rule "ifSplit" (formula "15"))
                  (branch "if boolv_3 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "14"))
                     (rule "applyOnPV" (formula "14") (term "0"))
                     (rule "simplifyUpdate1" (formula "14") (term "1"))
                     (rule "boolean_not_equal_2" (formula "14"))
                     (rule "false_right" (formula "14"))
                      (builtin "simplifyUpdatesAbstract" (formula "15"))
                     (rule "ifElseSplit" (formula "15"))
                     (branch "if boolv_2 true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "applyEq" (formula "16") (term "0,1,1,0") (ifseqformula "1"))
                        (rule "abstractExecutionNonVoid" (formula "16") (term "1") (inst "#label=_label21") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                        (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                        (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                        (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                        (rule "impRight" (formula "16"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate2" (formula "19"))
                        (rule "applyOnAbstractUpdate" (formula "19") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "1") (term "1"))
                        (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "simplifyUpdate3" (formula "3") (term "0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "applyOnParallel" (formula "1") (term "1,0"))
                        (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
                        (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate3" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "18"))
                        (rule "concrete_eq_2" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "17"))
                        (rule "concrete_or_2" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "17"))
                        (rule "simplifyUpdate2" (formula "17") (term "1"))
                        (rule "simplifyUpdate2" (formula "17") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "17") (term "1"))
                        (rule "applyOnPV" (formula "17") (term "0,1"))
                        (rule "simplifyUpdate1" (formula "17") (term "1,1"))
                        (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "8"))
                        (rule "concrete_and_3" (formula "17"))
                        (rule "notRight" (formula "17"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                        (rule "simplifyUpdate2Rigid" (formula "3") (term "0,0"))
                        (rule "concrete_and_1" (formula "3") (term "0"))
                        (rule "replace_known_left" (formula "3") (term "0,0,1") (ifseqformula "1"))
                        (rule "concrete_not_1" (formula "3") (term "0,1"))
                        (rule "concrete_and_2" (formula "3") (term "1"))
                        (rule "concrete_or_4" (formula "3"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1"))
                        (rule "applyEqRigid" (formula "17") (term "0,0,0,1,0") (ifseqformula "7"))
                        (rule "applyEq" (formula "17") (term "0,1,0,1,0") (ifseqformula "3"))
                        (rule "apply_eq_boolean_rigid" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "16"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,0,0,1,1,0,0") (ifseqformula "7"))
                        (rule "applyEq" (formula "1") (term "0,1,0,1,1,0,0") (ifseqformula "3"))
                         (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,1,0,0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                         (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                         (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                        (rule "ifSplit" (formula "17"))
                        (branch "if returns true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "blockReturn" (formula "17") (term "1"))
                           (rule "blockReturn" (formula "17") (term "1"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "methodCallReturn" (formula "17") (term "1"))
                           (rule "assignment" (formula "17") (term "1"))
                           (rule "sequentialToParallel2" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                           (rule "applyOnElementary" (formula "17") (term "1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "17") (term "1"))
                           (rule "tryEmpty" (formula "17") (term "1"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "emptyModality" (formula "17") (term "1"))
                           (rule "notRight" (formula "17"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "close" (formula "19") (ifseqformula "1"))
                        )
                        (branch "if returns false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "simplifyUpdate1Rigid" (formula "16") (term "1"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "boolean_equal" (formula "16"))
                           (rule "closeTrue" (formula "16"))
                        )
                     )
                     (branch "if boolv_2 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "14"))
                        (rule "simplifyUpdate1" (formula "14") (term "1"))
                        (rule "applyOnPV" (formula "14") (term "0"))
                        (rule "apply_eq_boolean" (formula "16") (term "0,1,1,0") (ifseqformula "14"))
                        (rule "elim_double_block_2" (formula "16") (term "1"))
                        (rule "abstractExecutionNonVoid" (formula "16") (term "1") (inst "#label=_label20") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                        (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                        (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                        (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                        (rule "impRight" (formula "16"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "sequentialToParallel2" (formula "19") (term "1"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0,1"))
                        (rule "sequentialToParallel2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate2" (formula "19"))
                        (rule "applyOnParallel" (formula "19") (term "1,0"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,1,0"))
                        (rule "applyOnAbstractUpdate" (formula "19") (term "0,1,0"))
                        (rule "sequentialToParallel2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "simplifyUpdate3" (formula "3") (term "0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate3" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "18"))
                        (rule "concrete_eq_2" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "16"))
                        (rule "concrete_or_2" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "16"))
                        (rule "simplifyUpdate2" (formula "16") (term "0"))
                        (rule "simplifyUpdate2" (formula "16") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "16") (term "0"))
                        (rule "applyOnRigidFormula" (formula "16") (term "1"))
                        (rule "applyOnPV" (formula "16") (term "0,1"))
                        (rule "simplifyUpdate1Rigid" (formula "16") (term "1,1"))
                        (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "7"))
                        (rule "concrete_and_3" (formula "16"))
                        (rule "notRight" (formula "16"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                        (rule "simplifyUpdate2Rigid" (formula "3") (term "0,0"))
                        (rule "concrete_and_1" (formula "3") (term "0"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0,1") (ifseqformula "1"))
                        (rule "simplifyUpdate2Rigid" (formula "3") (term "0,0,1"))
                        (rule "concrete_not_1" (formula "3") (term "0,1"))
                        (rule "concrete_and_2" (formula "3") (term "1"))
                        (rule "concrete_or_4" (formula "3"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "simplifyUpdate1Rigid" (formula "2") (term "1"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "applyEq" (formula "17") (term "0,1,0,1,1,0") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "17") (term "0,0,0,1,1,0") (ifseqformula "6"))
                        (rule "apply_eq_boolean_rigid" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
                        (rule "applyEq" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "2"))
                         (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,0,1,0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                         (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0,0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                         (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                        (rule "ifSplit" (formula "17"))
                        (branch "if returns true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "blockReturn" (formula "17") (term "1"))
                           (rule "blockReturn" (formula "17") (term "1"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "methodCallReturn" (formula "17") (term "1"))
                           (rule "assignment" (formula "17") (term "1"))
                           (rule "sequentialToParallel2" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                           (rule "applyOnElementary" (formula "17") (term "1,0"))
                           (rule "applyOnPV" (formula "17") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "17") (term "1"))
                           (rule "tryEmpty" (formula "17") (term "1"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "emptyModality" (formula "17") (term "1"))
                           (rule "notRight" (formula "17"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "close" (formula "19") (ifseqformula "1"))
                        )
                        (branch "if returns false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "18"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "15"))
                           (rule "applyOnPV" (formula "15") (term "0"))
                           (rule "simplifyUpdate1Rigid" (formula "15") (term "1"))
                           (rule "boolean_equal" (formula "15"))
                           (rule "closeTrue" (formula "15"))
                        )
                     )
                  )
               )
               (branch "if returns false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "14"))
                  (rule "simplifyUpdate1" (formula "14") (term "1"))
                  (rule "applyOnPV" (formula "14") (term "0"))
                  (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "14"))
                  (rule "concrete_not_2" (formula "4") (term "0"))
                  (rule "concrete_or_1" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "replace_known_right" (formula "4") (term "0,0,1") (ifseqformula "13"))
                  (rule "concrete_not_2" (formula "4") (term "0,1"))
                  (rule "concrete_and_1" (formula "4") (term "1"))
                  (rule "apply_eq_boolean" (formula "16") (term "0,1,0,1,0") (ifseqformula "13"))
                   (builtin "simplifyUpdatesAbstract" (formula "14"))
                  (rule "ifUnfold" (formula "16") (term "1") (inst "#boolv=boolv"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "boolv_4"))
                  (rule "inequality_comparison_simple" (formula "16") (term "1"))
                  (rule "sequentialToParallel2" (formula "16"))
                  (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                  (rule "applyOnElementary" (formula "16") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
                  (rule "simplifyUpdate1Rigid" (formula "16") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
                   (builtin "simplifyUpdatesAbstract" (formula "16"))
                  (rule "ifSplit" (formula "14"))
                  (branch "if boolv_3 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "13"))
                     (rule "simplifyUpdate1" (formula "13") (term "1"))
                     (rule "applyOnPV" (formula "13") (term "0"))
                     (rule "boolean_not_equal_2" (formula "13"))
                     (rule "false_right" (formula "13"))
                      (builtin "simplifyUpdatesAbstract" (formula "14"))
                     (rule "ifSplit" (formula "16"))
                     (branch "if boolv_4 true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "ifthenelse_concrete4" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "13"))
                        (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                        (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "13"))
                        (rule "concrete_eq_4" (formula "4"))
                        (rule "notLeft" (formula "4"))
                        (rule "blockThrow" (formula "17") (term "1"))
                        (rule "methodCallParamThrow" (formula "17") (term "1"))
                        (rule "simplifyUpdate2" (formula "17"))
                        (rule "tryCatchThrow" (formula "17") (term "1"))
                        (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_5"))
                        (rule "equality_comparison_simple" (formula "17") (term "1"))
                        (rule "sequentialToParallel2" (formula "17"))
                        (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                        (rule "applyOnElementary" (formula "17") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                        (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "13"))
                        (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                        (rule "ifElseSplit" (formula "15"))
                        (branch "if boolv_2 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "applyEq" (formula "16") (term "0,1,1,0") (ifseqformula "1"))
                           (rule "abstractExecutionNonVoid" (formula "16") (term "1") (inst "#label=_label19") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                           (rule "impRight" (formula "16"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "applyOnAbstractUpdate" (formula "19") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate3" (formula "3") (term "0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3") (term "1"))
                           (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                           (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "16"))
                           (rule "concrete_eq_2" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "15") (term "0"))
                           (rule "applyOnRigidFormula" (formula "15") (term "1"))
                           (rule "applyOnPV" (formula "15") (term "0,1"))
                           (rule "simplifyUpdate1" (formula "15") (term "1,1"))
                           (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "17"))
                           (rule "concrete_and_4" (formula "15"))
                           (rule "false_right" (formula "15"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                           (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                           (rule "replace_known_right" (formula "2") (term "1,1,0") (ifseqformula "16"))
                           (rule "concrete_and_4" (formula "2") (term "1,0"))
                           (rule "concrete_or_4" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                           (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                           (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "17"))
                           (rule "concrete_not_2" (formula "2") (term "0,1"))
                           (rule "concrete_and_1" (formula "2") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                           (rule "applyOnPV" (formula "2") (term "0,1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "16"))
                           (rule "concrete_and_4" (formula "2") (term "0"))
                           (rule "concrete_or_2" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "apply_eq_boolean" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "14"))
                           (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,1,0") (ifseqformula "16"))
                           (rule "apply_eq_boolean" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "16"))
                           (rule "ifElseSplit" (formula "19"))
                           (branch "if boolv_5 true"
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if boolv_5 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "14"))
                              (rule "applyOnPV" (formula "14") (term "0"))
                              (rule "simplifyUpdate1" (formula "14") (term "1"))
                              (rule "boolean_not_equal_2" (formula "14"))
                              (rule "false_right" (formula "14"))
                              (rule "elim_double_block" (formula "19") (term "1"))
                               (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,1,0,0") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                               (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                               (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                              (rule "ifElseSplit" (formula "19"))
                              (branch "if exc_0 instanceof Throwable true"
                                 (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                 (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                 (rule "concrete_or_4" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "14"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1"))
                                 (rule "applyOnPV" (formula "14") (term "0"))
                                 (rule "variableDeclaration" (formula "19") (term "1") (newnames "t"))
                                 (rule "delete_unnecessary_cast" (formula "19") (term "1"))
                                 (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                 (rule "boolean_equal" (formula "1") (term "1,1"))
                                 (rule "concrete_or_3" (formula "1") (term "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "19"))
                                 (rule "simplifyUpdate2" (formula "19"))
                                 (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                 (rule "applyOnElementary" (formula "19") (term "1,0"))
                                 (rule "applyOnPV" (formula "19") (term "0,1,0"))
                                 (rule "assignment" (formula "19") (term "1"))
                                 (rule "sequentialToParallel2" (formula "19"))
                                 (rule "simplifyUpdate2" (formula "19"))
                                 (rule "simplifyUpdate3" (formula "19") (term "0"))
                                 (rule "applyOnElementary" (formula "19") (term "0"))
                                 (rule "applyOnPV" (formula "19") (term "0,0"))
                                 (rule "emptyModality" (formula "19") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "19"))
                                 (rule "applyOnPV" (formula "19") (term "0"))
                                 (rule "ifSplit" (formula "17"))
                                 (branch "if returns true"
                                    (rule "simplifyUpdate2" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if returns false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "14"))
                                    (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                    (rule "applyOnPV" (formula "14") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "14"))
                                    (rule "false_right" (formula "14"))
                                    (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                                    (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_6"))
                                    (rule "inequality_comparison_simple" (formula "17") (term "1"))
                                    (rule "sequentialToParallel2" (formula "17"))
                                    (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                    (rule "applyOnElementary" (formula "17") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,0,1,0"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                                    (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "15"))
                                    (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                                    (rule "ifSplit" (formula "17"))
                                    (branch "if boolv_6 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "18"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockThrow" (formula "17") (term "1"))
                                       (rule "blockThrow" (formula "17") (term "1"))
                                       (rule "methodCallParamThrow" (formula "17") (term "1"))
                                       (rule "tryCatchThrow" (formula "17") (term "1"))
                                       (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_7"))
                                       (rule "equality_comparison_simple" (formula "17") (term "1"))
                                       (rule "sequentialToParallel2" (formula "17"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                       (rule "applyOnElementary" (formula "17") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,0,1,0"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                                       (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "15"))
                                       (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                                       (rule "ifElseSplit" (formula "17"))
                                       (branch "if boolv_7 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "18"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if boolv_7 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "14"))
                                          (rule "simplifyUpdate1" (formula "14") (term "1"))
                                          (rule "applyOnPV" (formula "14") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "14"))
                                          (rule "false_right" (formula "14"))
                                          (rule "elim_double_block" (formula "17") (term "1"))
                                          (rule "ifElseSplit" (formula "17"))
                                          (branch "if exc_0 instanceof Throwable true"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                             (rule "concrete_or_4" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "14"))
                                             (rule "applyOnPV" (formula "14") (term "0"))
                                             (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                             (rule "variableDeclaration" (formula "17") (term "1") (newnames "t_1"))
                                             (rule "delete_unnecessary_cast" (formula "17") (term "1"))
                                             (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                             (rule "boolean_equal" (formula "1") (term "1,1"))
                                             (rule "concrete_or_3" (formula "1") (term "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "sequentialToParallel2" (formula "17"))
                                             (rule "simplifyUpdate2" (formula "17"))
                                             (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                             (rule "applyOnElementary" (formula "17") (term "1,0"))
                                             (rule "applyOnPV" (formula "17") (term "0,1,0"))
                                             (rule "assignment" (formula "17") (term "1"))
                                             (rule "sequentialToParallel2" (formula "17"))
                                             (rule "simplifyUpdate2" (formula "17"))
                                             (rule "simplifyUpdate3" (formula "17") (term "0"))
                                             (rule "applyOnElementary" (formula "17") (term "0"))
                                             (rule "applyOnPV" (formula "17") (term "0,0"))
                                             (rule "emptyModality" (formula "17") (term "1"))
                                             (rule "notRight" (formula "17"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "close" (formula "19") (ifseqformula "1"))
                                          )
                                          (branch "if exc_0 instanceof Throwable false"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                             (rule "concrete_or_4" (formula "1") (term "0,1"))
                                             (rule "double_not" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "close" (formula "16") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "if boolv_6 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "18"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "14"))
                                       (rule "simplifyUpdate1" (formula "14") (term "1"))
                                       (rule "applyOnPV" (formula "14") (term "0"))
                                       (rule "boolean_equal" (formula "14"))
                                       (rule "closeTrue" (formula "14"))
                                    )
                                 )
                              )
                              (branch "if exc_0 instanceof Throwable false"
                                 (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                 (rule "concrete_or_4" (formula "1") (term "0,1"))
                                 (rule "double_not" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "close" (formula "16") (ifseqformula "1"))
                              )
                           )
                        )
                        (branch "if boolv_2 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "12"))
                           (rule "simplifyUpdate1" (formula "12") (term "1"))
                           (rule "applyOnPV" (formula "12") (term "0"))
                           (rule "apply_eq_boolean" (formula "16") (term "0,1,1,0") (ifseqformula "12"))
                           (rule "elim_double_block_2" (formula "16") (term "1"))
                           (rule "abstractExecutionNonVoid" (formula "16") (term "1") (inst "#label=_label18") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                           (rule "impRight" (formula "16"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "applyOnAbstractUpdate" (formula "19") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1"))
                           (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate3" (formula "3") (term "0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                           (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "16"))
                           (rule "concrete_eq_2" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "14"))
                           (rule "concrete_or_2" (formula "2") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate2" (formula "14") (term "0"))
                           (rule "simplifyUpdate2" (formula "14") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "14") (term "0"))
                           (rule "applyOnRigidFormula" (formula "14") (term "1"))
                           (rule "simplifyUpdate1" (formula "14") (term "1,1"))
                           (rule "applyOnPV" (formula "14") (term "0,1"))
                           (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "17"))
                           (rule "concrete_and_4" (formula "14"))
                           (rule "false_right" (formula "14"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0"))
                           (rule "applyOnPV" (formula "2") (term "0,1,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "16"))
                           (rule "concrete_and_4" (formula "2") (term "0"))
                           (rule "concrete_or_2" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "3"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "applyOnRigidFormula" (formula "13"))
                           (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                           (rule "applyOnPV" (formula "13") (term "0"))
                           (rule "apply_eq_boolean" (formula "17") (term "0,1,0,1,0") (ifseqformula "16"))
                           (rule "apply_eq_boolean" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "14"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "16"))
                           (rule "ifElseSplit" (formula "19"))
                           (branch "if boolv_5 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if boolv_5 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "13"))
                              (rule "simplifyUpdate1" (formula "13") (term "1"))
                              (rule "applyOnPV" (formula "13") (term "0"))
                              (rule "boolean_not_equal_2" (formula "13"))
                              (rule "false_right" (formula "13"))
                              (rule "elim_double_block" (formula "19") (term "1"))
                               (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,1,0,0") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                               (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0,0") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                               (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                              (rule "ifElseSplit" (formula "19"))
                              (branch "if exc_0 instanceof Throwable true"
                                 (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                 (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                 (rule "concrete_or_4" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "13"))
                                 (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                 (rule "applyOnPV" (formula "13") (term "0"))
                                 (rule "variableDeclaration" (formula "19") (term "1") (newnames "t"))
                                 (rule "delete_unnecessary_cast" (formula "19") (term "1"))
                                 (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                 (rule "boolean_equal" (formula "1") (term "1,1"))
                                 (rule "concrete_or_3" (formula "1") (term "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "19"))
                                 (rule "simplifyUpdate2" (formula "19"))
                                 (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                 (rule "applyOnElementary" (formula "19") (term "1,0"))
                                 (rule "applyOnPV" (formula "19") (term "0,1,0"))
                                 (rule "assignment" (formula "19") (term "1"))
                                 (rule "sequentialToParallel2" (formula "19"))
                                 (rule "simplifyUpdate2" (formula "19"))
                                 (rule "simplifyUpdate3" (formula "19") (term "0"))
                                 (rule "applyOnElementary" (formula "19") (term "0"))
                                 (rule "applyOnPV" (formula "19") (term "0,0"))
                                 (rule "emptyModality" (formula "19") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "19"))
                                 (rule "applyOnPV" (formula "19") (term "0"))
                                 (rule "ifSplit" (formula "17"))
                                 (branch "if returns true"
                                    (rule "simplifyUpdate2" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if returns false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "13"))
                                    (rule "simplifyUpdate1" (formula "13") (term "1"))
                                    (rule "applyOnPV" (formula "13") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "13"))
                                    (rule "false_right" (formula "13"))
                                    (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                                    (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_6"))
                                    (rule "inequality_comparison_simple" (formula "17") (term "1"))
                                    (rule "sequentialToParallel2" (formula "17"))
                                    (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                    (rule "applyOnElementary" (formula "17") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                                    (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "15"))
                                    (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                                    (rule "ifSplit" (formula "17"))
                                    (branch "if boolv_6 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "18"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockThrow" (formula "17") (term "1"))
                                       (rule "blockThrow" (formula "17") (term "1"))
                                       (rule "methodCallParamThrow" (formula "17") (term "1"))
                                       (rule "tryCatchThrow" (formula "17") (term "1"))
                                       (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_7"))
                                       (rule "equality_comparison_simple" (formula "17") (term "1"))
                                       (rule "sequentialToParallel2" (formula "17"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                       (rule "applyOnElementary" (formula "17") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                                       (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "15"))
                                       (rule "ifthenelse_false" (formula "17") (term "0,1,0"))
                                       (rule "ifElseSplit" (formula "17"))
                                       (branch "if boolv_7 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "18"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if boolv_7 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "13"))
                                          (rule "simplifyUpdate1" (formula "13") (term "1"))
                                          (rule "applyOnPV" (formula "13") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "13"))
                                          (rule "false_right" (formula "13"))
                                          (rule "elim_double_block" (formula "17") (term "1"))
                                          (rule "ifElseSplit" (formula "17"))
                                          (branch "if exc_0 instanceof Throwable true"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                             (rule "concrete_or_4" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "13"))
                                             (rule "applyOnPV" (formula "13") (term "0"))
                                             (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                             (rule "variableDeclaration" (formula "17") (term "1") (newnames "t_1"))
                                             (rule "delete_unnecessary_cast" (formula "17") (term "1"))
                                             (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                             (rule "boolean_equal" (formula "1") (term "1,1"))
                                             (rule "concrete_or_3" (formula "1") (term "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "sequentialToParallel2" (formula "17"))
                                             (rule "simplifyUpdate2" (formula "17"))
                                             (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                             (rule "applyOnElementary" (formula "17") (term "1,0"))
                                             (rule "applyOnPV" (formula "17") (term "0,1,0"))
                                             (rule "assignment" (formula "17") (term "1"))
                                             (rule "sequentialToParallel2" (formula "17"))
                                             (rule "simplifyUpdate2" (formula "17"))
                                             (rule "simplifyUpdate3" (formula "17") (term "0"))
                                             (rule "applyOnElementary" (formula "17") (term "0"))
                                             (rule "applyOnPV" (formula "17") (term "0,0"))
                                             (rule "emptyModality" (formula "17") (term "1"))
                                             (rule "notRight" (formula "17"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "close" (formula "19") (ifseqformula "1"))
                                          )
                                          (branch "if exc_0 instanceof Throwable false"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                             (rule "concrete_or_4" (formula "1") (term "0,1"))
                                             (rule "double_not" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                             (rule "close" (formula "16") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "if boolv_6 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "18"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "13"))
                                       (rule "simplifyUpdate1" (formula "13") (term "1"))
                                       (rule "applyOnPV" (formula "13") (term "0"))
                                       (rule "boolean_equal" (formula "13"))
                                       (rule "closeTrue" (formula "13"))
                                    )
                                 )
                              )
                              (branch "if exc_0 instanceof Throwable false"
                                 (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                 (rule "concrete_or_4" (formula "1") (term "0,1"))
                                 (rule "double_not" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                 (rule "close" (formula "16") (ifseqformula "1"))
                              )
                           )
                        )
                     )
                     (branch "if boolv_4 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "13"))
                        (rule "applyOnPV" (formula "13") (term "0"))
                        (rule "simplifyUpdate1" (formula "13") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "13"))
                        (rule "boolean_not_equal_2" (formula "13") (term "1"))
                        (rule "concrete_or_4" (formula "13"))
                        (rule "notRight" (formula "13"))
                        (rule "replace_known_left" (formula "17") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "ifthenelse_true" (formula "17") (term "0,1,0"))
                        (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "1"))
                        (rule "concrete_eq_3" (formula "5"))
                        (rule "applyEqRigid" (formula "17") (term "0,1,0,0") (ifseqformula "1"))
                        (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_5"))
                        (rule "abstractExpression" (formula "17") (term "1") (inst "exc=exc_0") (inst "normal=normal_0"))
                        (rule "concrete_and_3" (formula "17") (term "0,1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                        (rule "impRight" (formula "17"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate2" (formula "19"))
                        (rule "applyOnAbstractUpdate" (formula "19") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate3" (formula "1") (term "0"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate3" (formula "2") (term "0"))
                        (rule "abstractUpdateToElementaryUpdates" (formula "19") (term "1,0,0"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "2"))
                        (rule "concrete_eq_3" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "simplifyUpdate1Rigid" (formula "2") (term "1"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyEqRigid" (formula "17") (term "0,1,0") (ifseqformula "3"))
                        (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv_6"))
                        (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_6"))
                        (rule "inequality_comparison_simple" (formula "17") (term "1"))
                        (rule "sequentialToParallel2" (formula "17"))
                        (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                        (rule "applyOnElementary" (formula "17") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                        (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                        (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                        (rule "eqClose" (formula "17") (term "0,0,1,0"))
                        (rule "ifthenelse_true" (formula "17") (term "0,1,0"))
                        (rule "ifElseSplit" (formula "15"))
                        (branch "if boolv_2 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "applyEq" (formula "16") (term "0,1,1,0") (ifseqformula "1"))
                           (rule "abstractExecutionNonVoid" (formula "16") (term "1") (inst "#label=_label15") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                           (rule "impRight" (formula "16"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "sequentialToParallel2" (formula "19") (term "1"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,0,1"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1"))
                           (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "applyOnParallel" (formula "19") (term "1,0"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,1,0"))
                           (rule "applyOnAbstractUpdate" (formula "19") (term "0,1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate3" (formula "3") (term "0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                           (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "9"))
                           (rule "concrete_eq_1" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "4"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "replace_known_right" (formula "2") (term "0,1,0,1") (ifseqformula "18"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "concrete_and_1" (formula "2") (term "1"))
                           (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "3"))
                           (rule "concrete_not_1" (formula "2") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "applyOnPV" (formula "3") (term "0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1"))
                           (rule "applyOnRigidFormula" (formula "17"))
                           (rule "applyOnPV" (formula "17") (term "0"))
                           (rule "simplifyUpdate1" (formula "17") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
                           (rule "applyOnPV" (formula "2") (term "0,1,0"))
                           (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                           (rule "applyOnPV" (formula "2") (term "0,0,1"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
                           (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "17"))
                           (rule "concrete_and_2" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "apply_eq_boolean" (formula "17") (term "0,1,0,1,1,0") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "7"))
                           (rule "applyEq" (formula "17") (term "0,0,0,1,1,0") (ifseqformula "3"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "16"))
                            (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,0,1,1,0,0,0") (ifInst ""  (formula "14")))
                           (rule "applyEq" (formula "19") (term "0,1,1,0,0,0") (ifseqformula "2"))
                            (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,0,1,0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                            (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                            (builtin "simplifyUpdatesAbstract" (formula "19"))
                            (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                            (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,0,1,0,0,0") (ifInst ""  (formula "14")))
                           (rule "ifSplit" (formula "17"))
                           (branch "if returns true"
                              (rule "simplifyUpdate2" (formula "18"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if returns false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "18"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "16"))
                              (rule "applyOnPV" (formula "16") (term "0"))
                              (rule "simplifyUpdate1" (formula "16") (term "1"))
                              (rule "boolean_not_equal_2" (formula "16"))
                              (rule "false_right" (formula "16"))
                              (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_7"))
                              (rule "inequality_comparison_simple" (formula "17") (term "1"))
                              (rule "sequentialToParallel2" (formula "17"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                              (rule "applyOnElementary" (formula "17") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                              (rule "eqClose" (formula "17") (term "0,0,1,0"))
                              (rule "ifthenelse_true" (formula "17") (term "0,1,0"))
                              (rule "ifSplit" (formula "19"))
                              (branch "if boolv_6 true"
                                 (rule "simplifyUpdate2" (formula "20"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if boolv_6 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "20"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "16"))
                                 (rule "applyOnPV" (formula "16") (term "0"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "16"))
                                 (rule "false_right" (formula "16"))
                                 (rule "ifSplit" (formula "17"))
                                 (branch "if boolv_7 true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "18"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if boolv_7 false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "16"))
                                    (rule "simplifyUpdate1" (formula "16") (term "1"))
                                    (rule "applyOnPV" (formula "16") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "16"))
                                    (rule "false_right" (formula "16"))
                                    (rule "abstractExecutionNonVoid" (formula "17") (term "1") (inst "#label=_label16") (inst "#v1=v1") (inst "result=result_Q1_0") (inst "returns=returns_Q1_0") (inst "exc=exc_Q1_0") (inst "normal=normal_Q1_0"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1,0,1"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1,0,1"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1,0,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                    (rule "impRight" (formula "17"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "sequentialToParallel2" (formula "20"))
                                    (rule "applyOnAbstractUpdate" (formula "20") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "3") (term "1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1"))
                                    (rule "simplifyUpdate3" (formula "3") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "3"))
                                    (rule "sequentialToParallel2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
                                    (rule "sequentialToParallel2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "20"))
                                    (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3"))
                                    (rule "simplifyUpdate3" (formula "3") (term "0"))
                                    (rule "sequentialToParallel2" (formula "1"))
                                    (rule "applyOnParallel" (formula "1") (term "1,0"))
                                    (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
                                    (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
                                    (rule "sequentialToParallel2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate3" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                    (rule "applyOnPV" (formula "3") (term "0,0"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "3") (term "1,1,1"))
                                    (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                    (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0"))
                                    (rule "commute_or" (formula "2") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                    (rule "eq_or" (formula "2") (term "1,1,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0"))
                                    (rule "commute_and" (formula "2") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                    (rule "neq_or" (formula "2") (term "0,0,0"))
                                    (rule "concrete_and_1" (formula "2") (term "0,0"))
                                    (rule "commute_or" (formula "2") (term "0,0"))
                                    (rule "shift_paren_and" (formula "2") (term "0"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "2"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (rule "neq_or_3" (formula "3") (term "1"))
                                    (rule "concrete_and_3" (formula "3"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "eq_or" (formula "3") (term "0"))
                                    (rule "cnf_rightDist" (formula "4"))
                                    (rule "neq_or" (formula "4") (term "1"))
                                    (rule "concrete_and_3" (formula "4"))
                                    (rule "shift_paren_or" (formula "4"))
                                    (rule "commute_or" (formula "4") (term "0"))
                                    (rule "neq_or_4" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "shift_paren_or" (formula "2"))
                                    (rule "neq_or_2" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "ifElseSplit" (formula "22"))
                                    (branch "if boolv_5 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "23"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "abstractExecutionNonVoid" (formula "22") (term "1") (inst "#label=_label17") (inst "#v1=v1") (inst "result=result_Q1_0") (inst "returns=returns_Q1_0") (inst "exc=exc_Q1_0") (inst "normal=normal_Q1_0"))
                                       (rule "concrete_and_3" (formula "22") (term "1,1,0,1"))
                                       (rule "concrete_and_3" (formula "22") (term "1,1,0,1"))
                                       (rule "concrete_and_3" (formula "22") (term "1,1,0,1"))
                                       (rule "simplifyUpdate2" (formula "22") (term "1,1,1"))
                                       (rule "impRight" (formula "22"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "sequentialToParallel2" (formula "25"))
                                       (rule "applyOnAbstractUpdate" (formula "25") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3"))
                                       (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "1"))
                                       (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1"))
                                       (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "sequentialToParallel2" (formula "25"))
                                       (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3"))
                                       (rule "simplifyUpdate3" (formula "3") (term "0"))
                                       (rule "sequentialToParallel2" (formula "1"))
                                       (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate3" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "2"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                       (rule "applyOnPV" (formula "3") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                       (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                                        (builtin "simplifyUpdatesAbstract" (formula "3") (term "0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                       (rule "eq_or" (formula "2") (term "1,1,0"))
                                       (rule "commute_or" (formula "2") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "4"))
                                       (rule "concrete_and_1" (formula "2") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                       (rule "neq_or" (formula "2") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "2") (term "0,0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "commute_and" (formula "2") (term "0"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (rule "neq_or_2" (formula "3") (term "0"))
                                       (rule "concrete_and_1" (formula "3"))
                                       (rule "neq_or_3" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or_2" (formula "2"))
                                       (rule "neq_or" (formula "2") (term "0"))
                                       (rule "concrete_or_1" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "ifSplit" (formula "21"))
                                       (branch "if returns_1 true"
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "4") (term "0"))
                                          (rule "concrete_or_2" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "0,0,1") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "5") (term "0,1"))
                                          (rule "concrete_and_2" (formula "5") (term "1"))
                                          (rule "concrete_eq_4" (formula "5"))
                                          (rule "notLeft" (formula "5"))
                                          (rule "blockReturn" (formula "22") (term "1"))
                                          (rule "blockReturn" (formula "22") (term "1"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "applyEqRigid" (formula "24") (term "0,0,0,1,0") (ifseqformula "4"))
                                          (rule "apply_eq_boolean_rigid" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "20"))
                                          (rule "applyEqRigid" (formula "24") (term "0,1,0,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "2") (term "0,1,0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "2") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                                          (rule "methodCallReturn" (formula "22") (term "1"))
                                          (rule "assignment" (formula "22") (term "1"))
                                          (rule "sequentialToParallel2" (formula "22"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                          (rule "applyOnElementary" (formula "22") (term "1,0"))
                                          (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                          (rule "methodCallEmpty" (formula "22") (term "1"))
                                          (rule "tryEmpty" (formula "22") (term "1"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "emptyModality" (formula "22") (term "1"))
                                          (rule "notRight" (formula "22"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                           (builtin "simplifyUpdatesAbstract" (formula "3") (term "0"))
                                          (rule "ifSplit" (formula "24"))
                                          (branch "if returns_1 true"
                                             (rule "simplifyUpdate2" (formula "25"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "boolean_equal" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "blockReturn" (formula "24") (term "1"))
                                             (rule "blockReturn" (formula "24") (term "1"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "methodCallReturn" (formula "24") (term "1"))
                                             (rule "assignment" (formula "24") (term "1"))
                                             (rule "sequentialToParallel2" (formula "24"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                             (rule "applyOnElementary" (formula "24") (term "1,0"))
                                             (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                             (rule "methodCallEmpty" (formula "24") (term "1"))
                                             (rule "tryEmpty" (formula "24") (term "1"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "emptyModality" (formula "24") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "24"))
                                             (rule "applyOnPV" (formula "24") (term "0"))
                                             (rule "close" (formula "24") (ifseqformula "1"))
                                          )
                                          (branch "if returns_1 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "25"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "21"))
                                             (rule "applyOnPV" (formula "21") (term "0"))
                                             (rule "simplifyUpdate1" (formula "21") (term "1"))
                                             (rule "boolean_equal" (formula "21"))
                                             (rule "closeTrue" (formula "21"))
                                          )
                                       )
                                       (branch "if returns_1 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "20"))
                                          (rule "simplifyUpdate1" (formula "20") (term "1"))
                                          (rule "applyOnPV" (formula "20") (term "0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "20"))
                                          (rule "concrete_not_2" (formula "3") (term "0"))
                                          (rule "concrete_or_1" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "19"))
                                          (rule "concrete_not_2" (formula "3") (term "0,1"))
                                          (rule "concrete_and_1" (formula "3") (term "1"))
                                          (rule "apply_eq_boolean" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "19"))
                                          (rule "apply_eq_boolean" (formula "23") (term "0,1,0,1,0") (ifseqformula "19"))
                                          (rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "21") (term "1") (newnames "boolv_8"))
                                          (rule "inequality_comparison_simple" (formula "21") (term "1"))
                                          (rule "sequentialToParallel2" (formula "21"))
                                          (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                          (rule "applyOnElementary" (formula "21") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                          (rule "simplifyUpdate1Rigid" (formula "21") (term "2,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                          (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                                          (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                                           (builtin "simplifyUpdatesAbstract" (formula "1") (term "0"))
                                          (rule "ifSplit" (formula "23"))
                                          (branch "if returns_1 true"
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if returns_1 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "19"))
                                             (rule "simplifyUpdate1" (formula "19") (term "1"))
                                             (rule "applyOnPV" (formula "19") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "23") (term "1") (newnames "boolv_9"))
                                             (rule "inequality_comparison_simple" (formula "23") (term "1"))
                                             (rule "sequentialToParallel2" (formula "23"))
                                             (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                             (rule "applyOnElementary" (formula "23") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                             (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                                             (rule "ifSplit" (formula "21"))
                                             (branch "if boolv_8 true"
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "22"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                (rule "ifthenelse_concrete4" (formula "1"))
                                                (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                                (rule "concrete_or_4" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "19"))
                                                (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                                                (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "19"))
                                                (rule "concrete_eq_4" (formula "3"))
                                                (rule "notLeft" (formula "3"))
                                                (rule "blockThrow" (formula "22") (term "1"))
                                                (rule "blockThrow" (formula "22") (term "1"))
                                                (rule "methodCallParamThrow" (formula "22") (term "1"))
                                                (rule "tryCatchThrow" (formula "22") (term "1"))
                                                (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=boolv"))
                                                (rule "variableDeclaration" (formula "22") (term "1") (newnames "boolv_10"))
                                                (rule "equality_comparison_simple" (formula "22") (term "1"))
                                                (rule "sequentialToParallel2" (formula "22"))
                                                (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "22") (term "1,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
                                                (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
                                                (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "19"))
                                                (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
                                                (rule "ifSplit" (formula "24"))
                                                (branch "if boolv_9 true"
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "25"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "boolean_equal" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "blockThrow" (formula "24") (term "1"))
                                                   (rule "blockThrow" (formula "24") (term "1"))
                                                   (rule "methodCallParamThrow" (formula "24") (term "1"))
                                                   (rule "tryCatchThrow" (formula "24") (term "1"))
                                                   (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=boolv"))
                                                   (rule "variableDeclaration" (formula "24") (term "1") (newnames "boolv_11"))
                                                   (rule "equality_comparison_simple" (formula "24") (term "1"))
                                                   (rule "sequentialToParallel2" (formula "24"))
                                                   (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                   (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                   (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                                                   (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                                                   (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "19"))
                                                   (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                                                   (rule "ifElseSplit" (formula "22"))
                                                   (branch "if boolv_10 true"
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "simplifyUpdate2" (formula "23"))
                                                      (rule "applyOnRigidFormula" (formula "1"))
                                                      (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                      (rule "applyOnPV" (formula "1") (term "0"))
                                                      (rule "boolean_not_equal_2" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "if boolv_10 false"
                                                      (rule "false_to_not_true" (formula "1") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "23"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "18"))
                                                      (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                      (rule "applyOnPV" (formula "18") (term "0"))
                                                      (rule "boolean_not_equal_2" (formula "18"))
                                                      (rule "false_right" (formula "18"))
                                                      (rule "elim_double_block" (formula "22") (term "1"))
                                                      (rule "ifElseSplit" (formula "24"))
                                                      (branch "if boolv_11 true"
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "simplifyUpdate2" (formula "25"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "boolean_not_equal_2" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "if boolv_11 false"
                                                         (rule "false_to_not_true" (formula "1") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "25"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "18"))
                                                         (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                         (rule "applyOnPV" (formula "18") (term "0"))
                                                         (rule "boolean_not_equal_2" (formula "18"))
                                                         (rule "false_right" (formula "18"))
                                                         (rule "elim_double_block" (formula "24") (term "1"))
                                                         (rule "ifElseSplit" (formula "22"))
                                                         (branch "if exc_2 instanceof Throwable true"
                                                            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                            (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                            (rule "concrete_or_4" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "18"))
                                                            (rule "applyOnPV" (formula "18") (term "0"))
                                                            (rule "simplifyUpdate1Rigid" (formula "18") (term "1"))
                                                            (rule "variableDeclaration" (formula "22") (term "1") (newnames "t"))
                                                            (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                                                            (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                            (rule "boolean_equal" (formula "1") (term "1,1"))
                                                            (rule "concrete_or_3" (formula "1") (term "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "sequentialToParallel2" (formula "22"))
                                                            (rule "simplifyUpdate2" (formula "22"))
                                                            (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                            (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                            (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                                            (rule "assignment" (formula "22") (term "1"))
                                                            (rule "sequentialToParallel2" (formula "22"))
                                                            (rule "simplifyUpdate2" (formula "22"))
                                                            (rule "simplifyUpdate3" (formula "22") (term "0"))
                                                            (rule "applyOnElementary" (formula "22") (term "0"))
                                                            (rule "applyOnPV" (formula "22") (term "0,0"))
                                                            (rule "emptyModality" (formula "22") (term "1"))
                                                            (rule "notRight" (formula "22"))
                                                            (rule "applyOnRigidFormula" (formula "1"))
                                                            (rule "applyOnPV" (formula "1") (term "0"))
                                                            (rule "ifElseSplit" (formula "24"))
                                                            (branch "if exc_2 instanceof Throwable true"
                                                               (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                               (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                               (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                               (rule "concrete_or_4" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "19"))
                                                               (rule "applyOnPV" (formula "19") (term "0"))
                                                               (rule "simplifyUpdate1Rigid" (formula "19") (term "1"))
                                                               (rule "variableDeclaration" (formula "24") (term "1") (newnames "t_1"))
                                                               (rule "delete_unnecessary_cast" (formula "24") (term "1"))
                                                               (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                               (rule "boolean_equal" (formula "1") (term "1,1"))
                                                               (rule "concrete_or_3" (formula "1") (term "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "sequentialToParallel2" (formula "24"))
                                                               (rule "simplifyUpdate2" (formula "24"))
                                                               (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                               (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                               (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                                               (rule "assignment" (formula "24") (term "1"))
                                                               (rule "sequentialToParallel2" (formula "24"))
                                                               (rule "simplifyUpdate2" (formula "24"))
                                                               (rule "simplifyUpdate3" (formula "24") (term "0"))
                                                               (rule "applyOnElementary" (formula "24") (term "0"))
                                                               (rule "applyOnPV" (formula "24") (term "0,0"))
                                                               (rule "emptyModality" (formula "24") (term "1"))
                                                               (rule "applyOnRigidFormula" (formula "24"))
                                                               (rule "applyOnPV" (formula "24") (term "0"))
                                                               (rule "close" (formula "24") (ifseqformula "1"))
                                                            )
                                                            (branch "if exc_2 instanceof Throwable false"
                                                               (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                               (rule "false_to_not_true" (formula "1") (term "1"))
                                                               (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                               (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                               (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                               (rule "double_not" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                               (rule "close" (formula "21") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch "if exc_2 instanceof Throwable false"
                                                            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                            (rule "false_to_not_true" (formula "1") (term "1"))
                                                            (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                            (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                            (rule "double_not" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "1"))
                                                            (rule "applyOnPV" (formula "1") (term "0"))
                                                            (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                            (rule "close" (formula "20") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "if boolv_9 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "25"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "18"))
                                                   (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                   (rule "applyOnPV" (formula "18") (term "0"))
                                                   (rule "boolean_equal" (formula "18"))
                                                   (rule "closeTrue" (formula "18"))
                                                )
                                             )
                                             (branch "if boolv_8 false"
                                                (rule "false_to_not_true" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "22"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "19"))
                                                (rule "applyOnPV" (formula "19") (term "0"))
                                                (rule "simplifyUpdate1" (formula "19") (term "1"))
                                                (rule "ifthenelse_concrete4" (formula "19"))
                                                (rule "boolean_not_equal_2" (formula "19") (term "1"))
                                                (rule "concrete_or_4" (formula "19"))
                                                (rule "notRight" (formula "19"))
                                                (rule "replace_known_left" (formula "24") (term "0,0,1,0") (ifseqformula "1"))
                                                (rule "ifthenelse_true" (formula "24") (term "0,1,0"))
                                                (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
                                                (rule "concrete_eq_3" (formula "4"))
                                                (rule "blockEmpty" (formula "22") (term "1"))
                                                (rule "applyEqRigid" (formula "24") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "methodCallReturn" (formula "22") (term "1"))
                                                (rule "assignment" (formula "22") (term "1"))
                                                (rule "elimSelfSingleUpdateFor" (formula "22") (term "1"))
                                                (rule "methodCallEmpty" (formula "22") (term "1"))
                                                (rule "tryEmpty" (formula "22") (term "1"))
                                                (rule "emptyModality" (formula "22") (term "1"))
                                                (rule "notRight" (formula "22"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "ifSplit" (formula "24"))
                                                (branch "if boolv_9 true"
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "25"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "boolean_not_equal_2" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "if boolv_9 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "25"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "21"))
                                                   (rule "applyOnPV" (formula "21") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "21") (term "1"))
                                                   (rule "boolean_not_equal_2" (formula "21"))
                                                   (rule "false_right" (formula "21"))
                                                   (rule "blockEmpty" (formula "24") (term "1"))
                                                   (rule "methodCallReturn" (formula "24") (term "1"))
                                                   (rule "assignment" (formula "24") (term "1"))
                                                   (rule "elimSelfSingleUpdateFor" (formula "24") (term "1"))
                                                   (rule "methodCallEmpty" (formula "24") (term "1"))
                                                   (rule "tryEmpty" (formula "24") (term "1"))
                                                   (rule "emptyModality" (formula "24") (term "1"))
                                                   (rule "applyOnRigidFormula" (formula "24"))
                                                    (opengoal "     !objUnderTest = null    &   ConsolidateDuplicateConditionalFragments::exactInstance(objUnderTest)      = TRUE    & wellFormed(heap)    & measuredByEmpty    &   boolean::select(heap,                        objUnderTest,                        java.lang.Object::<created>)      = TRUE -> (    {result:=_result}           \\<{ try {                 result=objUnderTest.before(result)@ConsolidateDuplicateConditionalFragments;               }   catch (Throwable t) {                 result=t;               }             }\\> Post(result)     <-> {result:=_result}           \\<{ try {                  result=objUnderTest.after(result)@ConsolidateDuplicateConditionalFragments;               }   catch (Throwable t) {                 result=t;               }             }\\> Post(result)) ")
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "23"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "19"))
                                       (rule "simplifyUpdate1" (formula "19") (term "1"))
                                       (rule "applyOnPV" (formula "19") (term "0"))
                                       (rule "boolean_equal" (formula "19"))
                                       (rule "closeTrue" (formula "19"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "if boolv_2 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "apply_eq_boolean" (formula "16") (term "0,1,1,0") (ifseqformula "14"))
                           (rule "abstractExecutionNonVoid" (formula "16") (term "1") (inst "#label=_label12") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "16") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                           (rule "impRight" (formula "16"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "applyOnAbstractUpdate" (formula "19") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate3" (formula "3") (term "0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                           (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "8"))
                           (rule "concrete_eq_1" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "4"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "replace_known_left" (formula "2") (term "0,1,1,1") (ifseqformula "3"))
                           (rule "concrete_not_1" (formula "2") (term "1,1,1"))
                           (rule "simplifyUpdate2Rigid" (formula "2") (term "1,1"))
                           (rule "concrete_and_4" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate1Rigid" (formula "3") (term "1"))
                           (rule "applyOnPV" (formula "3") (term "0"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                           (rule "applyOnPV" (formula "2") (term "0,0,1"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
                           (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "17"))
                           (rule "concrete_and_2" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "simplifyUpdate1" (formula "2") (term "1"))
                           (rule "applyOnPV" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "15"))
                           (rule "applyOnPV" (formula "15") (term "0"))
                           (rule "simplifyUpdate1" (formula "15") (term "1"))
                           (rule "applyEqRigid" (formula "17") (term "0,0,0,1,0") (ifseqformula "2"))
                           (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "6"))
                           (rule "apply_eq_boolean" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "16"))
                            (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,0,1,1,0,0,0") (ifInst ""  (formula "13")))
                           (rule "apply_eq_boolean" (formula "19") (term "0,1,1,0,0,0") (ifseqformula "15"))
                            (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,1,0,0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                            (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0,0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                            (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,0,1,0,0,0") (ifInst ""  (formula "13")))
                            (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                            (builtin "simplifyUpdatesAbstract" (formula "19"))
                           (rule "ifSplit" (formula "17"))
                           (branch "if returns true"
                              (rule "simplifyUpdate2" (formula "18"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if returns false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "18"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "15"))
                              (rule "simplifyUpdate1" (formula "15") (term "1"))
                              (rule "applyOnPV" (formula "15") (term "0"))
                              (rule "boolean_not_equal_2" (formula "15"))
                              (rule "false_right" (formula "15"))
                              (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_7"))
                              (rule "inequality_comparison_simple" (formula "17") (term "1"))
                              (rule "sequentialToParallel2" (formula "17"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                              (rule "applyOnElementary" (formula "17") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                              (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                              (rule "eqClose" (formula "17") (term "0,0,1,0"))
                              (rule "ifthenelse_true" (formula "17") (term "0,1,0"))
                              (rule "ifSplit" (formula "19"))
                              (branch "if boolv_6 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "20"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if boolv_6 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "20"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "15"))
                                 (rule "simplifyUpdate1" (formula "15") (term "1"))
                                 (rule "applyOnPV" (formula "15") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "15"))
                                 (rule "false_right" (formula "15"))
                                 (rule "ifSplit" (formula "17"))
                                 (branch "if boolv_7 true"
                                    (rule "simplifyUpdate2" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if boolv_7 false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "15"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1"))
                                    (rule "applyOnPV" (formula "15") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "15"))
                                    (rule "false_right" (formula "15"))
                                    (rule "abstractExecutionNonVoid" (formula "17") (term "1") (inst "#label=_label13") (inst "#v1=v1") (inst "result=result_Q2_0") (inst "returns=returns_Q2_0") (inst "exc=exc_Q2_0") (inst "normal=normal_Q2_0"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1,0,1"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1,0,1"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1,0,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                    (rule "impRight" (formula "17"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "sequentialToParallel2" (formula "20"))
                                    (rule "applyOnAbstractUpdate" (formula "20") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3"))
                                    (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
                                    (rule "sequentialToParallel2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "20"))
                                    (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3"))
                                    (rule "simplifyUpdate3" (formula "3") (term "0"))
                                    (rule "sequentialToParallel2" (formula "1"))
                                    (rule "applyOnParallel" (formula "1") (term "1,0"))
                                    (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
                                    (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
                                    (rule "sequentialToParallel2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate3" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                    (rule "applyOnPV" (formula "3") (term "0,0"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                                    (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                    (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,0,1"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0"))
                                    (rule "commute_or" (formula "2") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                    (rule "eq_or" (formula "2") (term "1,1,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0"))
                                    (rule "commute_and" (formula "2") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                    (rule "neq_or" (formula "2") (term "0,0,0"))
                                    (rule "concrete_and_1" (formula "2") (term "0,0"))
                                    (rule "commute_or" (formula "2") (term "0,0"))
                                    (rule "shift_paren_and" (formula "2") (term "0"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "2"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (rule "neq_or_3" (formula "3") (term "1"))
                                    (rule "concrete_and_3" (formula "3"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "eq_or" (formula "3") (term "0"))
                                    (rule "cnf_rightDist" (formula "4"))
                                    (rule "neq_or" (formula "4") (term "1"))
                                    (rule "concrete_and_3" (formula "4"))
                                    (rule "shift_paren_or" (formula "4"))
                                    (rule "commute_or" (formula "4") (term "0"))
                                    (rule "neq_or_4" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "shift_paren_or" (formula "2"))
                                    (rule "neq_or_2" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "ifElseSplit" (formula "22"))
                                    (branch "if boolv_5 true"
                                       (rule "simplifyUpdate2" (formula "23"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "23"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "18"))
                                       (rule "simplifyUpdate1" (formula "18") (term "1"))
                                       (rule "applyOnPV" (formula "18") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "abstractExecutionNonVoid" (formula "22") (term "1") (inst "#label=_label14") (inst "#v1=v1") (inst "result=result_Q2_0") (inst "returns=returns_Q2_0") (inst "exc=exc_Q2_0") (inst "normal=normal_Q2_0"))
                                       (rule "concrete_and_3" (formula "22") (term "1,1,0,1"))
                                       (rule "concrete_and_3" (formula "22") (term "1,1,0,1"))
                                       (rule "concrete_and_3" (formula "22") (term "1,1,0,1"))
                                       (rule "simplifyUpdate2" (formula "22") (term "1,1,1"))
                                       (rule "impRight" (formula "22"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "sequentialToParallel2" (formula "25"))
                                       (rule "applyOnAbstractUpdate" (formula "25") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3"))
                                       (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
                                       (rule "sequentialToParallel2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "25"))
                                       (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3"))
                                       (rule "simplifyUpdate3" (formula "3") (term "0"))
                                       (rule "sequentialToParallel2" (formula "1"))
                                       (rule "applyOnParallel" (formula "1") (term "1,0"))
                                       (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
                                       (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
                                       (rule "sequentialToParallel2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate3" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "2"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                       (rule "applyOnPV" (formula "3") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                                       (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,1,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,0,0,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                        (builtin "simplifyUpdatesAbstract" (formula "3") (term "0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                       (rule "eq_or" (formula "2") (term "1,1,0"))
                                       (rule "commute_or" (formula "2") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "4"))
                                       (rule "concrete_and_1" (formula "2") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                       (rule "neq_or" (formula "2") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "2") (term "0,0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "commute_and" (formula "2") (term "0"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (rule "neq_or_3" (formula "3") (term "1"))
                                       (rule "concrete_and_3" (formula "3"))
                                       (rule "neq_or_2" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or_2" (formula "2"))
                                       (rule "neq_or" (formula "2") (term "0"))
                                       (rule "concrete_or_1" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "ifSplit" (formula "21"))
                                       (branch "if returns_0 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "4") (term "0"))
                                          (rule "concrete_or_2" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "1,1") (ifseqformula "4"))
                                          (rule "concrete_and_3" (formula "5") (term "1"))
                                          (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "5") (term "1"))
                                          (rule "concrete_eq_4" (formula "5"))
                                          (rule "notLeft" (formula "5"))
                                          (rule "blockReturn" (formula "22") (term "1"))
                                          (rule "blockReturn" (formula "22") (term "1"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "applyEq" (formula "2") (term "0,1,0,0,1,1,0,0") (ifseqformula "4"))
                                          (rule "applyEqRigid" (formula "24") (term "0,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "24") (term "0,1,0,1,0") (ifseqformula "1"))
                                          (rule "apply_eq_boolean" (formula "2") (term "0,0,0,0,1,1,0,0") (ifseqformula "19"))
                                          (rule "applyEqRigid" (formula "2") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "methodCallReturn" (formula "22") (term "1"))
                                          (rule "assignment" (formula "22") (term "1"))
                                          (rule "sequentialToParallel2" (formula "22"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                          (rule "applyOnElementary" (formula "22") (term "1,0"))
                                          (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                          (rule "methodCallEmpty" (formula "22") (term "1"))
                                          (rule "tryEmpty" (formula "22") (term "1"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "emptyModality" (formula "22") (term "1"))
                                          (rule "notRight" (formula "22"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                           (builtin "simplifyUpdatesAbstract" (formula "3") (term "0"))
                                          (rule "ifSplit" (formula "24"))
                                          (branch "if returns_0 true"
                                             (rule "simplifyUpdate2" (formula "25"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "boolean_equal" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "blockReturn" (formula "24") (term "1"))
                                             (rule "blockReturn" (formula "24") (term "1"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "methodCallReturn" (formula "24") (term "1"))
                                             (rule "assignment" (formula "24") (term "1"))
                                             (rule "sequentialToParallel2" (formula "24"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                             (rule "applyOnElementary" (formula "24") (term "1,0"))
                                             (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                             (rule "methodCallEmpty" (formula "24") (term "1"))
                                             (rule "tryEmpty" (formula "24") (term "1"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "emptyModality" (formula "24") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "24"))
                                             (rule "applyOnPV" (formula "24") (term "0"))
                                             (rule "close" (formula "24") (ifseqformula "1"))
                                          )
                                          (branch "if returns_0 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "25"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "20"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1"))
                                             (rule "applyOnPV" (formula "20") (term "0"))
                                             (rule "boolean_equal" (formula "20"))
                                             (rule "closeTrue" (formula "20"))
                                          )
                                       )
                                       (branch "if returns_0 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "22"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "19"))
                                          (rule "simplifyUpdate1" (formula "19") (term "1"))
                                          (rule "applyOnPV" (formula "19") (term "0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "19"))
                                          (rule "concrete_not_2" (formula "3") (term "0"))
                                          (rule "concrete_or_1" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "18"))
                                          (rule "concrete_not_2" (formula "3") (term "0,1"))
                                          (rule "concrete_and_1" (formula "3") (term "1"))
                                          (rule "apply_eq_boolean" (formula "1") (term "0,1,0,1,1,0,0") (ifseqformula "18"))
                                          (rule "apply_eq_boolean_rigid" (formula "23") (term "0,1,0,1,0") (ifseqformula "18"))
                                          (rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "21") (term "1") (newnames "boolv_8"))
                                          (rule "inequality_comparison_simple" (formula "21") (term "1"))
                                          (rule "sequentialToParallel2" (formula "21"))
                                          (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                          (rule "applyOnElementary" (formula "21") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                          (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                                          (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                                           (builtin "simplifyUpdatesAbstract" (formula "1") (term "0"))
                                          (rule "ifSplit" (formula "23"))
                                          (branch "if returns_0 true"
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if returns_0 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "24"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "18"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1"))
                                             (rule "applyOnPV" (formula "18") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "23") (term "1") (newnames "boolv_9"))
                                             (rule "inequality_comparison_simple" (formula "23") (term "1"))
                                             (rule "sequentialToParallel2" (formula "23"))
                                             (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                             (rule "applyOnElementary" (formula "23") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                             (rule "simplifyUpdate1Rigid" (formula "23") (term "1,0,0,1,0"))
                                             (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                             (rule "ifSplit" (formula "21"))
                                             (branch "if boolv_8 true"
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "22"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                (rule "ifthenelse_concrete4" (formula "1"))
                                                (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                                (rule "concrete_or_4" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "18"))
                                                (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                                                (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "18"))
                                                (rule "concrete_eq_4" (formula "3"))
                                                (rule "notLeft" (formula "3"))
                                                (rule "blockThrow" (formula "22") (term "1"))
                                                (rule "blockThrow" (formula "22") (term "1"))
                                                (rule "methodCallParamThrow" (formula "22") (term "1"))
                                                (rule "tryCatchThrow" (formula "22") (term "1"))
                                                (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=boolv"))
                                                (rule "variableDeclaration" (formula "22") (term "1") (newnames "boolv_10"))
                                                (rule "equality_comparison_simple" (formula "22") (term "1"))
                                                (rule "sequentialToParallel2" (formula "22"))
                                                (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
                                                (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
                                                (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
                                                (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "18"))
                                                (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
                                                (rule "ifSplit" (formula "24"))
                                                (branch "if boolv_9 true"
                                                   (rule "simplifyUpdate2" (formula "25"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "boolean_equal" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "blockThrow" (formula "24") (term "1"))
                                                   (rule "blockThrow" (formula "24") (term "1"))
                                                   (rule "methodCallParamThrow" (formula "24") (term "1"))
                                                   (rule "tryCatchThrow" (formula "24") (term "1"))
                                                   (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=boolv"))
                                                   (rule "variableDeclaration" (formula "24") (term "1") (newnames "boolv_11"))
                                                   (rule "equality_comparison_simple" (formula "24") (term "1"))
                                                   (rule "sequentialToParallel2" (formula "24"))
                                                   (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                   (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                   (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                                                   (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                                                   (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "18"))
                                                   (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                                                   (rule "ifElseSplit" (formula "22"))
                                                   (branch "if boolv_10 true"
                                                      (rule "simplifyUpdate2" (formula "23"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "1"))
                                                      (rule "applyOnPV" (formula "1") (term "0"))
                                                      (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                      (rule "boolean_not_equal_2" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "if boolv_10 false"
                                                      (rule "false_to_not_true" (formula "1") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "23"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "17"))
                                                      (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                      (rule "applyOnPV" (formula "17") (term "0"))
                                                      (rule "boolean_not_equal_2" (formula "17"))
                                                      (rule "false_right" (formula "17"))
                                                      (rule "elim_double_block" (formula "22") (term "1"))
                                                      (rule "ifElseSplit" (formula "24"))
                                                      (branch "if boolv_11 true"
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "simplifyUpdate2" (formula "25"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "boolean_not_equal_2" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "if boolv_11 false"
                                                         (rule "false_to_not_true" (formula "1") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "25"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "17"))
                                                         (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                         (rule "applyOnPV" (formula "17") (term "0"))
                                                         (rule "boolean_not_equal_2" (formula "17"))
                                                         (rule "false_right" (formula "17"))
                                                         (rule "elim_double_block" (formula "24") (term "1"))
                                                         (rule "ifElseSplit" (formula "22"))
                                                         (branch "if exc_1 instanceof Throwable true"
                                                            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                            (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                            (rule "concrete_or_4" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "17"))
                                                            (rule "applyOnPV" (formula "17") (term "0"))
                                                            (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                            (rule "variableDeclaration" (formula "22") (term "1") (newnames "t"))
                                                            (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                                                            (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                            (rule "boolean_equal" (formula "1") (term "1,1"))
                                                            (rule "concrete_or_3" (formula "1") (term "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "sequentialToParallel2" (formula "22"))
                                                            (rule "simplifyUpdate2" (formula "22"))
                                                            (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                            (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                            (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                                            (rule "assignment" (formula "22") (term "1"))
                                                            (rule "sequentialToParallel2" (formula "22"))
                                                            (rule "simplifyUpdate2" (formula "22"))
                                                            (rule "simplifyUpdate3" (formula "22") (term "0"))
                                                            (rule "applyOnElementary" (formula "22") (term "0"))
                                                            (rule "applyOnPV" (formula "22") (term "0,0"))
                                                            (rule "emptyModality" (formula "22") (term "1"))
                                                            (rule "notRight" (formula "22"))
                                                            (rule "applyOnRigidFormula" (formula "1"))
                                                            (rule "applyOnPV" (formula "1") (term "0"))
                                                            (rule "ifElseSplit" (formula "24"))
                                                            (branch "if exc_1 instanceof Throwable true"
                                                               (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                               (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                               (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                               (rule "concrete_or_4" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "18"))
                                                               (rule "applyOnPV" (formula "18") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                               (rule "variableDeclaration" (formula "24") (term "1") (newnames "t_1"))
                                                               (rule "delete_unnecessary_cast" (formula "24") (term "1"))
                                                               (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                               (rule "boolean_equal" (formula "1") (term "1,1"))
                                                               (rule "concrete_or_3" (formula "1") (term "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "sequentialToParallel2" (formula "24"))
                                                               (rule "simplifyUpdate2" (formula "24"))
                                                               (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                               (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                               (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                                               (rule "assignment" (formula "24") (term "1"))
                                                               (rule "sequentialToParallel2" (formula "24"))
                                                               (rule "simplifyUpdate2" (formula "24"))
                                                               (rule "simplifyUpdate3" (formula "24") (term "0"))
                                                               (rule "applyOnElementary" (formula "24") (term "0"))
                                                               (rule "applyOnPV" (formula "24") (term "0,0"))
                                                               (rule "emptyModality" (formula "24") (term "1"))
                                                               (rule "applyOnRigidFormula" (formula "24"))
                                                               (rule "applyOnPV" (formula "24") (term "0"))
                                                               (rule "close" (formula "24") (ifseqformula "1"))
                                                            )
                                                            (branch "if exc_1 instanceof Throwable false"
                                                               (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                               (rule "false_to_not_true" (formula "1") (term "1"))
                                                               (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                               (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                               (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                               (rule "double_not" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "close" (formula "20") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch "if exc_1 instanceof Throwable false"
                                                            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                            (rule "false_to_not_true" (formula "1") (term "1"))
                                                            (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                            (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                            (rule "double_not" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "1"))
                                                            (rule "applyOnPV" (formula "1") (term "0"))
                                                            (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                            (rule "close" (formula "19") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "if boolv_9 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "25"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "17"))
                                                   (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                   (rule "applyOnPV" (formula "17") (term "0"))
                                                   (rule "boolean_equal" (formula "17"))
                                                   (rule "closeTrue" (formula "17"))
                                                )
                                             )
                                             (branch "if boolv_8 false"
                                                (rule "false_to_not_true" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "22"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "18"))
                                                (rule "applyOnPV" (formula "18") (term "0"))
                                                (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                (rule "ifthenelse_concrete4" (formula "18"))
                                                (rule "boolean_not_equal_2" (formula "18") (term "1"))
                                                (rule "concrete_or_4" (formula "18"))
                                                (rule "notRight" (formula "18"))
                                                (rule "replace_known_left" (formula "24") (term "0,0,1,0") (ifseqformula "1"))
                                                (rule "ifthenelse_true" (formula "24") (term "0,1,0"))
                                                (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
                                                (rule "concrete_eq_3" (formula "4"))
                                                (rule "blockEmpty" (formula "22") (term "1"))
                                                (rule "applyEqRigid" (formula "24") (term "0,1,0,0") (ifseqformula "1"))
                                                (rule "methodCallReturn" (formula "22") (term "1"))
                                                (rule "assignment" (formula "22") (term "1"))
                                                (rule "elimSelfSingleUpdateFor" (formula "22") (term "1"))
                                                (rule "methodCallEmpty" (formula "22") (term "1"))
                                                (rule "tryEmpty" (formula "22") (term "1"))
                                                (rule "emptyModality" (formula "22") (term "1"))
                                                (rule "notRight" (formula "22"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "ifSplit" (formula "24"))
                                                (branch "if boolv_9 true"
                                                   (rule "simplifyUpdate2" (formula "25"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "boolean_not_equal_2" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "if boolv_9 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "25"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "20"))
                                                   (rule "applyOnPV" (formula "20") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "20") (term "1"))
                                                   (rule "boolean_not_equal_2" (formula "20"))
                                                   (rule "false_right" (formula "20"))
                                                   (rule "blockEmpty" (formula "24") (term "1"))
                                                   (rule "methodCallReturn" (formula "24") (term "1"))
                                                   (rule "assignment" (formula "24") (term "1"))
                                                   (rule "elimSelfSingleUpdateFor" (formula "24") (term "1"))
                                                   (rule "methodCallEmpty" (formula "24") (term "1"))
                                                   (rule "tryEmpty" (formula "24") (term "1"))
                                                   (rule "emptyModality" (formula "24") (term "1"))
                                                   (rule "applyOnRigidFormula" (formula "24"))
                                                    (opengoal "     !objUnderTest = null    &   ConsolidateDuplicateConditionalFragments::exactInstance(objUnderTest)      = TRUE    & wellFormed(heap)    & measuredByEmpty    &   boolean::select(heap,                        objUnderTest,                        java.lang.Object::<created>)      = TRUE -> (    {result:=_result}           \\<{ try {                 result=objUnderTest.before(result)@ConsolidateDuplicateConditionalFragments;               }   catch (Throwable t) {                 result=t;               }             }\\> Post(result)     <-> {result:=_result}           \\<{ try {                  result=objUnderTest.after(result)@ConsolidateDuplicateConditionalFragments;               }   catch (Throwable t) {                 result=t;               }             }\\> Post(result)) ")
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
(branch "Case '<-'"
   (rule "diamondToBox" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_before,savedHeapBefore_before"))
   (rule "sequentialToParallel2" (formula "7"))
    (builtin "Block Contract (External)" (formula "7") (newnames "result#0,exc#1,heap_Before_BLOCK,savedHeap_Before_BLOCK"))
   (branch "Precondition"
      (rule "simplifyUpdate2" (formula "7"))
      (rule "applyOnSkip" (formula "7") (term "0"))
      (rule "applySkip2" (formula "7"))
      (rule "replace_known_left" (formula "7") (term "1,1") (ifseqformula "1"))
      (rule "concrete_and_3" (formula "7") (term "1"))
      (rule "replace_known_left" (formula "7") (term "1,1") (ifseqformula "4"))
      (rule "concrete_and_3" (formula "7") (term "1"))
      (rule "replace_known_right" (formula "7") (term "0,1") (ifseqformula "6"))
      (rule "concrete_not_2" (formula "7") (term "1"))
      (rule "concrete_and_3" (formula "7"))
      (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "3"))
      (rule "concrete_and_1" (formula "7"))
      (rule "close" (formula "7") (ifseqformula "2"))
   )
   (branch "Usage"
      (rule "neq_or" (formula "5") (term "1,1,1"))
      (rule "concrete_and_3" (formula "5") (term "1,1"))
      (rule "inInt" (formula "5") (term "0,1,1,1"))
      (rule "concrete_and_1" (formula "5") (term "1,1,1"))
      (rule "simplifyUpdate2" (formula "5"))
      (rule "simplifyUpdate3" (formula "5") (term "0"))
      (rule "applySkip2" (formula "5"))
      (rule "simplifyUpdate2" (formula "5"))
      (rule "simplifyUpdate3" (formula "8") (term "1,0"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "6"))
      (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "5"))
      (rule "concrete_or_1" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "sequentialToParallel2" (formula "10"))
      (rule "simplifyUpdate3" (formula "10") (term "1,0"))
      (rule "disjointDefinition" (formula "6"))
      (rule "disjointDefinition" (formula "7"))
      (rule "commuteIntersection" (formula "6") (term "0"))
      (rule "commuteIntersection" (formula "7") (term "0"))
      (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_after,savedHeapBefore_after"))
      (rule "sequentialToParallel2" (formula "8"))
       (builtin "Block Contract (External)" (formula "8") (newnames "result#14,exc#15,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0"))
      (branch "Precondition"
         (rule "simplifyUpdate2" (formula "8"))
         (rule "applyOnSkip" (formula "8") (term "0"))
         (rule "applySkip2" (formula "8"))
         (rule "replace_known_left" (formula "8") (term "1,0") (ifseqformula "2"))
         (rule "concrete_and_3" (formula "8") (term "0"))
         (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "3"))
         (rule "concrete_and_1" (formula "8"))
         (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "9"))
         (rule "concrete_not_2" (formula "8") (term "0,0"))
         (rule "concrete_and_1" (formula "8") (term "0"))
         (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "4"))
         (rule "concrete_and_1" (formula "8"))
         (rule "close" (formula "8") (ifseqformula "1"))
      )
      (branch "Usage"
         (rule "neq_or" (formula "8") (term "1,1,1"))
         (rule "concrete_and_3" (formula "8") (term "1,1"))
         (rule "inInt" (formula "8") (term "0,1,1,1"))
         (rule "concrete_and_1" (formula "8") (term "1,1,1"))
         (rule "simplifyUpdate2" (formula "8"))
         (rule "simplifyUpdate3" (formula "8") (term "0"))
         (rule "applySkip2" (formula "8"))
         (rule "simplifyUpdate2" (formula "8"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "9"))
         (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "8"))
         (rule "concrete_or_1" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "sequentialToParallel2" (formula "11"))
         (rule "simplifyUpdate3" (formula "11") (term "1,0"))
         (rule "disjointDefinition" (formula "9"))
         (rule "disjointDefinition" (formula "10"))
         (rule "commuteIntersection" (formula "9") (term "0"))
         (rule "commuteIntersection" (formula "9") (term "0"))
         (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=boolv"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "boolv"))
         (rule "inequality_comparison_simple" (formula "11") (term "1"))
         (rule "sequentialToParallel2" (formula "11"))
         (rule "simplifyUpdate3" (formula "11") (term "1,0"))
         (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "5"))
         (rule "ifthenelse_true" (formula "11") (term "0,1,0"))
         (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=boolv"))
         (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv_1"))
         (rule "inequality_comparison_simple" (formula "9") (term "1"))
         (rule "sequentialToParallel2" (formula "9"))
         (rule "simplifyUpdate3" (formula "9") (term "1,0"))
         (rule "replace_known_left" (formula "9") (term "0,0,1,0") (ifseqformula "8"))
         (rule "ifthenelse_true" (formula "9") (term "0,1,0"))
          (builtin "simplifyUpdatesAbstract" (formula "11"))
          (builtin "simplifyUpdatesAbstract" (formula "9"))
         (rule "ifSplit" (formula "11"))
         (branch "if boolv true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if boolv false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "9"))
            (rule "simplifyUpdate1" (formula "9") (term "1"))
            (rule "applyOnPV" (formula "9") (term "0"))
            (rule "boolean_not_equal_2" (formula "9"))
            (rule "false_right" (formula "9"))
            (rule "blockEmpty" (formula "11") (term "1"))
            (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "boolv_2,normal,exc"))
            (rule "abstractExpression" (formula "11") (term "1") (newnames "f_U_e_1") (inst "exc=exc_0") (inst "normal=normal_0"))
            (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
            (rule "impRight" (formula "11"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "applyOnAbstractUpdate" (formula "13") (term "1,0"))
            (rule "sequentialToParallel2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnAbstractUpdate" (formula "1") (term "0"))
            (rule "sequentialToParallel2" (formula "2"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "applyOnAbstractUpdate" (formula "2") (term "0"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "sequentialToParallel2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "0"))
            (rule "sequentialToParallel2" (formula "2"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate3" (formula "2") (term "0"))
            (rule "abstractUpdateToElementaryUpdates" (formula "13") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1") (term "0"))
            (rule "replace_known_left" (formula "1") (term "1,1") (ifseqformula "2"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "concrete_eq_3" (formula "1"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyEqRigid" (formula "13") (term "0,1,1,0") (ifseqformula "2"))
            (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "1"))
            (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=boolv_3"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "boolv_3"))
            (rule "inequality_comparison_simple" (formula "13") (term "1"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "applyOnElementary" (formula "13") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "13") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0"))
            (rule "eqClose" (formula "13") (term "0,0,1,0"))
            (rule "ifthenelse_true" (formula "13") (term "0,1,0"))
            (rule "ifSplit" (formula "11"))
            (branch "if boolv_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "11"))
               (rule "applyOnPV" (formula "11") (term "0"))
               (rule "simplifyUpdate1" (formula "11") (term "1"))
               (rule "boolean_not_equal_2" (formula "11"))
               (rule "false_right" (formula "11"))
               (rule "blockEmpty" (formula "11") (term "1") (newnames "normal_0,exc_0,returns,result_0,C_P"))
               (rule "abstractExecutionNonVoid" (formula "11") (term "1") (inst "#label=_label0") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
               (rule "concrete_and_3" (formula "11") (term "1,1,0,1"))
               (rule "concrete_and_3" (formula "11") (term "1,1,0,1"))
               (rule "concrete_and_3" (formula "11") (term "1,1,0,1"))
               (rule "impRight" (formula "11"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "sequentialToParallel2" (formula "14") (term "1"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0,1"))
               (rule "sequentialToParallel2" (formula "3"))
               (rule "simplifyUpdate2" (formula "3"))
               (rule "applyOnAbstractUpdate" (formula "3") (term "0"))
               (rule "sequentialToParallel2" (formula "1") (term "1"))
               (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
               (rule "sequentialToParallel2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "applyOnAbstractUpdate" (formula "2") (term "0"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "applyOnParallel" (formula "14") (term "1,0"))
               (rule "simplifyUpdate3" (formula "14") (term "1,1,0"))
               (rule "applyOnAbstractUpdate" (formula "14") (term "0,1,0"))
               (rule "sequentialToParallel2" (formula "3"))
               (rule "simplifyUpdate2" (formula "3"))
               (rule "simplifyUpdate3" (formula "3") (term "0"))
               (rule "sequentialToParallel2" (formula "1"))
               (rule "applyOnParallel" (formula "1") (term "1,0"))
               (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
               (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
               (rule "sequentialToParallel2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate3" (formula "2") (term "0"))
               (rule "applyOnRigidFormula" (formula "3"))
               (rule "simplifyUpdate2" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "0"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "applyOnRigidFormula" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "1,1"))
               (rule "simplifyUpdate2" (formula "3") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0"))
               (rule "applyOnPV" (formula "3") (term "0,0"))
               (rule "simplifyUpdate1" (formula "3") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0"))
               (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
               (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
               (rule "applyOnPV" (formula "3") (term "0,1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
               (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
               (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
               (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
               (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
               (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,1,0"))
               (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
               (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
               (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
               (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,0,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0"))
               (rule "commute_or" (formula "2") (term "0,0"))
               (rule "cnf_rightDist" (formula "2") (term "1,0"))
               (rule "eq_or" (formula "2") (term "1,1,0"))
               (rule "commute_or" (formula "2") (term "0,1,0"))
               (rule "commute_and" (formula "2") (term "1,0"))
               (rule "cnf_rightDist" (formula "2") (term "0,0"))
               (rule "neq_or" (formula "2") (term "0,0,0"))
               (rule "concrete_and_1" (formula "2") (term "0,0"))
               (rule "commute_or" (formula "2") (term "0,0"))
               (rule "shift_paren_and" (formula "2") (term "0"))
               (rule "cnf_rightDist" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "commute_or" (formula "2"))
               (rule "cnf_rightDist" (formula "3"))
               (rule "neq_or_3" (formula "3") (term "1"))
               (rule "concrete_and_3" (formula "3"))
               (rule "cnf_rightDist" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "commute_or_2" (formula "3"))
               (rule "eq_or" (formula "3") (term "0"))
               (rule "cnf_rightDist" (formula "4"))
               (rule "neq_or" (formula "4") (term "1"))
               (rule "concrete_and_3" (formula "4"))
               (rule "shift_paren_or" (formula "4"))
               (rule "commute_or" (formula "4") (term "0"))
               (rule "neq_or_4" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "cnf_rightDist" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "commute_or" (formula "3"))
               (rule "shift_paren_or" (formula "2"))
               (rule "neq_or_2" (formula "2") (term "0"))
               (rule "concrete_or_1" (formula "2"))
               (rule "true_left" (formula "2"))
                (builtin "simplifyUpdatesAbstract" (formula "16") (term "0,0,1,1,0,0,0"))
                (builtin "simplifyUpdatesAbstract" (formula "14"))
                (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,0,1,0,0"))
                (builtin "simplifyUpdatesAbstract" (formula "16") (term "0,0,1,0,0,0"))
                (builtin "simplifyUpdatesAbstract" (formula "14") (term "0,0,1,0"))
                (builtin "simplifyUpdatesAbstract" (formula "1") (term "0"))
                (builtin "simplifyUpdatesAbstract" (formula "16"))
               (rule "ifSplit" (formula "14"))
               (branch "if returns true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                  (rule "concrete_not_1" (formula "3") (term "0"))
                  (rule "concrete_or_2" (formula "3"))
                  (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "1"))
                  (rule "concrete_not_1" (formula "4") (term "0,1"))
                  (rule "concrete_and_2" (formula "4") (term "1"))
                  (rule "concrete_eq_4" (formula "4"))
                  (rule "notLeft" (formula "4"))
                  (rule "blockReturn" (formula "15") (term "1"))
                  (rule "applyEqRigid" (formula "15") (term "0,0,0,1,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "15") (term "0,1,0,1,1,0") (ifseqformula "1"))
                  (rule "methodCallReturn" (formula "15") (term "1"))
                  (rule "simplifyUpdate2" (formula "15"))
                  (rule "assignment" (formula "15") (term "1"))
                  (rule "sequentialToParallel2" (formula "15"))
                  (rule "simplifyUpdate2" (formula "15"))
                  (rule "simplifyUpdate3" (formula "15") (term "1,0"))
                  (rule "applyOnElementary" (formula "15") (term "1,0"))
                  (rule "applyOnPV" (formula "15") (term "0,1,0"))
                  (rule "methodCallEmpty" (formula "15") (term "1"))
                  (rule "tryEmpty" (formula "15") (term "1"))
                  (rule "simplifyUpdate2" (formula "15"))
                  (rule "emptyModality" (formula "15") (term "1"))
                  (rule "notRight" (formula "15"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "ifSplit" (formula "17"))
                  (branch "if boolv_3 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "15"))
                     (rule "applyOnPV" (formula "15") (term "0"))
                     (rule "simplifyUpdate1" (formula "15") (term "1"))
                     (rule "boolean_not_equal_2" (formula "15"))
                     (rule "false_right" (formula "15"))
                      (builtin "simplifyUpdatesAbstract" (formula "17"))
                     (rule "ifElseSplit" (formula "17"))
                     (branch "if boolv_2 true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyEq" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
                        (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label10") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                        (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                        (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                        (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                        (rule "impRight" (formula "18"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "sequentialToParallel2" (formula "21") (term "1"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0,1"))
                        (rule "sequentialToParallel2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "applyOnParallel" (formula "21") (term "1,0"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,1,0"))
                        (rule "applyOnAbstractUpdate" (formula "21") (term "0,1,0"))
                        (rule "sequentialToParallel2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "simplifyUpdate3" (formula "3") (term "0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate3" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "19"))
                        (rule "concrete_eq_2" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "18"))
                        (rule "concrete_or_2" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "18"))
                        (rule "simplifyUpdate2" (formula "18") (term "0"))
                        (rule "simplifyUpdate2" (formula "18") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "18") (term "0"))
                        (rule "applyOnRigidFormula" (formula "18") (term "1"))
                        (rule "simplifyUpdate1Rigid" (formula "18") (term "1,1"))
                        (rule "applyOnPV" (formula "18") (term "0,1"))
                        (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "7"))
                        (rule "concrete_and_3" (formula "18"))
                        (rule "notRight" (formula "18"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0,1") (ifseqformula "1"))
                        (rule "simplifyUpdate2" (formula "3") (term "0,0,1"))
                        (rule "concrete_not_1" (formula "3") (term "0,1"))
                        (rule "concrete_and_2" (formula "3") (term "1"))
                        (rule "concrete_or_4" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1"))
                        (rule "applyEqRigid" (formula "19") (term "0,1,0,1,1,0") (ifseqformula "4"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "4"))
                        (rule "apply_eq_boolean" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "19") (term "0,0,0,1,1,0") (ifseqformula "6"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,0,0,1,0,0") (ifseqformula "6"))
                         (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,0,1,0") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")))
                         (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")))
                         (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")))
                        (rule "ifSplit" (formula "19"))
                        (branch "if returns true"
                           (rule "simplifyUpdate2" (formula "20"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "blockReturn" (formula "19") (term "1"))
                           (rule "blockReturn" (formula "19") (term "1"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "methodCallReturn" (formula "19") (term "1"))
                           (rule "assignment" (formula "19") (term "1"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                           (rule "applyOnElementary" (formula "19") (term "1,0"))
                           (rule "applyOnPV" (formula "19") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "19") (term "1"))
                           (rule "tryEmpty" (formula "19") (term "1"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "emptyModality" (formula "19") (term "1"))
                           (rule "applyOnRigidFormula" (formula "19"))
                           (rule "applyOnPV" (formula "19") (term "0"))
                           (rule "close" (formula "19") (ifseqformula "3"))
                        )
                        (branch "if returns false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "20"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "17"))
                           (rule "simplifyUpdate1" (formula "17") (term "1"))
                           (rule "applyOnPV" (formula "17") (term "0"))
                           (rule "boolean_equal" (formula "17"))
                           (rule "closeTrue" (formula "17"))
                        )
                     )
                     (branch "if boolv_2 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "15"))
                        (rule "applyOnPV" (formula "15") (term "0"))
                        (rule "simplifyUpdate1" (formula "15") (term "1"))
                        (rule "apply_eq_boolean" (formula "18") (term "0,1,1,0") (ifseqformula "15"))
                        (rule "elim_double_block_2" (formula "18") (term "1"))
                        (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label9") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                        (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                        (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                        (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                        (rule "impRight" (formula "18"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "applyOnAbstractUpdate" (formula "21") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "1") (term "1"))
                        (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
                        (rule "sequentialToParallel2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "sequentialToParallel2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "simplifyUpdate3" (formula "3") (term "0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "applyOnParallel" (formula "1") (term "1,0"))
                        (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
                        (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate3" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "19"))
                        (rule "concrete_eq_2" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "17"))
                        (rule "concrete_or_2" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "17"))
                        (rule "simplifyUpdate2" (formula "17") (term "1"))
                        (rule "simplifyUpdate2" (formula "17") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "17") (term "1"))
                        (rule "simplifyUpdate1" (formula "17") (term "1,1"))
                        (rule "applyOnPV" (formula "17") (term "0,1"))
                        (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "6"))
                        (rule "concrete_and_3" (formula "17"))
                        (rule "notRight" (formula "17"))
                        (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                        (rule "concrete_and_1" (formula "3") (term "0"))
                        (rule "replace_known_left" (formula "3") (term "0,0,1") (ifseqformula "1"))
                        (rule "concrete_not_1" (formula "3") (term "0,1"))
                        (rule "concrete_and_2" (formula "3") (term "1"))
                        (rule "concrete_or_4" (formula "3"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1"))
                        (rule "applyEq" (formula "19") (term "0,0,0,1,0") (ifseqformula "5"))
                        (rule "apply_eq_boolean" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "17"))
                        (rule "applyEqRigid" (formula "19") (term "0,1,0,1,0") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "1") (term "0,1,0,0,1,1,0,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "1") (term "0,1,0,1,1,0,0") (ifseqformula "3"))
                         (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,1,0,0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                         (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                         (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                        (rule "ifSplit" (formula "19"))
                        (branch "if returns true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "20"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "blockReturn" (formula "19") (term "1"))
                           (rule "blockReturn" (formula "19") (term "1"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "methodCallReturn" (formula "19") (term "1"))
                           (rule "assignment" (formula "19") (term "1"))
                           (rule "sequentialToParallel2" (formula "19"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                           (rule "applyOnElementary" (formula "19") (term "1,0"))
                           (rule "applyOnPV" (formula "19") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "19") (term "1"))
                           (rule "tryEmpty" (formula "19") (term "1"))
                           (rule "simplifyUpdate2" (formula "19"))
                           (rule "emptyModality" (formula "19") (term "1"))
                           (rule "applyOnRigidFormula" (formula "19"))
                           (rule "applyOnPV" (formula "19") (term "0"))
                           (rule "close" (formula "19") (ifseqformula "2"))
                        )
                        (branch "if returns false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "20"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "boolean_equal" (formula "16"))
                           (rule "closeTrue" (formula "16"))
                        )
                     )
                  )
               )
               (branch "if returns false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "14"))
                  (rule "simplifyUpdate1" (formula "14") (term "1"))
                  (rule "applyOnPV" (formula "14") (term "0"))
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "14"))
                  (rule "concrete_not_2" (formula "2") (term "0"))
                  (rule "concrete_or_1" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "13"))
                  (rule "concrete_not_2" (formula "2") (term "0,1"))
                  (rule "concrete_and_1" (formula "2") (term "1"))
                  (rule "apply_eq_boolean_rigid" (formula "14") (term "0,1,0,1,1,0") (ifseqformula "13"))
                  (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=boolv"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "boolv_4"))
                  (rule "inequality_comparison_simple" (formula "14") (term "1"))
                  (rule "sequentialToParallel2" (formula "14"))
                  (rule "simplifyUpdate3" (formula "14") (term "1,0"))
                  (rule "applyOnElementary" (formula "14") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
                  (rule "simplifyUpdate1Rigid" (formula "14") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
                   (builtin "simplifyUpdatesAbstract" (formula "14"))
                  (rule "ifSplit" (formula "16"))
                  (branch "if boolv_3 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "13"))
                     (rule "simplifyUpdate1" (formula "13") (term "1"))
                     (rule "applyOnPV" (formula "13") (term "0"))
                     (rule "boolean_not_equal_2" (formula "13"))
                     (rule "false_right" (formula "13"))
                      (builtin "simplifyUpdatesAbstract" (formula "16"))
                     (rule "ifSplit" (formula "14"))
                     (branch "if boolv_4 true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "15") (term "0,0,1,0") (ifseqformula "13"))
                        (rule "ifthenelse_false" (formula "15") (term "0,1,0"))
                        (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "13"))
                        (rule "concrete_eq_4" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "blockThrow" (formula "15") (term "1"))
                        (rule "methodCallParamThrow" (formula "15") (term "1"))
                        (rule "simplifyUpdate2" (formula "15"))
                        (rule "tryCatchThrow" (formula "15") (term "1"))
                        (rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=boolv"))
                        (rule "variableDeclaration" (formula "15") (term "1") (newnames "boolv_5"))
                        (rule "equality_comparison_simple" (formula "15") (term "1"))
                        (rule "sequentialToParallel2" (formula "15"))
                        (rule "simplifyUpdate3" (formula "15") (term "1,0"))
                        (rule "applyOnElementary" (formula "15") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "15") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "15") (term "0,0,0,1,0"))
                        (rule "replace_known_right" (formula "15") (term "0,0,1,0") (ifseqformula "13"))
                        (rule "ifthenelse_false" (formula "15") (term "0,1,0"))
                        (rule "ifElseSplit" (formula "17"))
                        (branch "if boolv_2 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "applyEq" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
                           (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label8") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                           (rule "impRight" (formula "18"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "sequentialToParallel2" (formula "21") (term "1"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0,1"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "applyOnParallel" (formula "21") (term "1,0"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,1,0"))
                           (rule "applyOnAbstractUpdate" (formula "21") (term "0,1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate3" (formula "3") (term "0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3") (term "1"))
                           (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                           (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "16"))
                           (rule "concrete_eq_2" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "15") (term "1"))
                           (rule "applyOnPV" (formula "15") (term "0,1"))
                           (rule "simplifyUpdate1" (formula "15") (term "1,1"))
                           (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "17"))
                           (rule "concrete_and_4" (formula "15"))
                           (rule "false_right" (formula "15"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                           (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                           (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "17"))
                           (rule "concrete_not_2" (formula "2") (term "0,1"))
                           (rule "concrete_and_1" (formula "2") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                           (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                           (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "17"))
                           (rule "concrete_and_2" (formula "2") (term "1,0"))
                           (rule "concrete_or_4" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1"))
                           (rule "applyOnPV" (formula "2") (term "0,0,1"))
                           (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "16"))
                           (rule "concrete_not_2" (formula "2") (term "1"))
                           (rule "concrete_or_3" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "apply_eq_boolean" (formula "19") (term "0,1,0,1,1,0") (ifseqformula "16"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "16"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "14"))
                           (rule "ifElseSplit" (formula "17"))
                           (branch "if boolv_5 true"
                              (rule "simplifyUpdate2" (formula "18"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if boolv_5 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "18"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "14"))
                              (rule "applyOnPV" (formula "14") (term "0"))
                              (rule "simplifyUpdate1" (formula "14") (term "1"))
                              (rule "boolean_not_equal_2" (formula "14"))
                              (rule "false_right" (formula "14"))
                              (rule "elim_double_block" (formula "17") (term "1"))
                               (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,0,1,0") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                               (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0,0") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                               (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                              (rule "ifElseSplit" (formula "17"))
                              (branch "if exc_0 instanceof Throwable true"
                                 (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                 (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                 (rule "concrete_or_4" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "14"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1"))
                                 (rule "applyOnPV" (formula "14") (term "0"))
                                 (rule "variableDeclaration" (formula "17") (term "1") (newnames "t"))
                                 (rule "delete_unnecessary_cast" (formula "17") (term "1"))
                                 (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                 (rule "boolean_equal" (formula "1") (term "1,1"))
                                 (rule "concrete_or_3" (formula "1") (term "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0"))
                                 (rule "applyOnPV" (formula "17") (term "0,1,0"))
                                 (rule "assignment" (formula "17") (term "1"))
                                 (rule "sequentialToParallel2" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17"))
                                 (rule "simplifyUpdate3" (formula "17") (term "0"))
                                 (rule "applyOnElementary" (formula "17") (term "0"))
                                 (rule "applyOnPV" (formula "17") (term "0,0"))
                                 (rule "emptyModality" (formula "17") (term "1"))
                                 (rule "notRight" (formula "17"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "ifSplit" (formula "19"))
                                 (branch "if returns true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "20"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if returns false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "20"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "15"))
                                    (rule "applyOnPV" (formula "15") (term "0"))
                                    (rule "simplifyUpdate1Rigid" (formula "15") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "15"))
                                    (rule "false_right" (formula "15"))
                                    (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=boolv"))
                                    (rule "variableDeclaration" (formula "19") (term "1") (newnames "boolv_6"))
                                    (rule "inequality_comparison_simple" (formula "19") (term "1"))
                                    (rule "sequentialToParallel2" (formula "19"))
                                    (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                    (rule "applyOnElementary" (formula "19") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "19") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                                    (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "16"))
                                    (rule "ifthenelse_false" (formula "19") (term "0,1,0"))
                                    (rule "ifSplit" (formula "19"))
                                    (branch "if boolv_6 true"
                                       (rule "simplifyUpdate2" (formula "20"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockThrow" (formula "19") (term "1"))
                                       (rule "blockThrow" (formula "19") (term "1"))
                                       (rule "methodCallParamThrow" (formula "19") (term "1"))
                                       (rule "tryCatchThrow" (formula "19") (term "1"))
                                       (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "19") (term "1") (newnames "boolv_7"))
                                       (rule "equality_comparison_simple" (formula "19") (term "1"))
                                       (rule "sequentialToParallel2" (formula "19"))
                                       (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                       (rule "applyOnElementary" (formula "19") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "19") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                                       (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                                       (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "16"))
                                       (rule "ifthenelse_false" (formula "19") (term "0,1,0"))
                                       (rule "ifElseSplit" (formula "19"))
                                       (branch "if boolv_7 true"
                                          (rule "simplifyUpdate2" (formula "20"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if boolv_7 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "20"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "15"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1"))
                                          (rule "applyOnPV" (formula "15") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "15"))
                                          (rule "false_right" (formula "15"))
                                          (rule "elim_double_block" (formula "19") (term "1"))
                                          (rule "ifElseSplit" (formula "19"))
                                          (branch "if exc_0 instanceof Throwable true"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                             (rule "concrete_or_4" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "15"))
                                             (rule "applyOnPV" (formula "15") (term "0"))
                                             (rule "simplifyUpdate1" (formula "15") (term "1"))
                                             (rule "variableDeclaration" (formula "19") (term "1") (newnames "t_1"))
                                             (rule "delete_unnecessary_cast" (formula "19") (term "1"))
                                             (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                             (rule "boolean_equal" (formula "1") (term "1,1"))
                                             (rule "concrete_or_3" (formula "1") (term "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "sequentialToParallel2" (formula "19"))
                                             (rule "simplifyUpdate2" (formula "19"))
                                             (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                             (rule "applyOnElementary" (formula "19") (term "1,0"))
                                             (rule "applyOnPV" (formula "19") (term "0,1,0"))
                                             (rule "assignment" (formula "19") (term "1"))
                                             (rule "sequentialToParallel2" (formula "19"))
                                             (rule "simplifyUpdate2" (formula "19"))
                                             (rule "simplifyUpdate3" (formula "19") (term "0"))
                                             (rule "applyOnElementary" (formula "19") (term "0"))
                                             (rule "applyOnPV" (formula "19") (term "0,0"))
                                             (rule "emptyModality" (formula "19") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "19"))
                                             (rule "applyOnPV" (formula "19") (term "0"))
                                             (rule "close" (formula "19") (ifseqformula "1"))
                                          )
                                          (branch "if exc_0 instanceof Throwable false"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                             (rule "concrete_or_4" (formula "1") (term "0,1"))
                                             (rule "double_not" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "close" (formula "17") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "if boolv_6 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "20"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "15"))
                                       (rule "simplifyUpdate1" (formula "15") (term "1"))
                                       (rule "applyOnPV" (formula "15") (term "0"))
                                       (rule "boolean_equal" (formula "15"))
                                       (rule "closeTrue" (formula "15"))
                                    )
                                 )
                              )
                              (branch "if exc_0 instanceof Throwable false"
                                 (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                 (rule "concrete_or_4" (formula "1") (term "0,1"))
                                 (rule "double_not" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "close" (formula "16") (ifseqformula "1"))
                              )
                           )
                        )
                        (branch "if boolv_2 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "12"))
                           (rule "simplifyUpdate1" (formula "12") (term "1"))
                           (rule "applyOnPV" (formula "12") (term "0"))
                           (rule "apply_eq_boolean" (formula "18") (term "0,1,1,0") (ifseqformula "12"))
                           (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label7") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                           (rule "impRight" (formula "18"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "applyOnAbstractUpdate" (formula "21") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3") (term "1"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "simplifyUpdate3" (formula "3") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "sequentialToParallel2" (formula "1") (term "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
                           (rule "sequentialToParallel2" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1"))
                           (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate3" (formula "3") (term "0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "applyOnParallel" (formula "1") (term "1,0"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
                           (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                           (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "16"))
                           (rule "concrete_eq_2" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "14"))
                           (rule "concrete_or_2" (formula "2") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate2" (formula "14") (term "1"))
                           (rule "simplifyUpdate2" (formula "14") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "14") (term "1"))
                           (rule "applyOnPV" (formula "14") (term "0,1"))
                           (rule "simplifyUpdate1" (formula "14") (term "1,1"))
                           (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "17"))
                           (rule "concrete_and_4" (formula "14"))
                           (rule "false_right" (formula "14"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0"))
                           (rule "applyOnPV" (formula "2") (term "0,1,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "16"))
                           (rule "concrete_and_4" (formula "2") (term "0"))
                           (rule "concrete_or_2" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "3"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                           (rule "applyOnRigidFormula" (formula "13"))
                           (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                           (rule "applyOnPV" (formula "13") (term "0"))
                           (rule "apply_eq_boolean" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "14"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
                           (rule "apply_eq_boolean_rigid" (formula "19") (term "0,1,0,1,0") (ifseqformula "16"))
                           (rule "ifElseSplit" (formula "17"))
                           (branch "if boolv_5 true"
                              (rule "simplifyUpdate2" (formula "18"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if boolv_5 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "18"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "13"))
                              (rule "simplifyUpdate1" (formula "13") (term "1"))
                              (rule "applyOnPV" (formula "13") (term "0"))
                              (rule "boolean_not_equal_2" (formula "13"))
                              (rule "false_right" (formula "13"))
                              (rule "elim_double_block" (formula "17") (term "1"))
                               (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                               (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,1,0,0") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                               (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                              (rule "ifElseSplit" (formula "17"))
                              (branch "if exc_0 instanceof Throwable true"
                                 (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                 (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                 (rule "concrete_or_4" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "13"))
                                 (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                 (rule "applyOnPV" (formula "13") (term "0"))
                                 (rule "variableDeclaration" (formula "17") (term "1") (newnames "t"))
                                 (rule "delete_unnecessary_cast" (formula "17") (term "1"))
                                 (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                 (rule "boolean_equal" (formula "1") (term "1,1"))
                                 (rule "concrete_or_3" (formula "1") (term "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0"))
                                 (rule "applyOnPV" (formula "17") (term "0,1,0"))
                                 (rule "assignment" (formula "17") (term "1"))
                                 (rule "sequentialToParallel2" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17"))
                                 (rule "simplifyUpdate3" (formula "17") (term "0"))
                                 (rule "applyOnElementary" (formula "17") (term "0"))
                                 (rule "applyOnPV" (formula "17") (term "0,0"))
                                 (rule "emptyModality" (formula "17") (term "1"))
                                 (rule "notRight" (formula "17"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "ifSplit" (formula "19"))
                                 (branch "if returns true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "20"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if returns false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "20"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "14"))
                                    (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                    (rule "applyOnPV" (formula "14") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "14"))
                                    (rule "false_right" (formula "14"))
                                    (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=boolv"))
                                    (rule "variableDeclaration" (formula "19") (term "1") (newnames "boolv_6"))
                                    (rule "inequality_comparison_simple" (formula "19") (term "1"))
                                    (rule "sequentialToParallel2" (formula "19"))
                                    (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                    (rule "applyOnElementary" (formula "19") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "19") (term "1,0,0,1,0"))
                                    (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                                    (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "16"))
                                    (rule "ifthenelse_false" (formula "19") (term "0,1,0"))
                                    (rule "ifSplit" (formula "19"))
                                    (branch "if boolv_6 true"
                                       (rule "simplifyUpdate2" (formula "20"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockThrow" (formula "19") (term "1"))
                                       (rule "blockThrow" (formula "19") (term "1"))
                                       (rule "methodCallParamThrow" (formula "19") (term "1"))
                                       (rule "tryCatchThrow" (formula "19") (term "1"))
                                       (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "19") (term "1") (newnames "boolv_7"))
                                       (rule "equality_comparison_simple" (formula "19") (term "1"))
                                       (rule "sequentialToParallel2" (formula "19"))
                                       (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                       (rule "applyOnElementary" (formula "19") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "19") (term "1,0,0,1,0"))
                                       (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                                       (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "16"))
                                       (rule "ifthenelse_false" (formula "19") (term "0,1,0"))
                                       (rule "ifElseSplit" (formula "19"))
                                       (branch "if boolv_7 true"
                                          (rule "simplifyUpdate2" (formula "20"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if boolv_7 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "20"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "14"))
                                          (rule "simplifyUpdate1" (formula "14") (term "1"))
                                          (rule "applyOnPV" (formula "14") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "14"))
                                          (rule "false_right" (formula "14"))
                                          (rule "elim_double_block" (formula "19") (term "1"))
                                          (rule "ifElseSplit" (formula "19"))
                                          (branch "if exc_0 instanceof Throwable true"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                             (rule "concrete_or_4" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "14"))
                                             (rule "applyOnPV" (formula "14") (term "0"))
                                             (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                             (rule "variableDeclaration" (formula "19") (term "1") (newnames "t_1"))
                                             (rule "delete_unnecessary_cast" (formula "19") (term "1"))
                                             (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                             (rule "boolean_equal" (formula "1") (term "1,1"))
                                             (rule "concrete_or_3" (formula "1") (term "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "sequentialToParallel2" (formula "19"))
                                             (rule "simplifyUpdate2" (formula "19"))
                                             (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                                             (rule "applyOnElementary" (formula "19") (term "1,0"))
                                             (rule "applyOnPV" (formula "19") (term "0,1,0"))
                                             (rule "assignment" (formula "19") (term "1"))
                                             (rule "sequentialToParallel2" (formula "19"))
                                             (rule "simplifyUpdate2" (formula "19"))
                                             (rule "simplifyUpdate3" (formula "19") (term "0"))
                                             (rule "applyOnElementary" (formula "19") (term "0"))
                                             (rule "applyOnPV" (formula "19") (term "0,0"))
                                             (rule "emptyModality" (formula "19") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "19"))
                                             (rule "applyOnPV" (formula "19") (term "0"))
                                             (rule "close" (formula "19") (ifseqformula "1"))
                                          )
                                          (branch "if exc_0 instanceof Throwable false"
                                             (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                             (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                             (rule "concrete_or_4" (formula "1") (term "0,1"))
                                             (rule "double_not" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "close" (formula "17") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch "if boolv_6 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "20"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "14"))
                                       (rule "simplifyUpdate1" (formula "14") (term "1"))
                                       (rule "applyOnPV" (formula "14") (term "0"))
                                       (rule "boolean_equal" (formula "14"))
                                       (rule "closeTrue" (formula "14"))
                                    )
                                 )
                              )
                              (branch "if exc_0 instanceof Throwable false"
                                 (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                 (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                 (rule "concrete_or_4" (formula "1") (term "0,1"))
                                 (rule "double_not" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                 (rule "close" (formula "16") (ifseqformula "1"))
                              )
                           )
                        )
                     )
                     (branch "if boolv_4 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "13"))
                        (rule "applyOnPV" (formula "13") (term "0"))
                        (rule "simplifyUpdate1" (formula "13") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "13"))
                        (rule "boolean_not_equal_2" (formula "13") (term "1"))
                        (rule "concrete_or_4" (formula "13"))
                        (rule "notRight" (formula "13"))
                        (rule "replace_known_left" (formula "15") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "ifthenelse_true" (formula "15") (term "0,1,0"))
                        (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                        (rule "concrete_eq_3" (formula "3"))
                        (rule "applyEqRigid" (formula "15") (term "0,1,1,0,0") (ifseqformula "1"))
                        (rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=boolv"))
                        (rule "variableDeclaration" (formula "15") (term "1") (newnames "boolv_5"))
                        (rule "abstractExpression" (formula "15") (term "1") (inst "exc=exc_0") (inst "normal=normal_0"))
                        (rule "concrete_and_3" (formula "15") (term "0,1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                        (rule "impRight" (formula "15"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "sequentialToParallel2" (formula "17") (term "1"))
                        (rule "simplifyUpdate3" (formula "17") (term "1,0,1"))
                        (rule "sequentialToParallel2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate3" (formula "1") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "sequentialToParallel2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "sequentialToParallel2" (formula "17"))
                        (rule "simplifyUpdate2" (formula "17"))
                        (rule "applyOnParallel" (formula "17") (term "1,0"))
                        (rule "simplifyUpdate3" (formula "17") (term "1,1,0"))
                        (rule "applyOnAbstractUpdate" (formula "17") (term "0,1,0"))
                        (rule "sequentialToParallel2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate3" (formula "1") (term "0"))
                        (rule "sequentialToParallel2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate3" (formula "2") (term "0"))
                        (rule "abstractUpdateToElementaryUpdates" (formula "17") (term "0,1,0"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0"))
                        (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "2"))
                        (rule "concrete_eq_3" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "simplifyUpdate1Rigid" (formula "2") (term "1"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyEq" (formula "15") (term "0,1,1,0") (ifseqformula "5"))
                        (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=boolv_6"))
                        (rule "variableDeclaration" (formula "15") (term "1") (newnames "boolv_6"))
                        (rule "inequality_comparison_simple" (formula "15") (term "1"))
                        (rule "sequentialToParallel2" (formula "15"))
                        (rule "simplifyUpdate3" (formula "15") (term "1,0"))
                        (rule "applyOnElementary" (formula "15") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "15") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0"))
                        (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0"))
                        (rule "applyOnPV" (formula "15") (term "0,0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0"))
                        (rule "eqClose" (formula "15") (term "0,0,1,0"))
                        (rule "ifthenelse_true" (formula "15") (term "0,1,0"))
                        (rule "ifElseSplit" (formula "17"))
                        (branch "if boolv_2 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "applyEq" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
                           (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label4") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                           (rule "impRight" (formula "18"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "applyOnAbstractUpdate" (formula "21") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "1") (term "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate3" (formula "3") (term "0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "applyOnParallel" (formula "1") (term "1,0"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
                           (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                           (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "7"))
                           (rule "concrete_eq_1" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "4"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "replace_known_right" (formula "2") (term "0,1,0,1") (ifseqformula "18"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "concrete_and_1" (formula "2") (term "1"))
                           (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "3"))
                           (rule "concrete_not_1" (formula "2") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "applyOnPV" (formula "3") (term "0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1"))
                           (rule "applyOnRigidFormula" (formula "17"))
                           (rule "simplifyUpdate1" (formula "17") (term "1"))
                           (rule "applyOnPV" (formula "17") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
                           (rule "applyOnPV" (formula "2") (term "0,1,0"))
                           (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                           (rule "applyOnPV" (formula "2") (term "0,0,1"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
                           (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "17"))
                           (rule "concrete_and_2" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "apply_eq_boolean_rigid" (formula "19") (term "0,1,0,1,0") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "19") (term "0,0,0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0,1,1,0,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "5"))
                           (rule "apply_eq_boolean" (formula "1") (term "0,1,0,1,1,0,0") (ifseqformula "16"))
                            (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,0,1,0,1,0,0") (ifInst ""  (formula "14")))
                           (rule "applyEq" (formula "17") (term "0,1,0,1,0,0") (ifseqformula "2"))
                            (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,1,0,0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                            (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,0,1,0,0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                            (builtin "simplifyUpdatesAbstract" (formula "17"))
                            (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                            (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,0,0,1,0,0") (ifInst ""  (formula "14")))
                           (rule "ifSplit" (formula "19"))
                           (branch "if returns true"
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if returns false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "16"))
                              (rule "applyOnPV" (formula "16") (term "0"))
                              (rule "simplifyUpdate1" (formula "16") (term "1"))
                              (rule "boolean_not_equal_2" (formula "16"))
                              (rule "false_right" (formula "16"))
                              (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "19") (term "1") (newnames "boolv_7"))
                              (rule "inequality_comparison_simple" (formula "19") (term "1"))
                              (rule "sequentialToParallel2" (formula "19"))
                              (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                              (rule "applyOnElementary" (formula "19") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                              (rule "eqClose" (formula "19") (term "0,0,1,0"))
                              (rule "ifthenelse_true" (formula "19") (term "0,1,0"))
                              (rule "ifSplit" (formula "17"))
                              (branch "if boolv_6 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "18"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if boolv_6 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "18"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "16"))
                                 (rule "applyOnPV" (formula "16") (term "0"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "16"))
                                 (rule "false_right" (formula "16"))
                                 (rule "ifSplit" (formula "19"))
                                 (branch "if boolv_7 true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "20"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if boolv_7 false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "20"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "16"))
                                    (rule "applyOnPV" (formula "16") (term "0"))
                                    (rule "simplifyUpdate1" (formula "16") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "16"))
                                    (rule "false_right" (formula "16"))
                                    (rule "abstractExecutionNonVoid" (formula "19") (term "1") (inst "#label=_label5") (inst "#v1=v1") (inst "result=result_Q1_0") (inst "returns=returns_Q1_0") (inst "exc=exc_Q1_0") (inst "normal=normal_Q1_0"))
                                    (rule "concrete_and_3" (formula "19") (term "1,1,0,1"))
                                    (rule "concrete_and_3" (formula "19") (term "1,1,0,1"))
                                    (rule "concrete_and_3" (formula "19") (term "1,1,0,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "1,1,1"))
                                    (rule "impRight" (formula "19"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "sequentialToParallel2" (formula "22"))
                                    (rule "applyOnAbstractUpdate" (formula "22") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3"))
                                    (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "1"))
                                    (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "22"))
                                    (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3"))
                                    (rule "simplifyUpdate3" (formula "3") (term "0"))
                                    (rule "sequentialToParallel2" (formula "1"))
                                    (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate3" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                    (rule "applyOnPV" (formula "3") (term "0,0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                    (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                    (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,1,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0"))
                                    (rule "commute_or" (formula "2") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                    (rule "eq_or" (formula "2") (term "1,1,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0"))
                                    (rule "commute_and" (formula "2") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                    (rule "neq_or" (formula "2") (term "0,0,0"))
                                    (rule "concrete_and_1" (formula "2") (term "0,0"))
                                    (rule "commute_or" (formula "2") (term "0,0"))
                                    (rule "shift_paren_and" (formula "2") (term "0"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "2"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (rule "neq_or_3" (formula "3") (term "1"))
                                    (rule "concrete_and_3" (formula "3"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "eq_or" (formula "3") (term "0"))
                                    (rule "cnf_rightDist" (formula "4"))
                                    (rule "neq_or" (formula "4") (term "1"))
                                    (rule "concrete_and_3" (formula "4"))
                                    (rule "shift_paren_or" (formula "4"))
                                    (rule "commute_or" (formula "4") (term "0"))
                                    (rule "neq_or_4" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "shift_paren_or" (formula "2"))
                                    (rule "neq_or_2" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "ifElseSplit" (formula "20"))
                                    (branch "if boolv_5 true"
                                       (rule "simplifyUpdate2" (formula "21"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "abstractExecutionNonVoid" (formula "20") (term "1") (inst "#label=_label6") (inst "#v1=v1") (inst "result=result_Q1_0") (inst "returns=returns_Q1_0") (inst "exc=exc_Q1_0") (inst "normal=normal_Q1_0"))
                                       (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                       (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                       (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                       (rule "simplifyUpdate2" (formula "20") (term "1,1,1"))
                                       (rule "impRight" (formula "20"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "sequentialToParallel2" (formula "23") (term "1"))
                                       (rule "simplifyUpdate3" (formula "23") (term "1,0,1"))
                                       (rule "sequentialToParallel2" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3"))
                                       (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate3" (formula "1") (term "1,0,1"))
                                       (rule "sequentialToParallel2" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1"))
                                       (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "sequentialToParallel2" (formula "23"))
                                       (rule "applyOnParallel" (formula "23") (term "1,0"))
                                       (rule "simplifyUpdate3" (formula "23") (term "1,1,0"))
                                       (rule "applyOnAbstractUpdate" (formula "23") (term "0,1,0"))
                                       (rule "sequentialToParallel2" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3"))
                                       (rule "simplifyUpdate3" (formula "3") (term "0"))
                                       (rule "sequentialToParallel2" (formula "1"))
                                       (rule "applyOnParallel" (formula "1") (term "1,0"))
                                       (rule "simplifyUpdate3" (formula "1") (term "1,1,0"))
                                       (rule "applyOnAbstractUpdate" (formula "1") (term "0,1,0"))
                                       (rule "sequentialToParallel2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate3" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "2"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                       (rule "applyOnPV" (formula "3") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                       (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                                        (builtin "simplifyUpdatesAbstract" (formula "3") (term "0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                       (rule "eq_or" (formula "2") (term "1,1,0"))
                                       (rule "commute_or" (formula "2") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "4"))
                                       (rule "concrete_and_1" (formula "2") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                       (rule "neq_or" (formula "2") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "2") (term "0,0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "commute_and" (formula "2") (term "0"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (rule "neq_or_3" (formula "3") (term "1"))
                                       (rule "concrete_and_3" (formula "3"))
                                       (rule "neq_or_2" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or_2" (formula "2"))
                                       (rule "neq_or" (formula "2") (term "0"))
                                       (rule "concrete_or_1" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "ifSplit" (formula "23"))
                                       (branch "if returns_1 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "4") (term "0"))
                                          (rule "concrete_or_2" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "1,1") (ifseqformula "4"))
                                          (rule "concrete_and_3" (formula "5") (term "1"))
                                          (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "5") (term "1"))
                                          (rule "concrete_eq_4" (formula "5"))
                                          (rule "notLeft" (formula "5"))
                                          (rule "blockReturn" (formula "24") (term "1"))
                                          (rule "blockReturn" (formula "24") (term "1"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "apply_eq_boolean" (formula "2") (term "0,0,0,0,1,1,0,0") (ifseqformula "20"))
                                          (rule "applyEq" (formula "22") (term "0,1,0,1,1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "2") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "22") (term "0,0,0,1,1,0") (ifseqformula "4"))
                                          (rule "applyEqRigid" (formula "2") (term "0,1,0,0,1,1,0,0") (ifseqformula "4"))
                                          (rule "methodCallReturn" (formula "24") (term "1"))
                                          (rule "assignment" (formula "24") (term "1"))
                                          (rule "sequentialToParallel2" (formula "24"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                          (rule "applyOnElementary" (formula "24") (term "1,0"))
                                          (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                          (rule "methodCallEmpty" (formula "24") (term "1"))
                                          (rule "tryEmpty" (formula "24") (term "1"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "emptyModality" (formula "24") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "24"))
                                          (rule "applyOnPV" (formula "24") (term "0"))
                                           (builtin "simplifyUpdatesAbstract" (formula "2") (term "0"))
                                          (rule "ifSplit" (formula "22"))
                                          (branch "if returns_1 true"
                                             (rule "simplifyUpdate2" (formula "23"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "boolean_equal" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "blockReturn" (formula "22") (term "1"))
                                             (rule "blockReturn" (formula "22") (term "1"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "methodCallReturn" (formula "22") (term "1"))
                                             (rule "assignment" (formula "22") (term "1"))
                                             (rule "sequentialToParallel2" (formula "22"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                             (rule "applyOnElementary" (formula "22") (term "1,0"))
                                             (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                             (rule "methodCallEmpty" (formula "22") (term "1"))
                                             (rule "tryEmpty" (formula "22") (term "1"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "emptyModality" (formula "22") (term "1"))
                                             (rule "notRight" (formula "22"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "close" (formula "24") (ifseqformula "1"))
                                          )
                                          (branch "if returns_1 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "23"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "20"))
                                             (rule "applyOnPV" (formula "20") (term "0"))
                                             (rule "simplifyUpdate1" (formula "20") (term "1"))
                                             (rule "boolean_equal" (formula "20"))
                                             (rule "closeTrue" (formula "20"))
                                          )
                                       )
                                       (branch "if returns_1 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "20"))
                                          (rule "simplifyUpdate1" (formula "20") (term "1"))
                                          (rule "applyOnPV" (formula "20") (term "0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "20"))
                                          (rule "concrete_not_2" (formula "3") (term "0"))
                                          (rule "concrete_or_1" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "19"))
                                          (rule "concrete_not_2" (formula "3") (term "0,1"))
                                          (rule "concrete_and_1" (formula "3") (term "1"))
                                          (rule "apply_eq_boolean_rigid" (formula "21") (term "0,1,0,1,1,0") (ifseqformula "19"))
                                          (rule "apply_eq_boolean_rigid" (formula "1") (term "0,1,0,1,1,0,0") (ifseqformula "19"))
                                          (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "23") (term "1") (newnames "boolv_8"))
                                          (rule "inequality_comparison_simple" (formula "23") (term "1"))
                                          (rule "sequentialToParallel2" (formula "23"))
                                          (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                          (rule "applyOnElementary" (formula "23") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                          (rule "simplifyUpdate1Rigid" (formula "23") (term "2,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                          (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                          (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                                           (builtin "simplifyUpdatesAbstract" (formula "1") (term "0"))
                                          (rule "ifSplit" (formula "21"))
                                          (branch "if returns_1 true"
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if returns_1 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "19"))
                                             (rule "simplifyUpdate1" (formula "19") (term "1"))
                                             (rule "applyOnPV" (formula "19") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "19"))
                                             (rule "false_right" (formula "19"))
                                             (rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "21") (term "1") (newnames "boolv_9"))
                                             (rule "inequality_comparison_simple" (formula "21") (term "1"))
                                             (rule "sequentialToParallel2" (formula "21"))
                                             (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                             (rule "applyOnElementary" (formula "21") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                                             (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                                             (rule "ifSplit" (formula "23"))
                                             (branch "if boolv_8 true"
                                                (rule "simplifyUpdate2" (formula "24"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "ifthenelse_concrete4" (formula "1"))
                                                (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                                (rule "concrete_or_4" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "19"))
                                                (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
                                                (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "19"))
                                                (rule "concrete_eq_4" (formula "3"))
                                                (rule "notLeft" (formula "3"))
                                                (rule "blockThrow" (formula "24") (term "1"))
                                                (rule "blockThrow" (formula "24") (term "1"))
                                                (rule "methodCallParamThrow" (formula "24") (term "1"))
                                                (rule "tryCatchThrow" (formula "24") (term "1"))
                                                (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=boolv"))
                                                (rule "variableDeclaration" (formula "24") (term "1") (newnames "boolv_10"))
                                                (rule "equality_comparison_simple" (formula "24") (term "1"))
                                                (rule "sequentialToParallel2" (formula "24"))
                                                (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "24") (term "1,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                                                (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                                                (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "19"))
                                                (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                                                (rule "ifSplit" (formula "22"))
                                                (branch "if boolv_9 true"
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "23"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "boolean_equal" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "blockThrow" (formula "22") (term "1"))
                                                   (rule "blockThrow" (formula "22") (term "1"))
                                                   (rule "methodCallParamThrow" (formula "22") (term "1"))
                                                   (rule "tryCatchThrow" (formula "22") (term "1"))
                                                   (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=boolv"))
                                                   (rule "variableDeclaration" (formula "22") (term "1") (newnames "boolv_11"))
                                                   (rule "equality_comparison_simple" (formula "22") (term "1"))
                                                   (rule "sequentialToParallel2" (formula "22"))
                                                   (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                   (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                   (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
                                                   (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
                                                   (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "19"))
                                                   (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
                                                   (rule "ifElseSplit" (formula "24"))
                                                   (branch "if boolv_10 true"
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "simplifyUpdate2" (formula "25"))
                                                      (rule "applyOnRigidFormula" (formula "1"))
                                                      (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                      (rule "applyOnPV" (formula "1") (term "0"))
                                                      (rule "boolean_not_equal_2" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "if boolv_10 false"
                                                      (rule "false_to_not_true" (formula "1") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "25"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "18"))
                                                      (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                      (rule "applyOnPV" (formula "18") (term "0"))
                                                      (rule "boolean_not_equal_2" (formula "18"))
                                                      (rule "false_right" (formula "18"))
                                                      (rule "elim_double_block" (formula "24") (term "1"))
                                                      (rule "ifElseSplit" (formula "22"))
                                                      (branch "if boolv_11 true"
                                                         (rule "simplifyUpdate2" (formula "23"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "boolean_not_equal_2" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "if boolv_11 false"
                                                         (rule "false_to_not_true" (formula "1") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "23"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "18"))
                                                         (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                         (rule "applyOnPV" (formula "18") (term "0"))
                                                         (rule "boolean_not_equal_2" (formula "18"))
                                                         (rule "false_right" (formula "18"))
                                                         (rule "elim_double_block" (formula "22") (term "1"))
                                                         (rule "ifElseSplit" (formula "24"))
                                                         (branch "if exc_2 instanceof Throwable true"
                                                            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                            (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                            (rule "concrete_or_4" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "18"))
                                                            (rule "applyOnPV" (formula "18") (term "0"))
                                                            (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                            (rule "variableDeclaration" (formula "24") (term "1") (newnames "t"))
                                                            (rule "delete_unnecessary_cast" (formula "24") (term "1"))
                                                            (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                            (rule "boolean_equal" (formula "1") (term "1,1"))
                                                            (rule "concrete_or_3" (formula "1") (term "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "sequentialToParallel2" (formula "24"))
                                                            (rule "simplifyUpdate2" (formula "24"))
                                                            (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                            (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                            (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                                            (rule "assignment" (formula "24") (term "1"))
                                                            (rule "sequentialToParallel2" (formula "24"))
                                                            (rule "simplifyUpdate2" (formula "24"))
                                                            (rule "simplifyUpdate3" (formula "24") (term "0"))
                                                            (rule "applyOnElementary" (formula "24") (term "0"))
                                                            (rule "applyOnPV" (formula "24") (term "0,0"))
                                                            (rule "emptyModality" (formula "24") (term "1"))
                                                            (rule "applyOnRigidFormula" (formula "24"))
                                                            (rule "applyOnPV" (formula "24") (term "0"))
                                                            (rule "ifElseSplit" (formula "22"))
                                                            (branch "if exc_2 instanceof Throwable true"
                                                               (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                               (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                               (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                               (rule "concrete_or_4" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "18"))
                                                               (rule "applyOnPV" (formula "18") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                               (rule "variableDeclaration" (formula "22") (term "1") (newnames "t_1"))
                                                               (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                                                               (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                               (rule "boolean_equal" (formula "1") (term "1,1"))
                                                               (rule "concrete_or_3" (formula "1") (term "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "sequentialToParallel2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                               (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                               (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                                               (rule "assignment" (formula "22") (term "1"))
                                                               (rule "sequentialToParallel2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate3" (formula "22") (term "0"))
                                                               (rule "applyOnElementary" (formula "22") (term "0"))
                                                               (rule "applyOnPV" (formula "22") (term "0,0"))
                                                               (rule "emptyModality" (formula "22") (term "1"))
                                                               (rule "notRight" (formula "22"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "close" (formula "24") (ifseqformula "1"))
                                                            )
                                                            (branch "if exc_2 instanceof Throwable false"
                                                               (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                               (rule "false_to_not_true" (formula "1") (term "1"))
                                                               (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                               (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                               (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                               (rule "double_not" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "close" (formula "20") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch "if exc_2 instanceof Throwable false"
                                                            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                            (rule "false_to_not_true" (formula "1") (term "1"))
                                                            (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                            (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                            (rule "double_not" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "1"))
                                                            (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                            (rule "applyOnPV" (formula "1") (term "0"))
                                                            (rule "close" (formula "20") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "if boolv_9 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "23"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "18"))
                                                   (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                   (rule "applyOnPV" (formula "18") (term "0"))
                                                   (rule "boolean_equal" (formula "18"))
                                                   (rule "closeTrue" (formula "18"))
                                                )
                                             )
                                             (branch "if boolv_8 false"
                                                (rule "false_to_not_true" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "24"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "19"))
                                                (rule "applyOnPV" (formula "19") (term "0"))
                                                (rule "simplifyUpdate1" (formula "19") (term "1"))
                                                (rule "ifthenelse_concrete4" (formula "19"))
                                                (rule "boolean_not_equal_2" (formula "19") (term "1"))
                                                (rule "concrete_or_4" (formula "19"))
                                                (rule "notRight" (formula "19"))
                                                (rule "replace_known_left" (formula "22") (term "0,0,1,0") (ifseqformula "1"))
                                                (rule "ifthenelse_true" (formula "22") (term "0,1,0"))
                                                (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
                                                (rule "concrete_eq_3" (formula "4"))
                                                (rule "blockEmpty" (formula "24") (term "1"))
                                                (rule "applyEq" (formula "22") (term "0,1,1,0,0") (ifseqformula "1"))
                                                (rule "methodCallReturn" (formula "24") (term "1"))
                                                (rule "assignment" (formula "24") (term "1"))
                                                (rule "elimSelfSingleUpdateFor" (formula "24") (term "1"))
                                                (rule "methodCallEmpty" (formula "24") (term "1"))
                                                (rule "tryEmpty" (formula "24") (term "1"))
                                                (rule "emptyModality" (formula "24") (term "1"))
                                                (rule "applyOnRigidFormula" (formula "24"))
                                                (rule "ifSplit" (formula "22"))
                                                (branch "if boolv_9 true"
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "23"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "boolean_not_equal_2" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "if boolv_9 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "23"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "20"))
                                                   (rule "applyOnPV" (formula "20") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "20") (term "1"))
                                                   (rule "boolean_not_equal_2" (formula "20"))
                                                   (rule "false_right" (formula "20"))
                                                   (rule "blockEmpty" (formula "22") (term "1"))
                                                   (rule "methodCallReturn" (formula "22") (term "1"))
                                                   (rule "assignment" (formula "22") (term "1"))
                                                   (rule "elimSelfSingleUpdateFor" (formula "22") (term "1"))
                                                   (rule "methodCallEmpty" (formula "22") (term "1"))
                                                   (rule "tryEmpty" (formula "22") (term "1"))
                                                   (rule "emptyModality" (formula "22") (term "1"))
                                                   (rule "notRight" (formula "22"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                    (opengoal "     !objUnderTest = null    &   ConsolidateDuplicateConditionalFragments::exactInstance(objUnderTest)      = TRUE    & wellFormed(heap)    & measuredByEmpty    &   boolean::select(heap,                        objUnderTest,                        java.lang.Object::<created>)      = TRUE -> (    {result:=_result}           \\<{ try {                 result=objUnderTest.before(result)@ConsolidateDuplicateConditionalFragments;               }   catch (Throwable t) {                 result=t;               }             }\\> Post(result)     <-> {result:=_result}           \\<{ try {                  result=objUnderTest.after(result)@ConsolidateDuplicateConditionalFragments;               }   catch (Throwable t) {                 result=t;               }             }\\> Post(result)) ")
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "21"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "19"))
                                       (rule "simplifyUpdate1" (formula "19") (term "1"))
                                       (rule "applyOnPV" (formula "19") (term "0"))
                                       (rule "boolean_equal" (formula "19"))
                                       (rule "closeTrue" (formula "19"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "if boolv_2 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "apply_eq_boolean" (formula "18") (term "0,1,1,0") (ifseqformula "14"))
                           (rule "elim_double_block_2" (formula "18") (term "1"))
                           (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label1") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                           (rule "impRight" (formula "18"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "applyOnAbstractUpdate" (formula "21") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "applyOnAbstractUpdate" (formula "2") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "simplifyUpdate3" (formula "3") (term "0"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                           (rule "sequentialToParallel2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                           (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "6"))
                           (rule "concrete_eq_1" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "simplifyUpdate2" (formula "4"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "replace_known_left" (formula "2") (term "0,1,1,1") (ifseqformula "3"))
                           (rule "concrete_not_1" (formula "2") (term "1,1,1"))
                           (rule "simplifyUpdate2Rigid" (formula "2") (term "1,1"))
                           (rule "concrete_and_4" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate1Rigid" (formula "3") (term "1"))
                           (rule "applyOnPV" (formula "3") (term "0"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                           (rule "applyOnPV" (formula "2") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
                           (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "3"))
                           (rule "concrete_and_3" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,1,1"))
                           (rule "applyOnPV" (formula "2") (term "0,1,1"))
                           (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "3"))
                           (rule "concrete_and_3" (formula "2") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "neq_or_2" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "apply_eq_boolean_rigid" (formula "19") (term "0,1,0,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "19") (term "0,0,0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "apply_eq_boolean" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "16"))
                           (rule "applyEqRigid" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "4"))
                            (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,0,1,0,1,0,0") (ifInst ""  (formula "13")))
                           (rule "apply_eq_boolean" (formula "17") (term "0,1,0,1,0,0") (ifseqformula "15"))
                            (builtin "simplifyUpdatesAbstract" (formula "19") (term "0,1,0,0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                            (builtin "simplifyUpdatesAbstract" (formula "1") (term "0,1,0,0,0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                            (builtin "simplifyUpdatesAbstract" (formula "17"))
                            (builtin "simplifyUpdatesAbstract" (formula "1") (term "0") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                            (builtin "simplifyUpdatesAbstract" (formula "17") (term "0,0,0,1,0,0") (ifInst ""  (formula "13")))
                           (rule "ifSplit" (formula "19"))
                           (branch "if returns true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if returns false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "15"))
                              (rule "simplifyUpdate1" (formula "15") (term "1"))
                              (rule "applyOnPV" (formula "15") (term "0"))
                              (rule "boolean_not_equal_2" (formula "15"))
                              (rule "false_right" (formula "15"))
                              (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "19") (term "1") (newnames "boolv_7"))
                              (rule "inequality_comparison_simple" (formula "19") (term "1"))
                              (rule "sequentialToParallel2" (formula "19"))
                              (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                              (rule "applyOnElementary" (formula "19") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                              (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                              (rule "eqClose" (formula "19") (term "0,0,1,0"))
                              (rule "ifthenelse_true" (formula "19") (term "0,1,0"))
                              (rule "ifSplit" (formula "17"))
                              (branch "if boolv_6 true"
                                 (rule "simplifyUpdate2" (formula "18"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if boolv_6 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "18"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "15"))
                                 (rule "simplifyUpdate1" (formula "15") (term "1"))
                                 (rule "applyOnPV" (formula "15") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "15"))
                                 (rule "false_right" (formula "15"))
                                 (rule "ifSplit" (formula "19") (newnames "normal_1,exc_1,returns_0,result_1,C_Q2"))
                                 (branch "if boolv_7 true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "20"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if boolv_7 false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "20"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "15"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1"))
                                    (rule "applyOnPV" (formula "15") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "15"))
                                    (rule "false_right" (formula "15"))
                                    (rule "abstractExecutionNonVoid" (formula "19") (term "1") (inst "#label=_label2") (inst "#v1=v1") (inst "result=result_Q2_0") (inst "returns=returns_Q2_0") (inst "exc=exc_Q2_0") (inst "normal=normal_Q2_0"))
                                    (rule "concrete_and_3" (formula "19") (term "1,1,0,1"))
                                    (rule "concrete_and_3" (formula "19") (term "1,1,0,1"))
                                    (rule "concrete_and_3" (formula "19") (term "1,1,0,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "1,1,1"))
                                    (rule "impRight" (formula "19"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "sequentialToParallel2" (formula "22"))
                                    (rule "applyOnAbstractUpdate" (formula "22") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3"))
                                    (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "1"))
                                    (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "2") (term "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1"))
                                    (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "sequentialToParallel2" (formula "22"))
                                    (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3"))
                                    (rule "simplifyUpdate3" (formula "3") (term "0"))
                                    (rule "sequentialToParallel2" (formula "1"))
                                    (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                                    (rule "sequentialToParallel2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate3" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                    (rule "applyOnPV" (formula "3") (term "0,0"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "3") (term "1,1,1"))
                                    (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                    (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                    (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0"))
                                    (rule "commute_or" (formula "2") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                    (rule "eq_or" (formula "2") (term "1,1,0"))
                                    (rule "commute_or" (formula "2") (term "0,1,0"))
                                    (rule "commute_and" (formula "2") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                    (rule "neq_or" (formula "2") (term "0,0,0"))
                                    (rule "concrete_and_1" (formula "2") (term "0,0"))
                                    (rule "commute_or" (formula "2") (term "0,0"))
                                    (rule "shift_paren_and" (formula "2") (term "0"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "2"))
                                    (rule "cnf_rightDist" (formula "3"))
                                    (rule "neq_or_3" (formula "3") (term "1"))
                                    (rule "concrete_and_3" (formula "3"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "eq_or" (formula "3") (term "0"))
                                    (rule "cnf_rightDist" (formula "4"))
                                    (rule "neq_or" (formula "4") (term "1"))
                                    (rule "concrete_and_3" (formula "4"))
                                    (rule "shift_paren_or" (formula "4"))
                                    (rule "commute_or" (formula "4") (term "0"))
                                    (rule "neq_or_4" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "3"))
                                    (rule "shift_paren_or" (formula "2"))
                                    (rule "neq_or_2" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "ifElseSplit" (formula "20") (newnames "normal_2,exc_2,returns_1,result_2,C_Q1"))
                                    (branch "if boolv_5 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "21"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "21"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "18"))
                                       (rule "simplifyUpdate1" (formula "18") (term "1"))
                                       (rule "applyOnPV" (formula "18") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "18"))
                                       (rule "false_right" (formula "18"))
                                       (rule "abstractExecutionNonVoid" (formula "20") (term "1") (inst "#label=_label3") (inst "#v1=v1") (inst "result=result_Q2_0") (inst "returns=returns_Q2_0") (inst "exc=exc_Q2_0") (inst "normal=normal_Q2_0"))
                                       (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                       (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                       (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                       (rule "simplifyUpdate2" (formula "20") (term "1,1,1"))
                                       (rule "impRight" (formula "20"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "sequentialToParallel2" (formula "23") (term "1"))
                                       (rule "simplifyUpdate3" (formula "23") (term "1,0,1"))
                                       (rule "sequentialToParallel2" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3"))
                                       (rule "applyOnAbstractUpdate" (formula "3") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "1"))
                                       (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1"))
                                       (rule "simplifyUpdate3" (formula "2") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "sequentialToParallel2" (formula "23"))
                                       (rule "applyOnParallel" (formula "23") (term "1,0"))
                                       (rule "simplifyUpdate3" (formula "23") (term "1,1,0"))
                                       (rule "applyOnAbstractUpdate" (formula "23") (term "0,1,0"))
                                       (rule "sequentialToParallel2" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3"))
                                       (rule "simplifyUpdate3" (formula "3") (term "0"))
                                       (rule "sequentialToParallel2" (formula "1"))
                                       (rule "simplifyUpdate3" (formula "1") (term "1,0"))
                                       (rule "sequentialToParallel2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate3" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "2"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                       (rule "applyOnPV" (formula "3") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                                       (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,1,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,0,0,0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                        (builtin "simplifyUpdatesAbstract" (formula "3") (term "0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                       (rule "eq_or" (formula "2") (term "1,1,0"))
                                       (rule "commute_or" (formula "2") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "4"))
                                       (rule "concrete_and_1" (formula "2") (term "1,0"))
                                       (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                       (rule "neq_or" (formula "2") (term "0,0,0"))
                                       (rule "concrete_and_1" (formula "2") (term "0,0"))
                                       (rule "commute_or" (formula "2") (term "0,0"))
                                       (rule "commute_and" (formula "2") (term "0"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "cnf_rightDist" (formula "3"))
                                       (rule "neq_or_3" (formula "3") (term "1"))
                                       (rule "concrete_and_3" (formula "3"))
                                       (rule "neq_or_2" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or_2" (formula "2"))
                                       (rule "neq_or" (formula "2") (term "0"))
                                       (rule "concrete_or_1" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "ifSplit" (formula "23"))
                                       (branch "if returns_0 true"
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "4") (term "0"))
                                          (rule "concrete_or_2" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "1,1") (ifseqformula "4"))
                                          (rule "concrete_and_3" (formula "5") (term "1"))
                                          (rule "replace_known_left" (formula "5") (term "0,1") (ifseqformula "1"))
                                          (rule "concrete_not_1" (formula "5") (term "1"))
                                          (rule "concrete_eq_4" (formula "5"))
                                          (rule "notLeft" (formula "5"))
                                          (rule "blockReturn" (formula "24") (term "1"))
                                          (rule "blockReturn" (formula "24") (term "1"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "applyEq" (formula "2") (term "0,1,0,1,0,0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "2") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "22") (term "0,0,0,1,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "22") (term "0,1,0,1,1,0") (ifseqformula "1"))
                                          (rule "apply_eq_boolean_rigid" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "19"))
                                          (rule "methodCallReturn" (formula "24") (term "1"))
                                          (rule "assignment" (formula "24") (term "1"))
                                          (rule "sequentialToParallel2" (formula "24"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                          (rule "applyOnElementary" (formula "24") (term "1,0"))
                                          (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                          (rule "methodCallEmpty" (formula "24") (term "1"))
                                          (rule "tryEmpty" (formula "24") (term "1"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "emptyModality" (formula "24") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "24"))
                                          (rule "applyOnPV" (formula "24") (term "0"))
                                           (builtin "simplifyUpdatesAbstract" (formula "2") (term "0"))
                                          (rule "ifSplit" (formula "22"))
                                          (branch "if returns_0 true"
                                             (rule "simplifyUpdate2" (formula "23"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "boolean_equal" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "blockReturn" (formula "22") (term "1"))
                                             (rule "blockReturn" (formula "22") (term "1"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "methodCallReturn" (formula "22") (term "1"))
                                             (rule "assignment" (formula "22") (term "1"))
                                             (rule "sequentialToParallel2" (formula "22"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                             (rule "applyOnElementary" (formula "22") (term "1,0"))
                                             (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                             (rule "methodCallEmpty" (formula "22") (term "1"))
                                             (rule "tryEmpty" (formula "22") (term "1"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "emptyModality" (formula "22") (term "1"))
                                             (rule "notRight" (formula "22"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "close" (formula "24") (ifseqformula "1"))
                                          )
                                          (branch "if returns_0 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "23"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "19"))
                                             (rule "simplifyUpdate1Rigid" (formula "19") (term "1"))
                                             (rule "applyOnPV" (formula "19") (term "0"))
                                             (rule "boolean_equal" (formula "19"))
                                             (rule "closeTrue" (formula "19"))
                                          )
                                       )
                                       (branch "if returns_0 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "24"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "19"))
                                          (rule "simplifyUpdate1" (formula "19") (term "1"))
                                          (rule "applyOnPV" (formula "19") (term "0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "19"))
                                          (rule "concrete_not_2" (formula "3") (term "0"))
                                          (rule "concrete_or_1" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "18"))
                                          (rule "concrete_not_2" (formula "3") (term "0,1"))
                                          (rule "concrete_and_1" (formula "3") (term "1"))
                                          (rule "apply_eq_boolean_rigid" (formula "1") (term "0,1,0,1,0,0") (ifseqformula "18"))
                                          (rule "apply_eq_boolean" (formula "21") (term "0,1,0,1,1,0") (ifseqformula "18"))
                                          (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "23") (term "1") (newnames "boolv_8"))
                                          (rule "inequality_comparison_simple" (formula "23") (term "1"))
                                          (rule "sequentialToParallel2" (formula "23"))
                                          (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                          (rule "applyOnElementary" (formula "23") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                          (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                                          (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                           (builtin "simplifyUpdatesAbstract" (formula "1") (term "0"))
                                          (rule "ifSplit" (formula "21"))
                                          (branch "if returns_0 true"
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if returns_0 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "22"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "18"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1"))
                                             (rule "applyOnPV" (formula "18") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "21") (term "1") (newnames "boolv_9"))
                                             (rule "inequality_comparison_simple" (formula "21") (term "1"))
                                             (rule "sequentialToParallel2" (formula "21"))
                                             (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                             (rule "applyOnElementary" (formula "21") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                                             (rule "simplifyUpdate1Rigid" (formula "21") (term "1,0,0,1,0"))
                                             (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                                             (rule "ifSplit" (formula "23"))
                                             (branch "if boolv_8 true"
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "24"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                (rule "ifthenelse_concrete4" (formula "1"))
                                                (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                                (rule "concrete_or_4" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "18"))
                                                (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
                                                (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "18"))
                                                (rule "concrete_eq_4" (formula "3"))
                                                (rule "notLeft" (formula "3"))
                                                (rule "blockThrow" (formula "24") (term "1"))
                                                (rule "blockThrow" (formula "24") (term "1"))
                                                (rule "methodCallParamThrow" (formula "24") (term "1"))
                                                (rule "tryCatchThrow" (formula "24") (term "1"))
                                                (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=boolv"))
                                                (rule "variableDeclaration" (formula "24") (term "1") (newnames "boolv_10"))
                                                (rule "equality_comparison_simple" (formula "24") (term "1"))
                                                (rule "sequentialToParallel2" (formula "24"))
                                                (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                                (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                                                (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                                                (rule "replace_known_right" (formula "24") (term "0,0,1,0") (ifseqformula "18"))
                                                (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                                                (rule "ifSplit" (formula "22"))
                                                (branch "if boolv_9 true"
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "23"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "boolean_equal" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "blockThrow" (formula "22") (term "1"))
                                                   (rule "blockThrow" (formula "22") (term "1"))
                                                   (rule "methodCallParamThrow" (formula "22") (term "1"))
                                                   (rule "tryCatchThrow" (formula "22") (term "1"))
                                                   (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=boolv"))
                                                   (rule "variableDeclaration" (formula "22") (term "1") (newnames "boolv_11"))
                                                   (rule "equality_comparison_simple" (formula "22") (term "1"))
                                                   (rule "sequentialToParallel2" (formula "22"))
                                                   (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                   (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                   (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
                                                   (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
                                                   (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
                                                   (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "18"))
                                                   (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
                                                   (rule "ifElseSplit" (formula "24"))
                                                   (branch "if boolv_10 true"
                                                      (rule "simplifyUpdate2" (formula "25"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "1"))
                                                      (rule "applyOnPV" (formula "1") (term "0"))
                                                      (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                      (rule "boolean_not_equal_2" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "if boolv_10 false"
                                                      (rule "false_to_not_true" (formula "1") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "25"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "17"))
                                                      (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                      (rule "applyOnPV" (formula "17") (term "0"))
                                                      (rule "boolean_not_equal_2" (formula "17"))
                                                      (rule "false_right" (formula "17"))
                                                      (rule "elim_double_block" (formula "24") (term "1"))
                                                      (rule "ifElseSplit" (formula "22"))
                                                      (branch "if boolv_11 true"
                                                         (rule "simplifyUpdate2" (formula "23"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "boolean_not_equal_2" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "if boolv_11 false"
                                                         (rule "false_to_not_true" (formula "1") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "23"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "17"))
                                                         (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                         (rule "applyOnPV" (formula "17") (term "0"))
                                                         (rule "boolean_not_equal_2" (formula "17"))
                                                         (rule "false_right" (formula "17"))
                                                         (rule "elim_double_block" (formula "22") (term "1"))
                                                         (rule "ifElseSplit" (formula "24"))
                                                         (branch "if exc_1 instanceof Throwable true"
                                                            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                            (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                            (rule "concrete_or_4" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "17"))
                                                            (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                            (rule "applyOnPV" (formula "17") (term "0"))
                                                            (rule "variableDeclaration" (formula "24") (term "1") (newnames "t"))
                                                            (rule "delete_unnecessary_cast" (formula "24") (term "1"))
                                                            (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                            (rule "boolean_equal" (formula "1") (term "1,1"))
                                                            (rule "concrete_or_3" (formula "1") (term "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "sequentialToParallel2" (formula "24"))
                                                            (rule "simplifyUpdate2" (formula "24"))
                                                            (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                                            (rule "applyOnElementary" (formula "24") (term "1,0"))
                                                            (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                                            (rule "assignment" (formula "24") (term "1"))
                                                            (rule "sequentialToParallel2" (formula "24"))
                                                            (rule "simplifyUpdate2" (formula "24"))
                                                            (rule "simplifyUpdate3" (formula "24") (term "0"))
                                                            (rule "applyOnElementary" (formula "24") (term "0"))
                                                            (rule "applyOnPV" (formula "24") (term "0,0"))
                                                            (rule "emptyModality" (formula "24") (term "1"))
                                                            (rule "applyOnRigidFormula" (formula "24"))
                                                            (rule "applyOnPV" (formula "24") (term "0"))
                                                            (rule "ifElseSplit" (formula "22"))
                                                            (branch "if exc_1 instanceof Throwable true"
                                                               (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                               (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                               (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                               (rule "concrete_or_4" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "17"))
                                                               (rule "applyOnPV" (formula "17") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                               (rule "variableDeclaration" (formula "22") (term "1") (newnames "t_1"))
                                                               (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                                                               (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                               (rule "boolean_equal" (formula "1") (term "1,1"))
                                                               (rule "concrete_or_3" (formula "1") (term "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "sequentialToParallel2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                               (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                               (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                                               (rule "assignment" (formula "22") (term "1"))
                                                               (rule "sequentialToParallel2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate3" (formula "22") (term "0"))
                                                               (rule "applyOnElementary" (formula "22") (term "0"))
                                                               (rule "applyOnPV" (formula "22") (term "0,0"))
                                                               (rule "emptyModality" (formula "22") (term "1"))
                                                               (rule "notRight" (formula "22"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "close" (formula "24") (ifseqformula "1"))
                                                            )
                                                            (branch "if exc_1 instanceof Throwable false"
                                                               (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                               (rule "false_to_not_true" (formula "1") (term "1"))
                                                               (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                               (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                               (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                               (rule "double_not" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "close" (formula "19") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch "if exc_1 instanceof Throwable false"
                                                            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                            (rule "false_to_not_true" (formula "1") (term "1"))
                                                            (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                            (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                            (rule "double_not" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "1"))
                                                            (rule "applyOnPV" (formula "1") (term "0"))
                                                            (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                            (rule "close" (formula "19") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "if boolv_9 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "23"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "17"))
                                                   (rule "simplifyUpdate1" (formula "17") (term "1"))
                                                   (rule "applyOnPV" (formula "17") (term "0"))
                                                   (rule "boolean_equal" (formula "17"))
                                                   (rule "closeTrue" (formula "17"))
                                                )
                                             )
                                             (branch "if boolv_8 false"
                                                (rule "false_to_not_true" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "24"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "18"))
                                                (rule "applyOnPV" (formula "18") (term "0"))
                                                (rule "simplifyUpdate1" (formula "18") (term "1"))
                                                (rule "ifthenelse_concrete4" (formula "18"))
                                                (rule "boolean_not_equal_2" (formula "18") (term "1"))
                                                (rule "concrete_or_4" (formula "18"))
                                                (rule "notRight" (formula "18"))
                                                (rule "replace_known_left" (formula "22") (term "0,0,1,0") (ifseqformula "1"))
                                                (rule "ifthenelse_true" (formula "22") (term "0,1,0"))
                                                (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
                                                (rule "concrete_eq_3" (formula "4"))
                                                (rule "blockEmpty" (formula "24") (term "1"))
                                                (rule "applyEq" (formula "22") (term "0,1,1,0,0") (ifseqformula "1"))
                                                (rule "methodCallReturn" (formula "24") (term "1"))
                                                (rule "assignment" (formula "24") (term "1"))
                                                (rule "elimSelfSingleUpdateFor" (formula "24") (term "1"))
                                                (rule "methodCallEmpty" (formula "24") (term "1"))
                                                (rule "tryEmpty" (formula "24") (term "1"))
                                                (rule "emptyModality" (formula "24") (term "1"))
                                                (rule "applyOnRigidFormula" (formula "24"))
                                                (rule "ifSplit" (formula "22"))
                                                (branch "if boolv_9 true"
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "23"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "boolean_not_equal_2" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "if boolv_9 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "23"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "19"))
                                                   (rule "simplifyUpdate1Rigid" (formula "19") (term "1"))
                                                   (rule "applyOnPV" (formula "19") (term "0"))
                                                   (rule "boolean_not_equal_2" (formula "19"))
                                                   (rule "false_right" (formula "19"))
                                                   (rule "blockEmpty" (formula "22") (term "1"))
                                                   (rule "methodCallReturn" (formula "22") (term "1"))
                                                   (rule "assignment" (formula "22") (term "1"))
                                                   (rule "elimSelfSingleUpdateFor" (formula "22") (term "1"))
                                                   (rule "methodCallEmpty" (formula "22") (term "1"))
                                                   (rule "tryEmpty" (formula "22") (term "1"))
                                                   (rule "emptyModality" (formula "22") (term "1"))
                                                   (rule "notRight" (formula "22"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                    (opengoal "     !objUnderTest = null    &   ConsolidateDuplicateConditionalFragments::exactInstance(objUnderTest)      = TRUE    & wellFormed(heap)    & measuredByEmpty    &   boolean::select(heap,                        objUnderTest,                        java.lang.Object::<created>)      = TRUE -> (    {result:=_result}           \\<{ try {                 result=objUnderTest.before(result)@ConsolidateDuplicateConditionalFragments;               }   catch (Throwable t) {                 result=t;               }             }\\> Post(result)     <-> {result:=_result}           \\<{ try {                  result=objUnderTest.after(result)@ConsolidateDuplicateConditionalFragments;               }   catch (Throwable t) {                 result=t;               }             }\\> Post(result)) ")
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
)
}
