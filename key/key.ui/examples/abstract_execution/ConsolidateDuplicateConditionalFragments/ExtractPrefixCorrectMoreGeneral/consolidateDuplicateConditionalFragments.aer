<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:aeRelationalModel xmlns:ns2="http://www.key-project.org/abstractexecution" postCondition="Post(value(relevant))">
    <programOne>/*@ assume \disjoint(frameE, footprintP) &amp;&amp;
  @        \disjoint(frameP, footprintE) &amp;&amp;
  @        \disjoint(frameP, frameE) &amp;&amp;
  @        \disjoint(frameE, relevant) &amp;&amp;
  @        \disjoint(frameP, relevant) &amp;&amp;
  @        \dl_mutex3(throwsExcE(\value(footprintE)),
  @                   throwsExcP(\value(footprintP)),
  @                   returnsP(\value(footprintP)));
  @*/
{ ; }

if (
    /*@ assignable frameE;
      @ accessible footprintE;
      @ exceptional_behavior requires \dl_throwsExcE(\value(footprintE));
      @*/
    \abstract_expression boolean e
) {
    /*@ assignable frameP;
      @ accessible footprintP;
      @ exceptional_behavior requires throwsExcP(\value(footprintP));
      @ return_behavior requires returnsP(\value(footprintP));
      @*/
    \abstract_statement P;
    
    //@ assignable frameQ1;
    //@ accessible footprintQ1;
    \abstract_statement Q1;
}
else {
    /*@ assignable frameP;
      @ accessible footprintP;
      @ exceptional_behavior requires throwsExcP(\value(footprintP));
      @ return_behavior requires returnsP(\value(footprintP));
      @*/
    \abstract_statement P;
    
    //@ assignable frameQ2;
    //@ accessible footprintQ2;
    \abstract_statement Q2;
}

return result;</programOne>
    <programTwo>/*@ assume \disjoint(frameE, footprintP) &amp;&amp;
  @        \disjoint(frameP, footprintE) &amp;&amp;
  @        \disjoint(frameP, frameE) &amp;&amp;
  @        \disjoint(frameE, relevant) &amp;&amp;
  @        \disjoint(frameP, relevant) &amp;&amp;
  @        \dl_mutex3(throwsExcE(\value(footprintE)),
  @                   throwsExcP(\value(footprintP)),
  @                   returnsP(\value(footprintP)));
  @*/
{ ; }

/*@ assignable frameP;
  @ accessible footprintP;
  @ exceptional_behavior requires throwsExcP(\value(footprintP));
  @ return_behavior requires returnsP(\value(footprintP));
  @*/
\abstract_statement P;

if (
    /*@ assignable frameE;
      @ accessible footprintE;
      @ exceptional_behavior requires throwsExcE(\value(footprintE));
      @*/
    \abstract_expression boolean e
) {
    //@ assignable frameQ1;
    //@ accessible footprintQ1;
    \abstract_statement Q1;
}
else {
    //@ assignable frameQ2;
    //@ accessible footprintQ2;
    \abstract_statement Q2;
}

return result;</programTwo>
    <locationSets>
        <locationSet>relevant</locationSet>
        <locationSet>frameP</locationSet>
        <locationSet>footprintP</locationSet>
        <locationSet>frameE</locationSet>
        <locationSet>footprintE</locationSet>
        <locationSet>frameQ1</locationSet>
        <locationSet>footprintQ1</locationSet>
        <locationSet>frameQ2</locationSet>
        <locationSet>footprintQ2</locationSet>
    </locationSets>
    <predicates>
        <predicate predName="Post">
            <argSort>any</argSort>
        </predicate>
        <predicate predName="throwsExcP">
            <argSort>any</argSort>
        </predicate>
        <predicate predName="throwsExcE">
            <argSort>any</argSort>
        </predicate>
        <predicate predName="returnsP">
            <argSort>any</argSort>
        </predicate>
    </predicates>
    <programVariables>
        <programVariable typeName="Object" varName="result"/>
    </programVariables>
</ns2:aeRelationalModel>
