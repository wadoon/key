\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon May 27 11:25:13 CEST 2019
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=8000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\functions {
   \unique LocSet localsP;
   \unique LocSet localsQ;
   \unique LocSet localsR;
   \unique LocSet args;
   Object _result;
   Object _tmp;
}

\predicates {
   Post(Object);
}

\programVariables {
   Object result, tmp;
   ExtractMethodRefactoring objUnderTest;
}

\problem {
    {result:=_result || tmp:=_tmp}
      \<{ try {
            result=objUnderTest.before(result,tmp)@ExtractMethodRefactoring;
          }   catch (Throwable t) {
            result=t;
          }
        }\> Post(result)
<-> {result:=_result || tmp:=_tmp}
      \<{ try {
             result=objUnderTest.after(result,tmp)@ExtractMethodRefactoring;
          }   catch (Throwable t) {
            result=t;
          }
        }\> Post(result)

}

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "e9b73208cb39bcd1f117e342317538c3bc976fd5"))

(autoModeTime "26272")

(branch "dummy ID"
(rule "equiv_right" (formula "1") (newnames "heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD"))
(branch "Case '->'"
   (rule "diamondToBox" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_after,savedHeapBefore_after"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "methodBodyExpand" (formula "1") (term "1") (newnames "heapBefore_before,savedHeapBefore_before"))
   (rule "simplifyUpdate2" (formula "1") (term "1"))
   (rule "abstractExecutionNonVoid" (formula "2") (term "1") (inst "#label=_label10") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,1"))
   (rule "impRight" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "applySkip2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "andLeft" (formula "1"))
   (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "applySkip2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate2" (formula "3") (term "0"))
   (rule "simplifyUpdate2" (formula "3") (term "1"))
   (rule "applyOnRigidFormula" (formula "2"))
   (rule "applyOnRigidFormula" (formula "1") (term "1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0"))
   (rule "applyOnPV" (formula "3") (term "0,0"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3") (term "1"))
   (rule "simplifyUpdate2" (formula "3") (term "0,1"))
   (rule "simplifyUpdate2" (formula "3") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
   (rule "applyOnPV" (formula "3") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
   (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
   (rule "abstractExecutionNonVoid" (formula "4") (term "1") (inst "#label=_label11") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "4") (term "1,1,1"))
   (rule "simplifyUpdate2" (formula "4") (term "1,0,1"))
   (rule "impRight" (formula "4"))
   (rule "andLeft" (formula "1"))
   (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "applySkip2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "andLeft" (formula "1"))
   (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "applySkip2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate2" (formula "3") (term "0"))
   (rule "simplifyUpdate2" (formula "3") (term "1"))
   (rule "applyOnRigidFormula" (formula "2"))
   (rule "applyOnRigidFormula" (formula "1") (term "1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0"))
   (rule "applyOnPV" (formula "3") (term "0,0"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3") (term "1"))
   (rule "simplifyUpdate2" (formula "3") (term "0,1"))
   (rule "simplifyUpdate2" (formula "3") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
   (rule "applyOnPV" (formula "3") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
   (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "2") (term "0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "2") (term "1,0"))
   (rule "eq_or" (formula "2") (term "1,1,0"))
   (rule "commute_or" (formula "2") (term "0,1,0"))
   (rule "commute_and" (formula "2") (term "1,0"))
   (rule "cnf_rightDist" (formula "2") (term "0,0"))
   (rule "neq_or" (formula "2") (term "0,0,0"))
   (rule "concrete_and_1" (formula "2") (term "0,0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "shift_paren_and" (formula "2") (term "0"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "2"))
   (rule "cnf_rightDist" (formula "3"))
   (rule "neq_or_3" (formula "3") (term "1"))
   (rule "concrete_and_3" (formula "3"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or_2" (formula "3"))
   (rule "eq_or" (formula "3") (term "0"))
   (rule "cnf_rightDist" (formula "4"))
   (rule "neq_or" (formula "4") (term "1"))
   (rule "concrete_and_3" (formula "4"))
   (rule "shift_paren_or" (formula "4"))
   (rule "commute_or" (formula "4") (term "0"))
   (rule "neq_or_4" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "3"))
   (rule "shift_paren_or" (formula "2"))
   (rule "neq_or_2" (formula "2") (term "0"))
   (rule "concrete_or_1" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "ifSplit" (formula "5"))
   (branch "if returns true"
      (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applySkip2" (formula "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "6") (term "1,1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "3") (term "0"))
      (rule "concrete_or_2" (formula "3"))
      (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "4") (term "0,1"))
      (rule "concrete_and_2" (formula "4") (term "1"))
      (rule "concrete_eq_4" (formula "4"))
      (rule "notLeft" (formula "4"))
      (rule "blockReturn" (formula "6") (term "1,1,1"))
      (rule "blockReturn" (formula "6") (term "1,1,1"))
      (rule "simplifyUpdate2" (formula "6") (term "1,1"))
      (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,1") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "5") (term "0,0,0,0,1,1") (ifseqformula "3"))
      (rule "methodCallReturn" (formula "6") (term "1,1,1"))
      (rule "assignment" (formula "6") (term "1,1,1"))
      (rule "sequentialToParallel2" (formula "6") (term "1,1"))
      (rule "simplifyUpdate2" (formula "6") (term "1,1"))
      (rule "applyOnElementary" (formula "6") (term "0,1,1"))
      (rule "applyOnPV" (formula "6") (term "0,0,1,1"))
      (rule "methodCallEmpty" (formula "6") (term "1,1,1"))
      (rule "tryEmpty" (formula "6") (term "1,1,1"))
      (rule "emptyModality" (formula "6") (term "1,1,1"))
      (rule "dropEffectlessAbstractUpdate2" (formula "6") (term "1"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "applySkip2" (formula "6") (term "1"))
      (rule "sequentialToParallel2" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "simplifyUpdate3" (formula "6") (term "0"))
      (rule "applyOnRigidFormula" (formula "6"))
      (rule "applyOnPV" (formula "6") (term "0"))
      (rule "ifSplit" (formula "5"))
      (branch "if returns true"
         (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applySkip2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "6") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "boolean_equal" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockReturn" (formula "5") (term "1,1,1"))
         (rule "blockReturn" (formula "5") (term "1,1,1"))
         (rule "simplifyUpdate2" (formula "5") (term "1,1"))
         (rule "methodCallReturn" (formula "5") (term "1,1,1"))
         (rule "assignment" (formula "5") (term "1,1,1"))
         (rule "sequentialToParallel2" (formula "5") (term "1,1"))
         (rule "simplifyUpdate2" (formula "5") (term "1,1"))
         (rule "applyOnElementary" (formula "5") (term "0,1,1"))
         (rule "applyOnPV" (formula "5") (term "0,0,1,1"))
         (rule "methodCallEmpty" (formula "5") (term "1,1,1"))
         (rule "tryEmpty" (formula "5") (term "1,1,1"))
         (rule "emptyModality" (formula "5") (term "1,1,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "5") (term "1"))
         (rule "simplifyUpdate2" (formula "5"))
         (rule "applySkip2" (formula "5") (term "1"))
         (rule "notRight" (formula "5"))
         (rule "sequentialToParallel2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate3" (formula "1") (term "0"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "6") (ifseqformula "1"))
      )
      (branch "if returns false"
         (rule "false_to_not_true" (formula "1") (term "1,1,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applySkip2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "6") (term "1,1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "boolean_equal" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
   )
   (branch "if returns false"
      (rule "false_to_not_true" (formula "1") (term "1,1,1"))
      (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applySkip2" (formula "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "6") (term "1,1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "4"))
      (rule "applyOnPV" (formula "4") (term "0"))
      (rule "simplifyUpdate1" (formula "4") (term "1"))
      (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "4"))
      (rule "concrete_not_2" (formula "2") (term "0"))
      (rule "concrete_or_1" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "3"))
      (rule "concrete_not_2" (formula "2") (term "0,1"))
      (rule "concrete_and_1" (formula "2") (term "1"))
      (rule "apply_eq_boolean_rigid" (formula "4") (term "0,1,0,0,1,1") (ifseqformula "3"))
      (rule "ifUnfold" (formula "5") (term "1,1,1") (inst "#boolv=boolv"))
      (rule "variableDeclaration" (formula "5") (term "1,1,1") (newnames "boolv"))
      (rule "inequality_comparison_simple" (formula "5") (term "1,1,1"))
      (rule "sequentialToParallel2" (formula "5") (term "1,1"))
      (rule "applyOnElementary" (formula "5") (term "1,0,1,1"))
      (rule "applyOnRigidTerm" (formula "5") (term "0,1,0,1,1"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0,1,1"))
      (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0,1,1"))
      (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0,1,1"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0,1,1"))
      (rule "applyOnPV" (formula "5") (term "0,0,0,1,0,1,1"))
      (rule "ifSplit" (formula "4"))
      (branch "if returns true"
         (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applySkip2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "5") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if returns false"
         (rule "false_to_not_true" (formula "1") (term "1,1,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applySkip2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "5") (term "1,1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "applyOnPV" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1"))
         (rule "boolean_not_equal_2" (formula "3"))
         (rule "false_right" (formula "3"))
         (rule "ifUnfold" (formula "4") (term "1,1,1") (inst "#boolv=boolv"))
         (rule "variableDeclaration" (formula "4") (term "1,1,1") (newnames "boolv_1"))
         (rule "inequality_comparison_simple" (formula "4") (term "1,1,1"))
         (rule "sequentialToParallel2" (formula "4") (term "1,1"))
         (rule "applyOnElementary" (formula "4") (term "1,0,1,1"))
         (rule "applyOnRigidTerm" (formula "4") (term "0,1,0,1,1"))
         (rule "simplifyUpdate1" (formula "4") (term "2,0,1,0,1,1"))
         (rule "simplifyUpdate1" (formula "4") (term "1,0,1,0,1,1"))
         (rule "applyOnRigidFormula" (formula "4") (term "0,0,1,0,1,1"))
         (rule "simplifyUpdate1" (formula "4") (term "1,0,0,1,0,1,1"))
         (rule "applyOnPV" (formula "4") (term "0,0,0,1,0,1,1"))
         (rule "ifSplit" (formula "5"))
         (branch "if boolv true"
            (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applySkip2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "6") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete4" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "3"))
            (rule "concrete_eq_4" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "blockThrow" (formula "6") (term "1,1,1"))
            (rule "blockThrow" (formula "6") (term "1,1,1"))
            (rule "methodCallParamThrow" (formula "6") (term "1,1,1"))
            (rule "tryCatchThrow" (formula "6") (term "1,1,1"))
            (rule "ifElseUnfold" (formula "6") (term "1,1,1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "6") (term "1,1,1") (newnames "boolv_2"))
            (rule "equality_comparison_simple" (formula "6") (term "1,1,1"))
            (rule "sequentialToParallel2" (formula "6") (term "1,1"))
            (rule "applyOnElementary" (formula "6") (term "1,0,1,1"))
            (rule "applyOnRigidTerm" (formula "6") (term "0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0,1,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0,1,1"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,1,0,1,1"))
            (rule "ifSplit" (formula "5"))
            (branch "if boolv_1 true"
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "6") (term "1,1"))
               (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "4"))
               (rule "ifthenelse_false" (formula "1") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockThrow" (formula "5") (term "1,1,1"))
               (rule "blockThrow" (formula "5") (term "1,1,1"))
               (rule "methodCallParamThrow" (formula "5") (term "1,1,1"))
               (rule "tryCatchThrow" (formula "5") (term "1,1,1"))
               (rule "ifElseUnfold" (formula "5") (term "1,1,1") (inst "#boolv=boolv"))
               (rule "variableDeclaration" (formula "5") (term "1,1,1") (newnames "boolv_3"))
               (rule "equality_comparison_simple" (formula "5") (term "1,1,1"))
               (rule "sequentialToParallel2" (formula "5") (term "1,1"))
               (rule "applyOnElementary" (formula "5") (term "1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "5") (term "0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0,1,1"))
               (rule "applyOnPV" (formula "5") (term "0,0,0,1,0,1,1"))
               (rule "ifElseSplit" (formula "6"))
               (branch "if boolv_2 true"
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "7") (term "1,1"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "4"))
                  (rule "ifthenelse_false" (formula "1") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "7") (term "1,1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "4"))
                  (rule "ifthenelse_false" (formula "2") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "2"))
                  (rule "simplifyUpdate1" (formula "2") (term "1"))
                  (rule "applyOnPV" (formula "2") (term "0"))
                  (rule "boolean_not_equal_2" (formula "2"))
                  (rule "false_right" (formula "2"))
                  (rule "elim_double_block" (formula "6") (term "1,1,1"))
                  (rule "ifElseSplit" (formula "5"))
                  (branch "if boolv_3 true"
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "6") (term "1,1"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "4"))
                     (rule "ifthenelse_false" (formula "1") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "6") (term "1,1"))
                     (rule "notLeft" (formula "1"))
                     (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "4"))
                     (rule "ifthenelse_false" (formula "2") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "2"))
                     (rule "simplifyUpdate1" (formula "2") (term "1"))
                     (rule "applyOnPV" (formula "2") (term "0"))
                     (rule "boolean_not_equal_2" (formula "2"))
                     (rule "false_right" (formula "2"))
                     (rule "elim_double_block" (formula "5") (term "1,1,1"))
                     (rule "ifElseSplit" (formula "6"))
                     (branch "if exc instanceof Throwable true"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1"))
                        (rule "concrete_or_4" (formula "1") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1"))
                        (rule "variableDeclaration" (formula "6") (term "1,1,1") (newnames "t"))
                        (rule "delete_unnecessary_cast" (formula "6") (term "1,1,1"))
                        (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                        (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                        (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                        (rule "true_left" (formula "1"))
                        (rule "sequentialToParallel2" (formula "6") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "6") (term "1,1"))
                        (rule "applyOnElementary" (formula "6") (term "0,1,1"))
                        (rule "applyOnPV" (formula "6") (term "0,0,1,1"))
                        (rule "assignment" (formula "6") (term "1,1,1"))
                        (rule "sequentialToParallel2" (formula "6") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "6") (term "1,1"))
                        (rule "applyOnElementary" (formula "6") (term "0,1,1"))
                        (rule "applyOnPV" (formula "6") (term "0,0,1,1"))
                        (rule "emptyModality" (formula "6") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "6") (term "1"))
                        (rule "simplifyUpdate2" (formula "6"))
                        (rule "applySkip2" (formula "6") (term "1"))
                        (rule "sequentialToParallel2" (formula "6"))
                        (rule "simplifyUpdate2" (formula "6"))
                        (rule "simplifyUpdate3" (formula "6") (term "0"))
                        (rule "applyOnRigidFormula" (formula "6"))
                        (rule "applyOnPV" (formula "6") (term "0"))
                        (rule "ifElseSplit" (formula "5"))
                        (branch "if exc instanceof Throwable true"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnPV" (formula "2") (term "0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1"))
                           (rule "variableDeclaration" (formula "5") (term "1,1,1") (newnames "t_1"))
                           (rule "delete_unnecessary_cast" (formula "5") (term "1,1,1"))
                           (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                           (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                           (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                           (rule "true_left" (formula "1"))
                           (rule "sequentialToParallel2" (formula "5") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "5") (term "1,1"))
                           (rule "applyOnElementary" (formula "5") (term "0,1,1"))
                           (rule "applyOnPV" (formula "5") (term "0,0,1,1"))
                           (rule "assignment" (formula "5") (term "1,1,1"))
                           (rule "sequentialToParallel2" (formula "5") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "5") (term "1,1"))
                           (rule "applyOnElementary" (formula "5") (term "0,1,1"))
                           (rule "applyOnPV" (formula "5") (term "0,0,1,1"))
                           (rule "emptyModality" (formula "5") (term "1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "5") (term "1"))
                           (rule "simplifyUpdate2" (formula "5"))
                           (rule "applySkip2" (formula "5") (term "1"))
                           (rule "notRight" (formula "5"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "0"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "close" (formula "6") (ifseqformula "1"))
                        )
                        (branch "if exc instanceof Throwable false"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1"))
                           (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1"))
                           (rule "concrete_or_4" (formula "1") (term "0,1,1,1"))
                           (rule "double_not" (formula "1") (term "1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "close" (formula "4") (ifseqformula "1"))
                        )
                     )
                     (branch "if exc instanceof Throwable false"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1"))
                        (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1"))
                        (rule "concrete_or_4" (formula "1") (term "0,1,1,1"))
                        (rule "double_not" (formula "1") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "close" (formula "4") (ifseqformula "1"))
                     )
                  )
               )
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1,1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "6") (term "1,1"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "4"))
               (rule "ifthenelse_false" (formula "2") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "simplifyUpdate1" (formula "2") (term "1"))
               (rule "applyOnPV" (formula "2") (term "0"))
               (rule "boolean_equal" (formula "2"))
               (rule "closeTrue" (formula "2"))
            )
         )
         (branch "if boolv false"
            (rule "false_to_not_true" (formula "1") (term "1,1,1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applySkip2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "6") (term "1,1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "ifthenelse_concrete4" (formula "3"))
            (rule "boolean_not_equal_2" (formula "3") (term "1"))
            (rule "concrete_or_4" (formula "3"))
            (rule "notRight" (formula "3"))
            (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
            (rule "concrete_eq_3" (formula "3"))
            (rule "blockEmpty" (formula "6") (term "1,1"))
            (rule "applyEqRigid" (formula "5") (term "0,0,0,1,1") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "5") (term "0,0,0,1,0,1,1") (ifseqformula "1"))
            (rule "eqClose" (formula "5") (term "0,0,1,0,1,1"))
            (rule "ifthenelse_true" (formula "5") (term "0,1,0,1,1"))
            (rule "ifSplit" (formula "5"))
            (branch "if boolv_1 true"
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "6") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1,1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "6") (term "1,1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "4"))
               (rule "applyOnPV" (formula "4") (term "0"))
               (rule "simplifyUpdate1" (formula "4") (term "1"))
               (rule "boolean_not_equal_2" (formula "4"))
               (rule "false_right" (formula "4"))
               (rule "blockEmpty" (formula "5") (term "1,1"))
               (rule "abstractExecutionNonVoid" (formula "5") (term "1,1") (inst "#label=_label12") (inst "#v1=v1") (inst "result=result_Q_0") (inst "returns=returns_Q_0") (inst "exc=exc_Q_0") (inst "normal=normal_Q_0"))
               (rule "concrete_and_3" (formula "5") (term "1,1,0,1,1"))
               (rule "concrete_and_3" (formula "5") (term "0,1,1,0,1,1"))
               (rule "simplifyUpdate2" (formula "5") (term "1,1,1,1"))
               (rule "simplifyUpdate2" (formula "5") (term "1,0,1,1"))
               (rule "impRight" (formula "5"))
               (rule "andLeft" (formula "1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
               (rule "notLeft" (formula "3"))
               (rule "andLeft" (formula "1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "3"))
               (rule "simplifyUpdate2" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "0"))
               (rule "applyOnRigidFormula" (formula "7"))
               (rule "simplifyUpdate1Rigid" (formula "7") (term "1"))
               (rule "applyOnPV" (formula "7") (term "0"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "0,1"))
               (rule "simplifyUpdate2" (formula "3") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0"))
               (rule "simplifyUpdate1Rigid" (formula "3") (term "1,0"))
               (rule "applyOnPV" (formula "3") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,1,1"))
               (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,1,1"))
               (rule "applySkip1" (formula "1") (term "1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
               (rule "simplifyUpdate1Rigid" (formula "3") (term "1,1,1"))
               (rule "applyOnPV" (formula "3") (term "0,1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
               (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
               (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
               (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "7"))
               (rule "concrete_not_2" (formula "3") (term "0,1"))
               (rule "concrete_and_1" (formula "3") (term "1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
               (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
               (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "7"))
               (rule "concrete_and_2" (formula "2") (term "1,0"))
               (rule "concrete_or_4" (formula "2") (term "0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
               (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,0,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
               (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "7"))
               (rule "concrete_not_2" (formula "2") (term "0,1"))
               (rule "concrete_and_1" (formula "2") (term "1"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
               (rule "applyOnPV" (formula "2") (term "0,1,0"))
               (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,1"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0"))
               (rule "applyOnPV" (formula "2") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "7"))
               (rule "concrete_not_2" (formula "2") (term "0,0"))
               (rule "concrete_and_1" (formula "2") (term "0"))
               (rule "neq_or" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "1") (term "1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
               (rule "apply_eq_boolean_rigid" (formula "8") (term "0,1,0,0,1,1,1") (ifseqformula "6"))
               (rule "methodCallWithAssignmentWithinClass" (formula "9") (term "1,1") (inst "#v0=o"))
               (rule "variableDeclaration" (formula "9") (term "1,1") (newnames "o"))
               (rule "variableDeclarationFinalAssign" (formula "9") (term "1,1"))
               (rule "variableDeclarationFinal" (formula "9") (term "1,1") (newnames "res"))
               (rule "assignment" (formula "9") (term "1,1"))
               (rule "variableDeclarationAssign" (formula "9") (term "1,1,1"))
               (rule "variableDeclaration" (formula "9") (term "1,1,1") (newnames "tmp_1"))
               (rule "assignment" (formula "9") (term "1,1,1"))
               (rule "sequentialToParallel2" (formula "9") (term "1,1"))
               (rule "simplifyUpdate3" (formula "9") (term "1,0,1,1"))
               (rule "methodBodyExpand" (formula "9") (term "1,1,1") (newnames "heapBefore_extracted,savedHeapBefore_extracted"))
               (rule "simplifyUpdate2" (formula "9") (term "1,1,1"))
               (rule "abstractExecutionNonVoid" (formula "9") (term "1,1,1") (inst "#label=_label13") (inst "#v1=v1") (inst "result=result_Q_0") (inst "returns=returns_Q_0") (inst "exc=exc_Q_0") (inst "normal=normal_Q_0"))
               (rule "concrete_and_3" (formula "9") (term "1,1,0,1,1,1"))
               (rule "concrete_and_3" (formula "9") (term "0,1,1,0,1,1,1"))
               (rule "simplifyUpdate2" (formula "9") (term "1,1,1,1,1"))
               (rule "simplifyUpdate2" (formula "9") (term "1,0,1,1,1"))
               (rule "impRight" (formula "9"))
               (rule "andLeft" (formula "1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
               (rule "notLeft" (formula "3"))
               (rule "andLeft" (formula "1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "applySkip2" (formula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
               (rule "applyOnRigidFormula" (formula "3"))
               (rule "simplifyUpdate2" (formula "3") (term "0"))
               (rule "simplifyUpdate2" (formula "3") (term "1"))
               (rule "applyOnRigidFormula" (formula "9"))
               (rule "applyOnPV" (formula "9") (term "0"))
               (rule "simplifyUpdate1" (formula "9") (term "1"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0"))
               (rule "applyOnPV" (formula "3") (term "0,0"))
               (rule "simplifyUpdate1" (formula "3") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "1,1"))
               (rule "simplifyUpdate2" (formula "3") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0"))
               (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
               (rule "applyOnPV" (formula "3") (term "0,1,1"))
               (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1"))
               (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,1,0,1,1"))
               (rule "applySkip1" (formula "1") (term "1,1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
               (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
               (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
               (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "9"))
               (rule "concrete_not_2" (formula "3") (term "0,1"))
               (rule "concrete_and_1" (formula "3") (term "1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
               (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "8"))
               (rule "concrete_not_2" (formula "2") (term "0,1"))
               (rule "concrete_and_1" (formula "2") (term "1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
               (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "8"))
               (rule "concrete_and_2" (formula "2") (term "1,0"))
               (rule "concrete_or_4" (formula "2") (term "0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
               (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
               (rule "applyOnPV" (formula "2") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,1,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
               (rule "applyOnPV" (formula "2") (term "0,0,0,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0"))
               (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "8"))
               (rule "concrete_not_2" (formula "2") (term "0,0"))
               (rule "concrete_and_1" (formula "2") (term "0"))
               (rule "neq_or" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,1,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,1,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,1,1"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1"))
               (rule "applyOnPV" (formula "1") (term "0,1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "1") (term "1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnRigidTerm" (formula "1") (term "0"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
               (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
               (rule "apply_eq_boolean_rigid" (formula "10") (term "0,1,0,0,1,1,1,1") (ifseqformula "7"))
               (rule "ifSplit" (formula "9"))
               (branch "if returns_0 true"
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if returns_0 false"
                  (rule "false_to_not_true" (formula "1") (term "1,1,1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "7"))
                  (rule "applyOnPV" (formula "7") (term "0"))
                  (rule "simplifyUpdate1" (formula "7") (term "1"))
                  (rule "boolean_not_equal_2" (formula "7"))
                  (rule "false_right" (formula "7"))
                  (rule "ifUnfold" (formula "9") (term "1,1,1,1") (inst "#boolv=boolv"))
                  (rule "variableDeclaration" (formula "9") (term "1,1,1,1") (newnames "boolv_2"))
                  (rule "inequality_comparison_simple" (formula "9") (term "1,1,1,1"))
                  (rule "sequentialToParallel2" (formula "9") (term "1,1,1"))
                  (rule "applyOnElementary" (formula "9") (term "1,0,1,1,1"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,1,1,1"))
                  (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0,1,1,1"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0,1,1,1"))
                  (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0,1,1,1"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0,1,1,1"))
                  (rule "applyOnPV" (formula "9") (term "0,0,0,1,0,1,1,1"))
                  (rule "ifSplit" (formula "10"))
                  (branch "if returns_0 true"
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if returns_0 false"
                     (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "7"))
                     (rule "simplifyUpdate1Rigid" (formula "7") (term "1"))
                     (rule "applyOnPV" (formula "7") (term "0"))
                     (rule "boolean_not_equal_2" (formula "7"))
                     (rule "false_right" (formula "7"))
                     (rule "ifUnfold" (formula "10") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                     (rule "variableDeclaration" (formula "10") (term "1,1,1,1,1") (newnames "boolv_3"))
                     (rule "inequality_comparison_simple" (formula "10") (term "1,1,1,1,1"))
                     (rule "sequentialToParallel2" (formula "10") (term "1,1,1,1"))
                     (rule "applyOnElementary" (formula "10") (term "1,0,1,1,1,1"))
                     (rule "applyOnRigidTerm" (formula "10") (term "0,1,0,1,1,1,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0,1,1,1,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0,1,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0,1,1,1,1"))
                     (rule "applyOnPV" (formula "10") (term "0,0,0,1,0,1,1,1,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0,1,1,1,1"))
                     (rule "ifSplit" (formula "9"))
                     (branch "if boolv_2 true"
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1"))
                        (rule "concrete_or_4" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "7"))
                        (rule "concrete_eq_4" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "blockThrow" (formula "10") (term "1,1,1,1"))
                        (rule "blockThrow" (formula "10") (term "1,1,1,1"))
                        (rule "methodCallParamThrow" (formula "10") (term "1,1,1,1"))
                        (rule "tryCatchThrow" (formula "10") (term "1,1,1,1"))
                        (rule "ifElseUnfold" (formula "10") (term "1,1,1,1") (inst "#boolv=boolv"))
                        (rule "variableDeclaration" (formula "10") (term "1,1,1,1") (newnames "boolv_4"))
                        (rule "equality_comparison_simple" (formula "10") (term "1,1,1,1"))
                        (rule "sequentialToParallel2" (formula "10") (term "1,1,1"))
                        (rule "applyOnElementary" (formula "10") (term "1,0,1,1,1"))
                        (rule "applyOnRigidTerm" (formula "10") (term "0,1,0,1,1,1"))
                        (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0,1,1,1"))
                        (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0,1,1,1"))
                        (rule "applyOnPV" (formula "10") (term "0,0,0,1,0,1,1,1"))
                        (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0,1,1,1"))
                        (rule "ifSplit" (formula "11"))
                        (branch "if boolv_3 true"
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "12") (term "1,1,1,1"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "8"))
                           (rule "ifthenelse_false" (formula "1") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "blockThrow" (formula "11") (term "1,1,1,1,1"))
                           (rule "blockThrow" (formula "11") (term "1,1,1,1,1"))
                           (rule "methodCallParamThrow" (formula "11") (term "1,1,1,1,1"))
                           (rule "blockThrow" (formula "11") (term "1,1,1,1,1"))
                           (rule "methodCallParamThrow" (formula "11") (term "1,1,1,1,1"))
                           (rule "tryCatchThrow" (formula "11") (term "1,1,1,1,1"))
                           (rule "ifElseUnfold" (formula "11") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                           (rule "variableDeclaration" (formula "11") (term "1,1,1,1,1") (newnames "boolv_5"))
                           (rule "equality_comparison_simple" (formula "11") (term "1,1,1,1,1"))
                           (rule "sequentialToParallel2" (formula "11") (term "1,1,1,1"))
                           (rule "applyOnElementary" (formula "11") (term "1,0,1,1,1,1"))
                           (rule "applyOnRigidTerm" (formula "11") (term "0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1Rigid" (formula "11") (term "1,0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0,1,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0,1,1,1,1"))
                           (rule "applyOnPV" (formula "11") (term "0,0,0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0,1,1,1,1"))
                           (rule "ifElseSplit" (formula "10"))
                           (branch "if boolv_4 true"
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "8"))
                              (rule "ifthenelse_false" (formula "1") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if boolv_4 false"
                              (rule "false_to_not_true" (formula "1") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                              (rule "notLeft" (formula "1"))
                              (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "8"))
                              (rule "ifthenelse_false" (formula "6") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "6"))
                              (rule "simplifyUpdate1" (formula "6") (term "1"))
                              (rule "applyOnPV" (formula "6") (term "0"))
                              (rule "boolean_not_equal_2" (formula "6"))
                              (rule "false_right" (formula "6"))
                              (rule "elim_double_block" (formula "10") (term "1,1,1,1"))
                              (rule "ifElseSplit" (formula "11"))
                              (branch "if boolv_5 true"
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "12") (term "1,1,1,1"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "8"))
                                 (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if boolv_5 false"
                                 (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "12") (term "1,1,1,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "8"))
                                 (rule "ifthenelse_false" (formula "6") (term "0,0"))
                                 (rule "applyOnRigidFormula" (formula "6"))
                                 (rule "simplifyUpdate1" (formula "6") (term "1"))
                                 (rule "applyOnPV" (formula "6") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "6"))
                                 (rule "false_right" (formula "6"))
                                 (rule "elim_double_block" (formula "11") (term "1,1,1,1,1"))
                                 (rule "ifElseSplit" (formula "10"))
                                 (branch "if exc_0 instanceof Throwable true"
                                    (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1"))
                                    (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1,1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1,1"))
                                    (rule "concrete_or_4" (formula "1") (term "1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "6"))
                                    (rule "applyOnPV" (formula "6") (term "0"))
                                    (rule "simplifyUpdate1" (formula "6") (term "1"))
                                    (rule "variableDeclaration" (formula "10") (term "1,1,1,1") (newnames "t"))
                                    (rule "delete_unnecessary_cast" (formula "10") (term "1,1,1,1"))
                                    (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1,1"))
                                    (rule "boolean_equal" (formula "1") (term "1,1,1,1,1"))
                                    (rule "concrete_or_3" (formula "1") (term "1,1,1,1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "sequentialToParallel2" (formula "10") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                                    (rule "applyOnElementary" (formula "10") (term "0,1,1,1"))
                                    (rule "applyOnPV" (formula "10") (term "0,0,1,1,1"))
                                    (rule "assignment" (formula "10") (term "1,1,1,1"))
                                    (rule "sequentialToParallel2" (formula "10") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                                    (rule "applyOnElementary" (formula "10") (term "0,1,1,1"))
                                    (rule "applyOnPV" (formula "10") (term "0,0,1,1,1"))
                                    (rule "emptyModality" (formula "10") (term "1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "10") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "10") (term "1"))
                                    (rule "simplifyUpdate2" (formula "10"))
                                    (rule "applySkip2" (formula "10") (term "1"))
                                    (rule "applySkip2" (formula "10") (term "1"))
                                    (rule "notRight" (formula "10"))
                                    (rule "sequentialToParallel2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate3" (formula "1") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "ifElseSplit" (formula "11"))
                                    (branch "if exc_0 instanceof Throwable true"
                                       (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1"))
                                       (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1,1,1"))
                                       (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1,1,1"))
                                       (rule "concrete_or_4" (formula "1") (term "1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "7"))
                                       (rule "applyOnPV" (formula "7") (term "0"))
                                       (rule "simplifyUpdate1Rigid" (formula "7") (term "1"))
                                       (rule "variableDeclaration" (formula "11") (term "1,1,1,1,1") (newnames "t_1"))
                                       (rule "delete_unnecessary_cast" (formula "11") (term "1,1,1,1,1"))
                                       (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1,1,1"))
                                       (rule "boolean_equal" (formula "1") (term "1,1,1,1,1,1"))
                                       (rule "concrete_or_3" (formula "1") (term "1,1,1,1,1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "sequentialToParallel2" (formula "11") (term "1,1,1,1"))
                                       (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                                       (rule "applyOnElementary" (formula "11") (term "0,1,1,1,1"))
                                       (rule "applyOnPV" (formula "11") (term "0,0,1,1,1,1"))
                                       (rule "assignment" (formula "11") (term "1,1,1,1,1"))
                                       (rule "sequentialToParallel2" (formula "11") (term "1,1,1,1"))
                                       (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                                       (rule "applyOnElementary" (formula "11") (term "0,1,1,1,1"))
                                       (rule "applyOnPV" (formula "11") (term "0,0,1,1,1,1"))
                                       (rule "emptyModality" (formula "11") (term "1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "11") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "11") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "11") (term "1"))
                                       (rule "simplifyUpdate2" (formula "11"))
                                       (rule "applySkip2" (formula "11") (term "1"))
                                       (rule "applySkip2" (formula "11") (term "1"))
                                       (rule "sequentialToParallel2" (formula "11"))
                                       (rule "simplifyUpdate2" (formula "11"))
                                       (rule "simplifyUpdate3" (formula "11") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "11"))
                                       (rule "applyOnPV" (formula "11") (term "0"))
                                       (rule "close" (formula "11") (ifseqformula "1"))
                                    )
                                    (branch "if exc_0 instanceof Throwable false"
                                       (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1"))
                                       (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                       (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1,1,1"))
                                       (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1,1,1"))
                                       (rule "concrete_or_4" (formula "1") (term "0,1,1,1,1,1"))
                                       (rule "double_not" (formula "1") (term "1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "close" (formula "9") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "if exc_0 instanceof Throwable false"
                                    (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1"))
                                    (rule "false_to_not_true" (formula "1") (term "1,1,1,1"))
                                    (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1,1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1,1"))
                                    (rule "concrete_or_4" (formula "1") (term "0,1,1,1,1"))
                                    (rule "double_not" (formula "1") (term "1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "close" (formula "8") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                        (branch "if boolv_3 false"
                           (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "12") (term "1,1,1,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "8"))
                           (rule "ifthenelse_false" (formula "6") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "6"))
                           (rule "simplifyUpdate1" (formula "6") (term "1"))
                           (rule "applyOnPV" (formula "6") (term "0"))
                           (rule "boolean_equal" (formula "6"))
                           (rule "closeTrue" (formula "6"))
                        )
                     )
                     (branch "if boolv_2 false"
                        (rule "false_to_not_true" (formula "1") (term "1,1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "7"))
                        (rule "applyOnPV" (formula "7") (term "0"))
                        (rule "simplifyUpdate1" (formula "7") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "7"))
                        (rule "boolean_not_equal_2" (formula "7") (term "1"))
                        (rule "concrete_or_4" (formula "7"))
                        (rule "notRight" (formula "7"))
                        (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
                        (rule "concrete_eq_3" (formula "4"))
                        (rule "blockEmpty" (formula "10") (term "1,1,1"))
                        (rule "applyEqRigid" (formula "11") (term "0,0,0,1,1,1,1") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "11") (term "0,0,0,1,0,1,1,1,1") (ifseqformula "1"))
                        (rule "eqClose" (formula "11") (term "0,0,1,0,1,1,1,1"))
                        (rule "ifthenelse_true" (formula "11") (term "0,1,0,1,1,1,1"))
                        (rule "abstractExecutionNonVoid" (formula "10") (term "1,1,1") (inst "#label=_label14") (inst "#v1=v1") (inst "result=result_R_0") (inst "returns=returns_R_0") (inst "exc=exc_R_0") (inst "normal=normal_R_0"))
                        (rule "concrete_and_3" (formula "10") (term "1,1,0,1,1,1"))
                        (rule "eq_and_2" (formula "10") (term "1,1,0,1,1,1"))
                        (rule "concrete_and_3" (formula "10") (term "1,1,0,1,1,1"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,1,1,1,1"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,0,1,1,1"))
                        (rule "impRight" (formula "10"))
                        (rule "andLeft" (formula "1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "1"))
                        (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                        (rule "applyOnPV" (formula "3") (term "0,1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                        (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                        (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                        (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                        (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                        (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                        (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                        (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0"))
                        (rule "commute_or" (formula "2") (term "0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "eq_or" (formula "2") (term "1,1,0"))
                        (rule "commute_or" (formula "2") (term "0,1,0"))
                        (rule "commute_and" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0"))
                        (rule "neq_or" (formula "2") (term "0,0,0"))
                        (rule "concrete_and_1" (formula "2") (term "0,0"))
                        (rule "commute_or" (formula "2") (term "0,0"))
                        (rule "shift_paren_and" (formula "2") (term "0"))
                        (rule "cnf_rightDist" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or" (formula "2"))
                        (rule "cnf_rightDist" (formula "3"))
                        (rule "neq_or_3" (formula "3") (term "1"))
                        (rule "concrete_and_3" (formula "3"))
                        (rule "cnf_rightDist" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or_2" (formula "3"))
                        (rule "eq_or" (formula "3") (term "0"))
                        (rule "cnf_rightDist" (formula "4"))
                        (rule "neq_or" (formula "4") (term "1"))
                        (rule "concrete_and_3" (formula "4"))
                        (rule "shift_paren_or" (formula "4"))
                        (rule "commute_or" (formula "4") (term "0"))
                        (rule "neq_or_4" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "cnf_rightDist" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "commute_or" (formula "3"))
                        (rule "shift_paren_or" (formula "2"))
                        (rule "neq_or_2" (formula "2") (term "0"))
                        (rule "concrete_or_1" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "ifSplit" (formula "14"))
                        (branch "if boolv_3 true"
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if boolv_3 false"
                           (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "11"))
                           (rule "simplifyUpdate1" (formula "11") (term "1"))
                           (rule "applyOnPV" (formula "11") (term "0"))
                           (rule "boolean_not_equal_2" (formula "11"))
                           (rule "false_right" (formula "11"))
                           (rule "blockEmpty" (formula "14") (term "1,1,1,1"))
                           (rule "ifSplit" (formula "13"))
                           (branch "if returns_1 true"
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "3") (term "0"))
                              (rule "concrete_or_2" (formula "3"))
                              (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "4") (term "0,1"))
                              (rule "concrete_and_2" (formula "4") (term "1"))
                              (rule "concrete_eq_4" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "blockReturn" (formula "14") (term "1,1,1,1,1"))
                              (rule "blockReturn" (formula "14") (term "1,1,1,1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                              (rule "methodCallReturn" (formula "15") (term "1,1,1,1"))
                              (rule "assignment" (formula "15") (term "1,1,1,1"))
                              (rule "applyAbstrOnConcrUpd" (formula "15") (term "1,1,1"))
                              (rule "methodCallReturn" (formula "14") (term "1,1,1,1,1"))
                              (rule "assignment" (formula "14") (term "1,1,1,1,1"))
                              (rule "sequentialToParallel2" (formula "14") (term "1,1,1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                              (rule "applyOnElementary" (formula "14") (term "0,1,1,1,1"))
                              (rule "applyOnPV" (formula "14") (term "0,0,1,1,1,1"))
                              (rule "methodCallEmpty" (formula "15") (term "1,1,1,1"))
                              (rule "blockEmpty" (formula "15") (term "1,1,1,1"))
                              (rule "assignment" (formula "15") (term "1,1,1,1"))
                              (rule "applyAbstrOnConcrUpd" (formula "15") (term "1,1,1"))
                              (rule "methodCallEmpty" (formula "14") (term "1,1,1,1,1"))
                              (rule "abstractExecutionNonVoid" (formula "15") (term "1,1,1,1") (inst "#label=_label16") (inst "#v1=v1") (inst "result=result_R_0") (inst "returns=returns_R_0") (inst "exc=exc_R_0") (inst "normal=normal_R_0"))
                              (rule "concrete_and_3" (formula "15") (term "1,1,0,1,1,1,1"))
                              (rule "concrete_and_3" (formula "15") (term "1,1,0,1,1,1,1"))
                              (rule "concrete_and_3" (formula "15") (term "1,1,0,1,1,1,1"))
                              (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1,1,1"))
                              (rule "simplifyUpdate2" (formula "15") (term "1,0,1,1,1,1"))
                              (rule "impRight" (formula "15"))
                              (rule "andLeft" (formula "1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                              (rule "andLeft" (formula "1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3"))
                              (rule "simplifyUpdate2" (formula "3") (term "0"))
                              (rule "simplifyUpdate2" (formula "3") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3") (term "0"))
                              (rule "applyOnPV" (formula "3") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                              (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "14"))
                              (rule "concrete_eq_2" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "13"))
                              (rule "concrete_or_2" (formula "2") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "13"))
                              (rule "simplifyUpdate2" (formula "13") (term "0"))
                              (rule "simplifyUpdate2" (formula "13") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "13") (term "0"))
                              (rule "applyOnRigidFormula" (formula "13") (term "1"))
                              (rule "applyOnPV" (formula "13") (term "0,1"))
                              (rule "simplifyUpdate1Rigid" (formula "13") (term "1,1"))
                              (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "5"))
                              (rule "concrete_and_3" (formula "13"))
                              (rule "notRight" (formula "13"))
                              (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                              (rule "simplifyUpdate2" (formula "3") (term "0,0"))
                              (rule "concrete_and_1" (formula "3") (term "0"))
                              (rule "replace_known_left" (formula "3") (term "0,0,1") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "3") (term "0,1"))
                              (rule "concrete_and_2" (formula "3") (term "1"))
                              (rule "concrete_or_4" (formula "3"))
                              (rule "applyOnRigidTerm" (formula "2") (term "0,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2"))
                              (rule "applyOnPV" (formula "2") (term "0"))
                              (rule "simplifyUpdate1Rigid" (formula "2") (term "1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,0,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,0,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                              (rule "applyEqRigid" (formula "16") (term "0,0,0,0,1,1,1,1,1") (ifseqformula "4"))
                              (rule "applyEqRigid" (formula "16") (term "0,1,0,0,1,1,1,1,1") (ifseqformula "2"))
                              (rule "tryEmpty" (formula "15") (term "1,1,1,1,1"))
                              (rule "emptyModality" (formula "15") (term "1,1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1"))
                              (rule "simplifyUpdate2" (formula "15"))
                              (rule "applySkip2" (formula "15") (term "1"))
                              (rule "applySkip2" (formula "15") (term "1"))
                              (rule "applySkip2" (formula "15") (term "1"))
                              (rule "notRight" (formula "15"))
                              (rule "sequentialToParallel2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate3" (formula "1") (term "0"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "ifSplit" (formula "16"))
                              (branch "if returns_1 true"
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "blockReturn" (formula "16") (term "1,1,1,1,1,1"))
                                 (rule "blockReturn" (formula "16") (term "1,1,1,1,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                 (rule "methodCallReturn" (formula "16") (term "1,1,1,1,1,1"))
                                 (rule "assignment" (formula "16") (term "1,1,1,1,1,1"))
                                 (rule "sequentialToParallel2" (formula "16") (term "1,1,1,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                 (rule "applyOnElementary" (formula "16") (term "0,1,1,1,1,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,0,1,1,1,1,1"))
                                 (rule "methodCallEmpty" (formula "16") (term "1,1,1,1,1,1"))
                                 (rule "tryEmpty" (formula "16") (term "1,1,1,1,1,1"))
                                 (rule "emptyModality" (formula "16") (term "1,1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1"))
                                 (rule "simplifyUpdate2" (formula "16"))
                                 (rule "applySkip2" (formula "16") (term "1"))
                                 (rule "applySkip2" (formula "16") (term "1"))
                                 (rule "applySkip2" (formula "16") (term "1"))
                                 (rule "sequentialToParallel2" (formula "16"))
                                 (rule "simplifyUpdate2" (formula "16"))
                                 (rule "simplifyUpdate3" (formula "16") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "16"))
                                 (rule "applyOnPV" (formula "16") (term "0"))
                                 (rule "close" (formula "16") (ifseqformula "1"))
                              )
                              (branch "if returns_1 false"
                                 (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "13"))
                                 (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                 (rule "applyOnPV" (formula "13") (term "0"))
                                 (rule "boolean_equal" (formula "13"))
                                 (rule "closeTrue" (formula "13"))
                              )
                           )
                           (branch "if returns_1 false"
                              (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "11"))
                              (rule "applyOnPV" (formula "11") (term "0"))
                              (rule "simplifyUpdate1Rigid" (formula "11") (term "1"))
                              (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "11"))
                              (rule "concrete_not_2" (formula "2") (term "0"))
                              (rule "concrete_or_1" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "10"))
                              (rule "concrete_not_2" (formula "2") (term "0,1"))
                              (rule "concrete_and_1" (formula "2") (term "1"))
                              (rule "methodCallReturn" (formula "14") (term "1,1,1,1"))
                              (rule "assignment" (formula "14") (term "1,1,1,1"))
                              (rule "applyAbstrOnConcrUpd" (formula "14") (term "1,1,1"))
                              (rule "methodCallEmpty" (formula "14") (term "1,1,1,1"))
                              (rule "blockEmpty" (formula "14") (term "1,1,1,1"))
                              (rule "assignment" (formula "14") (term "1,1,1,1"))
                              (rule "applyAbstrOnConcrUpd" (formula "14") (term "1,1,1"))
                              (rule "abstractExecutionNonVoid" (formula "14") (term "1,1,1,1") (inst "#label=_label15") (inst "#v1=v1") (inst "result=result_R_0") (inst "returns=returns_R_0") (inst "exc=exc_R_0") (inst "normal=normal_R_0"))
                              (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                              (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                              (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1,1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,0,1,1,1,1"))
                              (rule "impRight" (formula "14"))
                              (rule "andLeft" (formula "1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                              (rule "andLeft" (formula "1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3"))
                              (rule "simplifyUpdate2" (formula "3") (term "0"))
                              (rule "simplifyUpdate2" (formula "3") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3") (term "0"))
                              (rule "applyOnPV" (formula "3") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "3") (term "1"))
                              (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                              (rule "applyOnPV" (formula "3") (term "0,1,1"))
                              (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                              (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                              (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                              (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                              (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                              (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "13"))
                              (rule "concrete_not_2" (formula "3") (term "0,1"))
                              (rule "concrete_and_1" (formula "3") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                              (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                              (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "12"))
                              (rule "concrete_not_2" (formula "2") (term "0,1"))
                              (rule "concrete_and_1" (formula "2") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                              (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                              (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                              (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                              (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "12"))
                              (rule "concrete_and_2" (formula "2") (term "1,0"))
                              (rule "concrete_or_4" (formula "2") (term "0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                              (rule "applyOnPV" (formula "2") (term "0,0,1"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0"))
                              (rule "applyOnPV" (formula "2") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "12"))
                              (rule "concrete_not_2" (formula "2") (term "0,0"))
                              (rule "concrete_and_1" (formula "2") (term "0"))
                              (rule "neq_or" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                              (rule "apply_eq_boolean_rigid" (formula "15") (term "0,1,0,0,1,1,1,1,1") (ifseqformula "11"))
                              (rule "ifUnfold" (formula "14") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "14") (term "1,1,1,1,1") (newnames "boolv_4"))
                              (rule "inequality_comparison_simple" (formula "14") (term "1,1,1,1,1"))
                              (rule "sequentialToParallel2" (formula "14") (term "1,1,1,1"))
                              (rule "applyOnElementary" (formula "14") (term "1,0,1,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,1,1,1,1"))
                              (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,1,1,1,1"))
                              (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0,1,1,1,1"))
                              (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0,1,1,1,1"))
                              (rule "applyOnPV" (formula "14") (term "0,0,0,1,0,1,1,1,1"))
                              (rule "ifSplit" (formula "15"))
                              (branch "if returns_1 true"
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if returns_1 false"
                                 (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "11"))
                                 (rule "applyOnPV" (formula "11") (term "0"))
                                 (rule "simplifyUpdate1" (formula "11") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "11"))
                                 (rule "false_right" (formula "11"))
                                 (rule "ifUnfold" (formula "15") (term "1,1,1,1,1,1") (inst "#boolv=boolv"))
                                 (rule "variableDeclaration" (formula "15") (term "1,1,1,1,1,1") (newnames "boolv_5"))
                                 (rule "inequality_comparison_simple" (formula "15") (term "1,1,1,1,1,1"))
                                 (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1,1"))
                                 (rule "applyOnElementary" (formula "15") (term "1,0,1,1,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1,1,1,1"))
                                 (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1,1,1,1"))
                                 (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1,1,1,1"))
                                 (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1,1,1,1"))
                                 (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1,1,1,1"))
                                 (rule "ifSplit" (formula "14"))
                                 (branch "if boolv_4 true"
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "ifthenelse_concrete4" (formula "1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "11"))
                                    (rule "concrete_eq_4" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "blockThrow" (formula "15") (term "1,1,1,1,1"))
                                    (rule "blockThrow" (formula "15") (term "1,1,1,1,1"))
                                    (rule "methodCallParamThrow" (formula "15") (term "1,1,1,1,1"))
                                    (rule "tryCatchThrow" (formula "15") (term "1,1,1,1,1"))
                                    (rule "ifElseUnfold" (formula "15") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                                    (rule "variableDeclaration" (formula "15") (term "1,1,1,1,1") (newnames "boolv_6"))
                                    (rule "equality_comparison_simple" (formula "15") (term "1,1,1,1,1"))
                                    (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1"))
                                    (rule "applyOnElementary" (formula "15") (term "1,0,1,1,1,1"))
                                    (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1,1,1"))
                                    (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                                    (rule "ifSplit" (formula "16"))
                                    (branch "if boolv_5 true"
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                                       (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "blockThrow" (formula "16") (term "1,1,1,1,1,1"))
                                       (rule "blockThrow" (formula "16") (term "1,1,1,1,1,1"))
                                       (rule "methodCallParamThrow" (formula "16") (term "1,1,1,1,1,1"))
                                       (rule "tryCatchThrow" (formula "16") (term "1,1,1,1,1,1"))
                                       (rule "ifElseUnfold" (formula "16") (term "1,1,1,1,1,1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "16") (term "1,1,1,1,1,1") (newnames "boolv_7"))
                                       (rule "equality_comparison_simple" (formula "16") (term "1,1,1,1,1,1"))
                                       (rule "sequentialToParallel2" (formula "16") (term "1,1,1,1,1"))
                                       (rule "applyOnElementary" (formula "16") (term "1,0,1,1,1,1,1"))
                                       (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,1,1,1,1,1"))
                                       (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,1,1,1,1,1"))
                                       (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,1,1,1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0,1,1,1,1,1"))
                                       (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0,1,1,1,1,1"))
                                       (rule "applyOnPV" (formula "16") (term "0,0,0,1,0,1,1,1,1,1"))
                                       (rule "ifElseSplit" (formula "15"))
                                       (branch "if boolv_6 true"
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                                          (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if boolv_6 false"
                                          (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                          (rule "ifthenelse_false" (formula "10") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "10"))
                                          (rule "simplifyUpdate1Rigid" (formula "10") (term "1"))
                                          (rule "applyOnPV" (formula "10") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "10"))
                                          (rule "false_right" (formula "10"))
                                          (rule "elim_double_block" (formula "15") (term "1,1,1,1,1"))
                                          (rule "ifElseSplit" (formula "16"))
                                          (branch "if boolv_7 true"
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                                             (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if boolv_7 false"
                                             (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                             (rule "ifthenelse_false" (formula "10") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "10"))
                                             (rule "simplifyUpdate1" (formula "10") (term "1"))
                                             (rule "applyOnPV" (formula "10") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "10"))
                                             (rule "false_right" (formula "10"))
                                             (rule "elim_double_block" (formula "16") (term "1,1,1,1,1,1"))
                                             (rule "ifElseSplit" (formula "15"))
                                             (branch "if exc_1 instanceof Throwable true"
                                                (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1"))
                                                (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1,1,1"))
                                                (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1,1,1"))
                                                (rule "concrete_or_4" (formula "1") (term "1,1,1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "10"))
                                                (rule "applyOnPV" (formula "10") (term "0"))
                                                (rule "simplifyUpdate1" (formula "10") (term "1"))
                                                (rule "variableDeclaration" (formula "15") (term "1,1,1,1,1") (newnames "t"))
                                                (rule "delete_unnecessary_cast" (formula "15") (term "1,1,1,1,1"))
                                                (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1,1,1"))
                                                (rule "boolean_equal" (formula "1") (term "1,1,1,1,1,1"))
                                                (rule "concrete_or_3" (formula "1") (term "1,1,1,1,1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1"))
                                                (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                                (rule "applyOnElementary" (formula "15") (term "0,1,1,1,1"))
                                                (rule "applyOnPV" (formula "15") (term "0,0,1,1,1,1"))
                                                (rule "assignment" (formula "15") (term "1,1,1,1,1"))
                                                (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1"))
                                                (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                                (rule "applyOnElementary" (formula "15") (term "0,1,1,1,1"))
                                                (rule "applyOnPV" (formula "15") (term "0,0,1,1,1,1"))
                                                (rule "emptyModality" (formula "15") (term "1,1,1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1"))
                                                (rule "simplifyUpdate2" (formula "15"))
                                                (rule "applySkip2" (formula "15") (term "1"))
                                                (rule "applySkip2" (formula "15") (term "1"))
                                                (rule "applySkip2" (formula "15") (term "1"))
                                                (rule "notRight" (formula "15"))
                                                (rule "sequentialToParallel2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "simplifyUpdate3" (formula "1") (term "0"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "ifElseSplit" (formula "16"))
                                                (branch "if exc_1 instanceof Throwable true"
                                                   (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1,1"))
                                                   (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1,1,1,1"))
                                                   (rule "concrete_or_4" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "11"))
                                                   (rule "applyOnPV" (formula "11") (term "0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "11") (term "1"))
                                                   (rule "variableDeclaration" (formula "16") (term "1,1,1,1,1,1") (newnames "t_1"))
                                                   (rule "delete_unnecessary_cast" (formula "16") (term "1,1,1,1,1,1"))
                                                   (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1,1,1,1"))
                                                   (rule "boolean_equal" (formula "1") (term "1,1,1,1,1,1,1"))
                                                   (rule "concrete_or_3" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "sequentialToParallel2" (formula "16") (term "1,1,1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                                   (rule "applyOnElementary" (formula "16") (term "0,1,1,1,1,1"))
                                                   (rule "applyOnPV" (formula "16") (term "0,0,1,1,1,1,1"))
                                                   (rule "assignment" (formula "16") (term "1,1,1,1,1,1"))
                                                   (rule "sequentialToParallel2" (formula "16") (term "1,1,1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                                   (rule "applyOnElementary" (formula "16") (term "0,1,1,1,1,1"))
                                                   (rule "applyOnPV" (formula "16") (term "0,0,1,1,1,1,1"))
                                                   (rule "emptyModality" (formula "16") (term "1,1,1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "16"))
                                                   (rule "applySkip2" (formula "16") (term "1"))
                                                   (rule "applySkip2" (formula "16") (term "1"))
                                                   (rule "applySkip2" (formula "16") (term "1"))
                                                   (rule "sequentialToParallel2" (formula "16"))
                                                   (rule "simplifyUpdate2" (formula "16"))
                                                   (rule "simplifyUpdate3" (formula "16") (term "0"))
                                                   (rule "applyOnRigidFormula" (formula "16"))
                                                   (rule "applyOnPV" (formula "16") (term "0"))
                                                   (rule "close" (formula "16") (ifseqformula "1"))
                                                )
                                                (branch "if exc_1 instanceof Throwable false"
                                                   (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1,1"))
                                                   (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1,1,1,1"))
                                                   (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1,1,1,1"))
                                                   (rule "concrete_or_4" (formula "1") (term "0,1,1,1,1,1,1"))
                                                   (rule "double_not" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "close" (formula "13") (ifseqformula "1"))
                                                )
                                             )
                                             (branch "if exc_1 instanceof Throwable false"
                                                (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1"))
                                                (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                                (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1,1,1"))
                                                (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1,1,1"))
                                                (rule "concrete_or_4" (formula "1") (term "0,1,1,1,1,1"))
                                                (rule "double_not" (formula "1") (term "1,1,1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                (rule "close" (formula "12") (ifseqformula "1"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                       (rule "ifthenelse_false" (formula "10") (term "0,0"))
                                       (rule "applyOnRigidFormula" (formula "10"))
                                       (rule "simplifyUpdate1" (formula "10") (term "1"))
                                       (rule "applyOnPV" (formula "10") (term "0"))
                                       (rule "boolean_equal" (formula "10"))
                                       (rule "closeTrue" (formula "10"))
                                    )
                                 )
                                 (branch "if boolv_4 false"
                                    (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "11"))
                                    (rule "applyOnPV" (formula "11") (term "0"))
                                    (rule "simplifyUpdate1" (formula "11") (term "1"))
                                    (rule "ifthenelse_concrete4" (formula "11"))
                                    (rule "boolean_not_equal_2" (formula "11") (term "1"))
                                    (rule "concrete_or_4" (formula "11"))
                                    (rule "notRight" (formula "11"))
                                    (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
                                    (rule "concrete_eq_3" (formula "4"))
                                    (rule "blockEmpty" (formula "15") (term "1,1,1,1"))
                                    (rule "applyEqRigid" (formula "16") (term "0,0,0,1,1,1,1,1") (ifseqformula "1"))
                                    (rule "applyEqRigid" (formula "16") (term "0,0,0,1,0,1,1,1,1,1") (ifseqformula "1"))
                                    (rule "eqClose" (formula "16") (term "0,0,1,0,1,1,1,1,1"))
                                    (rule "ifthenelse_true" (formula "16") (term "0,1,0,1,1,1,1,1"))
                                    (rule "methodCallReturn" (formula "15") (term "1,1,1,1"))
                                    (rule "assignment" (formula "15") (term "1,1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "15") (term "1,1,1,1"))
                                    (rule "methodCallEmpty" (formula "15") (term "1,1,1,1"))
                                    (rule "tryEmpty" (formula "15") (term "1,1,1,1"))
                                    (rule "emptyModality" (formula "15") (term "1,1,1,1"))
                                    (rule "notRight" (formula "15"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "ifSplit" (formula "16"))
                                    (branch "if boolv_5 true"
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "13"))
                                       (rule "simplifyUpdate1" (formula "13") (term "1"))
                                       (rule "applyOnPV" (formula "13") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "13"))
                                       (rule "false_right" (formula "13"))
                                       (rule "blockEmpty" (formula "16") (term "1,1,1,1,1"))
                                       (rule "methodCallReturn" (formula "16") (term "1,1,1,1,1"))
                                       (rule "assignment" (formula "16") (term "1,1,1,1,1"))
                                       (rule "elimSelfSingleUpdateFor" (formula "16") (term "1,1,1,1,1"))
                                       (rule "methodCallEmpty" (formula "16") (term "1,1,1,1,1"))
                                       (rule "tryEmpty" (formula "16") (term "1,1,1,1,1"))
                                       (rule "emptyModality" (formula "16") (term "1,1,1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "1,1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "16"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "8") (term "1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "8") (term "1,0,0,0,0,0,0,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "7") (term "1,1,0,1,0,0"))
                                       (rule "simplifyUpdate1" (formula "7") (term "1,1,1,0,1,0,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "7") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "7") (term "1,1,1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "4") (term "1,1,0,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "4") (term "1,1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "4") (term "1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "3") (term "1,1,1,0,1,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "3") (term "1,1,0,1,0,0"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,1,1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "3") (term "1,1,1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "1") (term "1,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "16") (term "1,1,0"))
                                       (rule "simplifyUpdate1" (formula "16") (term "1,1,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "7") (term "1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "7") (term "1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "4") (term "1,0,1,0"))
                                       (rule "updateConcatAssoc" (formula "4") (term "0,1,0,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "4") (term "1,0,1,0,0"))
                                       (rule "updateConcatAssoc" (formula "4") (term "0,1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "4") (term "1,0,0,0,0,0,0,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "3") (term "1,1,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,1,1,1,0,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "3") (term "1,0,1,0,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "3") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,1,1,1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "1") (term "1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "16") (term "1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "3") (term "1,1,0,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "3") (term "1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "3") (term "1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "16") (term "1,0"))
                                       (rule "close" (formula "16") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
(branch "Case '<-'"
   (rule "diamondToBox" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_before,savedHeapBefore_before,normal,exc,returns,result_0"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "methodBodyExpand" (formula "1") (term "1") (newnames "heapBefore_after,savedHeapBefore_after"))
   (rule "simplifyUpdate2" (formula "1") (term "1"))
   (rule "abstractExecutionNonVoid" (formula "2") (term "1") (inst "#label=_label0") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,1"))
   (rule "impRight" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "applySkip2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "andLeft" (formula "1"))
   (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "applySkip2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate2" (formula "3") (term "1"))
   (rule "simplifyUpdate2" (formula "3") (term "0"))
   (rule "applyOnRigidFormula" (formula "2"))
   (rule "applyOnRigidFormula" (formula "1") (term "1"))
   (rule "applyOnRigidFormula" (formula "3") (term "1"))
   (rule "simplifyUpdate2" (formula "3") (term "0,1"))
   (rule "simplifyUpdate2" (formula "3") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0"))
   (rule "applyOnPV" (formula "3") (term "0,0"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
   (rule "applyOnPV" (formula "3") (term "0,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
   (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
   (rule "abstractExecutionNonVoid" (formula "4") (term "1") (inst "#label=_label1") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "4") (term "1,1,1"))
   (rule "simplifyUpdate2" (formula "4") (term "1,0,1"))
   (rule "impRight" (formula "4"))
   (rule "andLeft" (formula "1"))
   (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "applySkip2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "andLeft" (formula "1"))
   (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "applySkip2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate2" (formula "3") (term "0"))
   (rule "simplifyUpdate2" (formula "3") (term "1"))
   (rule "applyOnRigidFormula" (formula "2"))
   (rule "applyOnRigidFormula" (formula "1") (term "1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0"))
   (rule "applyOnPV" (formula "3") (term "0,0"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3") (term "1"))
   (rule "simplifyUpdate2" (formula "3") (term "0,1"))
   (rule "simplifyUpdate2" (formula "3") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
   (rule "applyOnPV" (formula "3") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
   (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
   (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
   (rule "cnf_rightDist" (formula "2") (term "0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "2") (term "1,0"))
   (rule "eq_or" (formula "2") (term "1,1,0"))
   (rule "commute_or" (formula "2") (term "0,1,0"))
   (rule "commute_and" (formula "2") (term "1,0"))
   (rule "cnf_rightDist" (formula "2") (term "0,0"))
   (rule "neq_or" (formula "2") (term "0,0,0"))
   (rule "concrete_and_1" (formula "2") (term "0,0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "shift_paren_and" (formula "2") (term "0"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "2"))
   (rule "cnf_rightDist" (formula "3"))
   (rule "neq_or_3" (formula "3") (term "1"))
   (rule "concrete_and_3" (formula "3"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or_2" (formula "3"))
   (rule "eq_or" (formula "3") (term "0"))
   (rule "cnf_rightDist" (formula "4"))
   (rule "neq_or" (formula "4") (term "1"))
   (rule "concrete_and_3" (formula "4"))
   (rule "shift_paren_or" (formula "4"))
   (rule "commute_or" (formula "4") (term "0"))
   (rule "neq_or_4" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "3"))
   (rule "shift_paren_or" (formula "2"))
   (rule "neq_or_2" (formula "2") (term "0"))
   (rule "concrete_or_1" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "ifSplit" (formula "5"))
   (branch "if returns true"
      (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applySkip2" (formula "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "6") (term "1,1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "3") (term "0"))
      (rule "concrete_or_2" (formula "3"))
      (rule "replace_known_left" (formula "4") (term "1,1") (ifseqformula "3"))
      (rule "concrete_and_3" (formula "4") (term "1"))
      (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "4") (term "1"))
      (rule "concrete_eq_4" (formula "4"))
      (rule "notLeft" (formula "4"))
      (rule "blockReturn" (formula "6") (term "1,1,1"))
      (rule "blockReturn" (formula "6") (term "1,1,1"))
      (rule "simplifyUpdate2" (formula "6") (term "1,1"))
      (rule "applyEqRigid" (formula "5") (term "0,0,0,0,1,1") (ifseqformula "3"))
      (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,1") (ifseqformula "1"))
      (rule "methodCallReturn" (formula "6") (term "1,1,1"))
      (rule "assignment" (formula "6") (term "1,1,1"))
      (rule "sequentialToParallel2" (formula "6") (term "1,1"))
      (rule "simplifyUpdate2" (formula "6") (term "1,1"))
      (rule "applyOnElementary" (formula "6") (term "0,1,1"))
      (rule "applyOnPV" (formula "6") (term "0,0,1,1"))
      (rule "methodCallEmpty" (formula "6") (term "1,1,1"))
      (rule "tryEmpty" (formula "6") (term "1,1,1"))
      (rule "emptyModality" (formula "6") (term "1,1,1"))
      (rule "dropEffectlessAbstractUpdate2" (formula "6") (term "1"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "applySkip2" (formula "6") (term "1"))
      (rule "sequentialToParallel2" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "simplifyUpdate3" (formula "6") (term "0"))
      (rule "applyOnRigidFormula" (formula "6"))
      (rule "applyOnPV" (formula "6") (term "0"))
      (rule "ifSplit" (formula "5"))
      (branch "if returns true"
         (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applySkip2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "6") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_equal" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockReturn" (formula "5") (term "1,1,1"))
         (rule "blockReturn" (formula "5") (term "1,1,1"))
         (rule "simplifyUpdate2" (formula "5") (term "1,1"))
         (rule "methodCallReturn" (formula "5") (term "1,1,1"))
         (rule "assignment" (formula "5") (term "1,1,1"))
         (rule "sequentialToParallel2" (formula "5") (term "1,1"))
         (rule "simplifyUpdate2" (formula "5") (term "1,1"))
         (rule "applyOnElementary" (formula "5") (term "0,1,1"))
         (rule "applyOnPV" (formula "5") (term "0,0,1,1"))
         (rule "methodCallEmpty" (formula "5") (term "1,1,1"))
         (rule "tryEmpty" (formula "5") (term "1,1,1"))
         (rule "emptyModality" (formula "5") (term "1,1,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "5") (term "1"))
         (rule "simplifyUpdate2" (formula "5"))
         (rule "applySkip2" (formula "5") (term "1"))
         (rule "notRight" (formula "5"))
         (rule "sequentialToParallel2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate3" (formula "1") (term "0"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "6") (ifseqformula "1"))
      )
      (branch "if returns false"
         (rule "false_to_not_true" (formula "1") (term "1,1,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applySkip2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "6") (term "1,1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "boolean_equal" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
   )
   (branch "if returns false"
      (rule "false_to_not_true" (formula "1") (term "1,1,1"))
      (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applySkip2" (formula "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "6") (term "1,1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "4"))
      (rule "simplifyUpdate1" (formula "4") (term "1"))
      (rule "applyOnPV" (formula "4") (term "0"))
      (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "4"))
      (rule "concrete_not_2" (formula "2") (term "0"))
      (rule "concrete_or_1" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "3"))
      (rule "concrete_not_2" (formula "2") (term "0,1"))
      (rule "concrete_and_1" (formula "2") (term "1"))
      (rule "apply_eq_boolean_rigid" (formula "4") (term "0,1,0,0,1,1") (ifseqformula "3"))
      (rule "ifUnfold" (formula "5") (term "1,1,1") (inst "#boolv=boolv"))
      (rule "variableDeclaration" (formula "5") (term "1,1,1") (newnames "boolv"))
      (rule "inequality_comparison_simple" (formula "5") (term "1,1,1"))
      (rule "sequentialToParallel2" (formula "5") (term "1,1"))
      (rule "applyOnElementary" (formula "5") (term "1,0,1,1"))
      (rule "applyOnRigidTerm" (formula "5") (term "0,1,0,1,1"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0,1,1"))
      (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0,1,1"))
      (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0,1,1"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0,1,1"))
      (rule "applyOnPV" (formula "5") (term "0,0,0,1,0,1,1"))
      (rule "ifSplit" (formula "4"))
      (branch "if returns true"
         (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applySkip2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "5") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if returns false"
         (rule "false_to_not_true" (formula "1") (term "1,1,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applySkip2" (formula "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "5") (term "1,1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "simplifyUpdate1" (formula "3") (term "1"))
         (rule "applyOnPV" (formula "3") (term "0"))
         (rule "boolean_not_equal_2" (formula "3"))
         (rule "false_right" (formula "3"))
         (rule "ifUnfold" (formula "4") (term "1,1,1") (inst "#boolv=boolv"))
         (rule "variableDeclaration" (formula "4") (term "1,1,1") (newnames "boolv_1"))
         (rule "inequality_comparison_simple" (formula "4") (term "1,1,1"))
         (rule "sequentialToParallel2" (formula "4") (term "1,1"))
         (rule "applyOnElementary" (formula "4") (term "1,0,1,1"))
         (rule "applyOnRigidTerm" (formula "4") (term "0,1,0,1,1"))
         (rule "simplifyUpdate1" (formula "4") (term "2,0,1,0,1,1"))
         (rule "simplifyUpdate1" (formula "4") (term "1,0,1,0,1,1"))
         (rule "applyOnRigidFormula" (formula "4") (term "0,0,1,0,1,1"))
         (rule "simplifyUpdate1" (formula "4") (term "1,0,0,1,0,1,1"))
         (rule "applyOnPV" (formula "4") (term "0,0,0,1,0,1,1"))
         (rule "ifSplit" (formula "5"))
         (branch "if boolv true"
            (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applySkip2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "6") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete4" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "3"))
            (rule "concrete_eq_4" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "blockThrow" (formula "6") (term "1,1,1"))
            (rule "blockThrow" (formula "6") (term "1,1,1"))
            (rule "methodCallParamThrow" (formula "6") (term "1,1,1"))
            (rule "tryCatchThrow" (formula "6") (term "1,1,1"))
            (rule "ifElseUnfold" (formula "6") (term "1,1,1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "6") (term "1,1,1") (newnames "boolv_2"))
            (rule "equality_comparison_simple" (formula "6") (term "1,1,1"))
            (rule "sequentialToParallel2" (formula "6") (term "1,1"))
            (rule "applyOnElementary" (formula "6") (term "1,0,1,1"))
            (rule "applyOnRigidTerm" (formula "6") (term "0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0,1,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0,1,1"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,1,0,1,1"))
            (rule "ifSplit" (formula "5"))
            (branch "if boolv_1 true"
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "6") (term "1,1"))
               (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "4"))
               (rule "ifthenelse_false" (formula "1") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockThrow" (formula "5") (term "1,1,1"))
               (rule "blockThrow" (formula "5") (term "1,1,1"))
               (rule "methodCallParamThrow" (formula "5") (term "1,1,1"))
               (rule "tryCatchThrow" (formula "5") (term "1,1,1"))
               (rule "ifElseUnfold" (formula "5") (term "1,1,1") (inst "#boolv=boolv"))
               (rule "variableDeclaration" (formula "5") (term "1,1,1") (newnames "boolv_3"))
               (rule "equality_comparison_simple" (formula "5") (term "1,1,1"))
               (rule "sequentialToParallel2" (formula "5") (term "1,1"))
               (rule "applyOnElementary" (formula "5") (term "1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "5") (term "0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0,1,1"))
               (rule "applyOnPV" (formula "5") (term "0,0,0,1,0,1,1"))
               (rule "ifElseSplit" (formula "6"))
               (branch "if boolv_2 true"
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "7") (term "1,1"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "4"))
                  (rule "ifthenelse_false" (formula "1") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "7") (term "1,1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "4"))
                  (rule "ifthenelse_false" (formula "2") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "2"))
                  (rule "simplifyUpdate1" (formula "2") (term "1"))
                  (rule "applyOnPV" (formula "2") (term "0"))
                  (rule "boolean_not_equal_2" (formula "2"))
                  (rule "false_right" (formula "2"))
                  (rule "elim_double_block" (formula "6") (term "1,1,1"))
                  (rule "ifElseSplit" (formula "5"))
                  (branch "if boolv_3 true"
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "6") (term "1,1"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "4"))
                     (rule "ifthenelse_false" (formula "1") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "6") (term "1,1"))
                     (rule "notLeft" (formula "1"))
                     (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "4"))
                     (rule "ifthenelse_false" (formula "2") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "2"))
                     (rule "simplifyUpdate1" (formula "2") (term "1"))
                     (rule "applyOnPV" (formula "2") (term "0"))
                     (rule "boolean_not_equal_2" (formula "2"))
                     (rule "false_right" (formula "2"))
                     (rule "elim_double_block" (formula "5") (term "1,1,1"))
                     (rule "ifElseSplit" (formula "6"))
                     (branch "if exc instanceof Throwable true"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1"))
                        (rule "concrete_or_4" (formula "1") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "simplifyUpdate1" (formula "2") (term "1"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "variableDeclaration" (formula "6") (term "1,1,1") (newnames "t"))
                        (rule "delete_unnecessary_cast" (formula "6") (term "1,1,1"))
                        (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                        (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                        (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                        (rule "true_left" (formula "1"))
                        (rule "sequentialToParallel2" (formula "6") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "6") (term "1,1"))
                        (rule "applyOnElementary" (formula "6") (term "0,1,1"))
                        (rule "applyOnPV" (formula "6") (term "0,0,1,1"))
                        (rule "assignment" (formula "6") (term "1,1,1"))
                        (rule "sequentialToParallel2" (formula "6") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "6") (term "1,1"))
                        (rule "applyOnElementary" (formula "6") (term "0,1,1"))
                        (rule "applyOnPV" (formula "6") (term "0,0,1,1"))
                        (rule "emptyModality" (formula "6") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "6") (term "1"))
                        (rule "simplifyUpdate2" (formula "6"))
                        (rule "applySkip2" (formula "6") (term "1"))
                        (rule "sequentialToParallel2" (formula "6"))
                        (rule "simplifyUpdate2" (formula "6"))
                        (rule "simplifyUpdate3" (formula "6") (term "0"))
                        (rule "applyOnRigidFormula" (formula "6"))
                        (rule "applyOnPV" (formula "6") (term "0"))
                        (rule "ifElseSplit" (formula "5"))
                        (branch "if exc instanceof Throwable true"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnPV" (formula "2") (term "0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1"))
                           (rule "variableDeclaration" (formula "5") (term "1,1,1") (newnames "t_1"))
                           (rule "delete_unnecessary_cast" (formula "5") (term "1,1,1"))
                           (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                           (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                           (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                           (rule "true_left" (formula "1"))
                           (rule "sequentialToParallel2" (formula "5") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "5") (term "1,1"))
                           (rule "applyOnElementary" (formula "5") (term "0,1,1"))
                           (rule "applyOnPV" (formula "5") (term "0,0,1,1"))
                           (rule "assignment" (formula "5") (term "1,1,1"))
                           (rule "sequentialToParallel2" (formula "5") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "5") (term "1,1"))
                           (rule "applyOnElementary" (formula "5") (term "0,1,1"))
                           (rule "applyOnPV" (formula "5") (term "0,0,1,1"))
                           (rule "emptyModality" (formula "5") (term "1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "5") (term "1"))
                           (rule "simplifyUpdate2" (formula "5"))
                           (rule "applySkip2" (formula "5") (term "1"))
                           (rule "notRight" (formula "5"))
                           (rule "sequentialToParallel2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate3" (formula "1") (term "0"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "close" (formula "6") (ifseqformula "1"))
                        )
                        (branch "if exc instanceof Throwable false"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1"))
                           (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1"))
                           (rule "concrete_or_4" (formula "1") (term "0,1,1,1"))
                           (rule "double_not" (formula "1") (term "1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "close" (formula "4") (ifseqformula "1"))
                        )
                     )
                     (branch "if exc instanceof Throwable false"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1"))
                        (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1"))
                        (rule "concrete_or_4" (formula "1") (term "0,1,1,1"))
                        (rule "double_not" (formula "1") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "close" (formula "4") (ifseqformula "1"))
                     )
                  )
               )
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1,1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "6") (term "1,1"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "4"))
               (rule "ifthenelse_false" (formula "2") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "simplifyUpdate1" (formula "2") (term "1"))
               (rule "applyOnPV" (formula "2") (term "0"))
               (rule "boolean_equal" (formula "2"))
               (rule "closeTrue" (formula "2"))
            )
         )
         (branch "if boolv false"
            (rule "false_to_not_true" (formula "1") (term "1,1,1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applySkip2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "6") (term "1,1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "ifthenelse_concrete4" (formula "3"))
            (rule "boolean_not_equal_2" (formula "3") (term "1"))
            (rule "concrete_or_4" (formula "3"))
            (rule "notRight" (formula "3"))
            (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
            (rule "concrete_eq_3" (formula "3"))
            (rule "blockEmpty" (formula "6") (term "1,1") (newnames "normal_0,exc_0,returns_0,result_1"))
            (rule "applyEqRigid" (formula "5") (term "0,0,0,1,1") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "5") (term "0,0,0,1,0,1,1") (ifseqformula "1"))
            (rule "eqClose" (formula "5") (term "0,0,1,0,1,1"))
            (rule "ifthenelse_true" (formula "5") (term "0,1,0,1,1"))
            (rule "abstractExecutionNonVoid" (formula "6") (term "1,1") (inst "#label=_label2") (inst "#v1=v1") (inst "result=result_Q_0") (inst "returns=returns_Q_0") (inst "exc=exc_Q_0") (inst "normal=normal_Q_0"))
            (rule "concrete_and_3" (formula "6") (term "1,1,0,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,1,1,0,1,1"))
            (rule "simplifyUpdate2" (formula "6") (term "1,1,1,1"))
            (rule "simplifyUpdate2" (formula "6") (term "1,0,1,1"))
            (rule "impRight" (formula "6"))
            (rule "andLeft" (formula "1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "applySkip2" (formula "2"))
            (rule "applySkip2" (formula "2"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "applySkip2" (formula "2"))
            (rule "applySkip2" (formula "2"))
            (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
            (rule "notLeft" (formula "3"))
            (rule "andLeft" (formula "1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "applySkip2" (formula "2"))
            (rule "applySkip2" (formula "2"))
            (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate2" (formula "3") (term "0"))
            (rule "simplifyUpdate2" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "7"))
            (rule "simplifyUpdate1" (formula "7") (term "1"))
            (rule "applyOnPV" (formula "7") (term "0"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "3") (term "0"))
            (rule "simplifyUpdate1Rigid" (formula "3") (term "1,0"))
            (rule "applyOnPV" (formula "3") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1"))
            (rule "simplifyUpdate2" (formula "3") (term "1,1"))
            (rule "simplifyUpdate2" (formula "3") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1"))
            (rule "simplifyUpdate2" (formula "2") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "1") (term "1"))
            (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
            (rule "simplifyUpdate1Rigid" (formula "3") (term "1,1,1"))
            (rule "applyOnPV" (formula "3") (term "0,1,1"))
            (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
            (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
            (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
            (rule "replace_known_right" (formula "3") (term "0,0,1") (ifseqformula "7"))
            (rule "concrete_not_2" (formula "3") (term "0,1"))
            (rule "concrete_and_1" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
            (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1,1"))
            (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
            (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
            (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "7"))
            (rule "concrete_not_2" (formula "2") (term "0,1"))
            (rule "concrete_and_1" (formula "2") (term "1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
            (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
            (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
            (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
            (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
            (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "7"))
            (rule "concrete_and_2" (formula "2") (term "1,0"))
            (rule "concrete_or_4" (formula "2") (term "0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
            (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,1,1,0"))
            (rule "applySkip1" (formula "1") (term "1,1,1,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
            (rule "applyOnPV" (formula "2") (term "0,0,0,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0"))
            (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "7"))
            (rule "concrete_not_2" (formula "2") (term "0,0"))
            (rule "concrete_and_1" (formula "2") (term "0"))
            (rule "neq_or" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,0"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,0"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,0"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,0"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,0"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
            (rule "apply_eq_boolean_rigid" (formula "9") (term "0,1,0,0,1,1,1") (ifseqformula "6"))
            (rule "ifSplit" (formula "8"))
            (branch "if boolv_1 true"
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "9") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1,1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "9") (term "1,1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "6"))
               (rule "simplifyUpdate1" (formula "6") (term "1"))
               (rule "applyOnPV" (formula "6") (term "0"))
               (rule "boolean_not_equal_2" (formula "6"))
               (rule "false_right" (formula "6"))
               (rule "blockEmpty" (formula "8") (term "1,1"))
               (rule "ifSplit" (formula "9"))
               (branch "if returns_0 true"
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if returns_0 false"
                  (rule "false_to_not_true" (formula "1") (term "1,1,1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "6"))
                  (rule "simplifyUpdate1" (formula "6") (term "1"))
                  (rule "applyOnPV" (formula "6") (term "0"))
                  (rule "boolean_not_equal_2" (formula "6"))
                  (rule "false_right" (formula "6"))
                  (rule "ifUnfold" (formula "9") (term "1,1,1,1") (inst "#boolv=boolv"))
                  (rule "variableDeclaration" (formula "9") (term "1,1,1,1") (newnames "boolv_2"))
                  (rule "inequality_comparison_simple" (formula "9") (term "1,1,1,1"))
                  (rule "sequentialToParallel2" (formula "9") (term "1,1,1"))
                  (rule "applyOnElementary" (formula "9") (term "1,0,1,1,1"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0,1,0,1,1,1"))
                  (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0,1,1,1"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0,1,1,1"))
                  (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0,1,1,1"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0,1,1,1"))
                  (rule "applyOnPV" (formula "9") (term "0,0,0,1,0,1,1,1"))
                  (rule "ifSplit" (formula "9"))
                  (branch "if boolv_2 true"
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1"))
                     (rule "concrete_or_4" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "6"))
                     (rule "concrete_eq_4" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "blockThrow" (formula "10") (term "1,1,1,1"))
                     (rule "blockThrow" (formula "10") (term "1,1,1,1"))
                     (rule "methodCallParamThrow" (formula "10") (term "1,1,1,1"))
                     (rule "tryCatchThrow" (formula "10") (term "1,1,1,1"))
                     (rule "ifElseUnfold" (formula "10") (term "1,1,1,1") (inst "#boolv=boolv"))
                     (rule "variableDeclaration" (formula "10") (term "1,1,1,1") (newnames "boolv_3"))
                     (rule "equality_comparison_simple" (formula "10") (term "1,1,1,1"))
                     (rule "sequentialToParallel2" (formula "10") (term "1,1,1"))
                     (rule "applyOnElementary" (formula "10") (term "1,0,1,1,1"))
                     (rule "applyOnRigidTerm" (formula "10") (term "0,1,0,1,1,1"))
                     (rule "simplifyUpdate1Rigid" (formula "10") (term "2,0,1,0,1,1,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0,1,1,1"))
                     (rule "applyOnPV" (formula "10") (term "0,0,0,1,0,1,1,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0,1,1,1"))
                     (rule "methodCallWithAssignmentWithinClass" (formula "9") (term "1,1") (inst "#v0=o"))
                     (rule "variableDeclaration" (formula "9") (term "1,1") (newnames "o"))
                     (rule "variableDeclarationFinalAssign" (formula "9") (term "1,1"))
                     (rule "variableDeclarationFinal" (formula "9") (term "1,1") (newnames "res"))
                     (rule "assignment" (formula "9") (term "1,1"))
                     (rule "variableDeclarationAssign" (formula "9") (term "1,1,1"))
                     (rule "variableDeclaration" (formula "9") (term "1,1,1") (newnames "tmp_1"))
                     (rule "assignment" (formula "9") (term "1,1,1"))
                     (rule "sequentialToParallel2" (formula "9") (term "1,1"))
                     (rule "simplifyUpdate3" (formula "9") (term "1,0,1,1"))
                     (rule "methodBodyExpand" (formula "9") (term "1,1,1") (newnames "heapBefore_extracted,savedHeapBefore_extracted"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,1,1"))
                     (rule "abstractExecutionNonVoid" (formula "9") (term "1,1,1") (inst "#label=_label9") (inst "#v1=v1") (inst "result=result_Q_0") (inst "returns=returns_Q_0") (inst "exc=exc_Q_0") (inst "normal=normal_Q_0"))
                     (rule "concrete_and_3" (formula "9") (term "1,1,0,1,1,1"))
                     (rule "concrete_and_3" (formula "9") (term "0,1,1,0,1,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,1,1,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,0,1,1,1"))
                     (rule "impRight" (formula "9"))
                     (rule "andLeft" (formula "1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "andLeft" (formula "1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                     (rule "notLeft" (formula "3"))
                     (rule "andLeft" (formula "1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "3"))
                     (rule "simplifyUpdate2" (formula "3") (term "0"))
                     (rule "simplifyUpdate2" (formula "3") (term "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "applyOnRigidFormula" (formula "2"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "3") (term "0"))
                     (rule "applyOnPV" (formula "3") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                     (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "8"))
                     (rule "concrete_eq_2" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "7"))
                     (rule "concrete_or_2" (formula "2") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "1"))
                     (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                     (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1"))
                     (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,1,1,1"))
                     (rule "applySkip1" (formula "1") (term "1,0,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "7"))
                     (rule "simplifyUpdate2" (formula "7") (term "0"))
                     (rule "simplifyUpdate2" (formula "7") (term "1"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0"))
                     (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "7") (term "0"))
                     (rule "applyOnRigidFormula" (formula "7") (term "1"))
                     (rule "applyOnPV" (formula "7") (term "0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "7") (term "1,1"))
                     (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "9"))
                     (rule "concrete_and_4" (formula "7"))
                     (rule "false_right" (formula "7"))
                     (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                     (rule "applyOnPV" (formula "2") (term "0,1,0"))
                     (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "8"))
                     (rule "concrete_and_4" (formula "2") (term "0"))
                     (rule "concrete_or_2" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "7"))
                     (rule "applyOnPV" (formula "7") (term "0"))
                     (rule "simplifyUpdate1" (formula "7") (term "1"))
                     (rule "applyOnRigidFormula" (formula "6"))
                     (rule "simplifyUpdate1" (formula "6") (term "1"))
                     (rule "applyOnPV" (formula "6") (term "0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1,1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,0"))
                     (rule "applyOnPV" (formula "1") (term "0,1,1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "apply_eq_boolean_rigid" (formula "10") (term "0,1,0,0,1,1,1,1") (ifseqformula "8"))
                     (rule "ifElseSplit" (formula "11"))
                     (branch "if boolv_3 true"
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "12") (term "1,1,1"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "8"))
                        (rule "ifthenelse_false" (formula "1") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if boolv_3 false"
                        (rule "false_to_not_true" (formula "1") (term "1,1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "12") (term "1,1,1"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "8"))
                        (rule "ifthenelse_false" (formula "6") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "6"))
                        (rule "simplifyUpdate1" (formula "6") (term "1"))
                        (rule "applyOnPV" (formula "6") (term "0"))
                        (rule "boolean_not_equal_2" (formula "6"))
                        (rule "false_right" (formula "6"))
                        (rule "elim_double_block" (formula "11") (term "1,1,1,1"))
                        (rule "ifSplit" (formula "10"))
                        (branch "if returns_0 true"
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if returns_0 false"
                           (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "6"))
                           (rule "simplifyUpdate1Rigid" (formula "6") (term "1"))
                           (rule "applyOnPV" (formula "6") (term "0"))
                           (rule "boolean_not_equal_2" (formula "6"))
                           (rule "false_right" (formula "6"))
                           (rule "ifUnfold" (formula "10") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                           (rule "variableDeclaration" (formula "10") (term "1,1,1,1,1") (newnames "boolv_4"))
                           (rule "inequality_comparison_simple" (formula "10") (term "1,1,1,1,1"))
                           (rule "sequentialToParallel2" (formula "10") (term "1,1,1,1"))
                           (rule "applyOnElementary" (formula "10") (term "1,0,1,1,1,1"))
                           (rule "applyOnRigidTerm" (formula "10") (term "0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1Rigid" (formula "10") (term "1,0,1,0,1,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0,1,1,1,1"))
                           (rule "applyOnPV" (formula "10") (term "0,0,0,1,0,1,1,1,1"))
                           (rule "ifElseSplit" (formula "11"))
                           (branch "if exc_0 instanceof Throwable true"
                              (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1"))
                              (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1,1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1,1"))
                              (rule "concrete_or_4" (formula "1") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "6"))
                              (rule "applyOnPV" (formula "6") (term "0"))
                              (rule "simplifyUpdate1" (formula "6") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1,1,1,1") (newnames "t"))
                              (rule "delete_unnecessary_cast" (formula "11") (term "1,1,1,1"))
                              (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1,1"))
                              (rule "boolean_equal" (formula "1") (term "1,1,1,1,1"))
                              (rule "concrete_or_3" (formula "1") (term "1,1,1,1"))
                              (rule "true_left" (formula "1"))
                              (rule "sequentialToParallel2" (formula "11") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                              (rule "applyOnElementary" (formula "11") (term "0,1,1,1"))
                              (rule "applyOnPV" (formula "11") (term "0,0,1,1,1"))
                              (rule "assignment" (formula "11") (term "1,1,1,1"))
                              (rule "sequentialToParallel2" (formula "11") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                              (rule "applyOnElementary" (formula "11") (term "0,1,1,1"))
                              (rule "applyOnPV" (formula "11") (term "0,0,1,1,1"))
                              (rule "emptyModality" (formula "11") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "11") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "11") (term "1"))
                              (rule "simplifyUpdate2" (formula "11"))
                              (rule "applySkip2" (formula "11") (term "1"))
                              (rule "applySkip2" (formula "11") (term "1"))
                              (rule "sequentialToParallel2" (formula "11"))
                              (rule "simplifyUpdate2" (formula "11"))
                              (rule "simplifyUpdate3" (formula "11") (term "0"))
                              (rule "applyOnRigidFormula" (formula "11"))
                              (rule "applyOnPV" (formula "11") (term "0"))
                              (rule "ifSplit" (formula "10"))
                              (branch "if boolv_4 true"
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "8"))
                                 (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "blockThrow" (formula "10") (term "1,1,1,1,1"))
                                 (rule "blockThrow" (formula "10") (term "1,1,1,1,1"))
                                 (rule "methodCallParamThrow" (formula "10") (term "1,1,1,1,1"))
                                 (rule "blockThrow" (formula "10") (term "1,1,1,1,1"))
                                 (rule "methodCallParamThrow" (formula "10") (term "1,1,1,1,1"))
                                 (rule "tryCatchThrow" (formula "10") (term "1,1,1,1,1"))
                                 (rule "ifElseUnfold" (formula "10") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                                 (rule "variableDeclaration" (formula "10") (term "1,1,1,1,1") (newnames "boolv_5"))
                                 (rule "equality_comparison_simple" (formula "10") (term "1,1,1,1,1"))
                                 (rule "sequentialToParallel2" (formula "10") (term "1,1,1,1"))
                                 (rule "applyOnElementary" (formula "10") (term "1,0,1,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "10") (term "0,1,0,1,1,1,1"))
                                 (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0,1,1,1,1"))
                                 (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0,1,1,1,1"))
                                 (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0,1,1,1,1"))
                                 (rule "applyOnPV" (formula "10") (term "0,0,0,1,0,1,1,1,1"))
                                 (rule "ifElseSplit" (formula "10"))
                                 (branch "if boolv_5 true"
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "8"))
                                    (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if boolv_5 false"
                                    (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "8"))
                                    (rule "ifthenelse_false" (formula "6") (term "0,0"))
                                    (rule "applyOnRigidFormula" (formula "6"))
                                    (rule "simplifyUpdate1Rigid" (formula "6") (term "1"))
                                    (rule "applyOnPV" (formula "6") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "6"))
                                    (rule "false_right" (formula "6"))
                                    (rule "elim_double_block" (formula "10") (term "1,1,1,1,1"))
                                    (rule "ifElseSplit" (formula "10"))
                                    (branch "if exc_0 instanceof Throwable true"
                                       (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1"))
                                       (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1,1,1"))
                                       (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1,1,1"))
                                       (rule "concrete_or_4" (formula "1") (term "1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "6"))
                                       (rule "simplifyUpdate1Rigid" (formula "6") (term "1"))
                                       (rule "applyOnPV" (formula "6") (term "0"))
                                       (rule "variableDeclaration" (formula "10") (term "1,1,1,1,1") (newnames "t_1"))
                                       (rule "delete_unnecessary_cast" (formula "10") (term "1,1,1,1,1"))
                                       (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1,1,1"))
                                       (rule "boolean_equal" (formula "1") (term "1,1,1,1,1,1"))
                                       (rule "concrete_or_3" (formula "1") (term "1,1,1,1,1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "sequentialToParallel2" (formula "10") (term "1,1,1,1"))
                                       (rule "simplifyUpdate2" (formula "10") (term "1,1,1,1"))
                                       (rule "applyOnElementary" (formula "10") (term "0,1,1,1,1"))
                                       (rule "applyOnPV" (formula "10") (term "0,0,1,1,1,1"))
                                       (rule "assignment" (formula "10") (term "1,1,1,1,1"))
                                       (rule "sequentialToParallel2" (formula "10") (term "1,1,1,1"))
                                       (rule "simplifyUpdate2" (formula "10") (term "1,1,1,1"))
                                       (rule "applyOnElementary" (formula "10") (term "0,1,1,1,1"))
                                       (rule "applyOnPV" (formula "10") (term "0,0,1,1,1,1"))
                                       (rule "emptyModality" (formula "10") (term "1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "10") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "10") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "10") (term "1"))
                                       (rule "simplifyUpdate2" (formula "10"))
                                       (rule "applySkip2" (formula "10") (term "1"))
                                       (rule "applySkip2" (formula "10") (term "1"))
                                       (rule "notRight" (formula "10"))
                                       (rule "sequentialToParallel2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate3" (formula "1") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "close" (formula "11") (ifseqformula "1"))
                                    )
                                    (branch "if exc_0 instanceof Throwable false"
                                       (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1"))
                                       (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                       (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1,1,1"))
                                       (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1,1,1"))
                                       (rule "concrete_or_4" (formula "1") (term "0,1,1,1,1,1"))
                                       (rule "double_not" (formula "1") (term "1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "close" (formula "8") (ifseqformula "1"))
                                    )
                                 )
                              )
                              (branch "if boolv_4 false"
                                 (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "11") (term "1,1,1,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "8"))
                                 (rule "ifthenelse_false" (formula "6") (term "0,0"))
                                 (rule "applyOnRigidFormula" (formula "6"))
                                 (rule "applyOnPV" (formula "6") (term "0"))
                                 (rule "simplifyUpdate1" (formula "6") (term "1"))
                                 (rule "boolean_equal" (formula "6"))
                                 (rule "closeTrue" (formula "6"))
                              )
                           )
                           (branch "if exc_0 instanceof Throwable false"
                              (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1"))
                              (rule "false_to_not_true" (formula "1") (term "1,1,1,1"))
                              (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1,1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1,1"))
                              (rule "concrete_or_4" (formula "1") (term "0,1,1,1,1"))
                              (rule "double_not" (formula "1") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "close" (formula "8") (ifseqformula "1"))
                           )
                        )
                     )
                  )
                  (branch "if boolv_2 false"
                     (rule "false_to_not_true" (formula "1") (term "1,1,1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "applySkip2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "6"))
                     (rule "applyOnPV" (formula "6") (term "0"))
                     (rule "simplifyUpdate1" (formula "6") (term "1"))
                     (rule "ifthenelse_concrete4" (formula "6"))
                     (rule "boolean_not_equal_2" (formula "6") (term "1"))
                     (rule "concrete_or_4" (formula "6"))
                     (rule "notRight" (formula "6"))
                     (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                     (rule "concrete_eq_3" (formula "3"))
                     (rule "blockEmpty" (formula "10") (term "1,1,1") (newnames "normal_1,exc_1,returns_1,result_2"))
                     (rule "abstractExecutionNonVoid" (formula "10") (term "1,1,1") (inst "#label=_label3") (inst "#v1=v1") (inst "result=result_R_0") (inst "returns=returns_R_0") (inst "exc=exc_R_0") (inst "normal=normal_R_0"))
                     (rule "concrete_and_3" (formula "10") (term "1,1,0,1,1,1"))
                     (rule "eq_and_2" (formula "10") (term "1,1,0,1,1,1"))
                     (rule "concrete_and_3" (formula "10") (term "1,1,0,1,1,1"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,1,1,1,1"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,0,1,1,1"))
                     (rule "impRight" (formula "10"))
                     (rule "andLeft" (formula "1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                     (rule "andLeft" (formula "1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "applySkip2" (formula "2"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "3"))
                     (rule "simplifyUpdate2" (formula "3") (term "1"))
                     (rule "simplifyUpdate2" (formula "3") (term "0"))
                     (rule "applyOnRigidFormula" (formula "2"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "3") (term "1"))
                     (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "3") (term "0"))
                     (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                     (rule "applyOnPV" (formula "3") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "1"))
                     (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                     (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                     (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                     (rule "applyOnPV" (formula "3") (term "0,1,1"))
                     (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                     (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                     (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                     (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                     (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                     (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                     (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                     (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                     (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                     (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                     (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                     (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                     (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                     (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                     (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                     (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,0,0,0"))
                     (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,1,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,0,1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,1,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,1,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,0,1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,0,1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,0"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,0"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "0"))
                     (rule "commute_or" (formula "2") (term "0,0"))
                     (rule "cnf_rightDist" (formula "2") (term "1,0"))
                     (rule "eq_or" (formula "2") (term "1,1,0"))
                     (rule "commute_or" (formula "2") (term "0,1,0"))
                     (rule "commute_and" (formula "2") (term "1,0"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0"))
                     (rule "neq_or" (formula "2") (term "0,0,0"))
                     (rule "concrete_and_1" (formula "2") (term "0,0"))
                     (rule "commute_or" (formula "2") (term "0,0"))
                     (rule "shift_paren_and" (formula "2") (term "0"))
                     (rule "cnf_rightDist" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or" (formula "2"))
                     (rule "cnf_rightDist" (formula "3"))
                     (rule "neq_or_3" (formula "3") (term "1"))
                     (rule "concrete_and_3" (formula "3"))
                     (rule "cnf_rightDist" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "3"))
                     (rule "eq_or" (formula "3") (term "0"))
                     (rule "cnf_rightDist" (formula "4"))
                     (rule "neq_or" (formula "4") (term "1"))
                     (rule "concrete_and_3" (formula "4"))
                     (rule "shift_paren_or" (formula "4"))
                     (rule "commute_or" (formula "4") (term "0"))
                     (rule "neq_or_4" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or" (formula "3"))
                     (rule "shift_paren_or" (formula "2"))
                     (rule "neq_or_2" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "methodCallWithAssignmentWithinClass" (formula "12") (term "1,1") (inst "#v0=o"))
                     (rule "variableDeclaration" (formula "12") (term "1,1") (newnames "o"))
                     (rule "variableDeclarationFinalAssign" (formula "12") (term "1,1"))
                     (rule "variableDeclarationFinal" (formula "12") (term "1,1") (newnames "res"))
                     (rule "assignment" (formula "12") (term "1,1"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1,1,1"))
                     (rule "variableDeclaration" (formula "12") (term "1,1,1") (newnames "tmp_1"))
                     (rule "assignment" (formula "12") (term "1,1,1"))
                     (rule "sequentialToParallel2" (formula "12") (term "1,1"))
                     (rule "simplifyUpdate3" (formula "12") (term "1,0,1,1"))
                     (rule "ifSplit" (formula "13"))
                     (branch "if returns_1 true"
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                        (rule "concrete_not_1" (formula "3") (term "0"))
                        (rule "concrete_or_2" (formula "3"))
                        (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "1"))
                        (rule "concrete_not_1" (formula "4") (term "0,1"))
                        (rule "concrete_and_2" (formula "4") (term "1"))
                        (rule "concrete_eq_4" (formula "4"))
                        (rule "notLeft" (formula "4"))
                        (rule "blockReturn" (formula "14") (term "1,1,1,1,1"))
                        (rule "blockReturn" (formula "14") (term "1,1,1,1,1"))
                        (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                        (rule "methodBodyExpand" (formula "13") (term "1,1,1") (newnames "heapBefore_extracted,savedHeapBefore_extracted"))
                        (rule "simplifyUpdate2" (formula "13") (term "1,1,1"))
                        (rule "methodCallReturn" (formula "14") (term "1,1,1,1,1"))
                        (rule "assignment" (formula "14") (term "1,1,1,1,1"))
                        (rule "sequentialToParallel2" (formula "14") (term "1,1,1,1"))
                        (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                        (rule "applyOnElementary" (formula "14") (term "0,1,1,1,1"))
                        (rule "applyOnPV" (formula "14") (term "0,0,1,1,1,1"))
                        (rule "abstractExecutionNonVoid" (formula "13") (term "1,1,1") (inst "#label=_label7") (inst "#v1=v1") (inst "result=result_Q_0") (inst "returns=returns_Q_0") (inst "exc=exc_Q_0") (inst "normal=normal_Q_0"))
                        (rule "concrete_and_3" (formula "13") (term "1,1,0,1,1,1"))
                        (rule "concrete_and_3" (formula "13") (term "0,1,1,0,1,1,1"))
                        (rule "simplifyUpdate2" (formula "13") (term "1,1,1,1,1"))
                        (rule "simplifyUpdate2" (formula "13") (term "1,0,1,1,1"))
                        (rule "impRight" (formula "13"))
                        (rule "andLeft" (formula "1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                        (rule "notLeft" (formula "3"))
                        (rule "andLeft" (formula "1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "13"))
                        (rule "applyOnPV" (formula "13") (term "0"))
                        (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "9"))
                        (rule "concrete_eq_1" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "simplifyUpdate2" (formula "4"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "replace_known_right" (formula "2") (term "0,1,0,1") (ifseqformula "13"))
                        (rule "concrete_not_2" (formula "2") (term "1,0,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "concrete_and_1" (formula "2") (term "1"))
                        (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "3"))
                        (rule "concrete_not_1" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate1" (formula "3") (term "1"))
                        (rule "applyOnPV" (formula "3") (term "0"))
                        (rule "applyOnRigidFormula" (formula "12"))
                        (rule "simplifyUpdate1" (formula "12") (term "1"))
                        (rule "applyOnPV" (formula "12") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1"))
                        (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,1,0,1,1"))
                        (rule "applySkip1" (formula "1") (term "1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                        (rule "applyOnPV" (formula "2") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
                        (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "6"))
                        (rule "concrete_and_3" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,1"))
                        (rule "applyOnPV" (formula "2") (term "0,1,1"))
                        (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "6"))
                        (rule "concrete_and_3" (formula "2") (term "1"))
                        (rule "neq_or_2" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0,1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,0,1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,0,1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,1,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "apply_eq_boolean_rigid" (formula "14") (term "0,1,0,0,1,1,1,1") (ifseqformula "12"))
                        (rule "applyEqRigid" (formula "14") (term "0,0,0,0,1,1,1,1") (ifseqformula "5"))
                        (rule "methodCallEmpty" (formula "15") (term "1,1,1,1,1"))
                        (rule "tryEmpty" (formula "15") (term "1,1,1,1,1"))
                        (rule "emptyModality" (formula "15") (term "1,1,1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1"))
                        (rule "simplifyUpdate2" (formula "15"))
                        (rule "applySkip2" (formula "15") (term "1"))
                        (rule "applySkip2" (formula "15") (term "1"))
                        (rule "applySkip2" (formula "15") (term "1"))
                        (rule "sequentialToParallel2" (formula "15"))
                        (rule "simplifyUpdate2" (formula "15"))
                        (rule "simplifyUpdate3" (formula "15") (term "0"))
                        (rule "applyOnRigidFormula" (formula "15"))
                        (rule "applyOnPV" (formula "15") (term "0"))
                        (rule "ifSplit" (formula "14"))
                        (branch "if returns_0 true"
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if returns_0 false"
                           (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "11"))
                           (rule "simplifyUpdate1" (formula "11") (term "1"))
                           (rule "applyOnPV" (formula "11") (term "0"))
                           (rule "boolean_not_equal_2" (formula "11"))
                           (rule "false_right" (formula "11"))
                           (rule "ifUnfold" (formula "14") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                           (rule "variableDeclaration" (formula "14") (term "1,1,1,1,1") (newnames "boolv_3"))
                           (rule "inequality_comparison_simple" (formula "14") (term "1,1,1,1,1"))
                           (rule "sequentialToParallel2" (formula "14") (term "1,1,1,1"))
                           (rule "applyOnElementary" (formula "14") (term "1,0,1,1,1,1"))
                           (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,1,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0,1,1,1,1"))
                           (rule "applyOnPV" (formula "14") (term "0,0,0,1,0,1,1,1,1"))
                           (rule "eqClose" (formula "14") (term "0,0,1,0,1,1,1,1"))
                           (rule "ifthenelse_true" (formula "14") (term "0,1,0,1,1,1,1"))
                           (rule "ifSplit" (formula "14"))
                           (branch "if boolv_3 true"
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if boolv_3 false"
                              (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "11"))
                              (rule "simplifyUpdate1Rigid" (formula "11") (term "1"))
                              (rule "applyOnPV" (formula "11") (term "0"))
                              (rule "boolean_not_equal_2" (formula "11"))
                              (rule "false_right" (formula "11"))
                              (rule "blockEmpty" (formula "14") (term "1,1,1,1"))
                              (rule "methodCallReturn" (formula "14") (term "1,1,1,1"))
                              (rule "assignment" (formula "14") (term "1,1,1,1"))
                              (rule "applyAbstrOnConcrUpd" (formula "14") (term "1,1,1"))
                              (rule "methodCallEmpty" (formula "14") (term "1,1,1,1"))
                              (rule "blockEmpty" (formula "14") (term "1,1,1,1"))
                              (rule "assignment" (formula "14") (term "1,1,1,1"))
                              (rule "applyAbstrOnConcrUpd" (formula "14") (term "1,1,1"))
                              (rule "abstractExecutionNonVoid" (formula "14") (term "1,1,1,1") (inst "#label=_label8") (inst "#v1=v1") (inst "result=result_R_0") (inst "returns=returns_R_0") (inst "exc=exc_R_0") (inst "normal=normal_R_0"))
                              (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                              (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                              (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1,1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,0,1,1,1,1"))
                              (rule "impRight" (formula "14"))
                              (rule "andLeft" (formula "1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                              (rule "andLeft" (formula "1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "applySkip2" (formula "2"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3"))
                              (rule "simplifyUpdate2" (formula "3") (term "0"))
                              (rule "simplifyUpdate2" (formula "3") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "3") (term "0"))
                              (rule "applyOnPV" (formula "3") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                              (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "14"))
                              (rule "concrete_eq_2" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "13"))
                              (rule "concrete_or_2" (formula "2") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "2") (term "1"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "13"))
                              (rule "simplifyUpdate2" (formula "13") (term "0"))
                              (rule "simplifyUpdate2" (formula "13") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0"))
                              (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "13") (term "0"))
                              (rule "applyOnRigidFormula" (formula "13") (term "1"))
                              (rule "applyOnPV" (formula "13") (term "0,1"))
                              (rule "simplifyUpdate1" (formula "13") (term "1,1"))
                              (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "6"))
                              (rule "concrete_and_3" (formula "13"))
                              (rule "notRight" (formula "13"))
                              (rule "replace_known_left" (formula "3") (term "1,0,0,1") (ifseqformula "1"))
                              (rule "simplifyUpdate2" (formula "3") (term "0,0,1"))
                              (rule "concrete_not_1" (formula "3") (term "0,1"))
                              (rule "concrete_and_2" (formula "3") (term "1"))
                              (rule "concrete_or_4" (formula "3"))
                              (rule "andLeft" (formula "3"))
                              (rule "applyOnRigidTerm" (formula "2") (term "1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnRigidFormula" (formula "2"))
                              (rule "applyOnPV" (formula "2") (term "0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                              (rule "applyEqRigid" (formula "15") (term "0,0,0,0,1,1,1,1,1") (ifseqformula "5"))
                              (rule "applyEqRigid" (formula "15") (term "0,1,0,0,1,1,1,1,1") (ifseqformula "3"))
                              (rule "ifSplit" (formula "15"))
                              (branch "if returns_1 true"
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "blockReturn" (formula "15") (term "1,1,1,1,1,1"))
                                 (rule "blockReturn" (formula "15") (term "1,1,1,1,1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1,1"))
                                 (rule "methodCallReturn" (formula "15") (term "1,1,1,1,1,1"))
                                 (rule "assignment" (formula "15") (term "1,1,1,1,1,1"))
                                 (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1,1"))
                                 (rule "applyOnElementary" (formula "15") (term "0,1,1,1,1,1"))
                                 (rule "applyOnPV" (formula "15") (term "0,0,1,1,1,1,1"))
                                 (rule "methodCallEmpty" (formula "15") (term "1,1,1,1,1,1"))
                                 (rule "tryEmpty" (formula "15") (term "1,1,1,1,1,1"))
                                 (rule "emptyModality" (formula "15") (term "1,1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1"))
                                 (rule "simplifyUpdate2" (formula "15"))
                                 (rule "applySkip2" (formula "15") (term "1"))
                                 (rule "applySkip2" (formula "15") (term "1"))
                                 (rule "applySkip2" (formula "15") (term "1"))
                                 (rule "notRight" (formula "15"))
                                 (rule "sequentialToParallel2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate3" (formula "1") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "close" (formula "16") (ifseqformula "1"))
                              )
                              (branch "if returns_1 false"
                                 (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "12"))
                                 (rule "simplifyUpdate1" (formula "12") (term "1"))
                                 (rule "applyOnPV" (formula "12") (term "0"))
                                 (rule "boolean_equal" (formula "12"))
                                 (rule "closeTrue" (formula "12"))
                              )
                           )
                        )
                     )
                     (branch "if returns_1 false"
                        (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "applyOnPV" (formula "10") (term "0"))
                        (rule "simplifyUpdate1" (formula "10") (term "1"))
                        (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "10"))
                        (rule "concrete_not_2" (formula "2") (term "0"))
                        (rule "concrete_or_1" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "9"))
                        (rule "concrete_not_2" (formula "2") (term "0,1"))
                        (rule "concrete_and_1" (formula "2") (term "1"))
                        (rule "methodBodyExpand" (formula "12") (term "1,1,1") (newnames "heapBefore_extracted,savedHeapBefore_extracted"))
                        (rule "simplifyUpdate2" (formula "12") (term "1,1,1"))
                        (rule "abstractExecutionNonVoid" (formula "12") (term "1,1,1") (inst "#label=_label4") (inst "#v1=v1") (inst "result=result_Q_0") (inst "returns=returns_Q_0") (inst "exc=exc_Q_0") (inst "normal=normal_Q_0"))
                        (rule "concrete_and_3" (formula "12") (term "1,1,0,1,1,1"))
                        (rule "concrete_and_3" (formula "12") (term "0,1,1,0,1,1,1"))
                        (rule "simplifyUpdate2" (formula "12") (term "1,1,1,1,1"))
                        (rule "simplifyUpdate2" (formula "12") (term "1,0,1,1,1"))
                        (rule "impRight" (formula "12"))
                        (rule "andLeft" (formula "1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                        (rule "notLeft" (formula "3"))
                        (rule "andLeft" (formula "1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "applySkip2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "12"))
                        (rule "applyOnPV" (formula "12") (term "0"))
                        (rule "simplifyUpdate1" (formula "12") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "concrete_eq_1" (formula "3"))
                        (rule "andLeft" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3"))
                        (rule "simplifyUpdate2" (formula "4"))
                        (rule "notLeft" (formula "3"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "replace_known_right" (formula "2") (term "0,1,0,1") (ifseqformula "12"))
                        (rule "concrete_not_2" (formula "2") (term "1,0,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "concrete_and_1" (formula "2") (term "1"))
                        (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "3"))
                        (rule "concrete_not_1" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "applyOnPV" (formula "3") (term "0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "11"))
                        (rule "applyOnPV" (formula "11") (term "0"))
                        (rule "simplifyUpdate1" (formula "11") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                        (rule "applyOnPV" (formula "2") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
                        (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "5"))
                        (rule "concrete_and_3" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "applyOnPV" (formula "2") (term "0,0,1"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
                        (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "12"))
                        (rule "concrete_and_2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1"))
                        (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,1,1,0,1"))
                        (rule "applySkip1" (formula "1") (term "1,1,1,0,1"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "applyOnPV" (formula "10") (term "0"))
                        (rule "simplifyUpdate1" (formula "10") (term "1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,1,0,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,1,0,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,1,0,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,0,0,1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                        (rule "apply_eq_boolean_rigid" (formula "13") (term "0,1,0,0,1,1,1,1") (ifseqformula "11"))
                        (rule "applyEqRigid" (formula "13") (term "0,0,0,0,1,1,1,1") (ifseqformula "4"))
                        (rule "ifUnfold" (formula "14") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                        (rule "variableDeclaration" (formula "14") (term "1,1,1,1,1") (newnames "boolv_3"))
                        (rule "inequality_comparison_simple" (formula "14") (term "1,1,1,1,1"))
                        (rule "sequentialToParallel2" (formula "14") (term "1,1,1,1"))
                        (rule "applyOnElementary" (formula "14") (term "1,0,1,1,1,1"))
                        (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,1,1,1,1"))
                        (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,1,1,1,1"))
                        (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,1,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0,1,1,1,1"))
                        (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0,1,1,1,1"))
                        (rule "applyOnPV" (formula "14") (term "0,0,0,1,0,1,1,1,1"))
                        (rule "ifSplit" (formula "13"))
                        (branch "if returns_0 true"
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if returns_0 false"
                           (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "applySkip2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "10"))
                           (rule "applyOnPV" (formula "10") (term "0"))
                           (rule "simplifyUpdate1" (formula "10") (term "1"))
                           (rule "boolean_not_equal_2" (formula "10"))
                           (rule "false_right" (formula "10"))
                           (rule "ifUnfold" (formula "13") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                           (rule "variableDeclaration" (formula "13") (term "1,1,1,1,1") (newnames "boolv_4"))
                           (rule "inequality_comparison_simple" (formula "13") (term "1,1,1,1,1"))
                           (rule "sequentialToParallel2" (formula "13") (term "1,1,1,1"))
                           (rule "applyOnElementary" (formula "13") (term "1,0,1,1,1,1"))
                           (rule "applyOnRigidTerm" (formula "13") (term "0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0,1,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0,1,1,1,1"))
                           (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0,1,1,1,1"))
                           (rule "applyOnPV" (formula "13") (term "0,0,0,1,0,1,1,1,1"))
                           (rule "eqClose" (formula "13") (term "0,0,1,0,1,1,1,1"))
                           (rule "ifthenelse_true" (formula "13") (term "0,1,0,1,1,1,1"))
                           (rule "ifSplit" (formula "14"))
                           (branch "if boolv_3 true"
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "ifthenelse_concrete4" (formula "1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "1"))
                              (rule "concrete_or_4" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "10"))
                              (rule "concrete_eq_4" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "blockThrow" (formula "15") (term "1,1,1,1,1"))
                              (rule "blockThrow" (formula "15") (term "1,1,1,1,1"))
                              (rule "methodCallParamThrow" (formula "15") (term "1,1,1,1,1"))
                              (rule "tryCatchThrow" (formula "15") (term "1,1,1,1,1"))
                              (rule "ifElseUnfold" (formula "15") (term "1,1,1,1,1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "15") (term "1,1,1,1,1") (newnames "boolv_5"))
                              (rule "equality_comparison_simple" (formula "15") (term "1,1,1,1,1"))
                              (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1"))
                              (rule "applyOnElementary" (formula "15") (term "1,0,1,1,1,1"))
                              (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1,1,1"))
                              (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1,1,1"))
                              (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1,1,1"))
                              (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1,1,1"))
                              (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1,1,1"))
                              (rule "ifSplit" (formula "14"))
                              (branch "if boolv_4 true"
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if boolv_4 false"
                                 (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "9"))
                                 (rule "applyOnPV" (formula "9") (term "0"))
                                 (rule "simplifyUpdate1" (formula "9") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "9"))
                                 (rule "false_right" (formula "9"))
                                 (rule "blockEmpty" (formula "14") (term "1,1,1,1"))
                                 (rule "methodCallReturn" (formula "14") (term "1,1,1,1"))
                                 (rule "assignment" (formula "14") (term "1,1,1,1"))
                                 (rule "applyAbstrOnConcrUpd" (formula "14") (term "1,1,1"))
                                 (rule "methodCallEmpty" (formula "14") (term "1,1,1,1"))
                                 (rule "blockEmpty" (formula "14") (term "1,1,1,1"))
                                 (rule "assignment" (formula "14") (term "1,1,1,1"))
                                 (rule "applyAbstrOnConcrUpd" (formula "14") (term "1,1,1"))
                                 (rule "abstractExecutionNonVoid" (formula "14") (term "1,1,1,1") (inst "#label=_label6") (inst "#v1=v1") (inst "result=result_R_0") (inst "returns=returns_R_0") (inst "exc=exc_R_0") (inst "normal=normal_R_0"))
                                 (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                                 (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                                 (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,0,1,1,1,1"))
                                 (rule "impRight" (formula "14"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                                 (rule "simplifyUpdate2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                                 (rule "simplifyUpdate2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "3"))
                                 (rule "simplifyUpdate2" (formula "3") (term "1"))
                                 (rule "simplifyUpdate2" (formula "3") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "2"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                 (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                 (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                 (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                 (rule "applyOnPV" (formula "3") (term "0,0"))
                                 (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                 (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "12"))
                                 (rule "concrete_eq_2" (formula "3"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "11") (term "1"))
                                 (rule "applyOnPV" (formula "11") (term "0,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "11") (term "1,1"))
                                 (rule "replace_known_right" (formula "11") (term "1") (ifseqformula "13"))
                                 (rule "concrete_and_4" (formula "11"))
                                 (rule "false_right" (formula "11"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                 (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                 (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0,0"))
                                 (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "12"))
                                 (rule "concrete_and_4" (formula "2") (term "0,0"))
                                 (rule "concrete_or_2" (formula "2") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                 (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "12"))
                                 (rule "concrete_not_2" (formula "2") (term "1,1"))
                                 (rule "concrete_and_3" (formula "2") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                 (rule "applyOnPV" (formula "2") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
                                 (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "12"))
                                 (rule "concrete_and_4" (formula "2") (term "0"))
                                 (rule "concrete_or_2" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "10"))
                                 (rule "applyOnPV" (formula "10") (term "0"))
                                 (rule "simplifyUpdate1" (formula "10") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,1,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,1,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                                 (rule "apply_eq_boolean_rigid" (formula "15") (term "0,1,0,0,1,1,1,1,1") (ifseqformula "12"))
                                 (rule "ifElseSplit" (formula "16"))
                                 (branch "if boolv_5 true"
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                                    (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if boolv_5 false"
                                    (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                    (rule "ifthenelse_false" (formula "10") (term "0,0"))
                                    (rule "applyOnRigidFormula" (formula "10"))
                                    (rule "simplifyUpdate1" (formula "10") (term "1"))
                                    (rule "applyOnPV" (formula "10") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "10"))
                                    (rule "false_right" (formula "10"))
                                    (rule "elim_double_block" (formula "16") (term "1,1,1,1,1"))
                                    (rule "ifSplit" (formula "15"))
                                    (branch "if returns_1 true"
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if returns_1 false"
                                       (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "10"))
                                       (rule "applyOnPV" (formula "10") (term "0"))
                                       (rule "simplifyUpdate1" (formula "10") (term "1"))
                                       (rule "boolean_not_equal_2" (formula "10"))
                                       (rule "false_right" (formula "10"))
                                       (rule "ifUnfold" (formula "15") (term "1,1,1,1,1,1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "15") (term "1,1,1,1,1,1") (newnames "boolv_6"))
                                       (rule "inequality_comparison_simple" (formula "15") (term "1,1,1,1,1,1"))
                                       (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1,1"))
                                       (rule "applyOnElementary" (formula "15") (term "1,0,1,1,1,1,1"))
                                       (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1,1,1,1"))
                                       (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1,1,1,1"))
                                       (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1,1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1,1,1,1"))
                                       (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1,1,1,1"))
                                       (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1,1,1,1"))
                                       (rule "ifElseSplit" (formula "16"))
                                       (branch "if exc_1 instanceof Throwable true"
                                          (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1"))
                                          (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1,1,1"))
                                          (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1,1,1"))
                                          (rule "concrete_or_4" (formula "1") (term "1,1,1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "10"))
                                          (rule "applyOnPV" (formula "10") (term "0"))
                                          (rule "simplifyUpdate1" (formula "10") (term "1"))
                                          (rule "variableDeclaration" (formula "16") (term "1,1,1,1,1") (newnames "t"))
                                          (rule "delete_unnecessary_cast" (formula "16") (term "1,1,1,1,1"))
                                          (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1,1,1"))
                                          (rule "boolean_equal" (formula "1") (term "1,1,1,1,1,1"))
                                          (rule "concrete_or_3" (formula "1") (term "1,1,1,1,1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "sequentialToParallel2" (formula "16") (term "1,1,1,1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1"))
                                          (rule "applyOnElementary" (formula "16") (term "0,1,1,1,1"))
                                          (rule "applyOnPV" (formula "16") (term "0,0,1,1,1,1"))
                                          (rule "assignment" (formula "16") (term "1,1,1,1,1"))
                                          (rule "sequentialToParallel2" (formula "16") (term "1,1,1,1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1"))
                                          (rule "applyOnElementary" (formula "16") (term "0,1,1,1,1"))
                                          (rule "applyOnPV" (formula "16") (term "0,0,1,1,1,1"))
                                          (rule "emptyModality" (formula "16") (term "1,1,1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1"))
                                          (rule "simplifyUpdate2" (formula "16"))
                                          (rule "applySkip2" (formula "16") (term "1"))
                                          (rule "applySkip2" (formula "16") (term "1"))
                                          (rule "applySkip2" (formula "16") (term "1"))
                                          (rule "sequentialToParallel2" (formula "16"))
                                          (rule "simplifyUpdate2" (formula "16"))
                                          (rule "simplifyUpdate3" (formula "16") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "16"))
                                          (rule "applyOnPV" (formula "16") (term "0"))
                                          (rule "ifSplit" (formula "15"))
                                          (branch "if boolv_6 true"
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                                             (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "boolean_equal" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "blockThrow" (formula "15") (term "1,1,1,1,1,1"))
                                             (rule "blockThrow" (formula "15") (term "1,1,1,1,1,1"))
                                             (rule "methodCallParamThrow" (formula "15") (term "1,1,1,1,1,1"))
                                             (rule "tryCatchThrow" (formula "15") (term "1,1,1,1,1,1"))
                                             (rule "ifElseUnfold" (formula "15") (term "1,1,1,1,1,1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "15") (term "1,1,1,1,1,1") (newnames "boolv_7"))
                                             (rule "equality_comparison_simple" (formula "15") (term "1,1,1,1,1,1"))
                                             (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1,1"))
                                             (rule "applyOnElementary" (formula "15") (term "1,0,1,1,1,1,1"))
                                             (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1,1,1,1"))
                                             (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1,1,1,1"))
                                             (rule "ifElseSplit" (formula "15"))
                                             (branch "if boolv_7 true"
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                                (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "12"))
                                                (rule "ifthenelse_false" (formula "1") (term "0,0"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "boolean_not_equal_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "if boolv_7 false"
                                                (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                                (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "applySkip2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                                (rule "ifthenelse_false" (formula "10") (term "0,0"))
                                                (rule "applyOnRigidFormula" (formula "10"))
                                                (rule "simplifyUpdate1Rigid" (formula "10") (term "1"))
                                                (rule "applyOnPV" (formula "10") (term "0"))
                                                (rule "boolean_not_equal_2" (formula "10"))
                                                (rule "false_right" (formula "10"))
                                                (rule "elim_double_block" (formula "15") (term "1,1,1,1,1,1"))
                                                (rule "ifElseSplit" (formula "15"))
                                                (branch "if exc_1 instanceof Throwable true"
                                                   (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1,1"))
                                                   (rule "ifthenelse_concrete4" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "boolean_not_equal_2" (formula "1") (term "1,1,1,1,1,1,1"))
                                                   (rule "concrete_or_4" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "10"))
                                                   (rule "applyOnPV" (formula "10") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "10") (term "1"))
                                                   (rule "variableDeclaration" (formula "15") (term "1,1,1,1,1,1") (newnames "t_1"))
                                                   (rule "delete_unnecessary_cast" (formula "15") (term "1,1,1,1,1,1"))
                                                   (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1,1,1,1"))
                                                   (rule "boolean_equal" (formula "1") (term "1,1,1,1,1,1,1"))
                                                   (rule "concrete_or_3" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1,1"))
                                                   (rule "applyOnElementary" (formula "15") (term "0,1,1,1,1,1"))
                                                   (rule "applyOnPV" (formula "15") (term "0,0,1,1,1,1,1"))
                                                   (rule "assignment" (formula "15") (term "1,1,1,1,1,1"))
                                                   (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1,1"))
                                                   (rule "applyOnElementary" (formula "15") (term "0,1,1,1,1,1"))
                                                   (rule "applyOnPV" (formula "15") (term "0,0,1,1,1,1,1"))
                                                   (rule "emptyModality" (formula "15") (term "1,1,1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "15"))
                                                   (rule "applySkip2" (formula "15") (term "1"))
                                                   (rule "applySkip2" (formula "15") (term "1"))
                                                   (rule "applySkip2" (formula "15") (term "1"))
                                                   (rule "notRight" (formula "15"))
                                                   (rule "sequentialToParallel2" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "simplifyUpdate3" (formula "1") (term "0"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "close" (formula "16") (ifseqformula "1"))
                                                )
                                                (branch "if exc_1 instanceof Throwable false"
                                                   (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1,1"))
                                                   (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1,1,1,1"))
                                                   (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1,1,1,1"))
                                                   (rule "concrete_or_4" (formula "1") (term "0,1,1,1,1,1,1"))
                                                   (rule "double_not" (formula "1") (term "1,1,1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applySkip2" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "close" (formula "12") (ifseqformula "1"))
                                                )
                                             )
                                          )
                                          (branch "if boolv_6 false"
                                             (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "applySkip2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "12"))
                                             (rule "ifthenelse_false" (formula "10") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "10"))
                                             (rule "applyOnPV" (formula "10") (term "0"))
                                             (rule "simplifyUpdate1" (formula "10") (term "1"))
                                             (rule "boolean_equal" (formula "10"))
                                             (rule "closeTrue" (formula "10"))
                                          )
                                       )
                                       (branch "if exc_1 instanceof Throwable false"
                                          (rule "instanceof_static_type" (formula "1") (term "2,0,1,1,1,1,1"))
                                          (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                          (rule "ifthenelse_concrete4" (formula "1") (term "0,1,1,1,1,1"))
                                          (rule "boolean_not_equal_2" (formula "1") (term "1,0,1,1,1,1,1"))
                                          (rule "concrete_or_4" (formula "1") (term "0,1,1,1,1,1"))
                                          (rule "double_not" (formula "1") (term "1,1,1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "close" (formula "12") (ifseqformula "1"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "if boolv_3 false"
                              (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "applySkip2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "10"))
                              (rule "simplifyUpdate1" (formula "10") (term "1"))
                              (rule "applyOnPV" (formula "10") (term "0"))
                              (rule "ifthenelse_concrete4" (formula "10"))
                              (rule "boolean_not_equal_2" (formula "10") (term "1"))
                              (rule "concrete_or_4" (formula "10"))
                              (rule "notRight" (formula "10"))
                              (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
                              (rule "concrete_eq_3" (formula "4"))
                              (rule "blockEmpty" (formula "15") (term "1,1,1,1"))
                              (rule "methodCallReturn" (formula "15") (term "1,1,1,1"))
                              (rule "assignment" (formula "15") (term "1,1,1,1"))
                              (rule "elimSelfSingleUpdateFor" (formula "15") (term "1,1,1,1"))
                              (rule "methodCallEmpty" (formula "15") (term "1,1,1,1"))
                              (rule "tryEmpty" (formula "15") (term "1,1,1,1"))
                              (rule "emptyModality" (formula "15") (term "1,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "15") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "15") (term "1"))
                              (rule "applyOnRigidFormula" (formula "15"))
                              (rule "ifSplit" (formula "14"))
                              (branch "if boolv_4 true"
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if boolv_4 false"
                                 (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "11"))
                                 (rule "simplifyUpdate1Rigid" (formula "11") (term "1"))
                                 (rule "applyOnPV" (formula "11") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "11"))
                                 (rule "false_right" (formula "11"))
                                 (rule "blockEmpty" (formula "14") (term "1,1,1,1"))
                                 (rule "methodCallReturn" (formula "14") (term "1,1,1,1"))
                                 (rule "assignment" (formula "14") (term "1,1,1,1"))
                                 (rule "applyAbstrOnConcrUpd" (formula "14") (term "1,1,1"))
                                 (rule "methodCallEmpty" (formula "14") (term "1,1,1,1"))
                                 (rule "blockEmpty" (formula "14") (term "1,1,1,1"))
                                 (rule "assignment" (formula "14") (term "1,1,1,1"))
                                 (rule "applyAbstrOnConcrUpd" (formula "14") (term "1,1,1"))
                                 (rule "abstractExecutionNonVoid" (formula "14") (term "1,1,1,1") (inst "#label=_label5") (inst "#v1=v1") (inst "result=result_R_0") (inst "returns=returns_R_0") (inst "exc=exc_R_0") (inst "normal=normal_R_0"))
                                 (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                                 (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                                 (rule "concrete_and_3" (formula "14") (term "1,1,0,1,1,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,0,1,1,1,1"))
                                 (rule "impRight" (formula "14"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                                 (rule "simplifyUpdate2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "2") (term "1"))
                                 (rule "simplifyUpdate2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "applySkip2" (formula "2"))
                                 (rule "simplifyUpdate2" (formula "1") (term "1,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "3"))
                                 (rule "simplifyUpdate2" (formula "3") (term "0"))
                                 (rule "simplifyUpdate2" (formula "3") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "2"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                 (rule "applyOnPV" (formula "3") (term "0,0"))
                                 (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                 (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "7"))
                                 (rule "concrete_eq_1" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "simplifyUpdate2" (formula "3"))
                                 (rule "simplifyUpdate2" (formula "4"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                 (rule "replace_known_left" (formula "2") (term "0,1,1,1") (ifseqformula "3"))
                                 (rule "concrete_not_1" (formula "2") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                 (rule "concrete_and_4" (formula "2") (term "1"))
                                 (rule "concrete_or_4" (formula "2"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "3"))
                                 (rule "applyOnPV" (formula "3") (term "0"))
                                 (rule "simplifyUpdate1" (formula "3") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "13"))
                                 (rule "applyOnPV" (formula "13") (term "0"))
                                 (rule "simplifyUpdate1" (formula "13") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "2"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                 (rule "simplifyUpdate2" (formula "2") (term "0,0"))
                                 (rule "simplifyUpdate2" (formula "2") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                 (rule "applyOnPV" (formula "2") (term "0,0,1"))
                                 (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "13"))
                                 (rule "concrete_and_2" (formula "2") (term "1"))
                                 (rule "concrete_or_4" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "2"))
                                 (rule "applyOnPV" (formula "2") (term "0"))
                                 (rule "simplifyUpdate1" (formula "2") (term "1"))
                                 (rule "applyOnRigidFormula" (formula "12"))
                                 (rule "applyOnPV" (formula "12") (term "0"))
                                 (rule "simplifyUpdate1" (formula "12") (term "1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,1,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,1,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,1,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,0,1,1,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                 (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,1,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,1,0,0,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1,0,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,1,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,0,0,0"))
                                 (rule "apply_eq_boolean_rigid" (formula "15") (term "0,1,0,0,1,1,1,1,1") (ifseqformula "12"))
                                 (rule "applyEqRigid" (formula "15") (term "0,0,0,0,1,1,1,1,1") (ifseqformula "2"))
                                 (rule "ifSplit" (formula "15"))
                                 (branch "if returns_1 true"
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if returns_1 false"
                                    (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "applySkip2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "12"))
                                    (rule "applyOnPV" (formula "12") (term "0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "12"))
                                    (rule "false_right" (formula "12"))
                                    (rule "ifUnfold" (formula "15") (term "1,1,1,1,1,1") (inst "#boolv=boolv"))
                                    (rule "variableDeclaration" (formula "15") (term "1,1,1,1,1,1") (newnames "boolv_5"))
                                    (rule "inequality_comparison_simple" (formula "15") (term "1,1,1,1,1,1"))
                                    (rule "sequentialToParallel2" (formula "15") (term "1,1,1,1,1"))
                                    (rule "applyOnElementary" (formula "15") (term "1,0,1,1,1,1,1"))
                                    (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1,1,1,1"))
                                    (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1,1,1,1"))
                                    (rule "eqClose" (formula "15") (term "0,0,1,0,1,1,1,1,1"))
                                    (rule "ifthenelse_true" (formula "15") (term "0,1,0,1,1,1,1,1"))
                                    (rule "ifSplit" (formula "15"))
                                    (branch "if boolv_5 true"
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1,1,1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "applySkip2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "12"))
                                       (rule "simplifyUpdate1" (formula "12") (term "1"))
                                       (rule "applyOnPV" (formula "12") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "12"))
                                       (rule "false_right" (formula "12"))
                                       (rule "blockEmpty" (formula "15") (term "1,1,1,1,1"))
                                       (rule "methodCallReturn" (formula "15") (term "1,1,1,1,1"))
                                       (rule "assignment" (formula "15") (term "1,1,1,1,1"))
                                       (rule "elimSelfSingleUpdateFor" (formula "15") (term "1,1,1,1,1"))
                                       (rule "methodCallEmpty" (formula "15") (term "1,1,1,1,1"))
                                       (rule "tryEmpty" (formula "15") (term "1,1,1,1,1"))
                                       (rule "emptyModality" (formula "15") (term "1,1,1,1,1"))
                                       (rule "notRight" (formula "15"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "8") (term "1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "8") (term "1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "5") (term "1,1,0,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "5") (term "1,1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "5") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "4") (term "1,1,0,1,0,0"))
                                       (rule "simplifyUpdate1" (formula "4") (term "1,1,1,0,1,0,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "4") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "4") (term "1,1,1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "16") (term "1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "2") (term "1,1,1,0,1,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "2") (term "1,1,0,1,0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "2") (term "1,1,1,0,0,0,0,0,0,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "1") (term "1,1,0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1,1,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "5") (term "1,0,1,0"))
                                       (rule "updateConcatAssoc" (formula "5") (term "0,1,0,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "5") (term "1,0,1,0,0"))
                                       (rule "updateConcatAssoc" (formula "5") (term "0,1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "5") (term "1,0,0,0,0,0,0,0"))
                                       (rule "updateConcatAssoc" (formula "5") (term "0,1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "4") (term "1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "4") (term "1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "16") (term "1,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "2") (term "1,1,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,1,1,1,0,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "2") (term "1,1,0,1,0,0"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "2") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,1,1,1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "1") (term "1,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "2") (term "1,0,1,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "2") (term "1,0,1,0,0"))
                                       (rule "updateConcatAssoc" (formula "2") (term "0,1,0,1,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "2") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "sequentialToConcatenatedAbsTerm" (formula "1") (term "1,0"))
                                       (rule "updateConcatAssoc" (formula "1") (term "0,1,0"))
                                       (rule "close" (formula "16") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
)
}