<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:aeRelationalModel xmlns:ns2="http://www.key-project.org/abstractexecution" postCondition="\result_1[0]=\result_2[0] &amp;&#10;\result_1[1]=\result_2[1] &amp;&#10;Post(\result_1[2],\result_2[2])">
    <programOne>/*@ ae_constraint
  @   (\forall any val1;
  @     (\forall any val2; (
  @       inv(val1) &amp;&amp; inv(val2) ==&gt;
  @         Post(val1, val2))));
  @*/
{ ; }

/*@ ae_constraint
  @   inv(\value(frameP)) &amp;&amp; variant &gt;= 0;
  @*/
{ ; }

/*@ loop_invariant variant &gt;= 0 &amp;&amp; inv(\value(frameP));
  @ assignable frameP;
  @ decreases variant;
  @*/
while (
   /*@ assignable \nothing;
     @ accessible footprintE;
     @ exceptional_behavior requires false;
     @*/
   \abstract_expression boolean e 
) {
    //@ ghost int oldVariant = variant;

    /* ae_constraint
      @   \disjoint(frameP, variant) &amp;&amp;
      @   \disjoint(footprintP, variant);
      @*/
    { ; }
    
    /*@ assignable frameP, variant;
      @ accessible footprintP, i;
      @ normal_behavior ensures
      @   inv(\value(frameP)) &amp;&amp;
      @   variant &gt;= 0 &amp;&amp;
      @   variant &lt; oldVariant;
      @ exceptional_behavior requires false;
      @ return_behavior requires false;
      @ break_behavior requires false;
      @ continue_behavior requires false;
      @*/
    \abstract_statement P;
}</programOne>
    <programTwo>/*@ ae_constraint
  @   (\forall any val1;
  @     (\forall any val2; (
  @       inv(val1) &amp;&amp; inv(val2) ==&gt;
  @         Post(val1, val2))));
  @*/
{ ; }

/*@ ae_constraint
  @   inv(\value(frameP)) &amp;&amp; variant &gt;= 0;
  @*/
{ ; }

/*@ loop_invariant variant &gt;= 0 &amp;&amp; inv(\value(frameP));
  @ assignable frameP;
  @ decreases variant;
  @*/
while (
   /*@ assignable \nothing;
     @ accessible footprintE;
     @ exceptional_behavior requires false;
     @*/
   \abstract_expression boolean e 
) {
    //@ ghost int oldVariant = variant;

    /* ae_constraint
      @   \disjoint(frameP, variant) &amp;&amp;
      @   \disjoint(footprintP, variant);
      @*/
    { ; }
    
    /*@ assignable frameP, variant;
      @ accessible footprintP, i;
      @ normal_behavior ensures
      @   inv(\value(frameP)) &amp;&amp;
      @   variant &gt;= 0 &amp;&amp;
      @   variant &lt; oldVariant;
      @ exceptional_behavior requires false;
      @ return_behavior requires false;
      @ break_behavior requires false;
      @ continue_behavior requires false;
      @*/
    \abstract_statement P;
}</programTwo>
    <methodLevelContext></methodLevelContext>
    <locationSets>
        <locationSet locsetName="relevant">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
        <locationSet locsetName="frameP">
            <relevantOne>0</relevantOne>
            <relevantTwo>0</relevantTwo>
        </locationSet>
        <locationSet locsetName="footprintP">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
        <locationSet locsetName="footprintE">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
    </locationSets>
    <functions/>
    <predicates>
        <predicate predName="inv">
            <argSort>any</argSort>
        </predicate>
        <predicate predName="Post">
            <argSort>any</argSort>
            <argSort>any</argSort>
        </predicate>
    </predicates>
    <programVariables>
        <programVariable typeName="int" varName="i">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </programVariable>
        <programVariable typeName="int" varName="variant">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </programVariable>
    </programVariables>
</ns2:aeRelationalModel>
