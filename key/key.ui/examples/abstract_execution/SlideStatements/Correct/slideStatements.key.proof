\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Oct 28 13:40:02 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , moreSeqRules-moreSeqRules\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\\\\\:efficient , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=9000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\functions {
   \unique LocSet localsA;
   \unique LocSet localsB;
   \unique LocSet localsC;
   \unique LocSet localsD;
   \unique LocSet localsD;
   \unique LocSet localsE;
   \unique LocSet args;
   Object _result;
}

\predicates {
   Post(Object);
}

\programVariables {
   Object result;
   SlideStatements objUnderTest;
}

\problem {
    {result:=_result}
      \<{ try {
            result=objUnderTest.before(result)@SlideStatements;
          }   catch (Throwable t) {
            result=t;
          }
        }\> Post(result)
<-> {result:=_result}
      \<{ try {
             result=objUnderTest.after(result)@SlideStatements;
          }   catch (Throwable t) {
            result=t;
          }
        }\> Post(result)

}

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "x.z.y"))

(autoModeTime "18360")

(branch "dummy ID"
(rule "equiv_right" (formula "1") (newnames "heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD"))
(branch "Case '->'"
   (rule "diamondToBox" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_after,savedHeapBefore_after"))
   (rule "sequentialToParallel2" (formula "2"))
   (rule "simplifyUpdate3" (formula "2") (term "1,0"))
   (rule "methodBodyExpand" (formula "1") (term "1") (newnames "heapBefore_before,savedHeapBefore_before"))
   (rule "sequentialToParallel2" (formula "1"))
   (rule "simplifyUpdate3" (formula "1") (term "1,0"))
   (rule "abstractExecutionNonVoid" (formula "2") (term "1") (inst "#label=_label10") (inst "#v1=v1") (inst "result=result_A_0") (inst "returns=returns_A_0") (inst "exc=exc_A_0") (inst "normal=normal_A_0"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,1"))
   (rule "impRight" (formula "2"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "andLeft" (formula "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "sequentialToParallel2" (formula "5"))
   (rule "simplifyUpdate3" (formula "5") (term "1,0"))
   (rule "applyOnAbstractUpdate" (formula "5") (term "1,0"))
   (rule "applyOnPV" (formula "5") (term "3,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "5") (term "2,1,0"))
   (rule "simplifyUpdate1" (formula "5") (term "0,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "5") (term "1,1,0"))
   (rule "sequentialToParallel2" (formula "1"))
   (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "2,1,0"))
   (rule "applyOnPV" (formula "1") (term "3,1,0"))
   (rule "sequentialToParallel2" (formula "5"))
   (rule "simplifyUpdate3" (formula "5") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate2" (formula "3") (term "0"))
   (rule "simplifyUpdate2" (formula "3") (term "1"))
   (rule "applyOnRigidFormula" (formula "2"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
   (rule "applyOnRigidFormula" (formula "3") (term "0"))
   (rule "applyOnPV" (formula "3") (term "0,0"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3") (term "1"))
   (rule "simplifyUpdate2" (formula "3") (term "0,1"))
   (rule "simplifyUpdate2" (formula "3") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
   (rule "applyOnPV" (formula "3") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
   (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
   (rule "abstractExecutionNonVoid" (formula "4") (term "1") (inst "#label=_label11") (inst "#v1=v1") (inst "result=result_A_0") (inst "returns=returns_A_0") (inst "exc=exc_A_0") (inst "normal=normal_A_0"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "4") (term "1,0,1"))
   (rule "impRight" (formula "4"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "andLeft" (formula "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnAbstractUpdate" (formula "7") (term "1,0"))
   (rule "applyOnPV" (formula "7") (term "3,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "7") (term "2,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "7") (term "1,1,0"))
   (rule "sequentialToParallel2" (formula "1"))
   (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "2,1,0"))
   (rule "applyOnPV" (formula "1") (term "3,1,0"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate2" (formula "3") (term "0"))
   (rule "simplifyUpdate2" (formula "3") (term "1"))
   (rule "applyOnRigidFormula" (formula "2"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
   (rule "applyOnRigidFormula" (formula "2") (term "0"))
   (rule "applyOnPV" (formula "2") (term "0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "1"))
   (rule "simplifyUpdate2" (formula "1") (term "0,1"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
   (rule "applyOnPV" (formula "2") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,0"))
   (rule "simplifyUpdate2" (formula "1") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "1") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
   (rule "simplifyUpdate2" (formula "1") (term "0,1,0"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,0,1"))
   (rule "applyOnPV" (formula "1") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
   (rule "applyOnPV" (formula "1") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "1,0,0"))
   (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,1,0"))
   (rule "applyOnPV" (formula "1") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "1,1,0"))
   (rule "applyOnPV" (formula "1") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "1") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
   (rule "cnf_rightDist" (formula "2") (term "0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "2") (term "1,0"))
   (rule "eq_or" (formula "2") (term "1,1,0"))
   (rule "commute_or" (formula "2") (term "0,1,0"))
   (rule "commute_and" (formula "2") (term "1,0"))
   (rule "cnf_rightDist" (formula "2") (term "0,0"))
   (rule "neq_or" (formula "2") (term "0,0,0"))
   (rule "concrete_and_1" (formula "2") (term "0,0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "shift_paren_and" (formula "2") (term "0"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "2"))
   (rule "cnf_rightDist" (formula "3"))
   (rule "neq_or_3" (formula "3") (term "1"))
   (rule "concrete_and_3" (formula "3"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or_2" (formula "3"))
   (rule "eq_or" (formula "3") (term "0"))
   (rule "cnf_rightDist" (formula "4"))
   (rule "neq_or" (formula "4") (term "1"))
   (rule "concrete_and_3" (formula "4"))
   (rule "shift_paren_or" (formula "4"))
   (rule "commute_or" (formula "4") (term "0"))
   (rule "neq_or_4" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "3"))
   (rule "shift_paren_or" (formula "2"))
   (rule "neq_or_2" (formula "2") (term "0"))
   (rule "concrete_or_1" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "ifSplit" (formula "5"))
   (branch "if returns true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "3") (term "0"))
      (rule "concrete_or_2" (formula "3"))
      (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "4") (term "0,1"))
      (rule "concrete_and_2" (formula "4") (term "1"))
      (rule "concrete_eq_4" (formula "4"))
      (rule "notLeft" (formula "4"))
      (rule "blockReturn" (formula "6") (term "1"))
      (rule "blockReturn" (formula "6") (term "1"))
      (rule "apply_eq_boolean_rigid" (formula "5") (term "0,0,0,0,1,0") (ifseqformula "4"))
      (rule "applyEqRigid" (formula "5") (term "0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,0") (ifseqformula "3"))
      (rule "apply_eq_boolean_rigid" (formula "6") (term "0,0,0,0,1,0") (ifseqformula "4"))
      (rule "applyEq" (formula "6") (term "0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0") (ifseqformula "3"))
      (rule "methodCallReturn" (formula "6") (term "1"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "assignment" (formula "6") (term "1"))
      (rule "sequentialToParallel2" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "simplifyUpdate3" (formula "6") (term "1,0"))
      (rule "applyOnElementary" (formula "6") (term "1,0"))
      (rule "applyOnPV" (formula "6") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "6") (term "1"))
      (rule "tryEmpty" (formula "6") (term "1"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "emptyModality" (formula "6") (term "1"))
      (rule "applyOnRigidFormula" (formula "6"))
      (rule "applyOnPV" (formula "6") (term "0"))
      (rule "ifSplit" (formula "5"))
      (branch "if returns true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "boolean_equal" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockReturn" (formula "5") (term "1"))
         (rule "blockReturn" (formula "5") (term "1"))
         (rule "methodCallReturn" (formula "5") (term "1"))
         (rule "simplifyUpdate2" (formula "5"))
         (rule "assignment" (formula "5") (term "1"))
         (rule "sequentialToParallel2" (formula "5"))
         (rule "simplifyUpdate2" (formula "5"))
         (rule "simplifyUpdate3" (formula "5") (term "1,0"))
         (rule "applyOnElementary" (formula "5") (term "1,0"))
         (rule "applyOnPV" (formula "5") (term "0,1,0"))
         (rule "methodCallEmpty" (formula "5") (term "1"))
         (rule "tryEmpty" (formula "5") (term "1"))
         (rule "simplifyUpdate2" (formula "5"))
         (rule "emptyModality" (formula "5") (term "1"))
         (rule "notRight" (formula "5"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "6") (ifseqformula "1"))
      )
      (branch "if returns false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "simplifyUpdate1" (formula "4") (term "1"))
         (rule "boolean_equal" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
   )
   (branch "if returns false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "4"))
      (rule "applyOnPV" (formula "4") (term "0"))
      (rule "simplifyUpdate1" (formula "4") (term "1"))
      (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "4"))
      (rule "concrete_not_2" (formula "2") (term "0"))
      (rule "concrete_or_1" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "3"))
      (rule "concrete_not_2" (formula "2") (term "0,1"))
      (rule "concrete_and_1" (formula "2") (term "1"))
      (rule "apply_eq_boolean_rigid" (formula "5") (term "0,1,0,1,0") (ifseqformula "3"))
      (rule "apply_eq_boolean" (formula "4") (term "0,1,0,1,0") (ifseqformula "3"))
      (rule "ifUnfold" (formula "5") (term "1") (inst "#boolv=boolv"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "boolv"))
      (rule "inequality_comparison_simple" (formula "5") (term "1"))
      (rule "sequentialToParallel2" (formula "5"))
      (rule "simplifyUpdate3" (formula "5") (term "1,0"))
      (rule "applyOnElementary" (formula "5") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "5") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "5") (term "0,0,0,1,0"))
      (rule "ifSplit" (formula "4"))
      (branch "if returns true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if returns false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "applyOnPV" (formula "3") (term "0"))
         (rule "simplifyUpdate1Rigid" (formula "3") (term "1"))
         (rule "boolean_not_equal_2" (formula "3"))
         (rule "false_right" (formula "3"))
         (rule "ifUnfold" (formula "4") (term "1") (inst "#boolv=boolv"))
         (rule "variableDeclaration" (formula "4") (term "1") (newnames "boolv_1"))
         (rule "inequality_comparison_simple" (formula "4") (term "1"))
         (rule "sequentialToParallel2" (formula "4"))
         (rule "simplifyUpdate3" (formula "4") (term "1,0"))
         (rule "applyOnElementary" (formula "4") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "4") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "4") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "4") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "4") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "4") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "4") (term "0,0,0,1,0"))
         (rule "ifSplit" (formula "5"))
         (branch "if boolv true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete4" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_right" (formula "6") (term "0,0,1,0") (ifseqformula "3"))
            (rule "ifthenelse_false" (formula "6") (term "0,1,0"))
            (rule "replace_known_right" (formula "5") (term "0,0,1,0") (ifseqformula "3"))
            (rule "ifthenelse_false" (formula "5") (term "0,1,0"))
            (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "3"))
            (rule "concrete_eq_4" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "blockThrow" (formula "6") (term "1"))
            (rule "blockThrow" (formula "6") (term "1"))
            (rule "apply_eq_boolean_rigid" (formula "6") (term "0,0,0,0,1,0,0") (ifseqformula "2"))
            (rule "apply_eq_boolean_rigid" (formula "5") (term "0,0,0,0,1,0,0") (ifseqformula "2"))
            (rule "methodCallParamThrow" (formula "6") (term "1"))
            (rule "simplifyUpdate2" (formula "6"))
            (rule "tryCatchThrow" (formula "6") (term "1"))
            (rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "6") (term "1") (newnames "boolv_2"))
            (rule "equality_comparison_simple" (formula "6") (term "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "applyOnElementary" (formula "6") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,1,0"))
            (rule "replace_known_right" (formula "6") (term "0,0,1,0") (ifseqformula "3"))
            (rule "ifthenelse_false" (formula "6") (term "0,1,0"))
            (rule "ifSplit" (formula "5"))
            (branch "if boolv_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockThrow" (formula "5") (term "1"))
               (rule "blockThrow" (formula "5") (term "1"))
               (rule "methodCallParamThrow" (formula "5") (term "1"))
               (rule "simplifyUpdate2" (formula "5"))
               (rule "tryCatchThrow" (formula "5") (term "1"))
               (rule "ifElseUnfold" (formula "5") (term "1") (inst "#boolv=boolv"))
               (rule "variableDeclaration" (formula "5") (term "1") (newnames "boolv_3"))
               (rule "equality_comparison_simple" (formula "5") (term "1"))
               (rule "sequentialToParallel2" (formula "5"))
               (rule "simplifyUpdate3" (formula "5") (term "1,0"))
               (rule "applyOnElementary" (formula "5") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "5") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "5") (term "0,0,0,1,0"))
               (rule "replace_known_right" (formula "5") (term "0,0,1,0") (ifseqformula "3"))
               (rule "ifthenelse_false" (formula "5") (term "0,1,0"))
               (rule "ifElseSplit" (formula "6"))
               (branch "if boolv_2 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "7"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "7"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "2"))
                  (rule "simplifyUpdate1" (formula "2") (term "1"))
                  (rule "applyOnPV" (formula "2") (term "0"))
                  (rule "boolean_not_equal_2" (formula "2"))
                  (rule "false_right" (formula "2"))
                  (rule "elim_double_block" (formula "6") (term "1"))
                  (rule "ifElseSplit" (formula "5"))
                  (branch "if boolv_3 true"
                     (rule "simplifyUpdate2" (formula "6"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "6"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "2"))
                     (rule "simplifyUpdate1" (formula "2") (term "1"))
                     (rule "applyOnPV" (formula "2") (term "0"))
                     (rule "boolean_not_equal_2" (formula "2"))
                     (rule "false_right" (formula "2"))
                     (rule "elim_double_block" (formula "5") (term "1"))
                     (rule "ifElseSplit" (formula "6"))
                     (branch "if exc instanceof Throwable true"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                        (rule "concrete_or_4" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1"))
                        (rule "variableDeclaration" (formula "6") (term "1") (newnames "t"))
                        (rule "delete_unnecessary_cast" (formula "6") (term "1"))
                        (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                        (rule "boolean_equal" (formula "1") (term "1,1"))
                        (rule "concrete_or_3" (formula "1") (term "1"))
                        (rule "true_left" (formula "1"))
                        (rule "sequentialToParallel2" (formula "6"))
                        (rule "simplifyUpdate2" (formula "6"))
                        (rule "simplifyUpdate3" (formula "6") (term "1,0"))
                        (rule "applyOnElementary" (formula "6") (term "1,0"))
                        (rule "applyOnPV" (formula "6") (term "0,1,0"))
                        (rule "assignment" (formula "6") (term "1"))
                        (rule "sequentialToParallel2" (formula "6"))
                        (rule "simplifyUpdate2" (formula "6"))
                        (rule "simplifyUpdate3" (formula "6") (term "0"))
                        (rule "applyOnElementary" (formula "6") (term "0"))
                        (rule "applyOnPV" (formula "6") (term "0,0"))
                        (rule "emptyModality" (formula "6") (term "1"))
                        (rule "applyOnRigidFormula" (formula "6"))
                        (rule "applyOnPV" (formula "6") (term "0"))
                        (rule "ifElseSplit" (formula "5"))
                        (branch "if exc instanceof Throwable true"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "simplifyUpdate1Rigid" (formula "2") (term "1"))
                           (rule "applyOnPV" (formula "2") (term "0"))
                           (rule "variableDeclaration" (formula "5") (term "1") (newnames "t_1"))
                           (rule "delete_unnecessary_cast" (formula "5") (term "1"))
                           (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                           (rule "boolean_equal" (formula "1") (term "1,1"))
                           (rule "concrete_or_3" (formula "1") (term "1"))
                           (rule "true_left" (formula "1"))
                           (rule "sequentialToParallel2" (formula "5"))
                           (rule "simplifyUpdate2" (formula "5"))
                           (rule "simplifyUpdate3" (formula "5") (term "1,0"))
                           (rule "applyOnElementary" (formula "5") (term "1,0"))
                           (rule "applyOnPV" (formula "5") (term "0,1,0"))
                           (rule "assignment" (formula "5") (term "1"))
                           (rule "sequentialToParallel2" (formula "5"))
                           (rule "simplifyUpdate2" (formula "5"))
                           (rule "simplifyUpdate3" (formula "5") (term "0"))
                           (rule "applyOnElementary" (formula "5") (term "0"))
                           (rule "applyOnPV" (formula "5") (term "0,0"))
                           (rule "emptyModality" (formula "5") (term "1"))
                           (rule "notRight" (formula "5"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "close" (formula "6") (ifseqformula "1"))
                        )
                        (branch "if exc instanceof Throwable false"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                           (rule "concrete_or_4" (formula "1") (term "0,1"))
                           (rule "double_not" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "close" (formula "4") (ifseqformula "1"))
                        )
                     )
                     (branch "if exc instanceof Throwable false"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                        (rule "concrete_or_4" (formula "1") (term "0,1"))
                        (rule "double_not" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "close" (formula "4") (ifseqformula "1"))
                     )
                  )
               )
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "simplifyUpdate1" (formula "2") (term "1"))
               (rule "applyOnPV" (formula "2") (term "0"))
               (rule "boolean_equal" (formula "2"))
               (rule "closeTrue" (formula "2"))
            )
         )
         (branch "if boolv false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "ifthenelse_concrete4" (formula "3"))
            (rule "boolean_not_equal_2" (formula "3") (term "1"))
            (rule "concrete_or_4" (formula "3"))
            (rule "notRight" (formula "3"))
            (rule "replace_known_left" (formula "6") (term "0,0,1,0") (ifseqformula "1"))
            (rule "ifthenelse_true" (formula "6") (term "0,1,0"))
            (rule "replace_known_left" (formula "5") (term "0,0,1,0") (ifseqformula "1"))
            (rule "ifthenelse_true" (formula "5") (term "0,1,0"))
            (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
            (rule "concrete_eq_3" (formula "3"))
            (rule "blockEmpty" (formula "6") (term "1"))
            (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "5") (term "0,0,0,0,1,0,0") (ifseqformula "3"))
            (rule "applyEqRigid" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "6") (term "0,0,0,0,1,0,0") (ifseqformula "3"))
            (rule "abstractExecutionNonVoid" (formula "6") (term "1") (inst "#label=_label12") (inst "#v1=v1") (inst "result=result_D_0") (inst "returns=returns_D_0") (inst "exc=exc_D_0") (inst "normal=normal_D_0"))
            (rule "concrete_and_3" (formula "6") (term "0,0,1,1,0,1"))
            (rule "simplifyUpdate2" (formula "6") (term "0,1"))
            (rule "simplifyUpdate2" (formula "6") (term "0,1"))
            (rule "impRight" (formula "6"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "notLeft" (formula "3"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "sequentialToParallel2" (formula "11"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0"))
            (rule "applyOnAbstractUpdate" (formula "11") (term "1,0"))
            (rule "simplifyUpdate1Rigid" (formula "11") (term "2,1,0"))
            (rule "simplifyUpdate1Rigid" (formula "11") (term "1,1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "0,1,0"))
            (rule "sequentialToParallel2" (formula "11"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "4"))
            (rule "applyOnPV" (formula "4") (term "0"))
            (rule "simplifyUpdate1" (formula "4") (term "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate2" (formula "3") (term "0"))
            (rule "simplifyUpdate2" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "8"))
            (rule "applyOnPV" (formula "8") (term "0"))
            (rule "simplifyUpdate1Rigid" (formula "8") (term "1"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
            (rule "simplifyUpdate1" (formula "1") (term "0"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
            (rule "applyOnRigidFormula" (formula "3") (term "0"))
            (rule "applyOnPV" (formula "3") (term "0,0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1"))
            (rule "simplifyUpdate2" (formula "3") (term "0,1"))
            (rule "simplifyUpdate2" (formula "3") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "2") (term "1"))
            (rule "simplifyUpdate2" (formula "2") (term "0,1"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
            (rule "applyOnPV" (formula "3") (term "0,1,1"))
            (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
            (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "4"))
            (rule "concrete_and_3" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
            (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
            (rule "simplifyUpdate1Rigid" (formula "3") (term "1,0,1"))
            (rule "applyOnPV" (formula "3") (term "0,0,1"))
            (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "8"))
            (rule "concrete_not_2" (formula "3") (term "1"))
            (rule "concrete_eq_3" (formula "3"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
            (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
            (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "4"))
            (rule "concrete_and_3" (formula "2") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
            (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
            (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "8"))
            (rule "concrete_and_2" (formula "2") (term "1,0"))
            (rule "concrete_or_4" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
            (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
            (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "8"))
            (rule "concrete_not_2" (formula "2") (term "0,1"))
            (rule "concrete_and_1" (formula "2") (term "1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
            (rule "applyOnPV" (formula "2") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,0"))
            (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "8"))
            (rule "concrete_not_2" (formula "2") (term "0"))
            (rule "concrete_or_1" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "apply_eq_boolean_rigid" (formula "10") (term "0,1,0,1,0") (ifseqformula "7"))
            (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,0") (ifseqformula "3"))
            (rule "applyEq" (formula "10") (term "0,0,0,0,1,0") (ifseqformula "2"))
            (rule "ifSplit" (formula "9"))
            (branch "if boolv_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "7"))
               (rule "simplifyUpdate1" (formula "7") (term "1"))
               (rule "applyOnPV" (formula "7") (term "0"))
               (rule "boolean_not_equal_2" (formula "7"))
               (rule "false_right" (formula "7"))
               (rule "blockEmpty" (formula "9") (term "1"))
               (rule "abstractExecutionNonVoid" (formula "9") (term "1") (inst "#label=_label13") (inst "#v1=v1") (inst "result=result_B_0") (inst "returns=returns_B_0") (inst "exc=exc_B_0") (inst "normal=normal_B_0"))
               (rule "concrete_and_3" (formula "9") (term "0,0,1,1,0,1"))
               (rule "simplifyUpdate2" (formula "9") (term "0,1"))
               (rule "simplifyUpdate2" (formula "9") (term "0,1"))
               (rule "impRight" (formula "9"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1"))
               (rule "notLeft" (formula "3"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0"))
               (rule "applyOnAbstractUpdate" (formula "14") (term "1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "0,1,0"))
               (rule "simplifyUpdate1Rigid" (formula "14") (term "2,1,0"))
               (rule "simplifyUpdate1Rigid" (formula "14") (term "1,1,0"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "4"))
               (rule "applyOnPV" (formula "4") (term "0"))
               (rule "simplifyUpdate1" (formula "4") (term "1"))
               (rule "applyOnRigidFormula" (formula "3"))
               (rule "simplifyUpdate2" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "0"))
               (rule "applyOnRigidFormula" (formula "11"))
               (rule "simplifyUpdate1Rigid" (formula "11") (term "1"))
               (rule "applyOnPV" (formula "11") (term "0"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
               (rule "simplifyUpdate1" (formula "1") (term "0"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
               (rule "applyOnRigidFormula" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "0,1"))
               (rule "simplifyUpdate2" (formula "3") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0"))
               (rule "simplifyUpdate1" (formula "3") (term "1,0"))
               (rule "applyOnPV" (formula "3") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0"))
               (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
               (rule "applyOnPV" (formula "3") (term "0,1,1"))
               (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
               (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "4"))
               (rule "concrete_and_3" (formula "3") (term "1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
               (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
               (rule "simplifyUpdate1" (formula "3") (term "1,0,1"))
               (rule "applyOnPV" (formula "3") (term "0,0,1"))
               (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "11"))
               (rule "concrete_not_2" (formula "3") (term "1"))
               (rule "concrete_eq_3" (formula "3"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
               (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1,1"))
               (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "2") (term "1,1"))
               (rule "concrete_and_4" (formula "2") (term "1"))
               (rule "concrete_or_4" (formula "2"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,1"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
               (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "11"))
               (rule "concrete_and_2" (formula "2") (term "1"))
               (rule "concrete_or_4" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "applyOnPV" (formula "2") (term "0"))
               (rule "simplifyUpdate1" (formula "2") (term "1"))
               (rule "applyOnRigidFormula" (formula "10"))
               (rule "applyOnPV" (formula "10") (term "0"))
               (rule "simplifyUpdate1Rigid" (formula "10") (term "1"))
               (rule "applyEq" (formula "13") (term "0,1,0,0,1,0") (ifseqformula "3"))
               (rule "apply_eq_boolean" (formula "13") (term "0,1,0,1,0") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "13") (term "0,0,0,0,1,0") (ifseqformula "2"))
               (rule "ifSplit" (formula "14"))
               (branch "if returns_1 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if returns_1 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "10"))
                  (rule "applyOnPV" (formula "10") (term "0"))
                  (rule "simplifyUpdate1Rigid" (formula "10") (term "1"))
                  (rule "boolean_not_equal_2" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=boolv"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "boolv_2"))
                  (rule "inequality_comparison_simple" (formula "14") (term "1"))
                  (rule "sequentialToParallel2" (formula "14"))
                  (rule "simplifyUpdate3" (formula "14") (term "1,0"))
                  (rule "applyOnElementary" (formula "14") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
                  (rule "eqClose" (formula "14") (term "0,0,1,0"))
                  (rule "ifthenelse_true" (formula "14") (term "0,1,0"))
                  (rule "ifSplit" (formula "13"))
                  (branch "if returns_0 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if returns_0 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "10"))
                     (rule "applyOnPV" (formula "10") (term "0"))
                     (rule "simplifyUpdate1Rigid" (formula "10") (term "1"))
                     (rule "boolean_not_equal_2" (formula "10"))
                     (rule "false_right" (formula "10"))
                     (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=boolv"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "boolv_3"))
                     (rule "inequality_comparison_simple" (formula "13") (term "1"))
                     (rule "sequentialToParallel2" (formula "13"))
                     (rule "simplifyUpdate3" (formula "13") (term "1,0"))
                     (rule "applyOnElementary" (formula "13") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "13") (term "0,0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0"))
                     (rule "eqClose" (formula "13") (term "0,0,1,0"))
                     (rule "ifthenelse_true" (formula "13") (term "0,1,0"))
                     (rule "ifSplit" (formula "14"))
                     (branch "if boolv_2 true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if boolv_2 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "simplifyUpdate1" (formula "10") (term "1"))
                        (rule "applyOnPV" (formula "10") (term "0"))
                        (rule "boolean_not_equal_2" (formula "10"))
                        (rule "false_right" (formula "10"))
                        (rule "blockEmpty" (formula "14") (term "1"))
                        (rule "abstractExecutionNonVoid" (formula "14") (term "1") (inst "#label=_label14") (inst "#v1=v1") (inst "result=result_C_0") (inst "returns=returns_C_0") (inst "exc=exc_C_0") (inst "normal=normal_C_0"))
                        (rule "concrete_and_3" (formula "14") (term "0,0,1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "14") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "14") (term "0,1"))
                        (rule "impRight" (formula "14"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1"))
                        (rule "notLeft" (formula "3"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1"))
                        (rule "sequentialToParallel2" (formula "19") (term "1"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0,1"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                        (rule "applyOnParallel" (formula "19") (term "1,0"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,1,0"))
                        (rule "applyOnAbstractUpdate" (formula "19") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "0,0,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "19") (term "2,0,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "19") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "4"))
                        (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
                        (rule "applyOnPV" (formula "4") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "applyOnRigidFormula" (formula "14"))
                        (rule "applyOnPV" (formula "14") (term "0"))
                        (rule "simplifyUpdate1" (formula "14") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                        (rule "simplifyUpdate1" (formula "1") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3") (term "1"))
                        (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                        (rule "applyOnPV" (formula "3") (term "0,1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "3") (term "1,1,1"))
                        (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "4"))
                        (rule "concrete_and_3" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                        (rule "applyOnPV" (formula "3") (term "0,0,1"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0,1"))
                        (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "14"))
                        (rule "concrete_not_2" (formula "3") (term "1"))
                        (rule "concrete_eq_3" (formula "3"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                        (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                        (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "4"))
                        (rule "concrete_not_1" (formula "2") (term "1,1"))
                        (rule "concrete_and_4" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                        (rule "applyOnPV" (formula "2") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
                        (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "4"))
                        (rule "concrete_and_3" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,1"))
                        (rule "applyOnPV" (formula "2") (term "0,1,1"))
                        (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "4"))
                        (rule "concrete_and_3" (formula "2") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "neq_or_2" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEqRigid" (formula "18") (term "0,0,0,0,1,1,0") (ifseqformula "2"))
                        (rule "apply_eq_boolean_rigid" (formula "18") (term "0,1,0,1,1,0") (ifseqformula "13"))
                        (rule "applyEqRigid" (formula "18") (term "0,1,0,0,1,1,0") (ifseqformula "3"))
                        (rule "ifSplit" (formula "17"))
                        (branch "if boolv_3 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if boolv_3 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "13"))
                           (rule "simplifyUpdate1" (formula "13") (term "1"))
                           (rule "applyOnPV" (formula "13") (term "0"))
                           (rule "boolean_not_equal_2" (formula "13"))
                           (rule "false_right" (formula "13"))
                           (rule "blockEmpty" (formula "17") (term "1"))
                           (rule "abstractExecutionNonVoid" (formula "17") (term "1") (inst "#label=_label15") (inst "#v1=v1") (inst "result=result_C_0") (inst "returns=returns_C_0") (inst "exc=exc_C_0") (inst "normal=normal_C_0"))
                           (rule "concrete_and_3" (formula "17") (term "0,0,1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                           (rule "impRight" (formula "17"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "1") (term "1"))
                           (rule "notLeft" (formula "3"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "1") (term "1"))
                           (rule "sequentialToParallel2" (formula "22"))
                           (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                           (rule "applyOnAbstractUpdate" (formula "22") (term "1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "22") (term "1,1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "22") (term "2,1,0"))
                           (rule "simplifyUpdate1" (formula "22") (term "0,1,0"))
                           (rule "sequentialToParallel2" (formula "22"))
                           (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "4"))
                           (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
                           (rule "applyOnPV" (formula "4") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "0"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "applyOnPV" (formula "2") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                           (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "4"))
                           (rule "concrete_eq_1" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "2"))
                           (rule "concrete_not_1" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                           (rule "concrete_and_4" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "simplifyUpdate1" (formula "2") (term "1"))
                           (rule "applyOnPV" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,1"))
                           (rule "replace_known_left" (formula "1") (term "1,1") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "1") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "1") (term "0"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1"))
                           (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "14"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "13"))
                           (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                           (rule "applyOnPV" (formula "13") (term "0"))
                           (rule "applyEqRigid" (formula "17") (term "0,1,0,0,1,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "17") (term "0,0,0,0,1,0") (ifseqformula "2"))
                           (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,1,0") (ifseqformula "13"))
                           (rule "ifSplit" (formula "18"))
                           (branch "if returns_2 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if returns_2 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "13"))
                              (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                              (rule "applyOnPV" (formula "13") (term "0"))
                              (rule "boolean_not_equal_2" (formula "13"))
                              (rule "false_right" (formula "13"))
                              (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "18") (term "1") (newnames "boolv_4"))
                              (rule "inequality_comparison_simple" (formula "18") (term "1"))
                              (rule "sequentialToParallel2" (formula "18"))
                              (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                              (rule "applyOnElementary" (formula "18") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
                              (rule "eqClose" (formula "18") (term "0,0,1,0"))
                              (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
                              (rule "ifSplit" (formula "17"))
                              (branch "if returns_2 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if returns_2 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "13"))
                                 (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                 (rule "applyOnPV" (formula "13") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "13"))
                                 (rule "false_right" (formula "13"))
                                 (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                                 (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_5"))
                                 (rule "inequality_comparison_simple" (formula "17") (term "1"))
                                 (rule "sequentialToParallel2" (formula "17"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                                 (rule "eqClose" (formula "17") (term "0,0,1,0"))
                                 (rule "ifthenelse_true" (formula "17") (term "0,1,0"))
                                 (rule "ifSplit" (formula "18"))
                                 (branch "if boolv_4 true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if boolv_4 false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "13"))
                                    (rule "simplifyUpdate1" (formula "13") (term "1"))
                                    (rule "applyOnPV" (formula "13") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "13"))
                                    (rule "false_right" (formula "13"))
                                    (rule "blockEmpty" (formula "18") (term "1"))
                                    (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label16") (inst "#v1=v1") (inst "result=result_B_0") (inst "returns=returns_B_0") (inst "exc=exc_B_0") (inst "normal=normal_B_0"))
                                    (rule "concrete_and_3" (formula "18") (term "0,0,1,1,0,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                                    (rule "impRight" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1"))
                                    (rule "sequentialToParallel2" (formula "23"))
                                    (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                    (rule "applyOnAbstractUpdate" (formula "23") (term "1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "23") (term "1,1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "23") (term "2,1,0"))
                                    (rule "simplifyUpdate1" (formula "23") (term "0,1,0"))
                                    (rule "sequentialToParallel2" (formula "23"))
                                    (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "4"))
                                    (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
                                    (rule "applyOnPV" (formula "4") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "16"))
                                    (rule "applyOnPV" (formula "16") (term "0"))
                                    (rule "simplifyUpdate1" (formula "16") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                                    (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "7"))
                                    (rule "concrete_eq_1" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1,0,1") (ifseqformula "15"))
                                    (rule "concrete_not_2" (formula "1") (term "1,0,1"))
                                    (rule "simplifyUpdate2Rigid" (formula "1") (term "0,1"))
                                    (rule "concrete_and_1" (formula "1") (term "1"))
                                    (rule "replace_known_left" (formula "1") (term "0,1,1") (ifseqformula "2"))
                                    (rule "concrete_not_1" (formula "1") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "2"))
                                    (rule "applyOnPV" (formula "2") (term "0"))
                                    (rule "simplifyUpdate1Rigid" (formula "2") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "14"))
                                    (rule "applyOnPV" (formula "14") (term "0"))
                                    (rule "simplifyUpdate1" (formula "14") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "7"))
                                    (rule "concrete_and_3" (formula "1") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "15"))
                                    (rule "concrete_and_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "13"))
                                    (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                    (rule "applyOnPV" (formula "13") (term "0"))
                                    (rule "applyEq" (formula "18") (term "0,0,0,0,1,0") (ifseqformula "5"))
                                    (rule "applyEqRigid" (formula "18") (term "0,1,0,0,1,0") (ifseqformula "6"))
                                    (rule "apply_eq_boolean" (formula "18") (term "0,1,0,1,0") (ifseqformula "14"))
                                    (rule "ifSplit" (formula "17"))
                                    (branch "if boolv_5 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "13"))
                                       (rule "simplifyUpdate1" (formula "13") (term "1"))
                                       (rule "applyOnPV" (formula "13") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "13"))
                                       (rule "false_right" (formula "13"))
                                       (rule "blockEmpty" (formula "17") (term "1"))
                                       (rule "abstractExecutionNonVoid" (formula "17") (term "1") (inst "#label=_label17") (inst "#v1=v1") (inst "result=result_D_0") (inst "returns=returns_D_0") (inst "exc=exc_D_0") (inst "normal=normal_D_0"))
                                       (rule "concrete_and_3" (formula "17") (term "0,0,1,1,0,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                       (rule "impRight" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1"))
                                       (rule "sequentialToParallel2" (formula "22"))
                                       (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                       (rule "applyOnAbstractUpdate" (formula "22") (term "1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "22") (term "1,1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "22") (term "2,1,0"))
                                       (rule "simplifyUpdate1" (formula "22") (term "0,1,0"))
                                       (rule "sequentialToParallel2" (formula "22"))
                                       (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "4"))
                                       (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
                                       (rule "applyOnPV" (formula "4") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "16"))
                                       (rule "applyOnPV" (formula "16") (term "0"))
                                       (rule "simplifyUpdate1" (formula "16") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "2"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                                       (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "10"))
                                       (rule "concrete_eq_1" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "2"))
                                       (rule "concrete_not_1" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                       (rule "concrete_and_4" (formula "1") (term "1"))
                                       (rule "concrete_or_4" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "2"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1"))
                                       (rule "applyOnPV" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "14"))
                                       (rule "simplifyUpdate1" (formula "14") (term "1"))
                                       (rule "applyOnPV" (formula "14") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "0"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "1") (term "0,0"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                       (rule "applyOnPV" (formula "1") (term "0,1,1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1,1,1"))
                                       (rule "replace_known_left" (formula "1") (term "1,1") (ifseqformula "10"))
                                       (rule "concrete_and_3" (formula "1") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                                       (rule "applyOnPV" (formula "1") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "10"))
                                       (rule "concrete_and_3" (formula "1") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1,1"))
                                       (rule "applyOnPV" (formula "1") (term "0,1"))
                                       (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "16"))
                                       (rule "concrete_or_4" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "13"))
                                       (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                       (rule "applyOnPV" (formula "13") (term "0"))
                                       (rule "applyEqRigid" (formula "17") (term "0,1,0,0,1,0") (ifseqformula "9"))
                                       (rule "apply_eq_boolean" (formula "17") (term "0,1,0,1,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "17") (term "0,0,0,0,1,0") (ifseqformula "8"))
                                       (rule "ifSplit" (formula "18"))
                                       (branch "if returns_0 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if returns_0 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "13"))
                                          (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                          (rule "applyOnPV" (formula "13") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "13"))
                                          (rule "false_right" (formula "13"))
                                          (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "18") (term "1") (newnames "boolv_6"))
                                          (rule "inequality_comparison_simple" (formula "18") (term "1"))
                                          (rule "sequentialToParallel2" (formula "18"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                                          (rule "applyOnElementary" (formula "18") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
                                          (rule "eqClose" (formula "18") (term "0,0,1,0"))
                                          (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
                                          (rule "ifSplit" (formula "17"))
                                          (branch "if returns_1 true"
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if returns_1 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "13"))
                                             (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                             (rule "applyOnPV" (formula "13") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "13"))
                                             (rule "false_right" (formula "13"))
                                             (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_7"))
                                             (rule "inequality_comparison_simple" (formula "17") (term "1"))
                                             (rule "sequentialToParallel2" (formula "17"))
                                             (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                             (rule "applyOnElementary" (formula "17") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                                             (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                                             (rule "eqClose" (formula "17") (term "0,0,1,0"))
                                             (rule "ifthenelse_true" (formula "17") (term "0,1,0"))
                                             (rule "ifSplit" (formula "18"))
                                             (branch "if boolv_6 true"
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "boolean_not_equal_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "if boolv_6 false"
                                                (rule "false_to_not_true" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "13"))
                                                (rule "simplifyUpdate1" (formula "13") (term "1"))
                                                (rule "applyOnPV" (formula "13") (term "0"))
                                                (rule "boolean_not_equal_2" (formula "13"))
                                                (rule "false_right" (formula "13"))
                                                (rule "blockEmpty" (formula "18") (term "1"))
                                                (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label18") (inst "#v1=v1") (inst "result=result_E_0") (inst "returns=returns_E_0") (inst "exc=exc_E_0") (inst "normal=normal_E_0"))
                                                (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                                                (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                                                (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                                                (rule "simplifyUpdate2" (formula "18"))
                                                (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                                (rule "simplifyUpdate2" (formula "18") (term "1,0,1"))
                                                (rule "impRight" (formula "18"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1"))
                                                (rule "simplifyUpdate2" (formula "2"))
                                                (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1"))
                                                (rule "simplifyUpdate2" (formula "2"))
                                                (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                (rule "sequentialToParallel2" (formula "21"))
                                                (rule "applyOnAbstractUpdate" (formula "21") (term "1,0"))
                                                (rule "simplifyUpdate1" (formula "21") (term "0,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "1,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "2,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "3,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "4,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "5,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "6,1,0"))
                                                (rule "sequentialToParallel2" (formula "1"))
                                                (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                                                (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "2,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "3,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "4,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "5,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "6,1,0"))
                                                (rule "sequentialToParallel2" (formula "21"))
                                                (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                (rule "applyOnRigidFormula" (formula "3"))
                                                (rule "simplifyUpdate2" (formula "3") (term "0"))
                                                (rule "simplifyUpdate2" (formula "3") (term "1"))
                                                (rule "applyOnRigidFormula" (formula "2"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "simplifyUpdate1" (formula "1") (term "0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "5"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "3"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "4"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "6"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                                (rule "applyOnPV" (formula "3") (term "0,0"))
                                                (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                                (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                                (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                                (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                                (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                                                (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                                (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                                (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                                (rule "simplifyUpdate1Rigid" (formula "3") (term "1,0,0,1"))
                                                (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                                (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1,1"))
                                                (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                                (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0,0"))
                                                (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                                (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                                (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                                (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                                (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                                                (rule "cnf_rightDist" (formula "2") (term "0"))
                                                (rule "commute_or" (formula "2") (term "0,0"))
                                                (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                                (rule "eq_or" (formula "2") (term "1,1,0"))
                                                (rule "commute_or" (formula "2") (term "0,1,0"))
                                                (rule "commute_and" (formula "2") (term "1,0"))
                                                (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                                (rule "neq_or" (formula "2") (term "0,0,0"))
                                                (rule "concrete_and_1" (formula "2") (term "0,0"))
                                                (rule "commute_or" (formula "2") (term "0,0"))
                                                (rule "shift_paren_and" (formula "2") (term "0"))
                                                (rule "cnf_rightDist" (formula "2"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "commute_or" (formula "2"))
                                                (rule "cnf_rightDist" (formula "3"))
                                                (rule "neq_or_3" (formula "3") (term "1"))
                                                (rule "concrete_and_3" (formula "3"))
                                                (rule "cnf_rightDist" (formula "2"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "commute_or_2" (formula "3"))
                                                (rule "eq_or" (formula "3") (term "0"))
                                                (rule "cnf_rightDist" (formula "4"))
                                                (rule "neq_or" (formula "4") (term "1"))
                                                (rule "concrete_and_3" (formula "4"))
                                                (rule "shift_paren_or" (formula "4"))
                                                (rule "commute_or" (formula "4") (term "0"))
                                                (rule "neq_or_4" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "cnf_rightDist" (formula "2"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "commute_or" (formula "3"))
                                                (rule "shift_paren_or" (formula "2"))
                                                (rule "neq_or_2" (formula "2") (term "0"))
                                                (rule "concrete_or_1" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "ifSplit" (formula "20"))
                                                (branch "if boolv_7 true"
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "boolean_not_equal_2" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "if boolv_7 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "16"))
                                                   (rule "applyOnPV" (formula "16") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "16") (term "1"))
                                                   (rule "boolean_not_equal_2" (formula "16"))
                                                   (rule "false_right" (formula "16"))
                                                   (rule "blockEmpty" (formula "20") (term "1"))
                                                   (rule "abstractExecutionNonVoid" (formula "20") (term "1") (inst "#label=_label19") (inst "#v1=v1") (inst "result=result_E_0") (inst "returns=returns_E_0") (inst "exc=exc_E_0") (inst "normal=normal_E_0"))
                                                   (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                                   (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                                   (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                                   (rule "simplifyUpdate2" (formula "20"))
                                                   (rule "simplifyUpdate2" (formula "20") (term "1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "20") (term "1,0,1"))
                                                   (rule "impRight" (formula "20"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "2") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "2"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "2") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "2"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "sequentialToParallel2" (formula "23"))
                                                   (rule "applyOnAbstractUpdate" (formula "23") (term "1,0"))
                                                   (rule "simplifyUpdate1" (formula "23") (term "0,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "1,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "2,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "3,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "4,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "5,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "6,1,0"))
                                                   (rule "sequentialToParallel2" (formula "1"))
                                                   (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "2,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "3,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "4,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "5,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "6,1,0"))
                                                   (rule "sequentialToParallel2" (formula "23"))
                                                   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                                   (rule "applyOnRigidFormula" (formula "3"))
                                                   (rule "simplifyUpdate2" (formula "3") (term "0"))
                                                   (rule "simplifyUpdate2" (formula "3") (term "1"))
                                                   (rule "applyOnRigidFormula" (formula "2"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "3"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "4"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "5"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "6"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                                   (rule "applyOnPV" (formula "2") (term "0,0"))
                                                   (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                                   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                                   (rule "applyOnPV" (formula "2") (term "0,1,1"))
                                                   (rule "simplifyUpdate1" (formula "2") (term "1,1,1"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,0"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,0,0"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "0,0,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1,0"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "0,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                                   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                                   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,1,1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,0,1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1,0,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1,1,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,1,1,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,1,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,0,0,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                                                   (rule "cnf_rightDist" (formula "1") (term "0"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                                   (rule "eq_or" (formula "1") (term "1,1,0"))
                                                   (rule "commute_or" (formula "1") (term "0,1,0"))
                                                   (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "concrete_and_1" (formula "1") (term "1,0"))
                                                   (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                                   (rule "neq_or" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "1") (term "0,0"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "commute_and" (formula "1") (term "0"))
                                                   (rule "cnf_rightDist" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "commute_or" (formula "1"))
                                                   (rule "cnf_rightDist" (formula "2"))
                                                   (rule "neq_or_2" (formula "2") (term "0"))
                                                   (rule "concrete_and_1" (formula "2"))
                                                   (rule "neq_or_3" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "cnf_rightDist" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "commute_or_2" (formula "1"))
                                                   (rule "neq_or" (formula "1") (term "0"))
                                                   (rule "concrete_or_1" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "ifSplit" (formula "21"))
                                                   (branch "if returns_3 true"
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "1"))
                                                      (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                      (rule "applyOnPV" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                                                      (rule "concrete_not_1" (formula "3") (term "0"))
                                                      (rule "concrete_or_2" (formula "3"))
                                                      (rule "replace_known_left" (formula "4") (term "1,1") (ifseqformula "3"))
                                                      (rule "concrete_and_3" (formula "4") (term "1"))
                                                      (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
                                                      (rule "concrete_not_1" (formula "4") (term "1"))
                                                      (rule "concrete_eq_4" (formula "4"))
                                                      (rule "notLeft" (formula "4"))
                                                      (rule "blockReturn" (formula "22") (term "1"))
                                                      (rule "blockReturn" (formula "22") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "applyEqRigid" (formula "21") (term "0,1,0,1,0") (ifseqformula "1"))
                                                      (rule "applyEqRigid" (formula "21") (term "0,0,0,1,0") (ifseqformula "3"))
                                                      (rule "methodCallReturn" (formula "22") (term "1"))
                                                      (rule "assignment" (formula "22") (term "1"))
                                                      (rule "sequentialToParallel2" (formula "22"))
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                      (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                      (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                                      (rule "methodCallEmpty" (formula "22") (term "1"))
                                                      (rule "tryEmpty" (formula "22") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "emptyModality" (formula "22") (term "1"))
                                                      (rule "applyOnRigidFormula" (formula "22"))
                                                      (rule "applyOnPV" (formula "22") (term "0"))
                                                      (rule "ifSplit" (formula "21"))
                                                      (branch "if returns_3 true"
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "simplifyUpdate2" (formula "22"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "boolean_equal" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "blockReturn" (formula "21") (term "1"))
                                                         (rule "blockReturn" (formula "21") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "methodCallReturn" (formula "21") (term "1"))
                                                         (rule "assignment" (formula "21") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "21"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                         (rule "applyOnPV" (formula "21") (term "0,1,0"))
                                                         (rule "methodCallEmpty" (formula "21") (term "1"))
                                                         (rule "tryEmpty" (formula "21") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "emptyModality" (formula "21") (term "1"))
                                                         (rule "notRight" (formula "21"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "close" (formula "22") (ifseqformula "1"))
                                                      )
                                                      (branch "if returns_3 false"
                                                         (rule "false_to_not_true" (formula "1") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "22"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "16"))
                                                         (rule "applyOnPV" (formula "16") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "16") (term "1"))
                                                         (rule "boolean_equal" (formula "16"))
                                                         (rule "closeTrue" (formula "16"))
                                                      )
                                                   )
                                                   (branch "if returns_3 false"
                                                      (rule "false_to_not_true" (formula "1") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "16"))
                                                      (rule "applyOnPV" (formula "16") (term "0"))
                                                      (rule "simplifyUpdate1" (formula "16") (term "1"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "16"))
                                                      (rule "concrete_not_2" (formula "2") (term "0"))
                                                      (rule "concrete_or_1" (formula "2"))
                                                      (rule "true_left" (formula "2"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "15"))
                                                      (rule "concrete_not_2" (formula "2") (term "0,1"))
                                                      (rule "concrete_and_1" (formula "2") (term "1"))
                                                      (rule "apply_eq_boolean" (formula "20") (term "0,1,0,1,0") (ifseqformula "15"))
                                                      (rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=boolv"))
                                                      (rule "variableDeclaration" (formula "21") (term "1") (newnames "boolv_8"))
                                                      (rule "inequality_comparison_simple" (formula "21") (term "1"))
                                                      (rule "sequentialToParallel2" (formula "21"))
                                                      (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                      (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                      (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                                      (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                                      (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                                      (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                                                      (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                                                      (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                                                      (rule "ifSplit" (formula "20"))
                                                      (branch "if returns_3 true"
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "boolean_not_equal_2" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "if returns_3 false"
                                                         (rule "false_to_not_true" (formula "1") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "15"))
                                                         (rule "applyOnPV" (formula "15") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "15") (term "1"))
                                                         (rule "boolean_not_equal_2" (formula "15"))
                                                         (rule "false_right" (formula "15"))
                                                         (rule "ifUnfold" (formula "20") (term "1") (inst "#boolv=boolv"))
                                                         (rule "variableDeclaration" (formula "20") (term "1") (newnames "boolv_9"))
                                                         (rule "inequality_comparison_simple" (formula "20") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "20"))
                                                         (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "20") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "20") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
                                                         (rule "ifSplit" (formula "21"))
                                                         (branch "if boolv_8 true"
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "simplifyUpdate2" (formula "22"))
                                                            (rule "applyOnRigidFormula" (formula "1"))
                                                            (rule "applyOnPV" (formula "1") (term "0"))
                                                            (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                            (rule "ifthenelse_concrete4" (formula "1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                                            (rule "concrete_or_4" (formula "1"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "15"))
                                                            (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                                                            (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "15"))
                                                            (rule "concrete_eq_4" (formula "2"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "blockThrow" (formula "22") (term "1"))
                                                            (rule "blockThrow" (formula "22") (term "1"))
                                                            (rule "methodCallParamThrow" (formula "22") (term "1"))
                                                            (rule "tryCatchThrow" (formula "22") (term "1"))
                                                            (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=boolv"))
                                                            (rule "variableDeclaration" (formula "22") (term "1") (newnames "boolv_10"))
                                                            (rule "equality_comparison_simple" (formula "22") (term "1"))
                                                            (rule "sequentialToParallel2" (formula "22"))
                                                            (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                            (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                            (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
                                                            (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
                                                            (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
                                                            (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
                                                            (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
                                                            (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
                                                            (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "15"))
                                                            (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
                                                            (rule "ifSplit" (formula "21"))
                                                            (branch "if boolv_9 true"
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                               (rule "boolean_equal" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "blockThrow" (formula "21") (term "1"))
                                                               (rule "blockThrow" (formula "21") (term "1"))
                                                               (rule "methodCallParamThrow" (formula "21") (term "1"))
                                                               (rule "tryCatchThrow" (formula "21") (term "1"))
                                                               (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=boolv"))
                                                               (rule "variableDeclaration" (formula "21") (term "1") (newnames "boolv_11"))
                                                               (rule "equality_comparison_simple" (formula "21") (term "1"))
                                                               (rule "sequentialToParallel2" (formula "21"))
                                                               (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                               (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                               (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                                               (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                                               (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                                               (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                                                               (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                                                               (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                                                               (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "15"))
                                                               (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                                                               (rule "ifElseSplit" (formula "22"))
                                                               (branch "if boolv_10 true"
                                                                  (rule "simplifyUpdate2" (formula "23"))
                                                                  (rule "simplifyUpdate2" (formula "1"))
                                                                  (rule "applyOnRigidFormula" (formula "1"))
                                                                  (rule "applyOnPV" (formula "1") (term "0"))
                                                                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                                  (rule "boolean_not_equal_2" (formula "1"))
                                                                  (rule "closeFalse" (formula "1"))
                                                               )
                                                               (branch "if boolv_10 false"
                                                                  (rule "false_to_not_true" (formula "1") (term "1"))
                                                                  (rule "simplifyUpdate2" (formula "23"))
                                                                  (rule "simplifyUpdate2" (formula "1"))
                                                                  (rule "notLeft" (formula "1"))
                                                                  (rule "applyOnRigidFormula" (formula "14"))
                                                                  (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                                                  (rule "applyOnPV" (formula "14") (term "0"))
                                                                  (rule "boolean_not_equal_2" (formula "14"))
                                                                  (rule "false_right" (formula "14"))
                                                                  (rule "elim_double_block" (formula "22") (term "1"))
                                                                  (rule "ifElseSplit" (formula "21"))
                                                                  (branch "if boolv_11 true"
                                                                     (rule "simplifyUpdate2" (formula "1"))
                                                                     (rule "simplifyUpdate2" (formula "22"))
                                                                     (rule "applyOnRigidFormula" (formula "1"))
                                                                     (rule "applyOnPV" (formula "1") (term "0"))
                                                                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                                     (rule "boolean_not_equal_2" (formula "1"))
                                                                     (rule "closeFalse" (formula "1"))
                                                                  )
                                                                  (branch "if boolv_11 false"
                                                                     (rule "false_to_not_true" (formula "1") (term "1"))
                                                                     (rule "simplifyUpdate2" (formula "22"))
                                                                     (rule "simplifyUpdate2" (formula "1"))
                                                                     (rule "notLeft" (formula "1"))
                                                                     (rule "applyOnRigidFormula" (formula "14"))
                                                                     (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                                                     (rule "applyOnPV" (formula "14") (term "0"))
                                                                     (rule "boolean_not_equal_2" (formula "14"))
                                                                     (rule "false_right" (formula "14"))
                                                                     (rule "elim_double_block" (formula "21") (term "1"))
                                                                     (rule "ifElseSplit" (formula "22"))
                                                                     (branch "if exc_3 instanceof Throwable true"
                                                                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                                        (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                                        (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                                        (rule "concrete_or_4" (formula "1") (term "1"))
                                                                        (rule "simplifyUpdate2" (formula "1"))
                                                                        (rule "notLeft" (formula "1"))
                                                                        (rule "applyOnRigidFormula" (formula "14"))
                                                                        (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                                                        (rule "applyOnPV" (formula "14") (term "0"))
                                                                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "t"))
                                                                        (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                                                                        (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                                        (rule "boolean_equal" (formula "1") (term "1,1"))
                                                                        (rule "concrete_or_3" (formula "1") (term "1"))
                                                                        (rule "true_left" (formula "1"))
                                                                        (rule "sequentialToParallel2" (formula "22"))
                                                                        (rule "simplifyUpdate2" (formula "22"))
                                                                        (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                                        (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                                        (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                                                        (rule "assignment" (formula "22") (term "1"))
                                                                        (rule "sequentialToParallel2" (formula "22"))
                                                                        (rule "simplifyUpdate2" (formula "22"))
                                                                        (rule "simplifyUpdate3" (formula "22") (term "0"))
                                                                        (rule "applyOnElementary" (formula "22") (term "0"))
                                                                        (rule "applyOnPV" (formula "22") (term "0,0"))
                                                                        (rule "emptyModality" (formula "22") (term "1"))
                                                                        (rule "applyOnRigidFormula" (formula "22"))
                                                                        (rule "applyOnPV" (formula "22") (term "0"))
                                                                        (rule "ifElseSplit" (formula "21"))
                                                                        (branch "if exc_3 instanceof Throwable true"
                                                                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                                           (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                                           (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                                           (rule "concrete_or_4" (formula "1") (term "1"))
                                                                           (rule "simplifyUpdate2" (formula "1"))
                                                                           (rule "notLeft" (formula "1"))
                                                                           (rule "applyOnRigidFormula" (formula "14"))
                                                                           (rule "applyOnPV" (formula "14") (term "0"))
                                                                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                                                                           (rule "variableDeclaration" (formula "21") (term "1") (newnames "t_1"))
                                                                           (rule "delete_unnecessary_cast" (formula "21") (term "1"))
                                                                           (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                                           (rule "boolean_equal" (formula "1") (term "1,1"))
                                                                           (rule "concrete_or_3" (formula "1") (term "1"))
                                                                           (rule "true_left" (formula "1"))
                                                                           (rule "sequentialToParallel2" (formula "21"))
                                                                           (rule "simplifyUpdate2" (formula "21"))
                                                                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                                           (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                                           (rule "applyOnPV" (formula "21") (term "0,1,0"))
                                                                           (rule "assignment" (formula "21") (term "1"))
                                                                           (rule "sequentialToParallel2" (formula "21"))
                                                                           (rule "simplifyUpdate2" (formula "21"))
                                                                           (rule "simplifyUpdate3" (formula "21") (term "0"))
                                                                           (rule "applyOnElementary" (formula "21") (term "0"))
                                                                           (rule "applyOnPV" (formula "21") (term "0,0"))
                                                                           (rule "emptyModality" (formula "21") (term "1"))
                                                                           (rule "notRight" (formula "21"))
                                                                           (rule "applyOnRigidFormula" (formula "1"))
                                                                           (rule "applyOnPV" (formula "1") (term "0"))
                                                                           (rule "close" (formula "22") (ifseqformula "1"))
                                                                        )
                                                                        (branch "if exc_3 instanceof Throwable false"
                                                                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                                           (rule "false_to_not_true" (formula "1") (term "1"))
                                                                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                                           (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                                           (rule "double_not" (formula "1") (term "1"))
                                                                           (rule "simplifyUpdate2" (formula "1"))
                                                                           (rule "applyOnRigidFormula" (formula "1"))
                                                                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                                           (rule "applyOnPV" (formula "1") (term "0"))
                                                                           (rule "close" (formula "16") (ifseqformula "1"))
                                                                        )
                                                                     )
                                                                     (branch "if exc_3 instanceof Throwable false"
                                                                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                                        (rule "false_to_not_true" (formula "1") (term "1"))
                                                                        (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                                        (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                                        (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                                        (rule "double_not" (formula "1") (term "1"))
                                                                        (rule "simplifyUpdate2" (formula "1"))
                                                                        (rule "applyOnRigidFormula" (formula "1"))
                                                                        (rule "applyOnPV" (formula "1") (term "0"))
                                                                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                                        (rule "close" (formula "16") (ifseqformula "1"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                            (branch "if boolv_9 false"
                                                               (rule "false_to_not_true" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "14"))
                                                               (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                                               (rule "applyOnPV" (formula "14") (term "0"))
                                                               (rule "boolean_equal" (formula "14"))
                                                               (rule "closeTrue" (formula "14"))
                                                            )
                                                         )
                                                         (branch "if boolv_8 false"
                                                            (rule "false_to_not_true" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "22"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "15"))
                                                            (rule "simplifyUpdate1" (formula "15") (term "1"))
                                                            (rule "applyOnPV" (formula "15") (term "0"))
                                                            (rule "ifthenelse_concrete4" (formula "15"))
                                                            (rule "boolean_not_equal_2" (formula "15") (term "1"))
                                                            (rule "concrete_or_4" (formula "15"))
                                                            (rule "notRight" (formula "15"))
                                                            (rule "replace_known_left" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
                                                            (rule "ifthenelse_true" (formula "21") (term "0,1,0"))
                                                            (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                                                            (rule "concrete_eq_3" (formula "3"))
                                                            (rule "blockEmpty" (formula "22") (term "1"))
                                                            (rule "applyEq" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                                                            (rule "methodCallReturn" (formula "22") (term "1"))
                                                            (rule "assignment" (formula "22") (term "1"))
                                                            (rule "elimSelfSingleUpdateFor" (formula "22") (term "1"))
                                                            (rule "methodCallEmpty" (formula "22") (term "1"))
                                                            (rule "tryEmpty" (formula "22") (term "1"))
                                                            (rule "emptyModality" (formula "22") (term "1"))
                                                            (rule "applyOnRigidFormula" (formula "22"))
                                                            (rule "ifSplit" (formula "21"))
                                                            (branch "if boolv_9 true"
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                               (rule "boolean_not_equal_2" (formula "1"))
                                                               (rule "closeFalse" (formula "1"))
                                                            )
                                                            (branch "if boolv_9 false"
                                                               (rule "false_to_not_true" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "16"))
                                                               (rule "applyOnPV" (formula "16") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "16") (term "1"))
                                                               (rule "boolean_not_equal_2" (formula "16"))
                                                               (rule "false_right" (formula "16"))
                                                               (rule "blockEmpty" (formula "21") (term "1"))
                                                               (rule "methodCallReturn" (formula "21") (term "1"))
                                                               (rule "assignment" (formula "21") (term "1"))
                                                               (rule "elimSelfSingleUpdateFor" (formula "21") (term "1"))
                                                               (rule "methodCallEmpty" (formula "21") (term "1"))
                                                               (rule "tryEmpty" (formula "21") (term "1"))
                                                               (rule "emptyModality" (formula "21") (term "1"))
                                                               (rule "notRight" (formula "21"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "close" (formula "22") (ifseqformula "1"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
(branch "Case '<-'"
   (rule "diamondToBox" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_before,savedHeapBefore_before,normal,exc,returns,result_0,C_A"))
   (rule "sequentialToParallel2" (formula "2"))
   (rule "simplifyUpdate3" (formula "2") (term "1,0"))
   (rule "methodBodyExpand" (formula "1") (term "1") (newnames "heapBefore_after,savedHeapBefore_after"))
   (rule "sequentialToParallel2" (formula "1"))
   (rule "simplifyUpdate3" (formula "1") (term "1,0"))
   (rule "abstractExecutionNonVoid" (formula "2") (term "1") (inst "#label=_label0") (inst "#v1=v1") (inst "result=result_A_0") (inst "returns=returns_A_0") (inst "exc=exc_A_0") (inst "normal=normal_A_0"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "2") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,1"))
   (rule "impRight" (formula "2"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "andLeft" (formula "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "sequentialToParallel2" (formula "5"))
   (rule "simplifyUpdate3" (formula "5") (term "1,0"))
   (rule "applyOnAbstractUpdate" (formula "5") (term "1,0"))
   (rule "applyOnPV" (formula "5") (term "3,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "5") (term "2,1,0"))
   (rule "simplifyUpdate1" (formula "5") (term "0,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "5") (term "1,1,0"))
   (rule "sequentialToParallel2" (formula "1"))
   (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
   (rule "applyOnPV" (formula "1") (term "3,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "2,1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
   (rule "sequentialToParallel2" (formula "5"))
   (rule "simplifyUpdate3" (formula "5") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate2" (formula "3") (term "1"))
   (rule "simplifyUpdate2" (formula "3") (term "0"))
   (rule "applyOnRigidFormula" (formula "2"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
   (rule "simplifyUpdate1" (formula "1") (term "0"))
   (rule "applyOnRigidFormula" (formula "3") (term "1"))
   (rule "simplifyUpdate2" (formula "3") (term "1,1"))
   (rule "simplifyUpdate2" (formula "3") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0"))
   (rule "applyOnPV" (formula "3") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
   (rule "applyOnPV" (formula "3") (term "0,1,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
   (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
   (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
   (rule "abstractExecutionNonVoid" (formula "4") (term "1") (inst "#label=_label1") (inst "#v1=v1") (inst "result=result_A_0") (inst "returns=returns_A_0") (inst "exc=exc_A_0") (inst "normal=normal_A_0"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "concrete_and_3" (formula "4") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "4") (term "1,0,1"))
   (rule "impRight" (formula "4"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "andLeft" (formula "1"))
   (rule "simplifyUpdate2" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnAbstractUpdate" (formula "7") (term "1,0"))
   (rule "applyOnPV" (formula "7") (term "3,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "7") (term "2,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "0,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "7") (term "1,1,0"))
   (rule "sequentialToParallel2" (formula "1"))
   (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "2,1,0"))
   (rule "applyOnPV" (formula "1") (term "3,1,0"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "3"))
   (rule "simplifyUpdate2" (formula "3") (term "0"))
   (rule "simplifyUpdate2" (formula "3") (term "1"))
   (rule "applyOnRigidFormula" (formula "2"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "0"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
   (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
   (rule "applyOnRigidFormula" (formula "2") (term "0"))
   (rule "applyOnPV" (formula "2") (term "0,0"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "2") (term "1"))
   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0"))
   (rule "applyOnRigidFormula" (formula "1") (term "1"))
   (rule "simplifyUpdate2" (formula "1") (term "0,1"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
   (rule "applyOnPV" (formula "2") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,0"))
   (rule "simplifyUpdate2" (formula "1") (term "0,0,0"))
   (rule "simplifyUpdate2" (formula "1") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
   (rule "simplifyUpdate2" (formula "1") (term "0,1,0"))
   (rule "simplifyUpdate2" (formula "1") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "1,0,0"))
   (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,1,0"))
   (rule "applyOnPV" (formula "1") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "1,1,0"))
   (rule "applyOnPV" (formula "1") (term "0,1,1,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,1,1,0"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,0,1"))
   (rule "applyOnPV" (formula "1") (term "0,0,0,1"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
   (rule "applyOnPV" (formula "1") (term "0,0,1,1"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1"))
   (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "1") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
   (rule "cnf_rightDist" (formula "2") (term "0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "2") (term "1,0"))
   (rule "eq_or" (formula "2") (term "1,1,0"))
   (rule "commute_or" (formula "2") (term "0,1,0"))
   (rule "commute_and" (formula "2") (term "1,0"))
   (rule "cnf_rightDist" (formula "2") (term "0,0"))
   (rule "neq_or" (formula "2") (term "0,0,0"))
   (rule "concrete_and_1" (formula "2") (term "0,0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "shift_paren_and" (formula "2") (term "0"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "2"))
   (rule "cnf_rightDist" (formula "3"))
   (rule "neq_or_3" (formula "3") (term "1"))
   (rule "concrete_and_3" (formula "3"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or_2" (formula "3"))
   (rule "eq_or" (formula "3") (term "0"))
   (rule "cnf_rightDist" (formula "4"))
   (rule "neq_or" (formula "4") (term "1"))
   (rule "concrete_and_3" (formula "4"))
   (rule "shift_paren_or" (formula "4"))
   (rule "commute_or" (formula "4") (term "0"))
   (rule "neq_or_4" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "cnf_rightDist" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or" (formula "3"))
   (rule "shift_paren_or" (formula "2"))
   (rule "neq_or_2" (formula "2") (term "0"))
   (rule "concrete_or_1" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "ifSplit" (formula "5"))
   (branch "if returns true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "3") (term "0"))
      (rule "concrete_or_2" (formula "3"))
      (rule "replace_known_left" (formula "4") (term "1,1") (ifseqformula "3"))
      (rule "concrete_and_3" (formula "4") (term "1"))
      (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "4") (term "1"))
      (rule "concrete_eq_4" (formula "4"))
      (rule "notLeft" (formula "4"))
      (rule "blockReturn" (formula "6") (term "1"))
      (rule "blockReturn" (formula "6") (term "1"))
      (rule "applyEqRigid" (formula "5") (term "0,1,0,0,1,0") (ifseqformula "3"))
      (rule "applyEq" (formula "5") (term "0,1,0,1,0") (ifseqformula "1"))
      (rule "apply_eq_boolean" (formula "5") (term "0,0,0,0,1,0") (ifseqformula "4"))
      (rule "applyEq" (formula "6") (term "0,1,0,0,1,0") (ifseqformula "3"))
      (rule "apply_eq_boolean" (formula "6") (term "0,0,0,0,1,0") (ifseqformula "4"))
      (rule "applyEq" (formula "6") (term "0,1,0,1,0") (ifseqformula "1"))
      (rule "methodCallReturn" (formula "6") (term "1"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "assignment" (formula "6") (term "1"))
      (rule "sequentialToParallel2" (formula "6"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "simplifyUpdate3" (formula "6") (term "1,0"))
      (rule "applyOnElementary" (formula "6") (term "1,0"))
      (rule "applyOnPV" (formula "6") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "6") (term "1"))
      (rule "tryEmpty" (formula "6") (term "1"))
      (rule "simplifyUpdate2" (formula "6"))
      (rule "emptyModality" (formula "6") (term "1"))
      (rule "applyOnRigidFormula" (formula "6"))
      (rule "applyOnPV" (formula "6") (term "0"))
      (rule "ifSplit" (formula "5"))
      (branch "if returns true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_equal" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockReturn" (formula "5") (term "1"))
         (rule "blockReturn" (formula "5") (term "1"))
         (rule "methodCallReturn" (formula "5") (term "1"))
         (rule "simplifyUpdate2" (formula "5"))
         (rule "assignment" (formula "5") (term "1"))
         (rule "sequentialToParallel2" (formula "5"))
         (rule "simplifyUpdate2" (formula "5"))
         (rule "simplifyUpdate3" (formula "5") (term "1,0"))
         (rule "applyOnElementary" (formula "5") (term "1,0"))
         (rule "applyOnPV" (formula "5") (term "0,1,0"))
         (rule "methodCallEmpty" (formula "5") (term "1"))
         (rule "tryEmpty" (formula "5") (term "1"))
         (rule "simplifyUpdate2" (formula "5"))
         (rule "emptyModality" (formula "5") (term "1"))
         (rule "notRight" (formula "5"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "close" (formula "6") (ifseqformula "1"))
      )
      (branch "if returns false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "boolean_equal" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
   )
   (branch "if returns false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "4"))
      (rule "simplifyUpdate1" (formula "4") (term "1"))
      (rule "applyOnPV" (formula "4") (term "0"))
      (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "4"))
      (rule "concrete_not_2" (formula "2") (term "0"))
      (rule "concrete_or_1" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "3"))
      (rule "concrete_not_2" (formula "2") (term "0,1"))
      (rule "concrete_and_1" (formula "2") (term "1"))
      (rule "apply_eq_boolean_rigid" (formula "4") (term "0,1,0,1,0") (ifseqformula "3"))
      (rule "apply_eq_boolean" (formula "5") (term "0,1,0,1,0") (ifseqformula "3"))
      (rule "ifUnfold" (formula "5") (term "1") (inst "#boolv=boolv"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "boolv"))
      (rule "inequality_comparison_simple" (formula "5") (term "1"))
      (rule "sequentialToParallel2" (formula "5"))
      (rule "simplifyUpdate3" (formula "5") (term "1,0"))
      (rule "applyOnElementary" (formula "5") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "5") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "5") (term "0,0,0,1,0"))
      (rule "ifSplit" (formula "4"))
      (branch "if returns true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if returns false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "applyOnPV" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1"))
         (rule "boolean_not_equal_2" (formula "3"))
         (rule "false_right" (formula "3"))
         (rule "ifUnfold" (formula "4") (term "1") (inst "#boolv=boolv"))
         (rule "variableDeclaration" (formula "4") (term "1") (newnames "boolv_1"))
         (rule "inequality_comparison_simple" (formula "4") (term "1"))
         (rule "sequentialToParallel2" (formula "4"))
         (rule "simplifyUpdate3" (formula "4") (term "1,0"))
         (rule "applyOnElementary" (formula "4") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "4") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "4") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "4") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "4") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "4") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "4") (term "0,0,0,1,0"))
         (rule "ifSplit" (formula "5"))
         (branch "if boolv true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete4" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_right" (formula "5") (term "0,0,1,0") (ifseqformula "3"))
            (rule "ifthenelse_false" (formula "5") (term "0,1,0"))
            (rule "replace_known_right" (formula "6") (term "0,0,1,0") (ifseqformula "3"))
            (rule "ifthenelse_false" (formula "6") (term "0,1,0"))
            (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "3"))
            (rule "concrete_eq_4" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "blockThrow" (formula "6") (term "1"))
            (rule "blockThrow" (formula "6") (term "1"))
            (rule "apply_eq_boolean" (formula "5") (term "0,0,0,0,1,0,0") (ifseqformula "2"))
            (rule "apply_eq_boolean" (formula "6") (term "0,0,0,0,1,0,0") (ifseqformula "2"))
            (rule "methodCallParamThrow" (formula "6") (term "1"))
            (rule "simplifyUpdate2" (formula "6"))
            (rule "tryCatchThrow" (formula "6") (term "1"))
            (rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "6") (term "1") (newnames "boolv_2"))
            (rule "equality_comparison_simple" (formula "6") (term "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "applyOnElementary" (formula "6") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,0,0,1,0"))
            (rule "replace_known_right" (formula "6") (term "0,0,1,0") (ifseqformula "3"))
            (rule "ifthenelse_false" (formula "6") (term "0,1,0"))
            (rule "ifSplit" (formula "5"))
            (branch "if boolv_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "blockThrow" (formula "5") (term "1"))
               (rule "blockThrow" (formula "5") (term "1"))
               (rule "methodCallParamThrow" (formula "5") (term "1"))
               (rule "simplifyUpdate2" (formula "5"))
               (rule "tryCatchThrow" (formula "5") (term "1"))
               (rule "ifElseUnfold" (formula "5") (term "1") (inst "#boolv=boolv"))
               (rule "variableDeclaration" (formula "5") (term "1") (newnames "boolv_3"))
               (rule "equality_comparison_simple" (formula "5") (term "1"))
               (rule "sequentialToParallel2" (formula "5"))
               (rule "simplifyUpdate3" (formula "5") (term "1,0"))
               (rule "applyOnElementary" (formula "5") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "5") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "5") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "5") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "5") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "5") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "5") (term "0,0,0,1,0"))
               (rule "replace_known_right" (formula "5") (term "0,0,1,0") (ifseqformula "3"))
               (rule "ifthenelse_false" (formula "5") (term "0,1,0"))
               (rule "ifElseSplit" (formula "6"))
               (branch "if boolv_2 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "7"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "7"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "2"))
                  (rule "simplifyUpdate1" (formula "2") (term "1"))
                  (rule "applyOnPV" (formula "2") (term "0"))
                  (rule "boolean_not_equal_2" (formula "2"))
                  (rule "false_right" (formula "2"))
                  (rule "elim_double_block" (formula "6") (term "1"))
                  (rule "ifElseSplit" (formula "5"))
                  (branch "if boolv_3 true"
                     (rule "simplifyUpdate2" (formula "6"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_3 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "6"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "2"))
                     (rule "simplifyUpdate1" (formula "2") (term "1"))
                     (rule "applyOnPV" (formula "2") (term "0"))
                     (rule "boolean_not_equal_2" (formula "2"))
                     (rule "false_right" (formula "2"))
                     (rule "elim_double_block" (formula "5") (term "1"))
                     (rule "ifElseSplit" (formula "6"))
                     (branch "if exc instanceof Throwable true"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                        (rule "concrete_or_4" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "simplifyUpdate1" (formula "2") (term "1"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "variableDeclaration" (formula "6") (term "1") (newnames "t"))
                        (rule "delete_unnecessary_cast" (formula "6") (term "1"))
                        (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                        (rule "boolean_equal" (formula "1") (term "1,1"))
                        (rule "concrete_or_3" (formula "1") (term "1"))
                        (rule "true_left" (formula "1"))
                        (rule "sequentialToParallel2" (formula "6"))
                        (rule "simplifyUpdate2" (formula "6"))
                        (rule "simplifyUpdate3" (formula "6") (term "1,0"))
                        (rule "applyOnElementary" (formula "6") (term "1,0"))
                        (rule "applyOnPV" (formula "6") (term "0,1,0"))
                        (rule "assignment" (formula "6") (term "1"))
                        (rule "sequentialToParallel2" (formula "6"))
                        (rule "simplifyUpdate2" (formula "6"))
                        (rule "simplifyUpdate3" (formula "6") (term "0"))
                        (rule "applyOnElementary" (formula "6") (term "0"))
                        (rule "applyOnPV" (formula "6") (term "0,0"))
                        (rule "emptyModality" (formula "6") (term "1"))
                        (rule "applyOnRigidFormula" (formula "6"))
                        (rule "applyOnPV" (formula "6") (term "0"))
                        (rule "ifElseSplit" (formula "5"))
                        (branch "if exc instanceof Throwable true"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "simplifyUpdate1Rigid" (formula "2") (term "1"))
                           (rule "applyOnPV" (formula "2") (term "0"))
                           (rule "variableDeclaration" (formula "5") (term "1") (newnames "t_1"))
                           (rule "delete_unnecessary_cast" (formula "5") (term "1"))
                           (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                           (rule "boolean_equal" (formula "1") (term "1,1"))
                           (rule "concrete_or_3" (formula "1") (term "1"))
                           (rule "true_left" (formula "1"))
                           (rule "sequentialToParallel2" (formula "5"))
                           (rule "simplifyUpdate2" (formula "5"))
                           (rule "simplifyUpdate3" (formula "5") (term "1,0"))
                           (rule "applyOnElementary" (formula "5") (term "1,0"))
                           (rule "applyOnPV" (formula "5") (term "0,1,0"))
                           (rule "assignment" (formula "5") (term "1"))
                           (rule "sequentialToParallel2" (formula "5"))
                           (rule "simplifyUpdate2" (formula "5"))
                           (rule "simplifyUpdate3" (formula "5") (term "0"))
                           (rule "applyOnElementary" (formula "5") (term "0"))
                           (rule "applyOnPV" (formula "5") (term "0,0"))
                           (rule "emptyModality" (formula "5") (term "1"))
                           (rule "notRight" (formula "5"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "close" (formula "6") (ifseqformula "1"))
                        )
                        (branch "if exc instanceof Throwable false"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                           (rule "concrete_or_4" (formula "1") (term "0,1"))
                           (rule "double_not" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "close" (formula "4") (ifseqformula "1"))
                        )
                     )
                     (branch "if exc instanceof Throwable false"
                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                        (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                        (rule "concrete_or_4" (formula "1") (term "0,1"))
                        (rule "double_not" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                        (rule "close" (formula "4") (ifseqformula "1"))
                     )
                  )
               )
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "simplifyUpdate1" (formula "2") (term "1"))
               (rule "applyOnPV" (formula "2") (term "0"))
               (rule "boolean_equal" (formula "2"))
               (rule "closeTrue" (formula "2"))
            )
         )
         (branch "if boolv false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "ifthenelse_concrete4" (formula "3"))
            (rule "boolean_not_equal_2" (formula "3") (term "1"))
            (rule "concrete_or_4" (formula "3"))
            (rule "notRight" (formula "3"))
            (rule "replace_known_left" (formula "6") (term "0,0,1,0") (ifseqformula "1"))
            (rule "ifthenelse_true" (formula "6") (term "0,1,0"))
            (rule "replace_known_left" (formula "5") (term "0,0,1,0") (ifseqformula "1"))
            (rule "ifthenelse_true" (formula "5") (term "0,1,0"))
            (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
            (rule "concrete_eq_3" (formula "3"))
            (rule "blockEmpty" (formula "6") (term "1") (newnames "normal_0,exc_0,returns_0,result_1,C_B"))
            (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "6") (term "0,0,0,0,1,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "6") (term "0,1,0,0,1,0,0") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "5") (term "0,0,0,0,1,0,0") (ifseqformula "3"))
            (rule "abstractExecutionNonVoid" (formula "6") (term "1") (inst "#label=_label2") (inst "#v1=v1") (inst "result=result_B_0") (inst "returns=returns_B_0") (inst "exc=exc_B_0") (inst "normal=normal_B_0"))
            (rule "concrete_and_3" (formula "6") (term "0,0,1,1,0,1"))
            (rule "simplifyUpdate2" (formula "6") (term "0,1"))
            (rule "simplifyUpdate2" (formula "6") (term "0,1"))
            (rule "impRight" (formula "6"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "notLeft" (formula "3"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "sequentialToParallel2" (formula "11") (term "1"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0,1"))
            (rule "sequentialToParallel2" (formula "11"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0"))
            (rule "applyOnParallel" (formula "11") (term "1,0"))
            (rule "simplifyUpdate3" (formula "11") (term "1,1,0"))
            (rule "applyOnAbstractUpdate" (formula "11") (term "0,1,0"))
            (rule "simplifyUpdate1Rigid" (formula "11") (term "2,0,1,0"))
            (rule "simplifyUpdate1Rigid" (formula "11") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "4"))
            (rule "applyOnPV" (formula "4") (term "0"))
            (rule "simplifyUpdate1" (formula "4") (term "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate2" (formula "3") (term "0"))
            (rule "simplifyUpdate2" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "8"))
            (rule "applyOnPV" (formula "8") (term "0"))
            (rule "simplifyUpdate1" (formula "8") (term "1"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
            (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
            (rule "simplifyUpdate1" (formula "1") (term "0"))
            (rule "applyOnRigidFormula" (formula "3") (term "0"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0"))
            (rule "applyOnPV" (formula "3") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1"))
            (rule "simplifyUpdate2" (formula "3") (term "1,1"))
            (rule "simplifyUpdate2" (formula "3") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1"))
            (rule "simplifyUpdate2" (formula "2") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
            (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
            (rule "applyOnPV" (formula "3") (term "0,1,1"))
            (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "4"))
            (rule "concrete_and_3" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
            (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
            (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
            (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
            (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
            (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "4"))
            (rule "concrete_not_1" (formula "2") (term "1,1"))
            (rule "concrete_and_4" (formula "2") (term "1"))
            (rule "concrete_or_4" (formula "2"))
            (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
            (rule "applyOnPV" (formula "3") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "3") (term "1,0,1"))
            (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "8"))
            (rule "concrete_not_2" (formula "3") (term "1"))
            (rule "concrete_eq_3" (formula "3"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
            (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1"))
            (rule "applyOnPV" (formula "2") (term "0,0,1"))
            (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "8"))
            (rule "concrete_and_2" (formula "2") (term "1"))
            (rule "concrete_or_4" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "applyOnRigidFormula" (formula "7"))
            (rule "applyOnPV" (formula "7") (term "0"))
            (rule "simplifyUpdate1" (formula "7") (term "1"))
            (rule "apply_eq_boolean_rigid" (formula "10") (term "0,1,0,1,1,0") (ifseqformula "7"))
            (rule "applyEqRigid" (formula "10") (term "0,1,0,0,1,1,0") (ifseqformula "3"))
            (rule "applyEq" (formula "10") (term "0,0,0,0,1,1,0") (ifseqformula "2"))
            (rule "ifSplit" (formula "9"))
            (branch "if boolv_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "7"))
               (rule "simplifyUpdate1" (formula "7") (term "1"))
               (rule "applyOnPV" (formula "7") (term "0"))
               (rule "boolean_not_equal_2" (formula "7"))
               (rule "false_right" (formula "7"))
               (rule "blockEmpty" (formula "9") (term "1") (newnames "normal_1,exc_1,returns_1,result_2,C_D"))
               (rule "abstractExecutionNonVoid" (formula "9") (term "1") (inst "#label=_label3") (inst "#v1=v1") (inst "result=result_D_0") (inst "returns=returns_D_0") (inst "exc=exc_D_0") (inst "normal=normal_D_0"))
               (rule "concrete_and_3" (formula "9") (term "0,0,1,1,0,1"))
               (rule "simplifyUpdate2" (formula "9") (term "0,1"))
               (rule "simplifyUpdate2" (formula "9") (term "0,1"))
               (rule "impRight" (formula "9"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1"))
               (rule "notLeft" (formula "3"))
               (rule "andLeft" (formula "1"))
               (rule "simplifyUpdate2" (formula "2"))
               (rule "simplifyUpdate2" (formula "1") (term "1"))
               (rule "sequentialToParallel2" (formula "14") (term "1"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0,1"))
               (rule "sequentialToParallel2" (formula "14"))
               (rule "simplifyUpdate3" (formula "14") (term "1,0"))
               (rule "applyOnParallel" (formula "14") (term "1,0"))
               (rule "simplifyUpdate3" (formula "14") (term "1,1,0"))
               (rule "applyOnAbstractUpdate" (formula "14") (term "0,1,0"))
               (rule "simplifyUpdate1Rigid" (formula "14") (term "2,0,1,0"))
               (rule "simplifyUpdate1Rigid" (formula "14") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
               (rule "applyOnRigidFormula" (formula "4"))
               (rule "simplifyUpdate1" (formula "4") (term "1"))
               (rule "applyOnPV" (formula "4") (term "0"))
               (rule "applyOnRigidFormula" (formula "3"))
               (rule "simplifyUpdate2" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "0"))
               (rule "applyOnRigidFormula" (formula "11"))
               (rule "simplifyUpdate1" (formula "11") (term "1"))
               (rule "applyOnPV" (formula "11") (term "0"))
               (rule "applyOnRigidFormula" (formula "2"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "0"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
               (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
               (rule "applyOnRigidFormula" (formula "3") (term "1"))
               (rule "simplifyUpdate2" (formula "3") (term "1,1"))
               (rule "simplifyUpdate2" (formula "3") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "0"))
               (rule "simplifyUpdate1" (formula "3") (term "1,0"))
               (rule "applyOnPV" (formula "3") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
               (rule "applyOnPV" (formula "3") (term "0,1,1"))
               (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
               (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "4"))
               (rule "concrete_and_3" (formula "3") (term "1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
               (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "3") (term "1"))
               (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
               (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,1,0,0"))
               (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "4"))
               (rule "concrete_and_3" (formula "2") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
               (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
               (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "11"))
               (rule "concrete_and_2" (formula "2") (term "1,0"))
               (rule "concrete_or_4" (formula "2") (term "0"))
               (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
               (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
               (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1,1"))
               (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "2") (term "1,1"))
               (rule "concrete_and_4" (formula "2") (term "1"))
               (rule "concrete_or_4" (formula "2"))
               (rule "notLeft" (formula "2"))
               (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "10"))
               (rule "concrete_not_2" (formula "2") (term "1"))
               (rule "concrete_eq_3" (formula "2"))
               (rule "applyOnRigidFormula" (formula "10"))
               (rule "applyOnPV" (formula "10") (term "0"))
               (rule "simplifyUpdate1Rigid" (formula "10") (term "1"))
               (rule "applyEqRigid" (formula "13") (term "0,1,0,0,1,1,0") (ifseqformula "3"))
               (rule "applyEqRigid" (formula "13") (term "0,0,0,0,1,1,0") (ifseqformula "2"))
               (rule "apply_eq_boolean" (formula "13") (term "0,1,0,1,1,0") (ifseqformula "10"))
               (rule "ifSplit" (formula "14"))
               (branch "if returns_0 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if returns_0 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "10"))
                  (rule "simplifyUpdate1" (formula "10") (term "1"))
                  (rule "applyOnPV" (formula "10") (term "0"))
                  (rule "boolean_not_equal_2" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=boolv"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "boolv_2"))
                  (rule "inequality_comparison_simple" (formula "14") (term "1"))
                  (rule "sequentialToParallel2" (formula "14"))
                  (rule "simplifyUpdate3" (formula "14") (term "1,0"))
                  (rule "applyOnElementary" (formula "14") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
                  (rule "eqClose" (formula "14") (term "0,0,1,0"))
                  (rule "ifthenelse_true" (formula "14") (term "0,1,0"))
                  (rule "ifSplit" (formula "13"))
                  (branch "if returns_1 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if returns_1 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "10"))
                     (rule "simplifyUpdate1" (formula "10") (term "1"))
                     (rule "applyOnPV" (formula "10") (term "0"))
                     (rule "boolean_not_equal_2" (formula "10"))
                     (rule "false_right" (formula "10"))
                     (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=boolv"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "boolv_3"))
                     (rule "inequality_comparison_simple" (formula "13") (term "1"))
                     (rule "sequentialToParallel2" (formula "13"))
                     (rule "simplifyUpdate3" (formula "13") (term "1,0"))
                     (rule "applyOnElementary" (formula "13") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "13") (term "0,0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0"))
                     (rule "eqClose" (formula "13") (term "0,0,1,0"))
                     (rule "ifthenelse_true" (formula "13") (term "0,1,0"))
                     (rule "ifSplit" (formula "14"))
                     (branch "if boolv_2 true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if boolv_2 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "simplifyUpdate1" (formula "10") (term "1"))
                        (rule "applyOnPV" (formula "10") (term "0"))
                        (rule "boolean_not_equal_2" (formula "10"))
                        (rule "false_right" (formula "10"))
                        (rule "blockEmpty" (formula "14") (term "1") (newnames "normal_2,exc_2,returns_2,result_3,C_C"))
                        (rule "abstractExecutionNonVoid" (formula "14") (term "1") (inst "#label=_label4") (inst "#v1=v1") (inst "result=result_C_0") (inst "returns=returns_C_0") (inst "exc=exc_C_0") (inst "normal=normal_C_0"))
                        (rule "concrete_and_3" (formula "14") (term "0,0,1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "14") (term "0,1"))
                        (rule "simplifyUpdate2" (formula "14") (term "0,1"))
                        (rule "impRight" (formula "14"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1"))
                        (rule "notLeft" (formula "3"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "simplifyUpdate2" (formula "1") (term "1"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                        (rule "applyOnAbstractUpdate" (formula "19") (term "1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "19") (term "2,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "19") (term "1,1,0"))
                        (rule "simplifyUpdate1" (formula "19") (term "0,1,0"))
                        (rule "sequentialToParallel2" (formula "19"))
                        (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "4"))
                        (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
                        (rule "applyOnPV" (formula "4") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3"))
                        (rule "simplifyUpdate2" (formula "3") (term "1"))
                        (rule "simplifyUpdate2" (formula "3") (term "0"))
                        (rule "applyOnRigidFormula" (formula "14"))
                        (rule "simplifyUpdate1" (formula "14") (term "1"))
                        (rule "applyOnPV" (formula "14") (term "0"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3") (term "1"))
                        (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0"))
                        (rule "applyOnPV" (formula "3") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                        (rule "applyOnPV" (formula "3") (term "0,1,1"))
                        (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "4"))
                        (rule "concrete_and_3" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                        (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                        (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                        (rule "applyOnRigidFormula" (formula "3") (term "1"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                        (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
                        (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "4"))
                        (rule "concrete_not_1" (formula "2") (term "1,1"))
                        (rule "concrete_and_4" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                        (rule "simplifyUpdate1" (formula "3") (term "1,0,1"))
                        (rule "applyOnPV" (formula "3") (term "0,0,1"))
                        (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "14"))
                        (rule "concrete_not_2" (formula "3") (term "1"))
                        (rule "concrete_eq_3" (formula "3"))
                        (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                        (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
                        (rule "applyOnPV" (formula "2") (term "0,0,1"))
                        (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "14"))
                        (rule "concrete_and_2" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "2"))
                        (rule "simplifyUpdate1Rigid" (formula "2") (term "1"))
                        (rule "applyOnPV" (formula "2") (term "0"))
                        (rule "applyOnRigidFormula" (formula "13"))
                        (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                        (rule "applyOnPV" (formula "13") (term "0"))
                        (rule "applyEq" (formula "18") (term "0,1,0,0,1,0") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "18") (term "0,0,0,0,1,0") (ifseqformula "2"))
                        (rule "apply_eq_boolean_rigid" (formula "18") (term "0,1,0,1,0") (ifseqformula "13"))
                        (rule "ifSplit" (formula "17"))
                        (branch "if boolv_3 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if boolv_3 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "13"))
                           (rule "simplifyUpdate1" (formula "13") (term "1"))
                           (rule "applyOnPV" (formula "13") (term "0"))
                           (rule "boolean_not_equal_2" (formula "13"))
                           (rule "false_right" (formula "13"))
                           (rule "blockEmpty" (formula "17") (term "1"))
                           (rule "abstractExecutionNonVoid" (formula "17") (term "1") (inst "#label=_label5") (inst "#v1=v1") (inst "result=result_C_0") (inst "returns=returns_C_0") (inst "exc=exc_C_0") (inst "normal=normal_C_0"))
                           (rule "concrete_and_3" (formula "17") (term "0,0,1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                           (rule "impRight" (formula "17"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "1") (term "1"))
                           (rule "notLeft" (formula "3"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "simplifyUpdate2" (formula "1") (term "1"))
                           (rule "sequentialToParallel2" (formula "22"))
                           (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                           (rule "applyOnAbstractUpdate" (formula "22") (term "1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "22") (term "1,1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "22") (term "2,1,0"))
                           (rule "simplifyUpdate1" (formula "22") (term "0,1,0"))
                           (rule "sequentialToParallel2" (formula "22"))
                           (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "4"))
                           (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
                           (rule "applyOnPV" (formula "4") (term "0"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate2" (formula "3") (term "1"))
                           (rule "simplifyUpdate2" (formula "3") (term "0"))
                           (rule "applyOnRigidFormula" (formula "16"))
                           (rule "applyOnPV" (formula "16") (term "0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "0"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                           (rule "applyOnRigidFormula" (formula "2") (term "1"))
                           (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "2") (term "0"))
                           (rule "applyOnPV" (formula "2") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                           (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "4"))
                           (rule "concrete_eq_1" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "2"))
                           (rule "concrete_not_1" (formula "1") (term "1,1,1"))
                           (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                           (rule "concrete_and_4" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "2"))
                           (rule "simplifyUpdate1" (formula "2") (term "1"))
                           (rule "applyOnPV" (formula "2") (term "0"))
                           (rule "applyOnRigidFormula" (formula "14"))
                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                           (rule "applyOnPV" (formula "14") (term "0"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "1") (term "0"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1"))
                           (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "14"))
                           (rule "concrete_and_2" (formula "1") (term "1"))
                           (rule "concrete_or_4" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "13"))
                           (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                           (rule "applyOnPV" (formula "13") (term "0"))
                           (rule "applyEq" (formula "17") (term "0,1,0,0,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "17") (term "0,0,0,0,1,0") (ifseqformula "2"))
                           (rule "apply_eq_boolean" (formula "17") (term "0,1,0,1,0") (ifseqformula "13"))
                           (rule "ifSplit" (formula "18"))
                           (branch "if returns_2 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "boolean_not_equal_2" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if returns_2 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "13"))
                              (rule "simplifyUpdate1" (formula "13") (term "1"))
                              (rule "applyOnPV" (formula "13") (term "0"))
                              (rule "boolean_not_equal_2" (formula "13"))
                              (rule "false_right" (formula "13"))
                              (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "18") (term "1") (newnames "boolv_4"))
                              (rule "inequality_comparison_simple" (formula "18") (term "1"))
                              (rule "sequentialToParallel2" (formula "18"))
                              (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                              (rule "applyOnElementary" (formula "18") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
                              (rule "eqClose" (formula "18") (term "0,0,1,0"))
                              (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
                              (rule "ifSplit" (formula "17"))
                              (branch "if returns_2 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if returns_2 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "13"))
                                 (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                 (rule "applyOnPV" (formula "13") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "13"))
                                 (rule "false_right" (formula "13"))
                                 (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                                 (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_5"))
                                 (rule "inequality_comparison_simple" (formula "17") (term "1"))
                                 (rule "sequentialToParallel2" (formula "17"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                                 (rule "eqClose" (formula "17") (term "0,0,1,0"))
                                 (rule "ifthenelse_true" (formula "17") (term "0,1,0"))
                                 (rule "ifSplit" (formula "18"))
                                 (branch "if boolv_4 true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if boolv_4 false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "13"))
                                    (rule "simplifyUpdate1" (formula "13") (term "1"))
                                    (rule "applyOnPV" (formula "13") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "13"))
                                    (rule "false_right" (formula "13"))
                                    (rule "blockEmpty" (formula "18") (term "1"))
                                    (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label6") (inst "#v1=v1") (inst "result=result_D_0") (inst "returns=returns_D_0") (inst "exc=exc_D_0") (inst "normal=normal_D_0"))
                                    (rule "concrete_and_3" (formula "18") (term "0,0,1,1,0,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                                    (rule "impRight" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "2"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1"))
                                    (rule "sequentialToParallel2" (formula "23"))
                                    (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                    (rule "applyOnAbstractUpdate" (formula "23") (term "1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "23") (term "1,1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "23") (term "2,1,0"))
                                    (rule "simplifyUpdate1" (formula "23") (term "0,1,0"))
                                    (rule "sequentialToParallel2" (formula "23"))
                                    (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "4"))
                                    (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
                                    (rule "applyOnPV" (formula "4") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "3"))
                                    (rule "simplifyUpdate2" (formula "3") (term "1"))
                                    (rule "simplifyUpdate2" (formula "3") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "16"))
                                    (rule "applyOnPV" (formula "16") (term "0"))
                                    (rule "simplifyUpdate1" (formula "16") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                    (rule "applyOnPV" (formula "2") (term "0,0"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                                    (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "7"))
                                    (rule "concrete_eq_1" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                    (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "2"))
                                    (rule "concrete_not_1" (formula "1") (term "1,1,1"))
                                    (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                    (rule "concrete_and_4" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "2"))
                                    (rule "simplifyUpdate1" (formula "2") (term "1"))
                                    (rule "applyOnPV" (formula "2") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "14"))
                                    (rule "simplifyUpdate1" (formula "14") (term "1"))
                                    (rule "applyOnPV" (formula "14") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "7"))
                                    (rule "concrete_and_3" (formula "1") (term "0"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "15"))
                                    (rule "concrete_and_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "13"))
                                    (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                    (rule "applyOnPV" (formula "13") (term "0"))
                                    (rule "applyEqRigid" (formula "18") (term "0,1,0,0,1,0") (ifseqformula "6"))
                                    (rule "apply_eq_boolean" (formula "18") (term "0,1,0,1,0") (ifseqformula "14"))
                                    (rule "applyEqRigid" (formula "18") (term "0,0,0,0,1,0") (ifseqformula "5"))
                                    (rule "ifSplit" (formula "17"))
                                    (branch "if boolv_5 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if boolv_5 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "13"))
                                       (rule "simplifyUpdate1" (formula "13") (term "1"))
                                       (rule "applyOnPV" (formula "13") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "13"))
                                       (rule "false_right" (formula "13"))
                                       (rule "blockEmpty" (formula "17") (term "1"))
                                       (rule "abstractExecutionNonVoid" (formula "17") (term "1") (inst "#label=_label7") (inst "#v1=v1") (inst "result=result_B_0") (inst "returns=returns_B_0") (inst "exc=exc_B_0") (inst "normal=normal_B_0"))
                                       (rule "concrete_and_3" (formula "17") (term "0,0,1,1,0,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                       (rule "impRight" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "2"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1"))
                                       (rule "sequentialToParallel2" (formula "22"))
                                       (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                       (rule "applyOnAbstractUpdate" (formula "22") (term "1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "22") (term "1,1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "22") (term "2,1,0"))
                                       (rule "simplifyUpdate1" (formula "22") (term "0,1,0"))
                                       (rule "sequentialToParallel2" (formula "22"))
                                       (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "4"))
                                       (rule "simplifyUpdate1Rigid" (formula "4") (term "1"))
                                       (rule "applyOnPV" (formula "4") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "3"))
                                       (rule "simplifyUpdate2" (formula "3") (term "1"))
                                       (rule "simplifyUpdate2" (formula "3") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "16"))
                                       (rule "applyOnPV" (formula "16") (term "0"))
                                       (rule "simplifyUpdate1" (formula "16") (term "1"))
                                       (rule "applyOnRigidFormula" (formula "2"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                       (rule "applyOnPV" (formula "2") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                                       (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "10"))
                                       (rule "concrete_eq_1" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "replace_known_left" (formula "1") (term "0,1,1,1") (ifseqformula "2"))
                                       (rule "concrete_not_1" (formula "1") (term "1,1,1"))
                                       (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                       (rule "concrete_and_4" (formula "1") (term "1"))
                                       (rule "concrete_or_4" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "2"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1"))
                                       (rule "applyOnPV" (formula "2") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "14"))
                                       (rule "simplifyUpdate1" (formula "14") (term "1"))
                                       (rule "applyOnPV" (formula "14") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "0"))
                                       (rule "simplifyUpdate2" (formula "1") (term "0,0"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "0,0"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                                       (rule "applyOnPV" (formula "1") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "10"))
                                       (rule "concrete_and_3" (formula "1") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
                                       (rule "applyOnPV" (formula "1") (term "0,0,1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1,0,1"))
                                       (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "16"))
                                       (rule "concrete_and_2" (formula "1") (term "1"))
                                       (rule "concrete_or_4" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "13"))
                                       (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                       (rule "applyOnPV" (formula "13") (term "0"))
                                       (rule "apply_eq_boolean" (formula "17") (term "0,1,0,1,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "17") (term "0,1,0,0,1,0") (ifseqformula "9"))
                                       (rule "applyEq" (formula "17") (term "0,0,0,0,1,0") (ifseqformula "8"))
                                       (rule "ifSplit" (formula "18"))
                                       (branch "if returns_1 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if returns_1 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "13"))
                                          (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                          (rule "applyOnPV" (formula "13") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "13"))
                                          (rule "false_right" (formula "13"))
                                          (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "18") (term "1") (newnames "boolv_6"))
                                          (rule "inequality_comparison_simple" (formula "18") (term "1"))
                                          (rule "sequentialToParallel2" (formula "18"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                                          (rule "applyOnElementary" (formula "18") (term "1,0"))
                                          (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
                                          (rule "eqClose" (formula "18") (term "0,0,1,0"))
                                          (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
                                          (rule "ifSplit" (formula "17"))
                                          (branch "if returns_0 true"
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if returns_0 false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "13"))
                                             (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                             (rule "applyOnPV" (formula "13") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "13"))
                                             (rule "false_right" (formula "13"))
                                             (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "17") (term "1") (newnames "boolv_7"))
                                             (rule "inequality_comparison_simple" (formula "17") (term "1"))
                                             (rule "sequentialToParallel2" (formula "17"))
                                             (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                             (rule "applyOnElementary" (formula "17") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
                                             (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
                                             (rule "eqClose" (formula "17") (term "0,0,1,0"))
                                             (rule "ifthenelse_true" (formula "17") (term "0,1,0"))
                                             (rule "ifSplit" (formula "18"))
                                             (branch "if boolv_6 true"
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                (rule "applyOnPV" (formula "1") (term "0"))
                                                (rule "boolean_not_equal_2" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "if boolv_6 false"
                                                (rule "false_to_not_true" (formula "1") (term "1"))
                                                (rule "simplifyUpdate2" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyOnRigidFormula" (formula "13"))
                                                (rule "simplifyUpdate1" (formula "13") (term "1"))
                                                (rule "applyOnPV" (formula "13") (term "0"))
                                                (rule "boolean_not_equal_2" (formula "13"))
                                                (rule "false_right" (formula "13"))
                                                (rule "blockEmpty" (formula "18") (term "1") (newnames "normal_3,exc_3,returns_3,result_4,C_E"))
                                                (rule "abstractExecutionNonVoid" (formula "18") (term "1") (inst "#label=_label8") (inst "#v1=v1") (inst "result=result_E_0") (inst "returns=returns_E_0") (inst "exc=exc_E_0") (inst "normal=normal_E_0"))
                                                (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                                                (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                                                (rule "concrete_and_3" (formula "18") (term "1,1,0,1"))
                                                (rule "simplifyUpdate2" (formula "18"))
                                                (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                                (rule "simplifyUpdate2" (formula "18") (term "1,0,1"))
                                                (rule "impRight" (formula "18"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1"))
                                                (rule "simplifyUpdate2" (formula "2"))
                                                (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1"))
                                                (rule "simplifyUpdate2" (formula "2"))
                                                (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                (rule "sequentialToParallel2" (formula "21"))
                                                (rule "applyOnAbstractUpdate" (formula "21") (term "1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "6,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "5,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "4,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "3,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "2,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "21") (term "1,1,0"))
                                                (rule "simplifyUpdate1" (formula "21") (term "0,1,0"))
                                                (rule "sequentialToParallel2" (formula "1"))
                                                (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "2,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "3,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "4,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "5,1,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "6,1,0"))
                                                (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
                                                (rule "sequentialToParallel2" (formula "21"))
                                                (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                (rule "applyOnRigidFormula" (formula "3"))
                                                (rule "simplifyUpdate2" (formula "3") (term "0"))
                                                (rule "simplifyUpdate2" (formula "3") (term "1"))
                                                (rule "applyOnRigidFormula" (formula "2"))
                                                (rule "applyOnRigidFormula" (formula "1"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "6"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "5"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "4"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "3"))
                                                (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                                                (rule "simplifyUpdate1" (formula "1") (term "0"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "0"))
                                                (rule "simplifyUpdate1" (formula "3") (term "1,0"))
                                                (rule "applyOnPV" (formula "3") (term "0,0"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "1"))
                                                (rule "simplifyUpdate2" (formula "3") (term "0,1"))
                                                (rule "simplifyUpdate2" (formula "3") (term "1,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                                (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
                                                (rule "applyOnPV" (formula "3") (term "0,1,1"))
                                                (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
                                                (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
                                                (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
                                                (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "3") (term "0,0,1"))
                                                (rule "applyOnPV" (formula "3") (term "0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "3") (term "1,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
                                                (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1,1"))
                                                (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                                (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                                (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,0,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1,0,0"))
                                                (rule "simplifyUpdate1Rigid" (formula "2") (term "1,1,0,0"))
                                                (rule "applyOnPV" (formula "2") (term "0,1,0,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "1,1,0"))
                                                (rule "applyOnPV" (formula "2") (term "0,1,1,0"))
                                                (rule "simplifyUpdate1" (formula "2") (term "1,1,1,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
                                                (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
                                                (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
                                                (rule "applyOnRigidFormula" (formula "2") (term "0,0,0,0"))
                                                (rule "applyOnPV" (formula "2") (term "0,0,0,0,0"))
                                                (rule "simplifyUpdate1" (formula "2") (term "1,0,0,0,0"))
                                                (rule "cnf_rightDist" (formula "2") (term "0"))
                                                (rule "commute_or" (formula "2") (term "0,0"))
                                                (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                                (rule "eq_or" (formula "2") (term "1,1,0"))
                                                (rule "commute_or" (formula "2") (term "0,1,0"))
                                                (rule "commute_and" (formula "2") (term "1,0"))
                                                (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                                (rule "neq_or" (formula "2") (term "0,0,0"))
                                                (rule "concrete_and_1" (formula "2") (term "0,0"))
                                                (rule "commute_or" (formula "2") (term "0,0"))
                                                (rule "shift_paren_and" (formula "2") (term "0"))
                                                (rule "cnf_rightDist" (formula "2"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "commute_or" (formula "2"))
                                                (rule "cnf_rightDist" (formula "3"))
                                                (rule "neq_or_3" (formula "3") (term "1"))
                                                (rule "concrete_and_3" (formula "3"))
                                                (rule "cnf_rightDist" (formula "2"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "commute_or_2" (formula "3"))
                                                (rule "eq_or" (formula "3") (term "0"))
                                                (rule "cnf_rightDist" (formula "4"))
                                                (rule "neq_or" (formula "4") (term "1"))
                                                (rule "concrete_and_3" (formula "4"))
                                                (rule "shift_paren_or" (formula "4"))
                                                (rule "commute_or" (formula "4") (term "0"))
                                                (rule "neq_or_4" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "cnf_rightDist" (formula "2"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "commute_or" (formula "3"))
                                                (rule "shift_paren_or" (formula "2"))
                                                (rule "neq_or_2" (formula "2") (term "0"))
                                                (rule "concrete_or_1" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "ifSplit" (formula "20"))
                                                (branch "if boolv_7 true"
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                   (rule "applyOnPV" (formula "1") (term "0"))
                                                   (rule "boolean_not_equal_2" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "if boolv_7 false"
                                                   (rule "false_to_not_true" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "applyOnRigidFormula" (formula "16"))
                                                   (rule "applyOnPV" (formula "16") (term "0"))
                                                   (rule "simplifyUpdate1" (formula "16") (term "1"))
                                                   (rule "boolean_not_equal_2" (formula "16"))
                                                   (rule "false_right" (formula "16"))
                                                   (rule "blockEmpty" (formula "20") (term "1"))
                                                   (rule "abstractExecutionNonVoid" (formula "20") (term "1") (inst "#label=_label9") (inst "#v1=v1") (inst "result=result_E_0") (inst "returns=returns_E_0") (inst "exc=exc_E_0") (inst "normal=normal_E_0"))
                                                   (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                                   (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                                   (rule "concrete_and_3" (formula "20") (term "1,1,0,1"))
                                                   (rule "simplifyUpdate2" (formula "20"))
                                                   (rule "simplifyUpdate2" (formula "20") (term "1,1,1"))
                                                   (rule "simplifyUpdate2" (formula "20") (term "1,0,1"))
                                                   (rule "impRight" (formula "20"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "2") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "2"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "simplifyUpdate2" (formula "2") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "2"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "sequentialToParallel2" (formula "23"))
                                                   (rule "applyOnAbstractUpdate" (formula "23") (term "1,0"))
                                                   (rule "simplifyUpdate1" (formula "23") (term "0,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "1,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "2,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "3,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "4,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "5,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "23") (term "6,1,0"))
                                                   (rule "sequentialToParallel2" (formula "1"))
                                                   (rule "applyOnAbstractUpdate" (formula "1") (term "1,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "0,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "2,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "3,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "4,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "5,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "6,1,0"))
                                                   (rule "sequentialToParallel2" (formula "23"))
                                                   (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                                   (rule "applyOnRigidFormula" (formula "3"))
                                                   (rule "simplifyUpdate2" (formula "3") (term "0"))
                                                   (rule "simplifyUpdate2" (formula "3") (term "1"))
                                                   (rule "applyOnRigidFormula" (formula "2"))
                                                   (rule "applyOnRigidFormula" (formula "1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "2"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "3"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "4"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "5"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "6"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "0"))
                                                   (rule "applyOnPV" (formula "2") (term "0,0"))
                                                   (rule "simplifyUpdate1" (formula "2") (term "1,0"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "2") (term "1,1"))
                                                   (rule "simplifyUpdate2" (formula "2") (term "0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
                                                   (rule "applyOnPV" (formula "2") (term "0,1,1"))
                                                   (rule "simplifyUpdate1" (formula "2") (term "1,1,1"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,0"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,0,0"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "0,0,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1,0"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "1,1,0"))
                                                   (rule "simplifyUpdate2" (formula "1") (term "0,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
                                                   (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
                                                   (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,1,1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,0,1"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,1"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,0,1"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1,0,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,0,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "1,1,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,1,1,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,1,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,1,0"))
                                                   (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,1,0"))
                                                   (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0"))
                                                   (rule "applyOnPV" (formula "1") (term "0,0,0,0,0"))
                                                   (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0"))
                                                   (rule "cnf_rightDist" (formula "1") (term "0"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                                   (rule "eq_or" (formula "1") (term "1,1,0"))
                                                   (rule "commute_or" (formula "1") (term "0,1,0"))
                                                   (rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "concrete_and_1" (formula "1") (term "1,0"))
                                                   (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                                   (rule "neq_or" (formula "1") (term "0,0,0"))
                                                   (rule "concrete_and_1" (formula "1") (term "0,0"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "commute_and" (formula "1") (term "0"))
                                                   (rule "cnf_rightDist" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "commute_or" (formula "1"))
                                                   (rule "cnf_rightDist" (formula "2"))
                                                   (rule "neq_or_2" (formula "2") (term "0"))
                                                   (rule "concrete_and_1" (formula "2"))
                                                   (rule "neq_or_3" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "cnf_rightDist" (formula "1"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "commute_or_2" (formula "1"))
                                                   (rule "neq_or" (formula "1") (term "0"))
                                                   (rule "concrete_or_1" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "ifSplit" (formula "21"))
                                                   (branch "if returns_3 true"
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "1"))
                                                      (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                      (rule "applyOnPV" (formula "1") (term "0"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "1"))
                                                      (rule "concrete_not_1" (formula "3") (term "0"))
                                                      (rule "concrete_or_2" (formula "3"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "1"))
                                                      (rule "concrete_not_1" (formula "4") (term "0,1"))
                                                      (rule "concrete_and_2" (formula "4") (term "1"))
                                                      (rule "concrete_eq_4" (formula "4"))
                                                      (rule "notLeft" (formula "4"))
                                                      (rule "blockReturn" (formula "22") (term "1"))
                                                      (rule "blockReturn" (formula "22") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "applyEq" (formula "21") (term "0,0,0,1,0") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "21") (term "0,1,0,1,0") (ifseqformula "1"))
                                                      (rule "methodCallReturn" (formula "22") (term "1"))
                                                      (rule "assignment" (formula "22") (term "1"))
                                                      (rule "sequentialToParallel2" (formula "22"))
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                      (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                      (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                                      (rule "methodCallEmpty" (formula "22") (term "1"))
                                                      (rule "tryEmpty" (formula "22") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "emptyModality" (formula "22") (term "1"))
                                                      (rule "applyOnRigidFormula" (formula "22"))
                                                      (rule "applyOnPV" (formula "22") (term "0"))
                                                      (rule "ifSplit" (formula "21"))
                                                      (branch "if returns_3 true"
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "simplifyUpdate2" (formula "22"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "boolean_equal" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "blockReturn" (formula "21") (term "1"))
                                                         (rule "blockReturn" (formula "21") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "methodCallReturn" (formula "21") (term "1"))
                                                         (rule "assignment" (formula "21") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "21"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                         (rule "applyOnPV" (formula "21") (term "0,1,0"))
                                                         (rule "methodCallEmpty" (formula "21") (term "1"))
                                                         (rule "tryEmpty" (formula "21") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "emptyModality" (formula "21") (term "1"))
                                                         (rule "notRight" (formula "21"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "close" (formula "22") (ifseqformula "1"))
                                                      )
                                                      (branch "if returns_3 false"
                                                         (rule "false_to_not_true" (formula "1") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "22"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "16"))
                                                         (rule "applyOnPV" (formula "16") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "16") (term "1"))
                                                         (rule "boolean_equal" (formula "16"))
                                                         (rule "closeTrue" (formula "16"))
                                                      )
                                                   )
                                                   (branch "if returns_3 false"
                                                      (rule "false_to_not_true" (formula "1") (term "1"))
                                                      (rule "simplifyUpdate2" (formula "22"))
                                                      (rule "simplifyUpdate2" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "applyOnRigidFormula" (formula "16"))
                                                      (rule "applyOnPV" (formula "16") (term "0"))
                                                      (rule "simplifyUpdate1" (formula "16") (term "1"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "16"))
                                                      (rule "concrete_not_2" (formula "2") (term "0"))
                                                      (rule "concrete_or_1" (formula "2"))
                                                      (rule "true_left" (formula "2"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "15"))
                                                      (rule "concrete_not_2" (formula "2") (term "0,1"))
                                                      (rule "concrete_and_1" (formula "2") (term "1"))
                                                      (rule "apply_eq_boolean_rigid" (formula "20") (term "0,1,0,1,0") (ifseqformula "15"))
                                                      (rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=boolv"))
                                                      (rule "variableDeclaration" (formula "21") (term "1") (newnames "boolv_8"))
                                                      (rule "inequality_comparison_simple" (formula "21") (term "1"))
                                                      (rule "sequentialToParallel2" (formula "21"))
                                                      (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                      (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                      (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                                      (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                                      (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                                      (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                                                      (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                                                      (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                                                      (rule "ifSplit" (formula "20"))
                                                      (branch "if returns_3 true"
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "applyOnRigidFormula" (formula "1"))
                                                         (rule "applyOnPV" (formula "1") (term "0"))
                                                         (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                         (rule "boolean_not_equal_2" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "if returns_3 false"
                                                         (rule "false_to_not_true" (formula "1") (term "1"))
                                                         (rule "simplifyUpdate2" (formula "21"))
                                                         (rule "simplifyUpdate2" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "applyOnRigidFormula" (formula "15"))
                                                         (rule "simplifyUpdate1Rigid" (formula "15") (term "1"))
                                                         (rule "applyOnPV" (formula "15") (term "0"))
                                                         (rule "boolean_not_equal_2" (formula "15"))
                                                         (rule "false_right" (formula "15"))
                                                         (rule "ifUnfold" (formula "20") (term "1") (inst "#boolv=boolv"))
                                                         (rule "variableDeclaration" (formula "20") (term "1") (newnames "boolv_9"))
                                                         (rule "inequality_comparison_simple" (formula "20") (term "1"))
                                                         (rule "sequentialToParallel2" (formula "20"))
                                                         (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                                                         (rule "applyOnElementary" (formula "20") (term "1,0"))
                                                         (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
                                                         (rule "applyOnRigidFormula" (formula "20") (term "0,0,1,0"))
                                                         (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0"))
                                                         (rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
                                                         (rule "ifSplit" (formula "21"))
                                                         (branch "if boolv_8 true"
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "simplifyUpdate2" (formula "22"))
                                                            (rule "applyOnRigidFormula" (formula "1"))
                                                            (rule "applyOnPV" (formula "1") (term "0"))
                                                            (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                            (rule "ifthenelse_concrete4" (formula "1"))
                                                            (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                                            (rule "concrete_or_4" (formula "1"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "15"))
                                                            (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                                                            (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "15"))
                                                            (rule "concrete_eq_4" (formula "2"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "blockThrow" (formula "22") (term "1"))
                                                            (rule "blockThrow" (formula "22") (term "1"))
                                                            (rule "methodCallParamThrow" (formula "22") (term "1"))
                                                            (rule "tryCatchThrow" (formula "22") (term "1"))
                                                            (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=boolv"))
                                                            (rule "variableDeclaration" (formula "22") (term "1") (newnames "boolv_10"))
                                                            (rule "equality_comparison_simple" (formula "22") (term "1"))
                                                            (rule "sequentialToParallel2" (formula "22"))
                                                            (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                            (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                            (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
                                                            (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
                                                            (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
                                                            (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
                                                            (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
                                                            (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
                                                            (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "15"))
                                                            (rule "ifthenelse_false" (formula "22") (term "0,1,0"))
                                                            (rule "ifSplit" (formula "21"))
                                                            (branch "if boolv_9 true"
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                               (rule "boolean_equal" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "blockThrow" (formula "21") (term "1"))
                                                               (rule "blockThrow" (formula "21") (term "1"))
                                                               (rule "methodCallParamThrow" (formula "21") (term "1"))
                                                               (rule "tryCatchThrow" (formula "21") (term "1"))
                                                               (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=boolv"))
                                                               (rule "variableDeclaration" (formula "21") (term "1") (newnames "boolv_11"))
                                                               (rule "equality_comparison_simple" (formula "21") (term "1"))
                                                               (rule "sequentialToParallel2" (formula "21"))
                                                               (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                               (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                               (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                                                               (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                                                               (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                                                               (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                                                               (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                                                               (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                                                               (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "15"))
                                                               (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                                                               (rule "ifElseSplit" (formula "22"))
                                                               (branch "if boolv_10 true"
                                                                  (rule "simplifyUpdate2" (formula "23"))
                                                                  (rule "simplifyUpdate2" (formula "1"))
                                                                  (rule "applyOnRigidFormula" (formula "1"))
                                                                  (rule "applyOnPV" (formula "1") (term "0"))
                                                                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                                  (rule "boolean_not_equal_2" (formula "1"))
                                                                  (rule "closeFalse" (formula "1"))
                                                               )
                                                               (branch "if boolv_10 false"
                                                                  (rule "false_to_not_true" (formula "1") (term "1"))
                                                                  (rule "simplifyUpdate2" (formula "23"))
                                                                  (rule "simplifyUpdate2" (formula "1"))
                                                                  (rule "notLeft" (formula "1"))
                                                                  (rule "applyOnRigidFormula" (formula "14"))
                                                                  (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                                                  (rule "applyOnPV" (formula "14") (term "0"))
                                                                  (rule "boolean_not_equal_2" (formula "14"))
                                                                  (rule "false_right" (formula "14"))
                                                                  (rule "elim_double_block" (formula "22") (term "1"))
                                                                  (rule "ifElseSplit" (formula "21"))
                                                                  (branch "if boolv_11 true"
                                                                     (rule "simplifyUpdate2" (formula "1"))
                                                                     (rule "simplifyUpdate2" (formula "22"))
                                                                     (rule "applyOnRigidFormula" (formula "1"))
                                                                     (rule "applyOnPV" (formula "1") (term "0"))
                                                                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                                     (rule "boolean_not_equal_2" (formula "1"))
                                                                     (rule "closeFalse" (formula "1"))
                                                                  )
                                                                  (branch "if boolv_11 false"
                                                                     (rule "false_to_not_true" (formula "1") (term "1"))
                                                                     (rule "simplifyUpdate2" (formula "22"))
                                                                     (rule "simplifyUpdate2" (formula "1"))
                                                                     (rule "notLeft" (formula "1"))
                                                                     (rule "applyOnRigidFormula" (formula "14"))
                                                                     (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                                                     (rule "applyOnPV" (formula "14") (term "0"))
                                                                     (rule "boolean_not_equal_2" (formula "14"))
                                                                     (rule "false_right" (formula "14"))
                                                                     (rule "elim_double_block" (formula "21") (term "1"))
                                                                     (rule "ifElseSplit" (formula "22"))
                                                                     (branch "if exc_3 instanceof Throwable true"
                                                                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                                        (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                                        (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                                        (rule "concrete_or_4" (formula "1") (term "1"))
                                                                        (rule "simplifyUpdate2" (formula "1"))
                                                                        (rule "notLeft" (formula "1"))
                                                                        (rule "applyOnRigidFormula" (formula "14"))
                                                                        (rule "simplifyUpdate1" (formula "14") (term "1"))
                                                                        (rule "applyOnPV" (formula "14") (term "0"))
                                                                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "t"))
                                                                        (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                                                                        (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                                        (rule "boolean_equal" (formula "1") (term "1,1"))
                                                                        (rule "concrete_or_3" (formula "1") (term "1"))
                                                                        (rule "true_left" (formula "1"))
                                                                        (rule "sequentialToParallel2" (formula "22"))
                                                                        (rule "simplifyUpdate2" (formula "22"))
                                                                        (rule "simplifyUpdate3" (formula "22") (term "1,0"))
                                                                        (rule "applyOnElementary" (formula "22") (term "1,0"))
                                                                        (rule "applyOnPV" (formula "22") (term "0,1,0"))
                                                                        (rule "assignment" (formula "22") (term "1"))
                                                                        (rule "sequentialToParallel2" (formula "22"))
                                                                        (rule "simplifyUpdate2" (formula "22"))
                                                                        (rule "simplifyUpdate3" (formula "22") (term "0"))
                                                                        (rule "applyOnElementary" (formula "22") (term "0"))
                                                                        (rule "applyOnPV" (formula "22") (term "0,0"))
                                                                        (rule "emptyModality" (formula "22") (term "1"))
                                                                        (rule "applyOnRigidFormula" (formula "22"))
                                                                        (rule "applyOnPV" (formula "22") (term "0"))
                                                                        (rule "ifElseSplit" (formula "21"))
                                                                        (branch "if exc_3 instanceof Throwable true"
                                                                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                                           (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                                                                           (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                                                                           (rule "concrete_or_4" (formula "1") (term "1"))
                                                                           (rule "simplifyUpdate2" (formula "1"))
                                                                           (rule "notLeft" (formula "1"))
                                                                           (rule "applyOnRigidFormula" (formula "14"))
                                                                           (rule "applyOnPV" (formula "14") (term "0"))
                                                                           (rule "simplifyUpdate1" (formula "14") (term "1"))
                                                                           (rule "variableDeclaration" (formula "21") (term "1") (newnames "t_1"))
                                                                           (rule "delete_unnecessary_cast" (formula "21") (term "1"))
                                                                           (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                                                                           (rule "boolean_equal" (formula "1") (term "1,1"))
                                                                           (rule "concrete_or_3" (formula "1") (term "1"))
                                                                           (rule "true_left" (formula "1"))
                                                                           (rule "sequentialToParallel2" (formula "21"))
                                                                           (rule "simplifyUpdate2" (formula "21"))
                                                                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                                                                           (rule "applyOnElementary" (formula "21") (term "1,0"))
                                                                           (rule "applyOnPV" (formula "21") (term "0,1,0"))
                                                                           (rule "assignment" (formula "21") (term "1"))
                                                                           (rule "sequentialToParallel2" (formula "21"))
                                                                           (rule "simplifyUpdate2" (formula "21"))
                                                                           (rule "simplifyUpdate3" (formula "21") (term "0"))
                                                                           (rule "applyOnElementary" (formula "21") (term "0"))
                                                                           (rule "applyOnPV" (formula "21") (term "0,0"))
                                                                           (rule "emptyModality" (formula "21") (term "1"))
                                                                           (rule "notRight" (formula "21"))
                                                                           (rule "applyOnRigidFormula" (formula "1"))
                                                                           (rule "applyOnPV" (formula "1") (term "0"))
                                                                           (rule "close" (formula "22") (ifseqformula "1"))
                                                                        )
                                                                        (branch "if exc_3 instanceof Throwable false"
                                                                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                                           (rule "false_to_not_true" (formula "1") (term "1"))
                                                                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                                           (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                                           (rule "double_not" (formula "1") (term "1"))
                                                                           (rule "simplifyUpdate2" (formula "1"))
                                                                           (rule "applyOnRigidFormula" (formula "1"))
                                                                           (rule "applyOnPV" (formula "1") (term "0"))
                                                                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                                           (rule "close" (formula "16") (ifseqformula "1"))
                                                                        )
                                                                     )
                                                                     (branch "if exc_3 instanceof Throwable false"
                                                                        (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                                                                        (rule "false_to_not_true" (formula "1") (term "1"))
                                                                        (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                                                                        (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                                                                        (rule "concrete_or_4" (formula "1") (term "0,1"))
                                                                        (rule "double_not" (formula "1") (term "1"))
                                                                        (rule "simplifyUpdate2" (formula "1"))
                                                                        (rule "applyOnRigidFormula" (formula "1"))
                                                                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                                                        (rule "applyOnPV" (formula "1") (term "0"))
                                                                        (rule "close" (formula "16") (ifseqformula "1"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                            (branch "if boolv_9 false"
                                                               (rule "false_to_not_true" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "14"))
                                                               (rule "simplifyUpdate1Rigid" (formula "14") (term "1"))
                                                               (rule "applyOnPV" (formula "14") (term "0"))
                                                               (rule "boolean_equal" (formula "14"))
                                                               (rule "closeTrue" (formula "14"))
                                                            )
                                                         )
                                                         (branch "if boolv_8 false"
                                                            (rule "false_to_not_true" (formula "1") (term "1"))
                                                            (rule "simplifyUpdate2" (formula "22"))
                                                            (rule "simplifyUpdate2" (formula "1"))
                                                            (rule "notLeft" (formula "1"))
                                                            (rule "applyOnRigidFormula" (formula "15"))
                                                            (rule "simplifyUpdate1" (formula "15") (term "1"))
                                                            (rule "applyOnPV" (formula "15") (term "0"))
                                                            (rule "ifthenelse_concrete4" (formula "15"))
                                                            (rule "boolean_not_equal_2" (formula "15") (term "1"))
                                                            (rule "concrete_or_4" (formula "15"))
                                                            (rule "notRight" (formula "15"))
                                                            (rule "replace_known_left" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
                                                            (rule "ifthenelse_true" (formula "21") (term "0,1,0"))
                                                            (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                                                            (rule "concrete_eq_3" (formula "3"))
                                                            (rule "blockEmpty" (formula "22") (term "1"))
                                                            (rule "applyEq" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                                                            (rule "methodCallReturn" (formula "22") (term "1"))
                                                            (rule "assignment" (formula "22") (term "1"))
                                                            (rule "elimSelfSingleUpdateFor" (formula "22") (term "1"))
                                                            (rule "methodCallEmpty" (formula "22") (term "1"))
                                                            (rule "tryEmpty" (formula "22") (term "1"))
                                                            (rule "emptyModality" (formula "22") (term "1"))
                                                            (rule "applyOnRigidFormula" (formula "22"))
                                                            (rule "ifSplit" (formula "21"))
                                                            (branch "if boolv_9 true"
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "applyOnPV" (formula "1") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "1") (term "1"))
                                                               (rule "boolean_not_equal_2" (formula "1"))
                                                               (rule "closeFalse" (formula "1"))
                                                            )
                                                            (branch "if boolv_9 false"
                                                               (rule "false_to_not_true" (formula "1") (term "1"))
                                                               (rule "simplifyUpdate2" (formula "22"))
                                                               (rule "simplifyUpdate2" (formula "1"))
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "applyOnRigidFormula" (formula "16"))
                                                               (rule "applyOnPV" (formula "16") (term "0"))
                                                               (rule "simplifyUpdate1" (formula "16") (term "1"))
                                                               (rule "boolean_not_equal_2" (formula "16"))
                                                               (rule "false_right" (formula "16"))
                                                               (rule "blockEmpty" (formula "21") (term "1"))
                                                               (rule "methodCallReturn" (formula "21") (term "1"))
                                                               (rule "assignment" (formula "21") (term "1"))
                                                               (rule "elimSelfSingleUpdateFor" (formula "21") (term "1"))
                                                               (rule "methodCallEmpty" (formula "21") (term "1"))
                                                               (rule "tryEmpty" (formula "21") (term "1"))
                                                               (rule "emptyModality" (formula "21") (term "1"))
                                                               (rule "notRight" (formula "21"))
                                                               (rule "applyOnRigidFormula" (formula "1"))
                                                               (rule "close" (formula "22") (ifseqformula "1"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
)
}
