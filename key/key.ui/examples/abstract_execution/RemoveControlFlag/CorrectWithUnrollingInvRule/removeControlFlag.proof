\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed May 22 12:59:51 CEST 2019
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:treatAsAxiom , javaLoopTreatment-javaLoopTreatment\\:efficient , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=\\#begboolean_equal_2\\#end,\\#begboolean_not_equal_1\\#end,\\#begboolean_not_equal_2\\#end,\\#begtrue_to_not_false\\#end,\\#begfalse_to_not_true\\#end,\\#begboolean_true_commute\\#end,\\#begboolean_false_commute\\#end,\\#begapply_eq_boolean\\#end,\\#begapply_eq_boolean_2\\#end,\\#begapply_eq_boolean_rigid\\#end,\\#begapply_eq_boolean_rigid_2\\#end,\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end,\\#begreplace_byte_MAX\\#end,\\#begreplace_byte_MIN\\#end,\\#begreplace_char_MAX\\#end,\\#begreplace_char_MIN\\#end,\\#begreplace_short_MAX\\#end,\\#begreplace_short_MIN\\#end,\\#begreplace_int_MAX\\#end,\\#begreplace_int_MIN\\#end,\\#begreplace_long_MAX\\#end,\\#begreplace_long_MIN\\#end,\\#begreplace_byte_RANGE\\#end,\\#begreplace_byte_HALFRANGE\\#end,\\#begreplace_short_RANGE\\#end,\\#begreplace_short_HALFRANGE\\#end,\\#begreplace_char_RANGE\\#end,\\#begreplace_int_RANGE\\#end,\\#begreplace_int_HALFRANGE\\#end,\\#begreplace_long_RANGE\\#end,\\#begreplace_long_HALFRANGE\\#end,\\#begtranslateJavaUnaryMinusInt\\#end,\\#begtranslateJavaUnaryMinusLong\\#end,\\#begtranslateJavaBitwiseNegation\\#end,\\#begtranslateJavaAddInt\\#end,\\#begtranslateJavaAddLong\\#end,\\#begtranslateJavaSubInt\\#end,\\#begtranslateJavaSubLong\\#end,\\#begtranslateJavaMulInt\\#end,\\#begtranslateJavaMulLong\\#end,\\#begtranslateJavaMod\\#end,\\#begtranslateJavaDivInt\\#end,\\#begtranslateJavaDivLong\\#end,\\#begtranslateJavaCastByte\\#end,\\#begtranslateJavaCastShort\\#end,\\#begtranslateJavaCastInt\\#end,\\#begtranslateJavaCastLong\\#end,\\#begtranslateJavaCastChar\\#end,\\#begtranslateJavaShiftRightInt\\#end,\\#begtranslateJavaShiftRightLong\\#end,\\#begtranslateJavaShiftLeftInt\\#end,\\#begtranslateJavaShiftLeftLong\\#end,\\#begtranslateJavaUnsignedShiftRightInt\\#end,\\#begtranslateJavaUnsignedShiftRightLong\\#end,\\#begtranslateJavaBitwiseOrInt\\#end,\\#begtranslateJavaBitwiseOrLong\\#end,\\#begtranslateJavaBitwiseAndInt\\#end,\\#begtranslateJavaBitwiseAndLong\\#end,\\#begtranslateJavaBitwiseXOrInt\\#end,\\#begtranslateJavaBitwiseXOrLong\\#end,\\#begelementOfEmpty\\#end,\\#begelementOfAllLocs\\#end,\\#begelementOfSingleton\\#end,\\#begelementOfUnion\\#end,\\#begelementOfIntersect\\#end,\\#begelementOfSetMinus\\#end,\\#begelementOfAllFields\\#end,\\#begelementOfAllObjects\\#end,\\#begelementOfArrayRange\\#end,\\#begelementOfFreshLocs\\#end,\\#begequalityToElementOf\\#end,\\#begsubsetToElementOf\\#end,\\#begdisjointToElementOf\\#end,\\#begcreatedInHeapToElementOf\\#end,\\#begelementOfEmptyEQ\\#end,\\#begelementOfAllLocsEQ\\#end,\\#begelementOfSingletonEQ\\#end,\\#begelementOfUnionEQ\\#end,\\#begelementOfIntersectEQ\\#end,\\#begelementOfSetMinusEQ\\#end,\\#begelementOfAllFieldsEQ\\#end,\\#begelementOfAllObjectsEQ\\#end,\\#begelementOfArrayRangeEQ\\#end,\\#begelementOfFreshLocsEQ\\#end,\\#begunionWithEmpty1\\#end,\\#begunionWithEmpty2\\#end,\\#begunionWithAllLocs1\\#end,\\#begunionWithAllLocs2\\#end,\\#begintersectWithEmpty1\\#end,\\#begintersectWithEmpty2\\#end,\\#begintersectWithAllLocs1\\#end,\\#begintersectWithAllLocs2\\#end,\\#begsetMinusWithEmpty1\\#end,\\#begsetMinusWithEmpty2\\#end,\\#begsetMinusWithAllLocs\\#end,\\#begsubsetWithEmpty\\#end,\\#begsubsetWithAllLocs\\#end,\\#begdisjointWithEmpty1\\#end,\\#begdisjointWithEmpty2\\#end,\\#begcreatedInHeapWithEmpty\\#end,\\#begcreatedInHeapWithSingleton\\#end,\\#begcreatedInHeapWithUnion\\#end,\\#begcreatedInHeapWithSetMinusFreshLocs\\#end,\\#begcreatedInHeapWithAllFields\\#end,\\#begcreatedInHeapWithArrayRange\\#end,\\#begreferencedObjectIsCreatedRight\\#end,\\#begreferencedObjectIsCreatedRightEQ\\#end,\\#begunionWithItself\\#end,\\#begintersectWithItself\\#end,\\#begsetMinusItself\\#end,\\#begsubsetOfItself\\#end,\\#begselectOfStore\\#end,\\#begselectOfCreate\\#end,\\#begselectOfAnon\\#end,\\#begselectOfMemset\\#end,\\#begonlyCreatedObjectsAreReferenced\\#end,\\#begonlyCreatedObjectsAreInLocSets\\#end,\\#begonlyCreatedObjectsAreInLocSetsEQ\\#end,\\#begarrayLengthNotNegative\\#end,\\#begwellFormedStoreObject\\#end,\\#begwellFormedStoreLocSet\\#end,\\#begwellFormedStorePrimitive\\#end,\\#begwellFormedCreate\\#end,\\#begwellFormedAnon\\#end,\\#begwellFormedMemsetObject\\#end,\\#begwellFormedMemsetLocSet\\#end,\\#begwellFormedMemsetPrimitive\\#end,\\#begselectOfStoreEQ\\#end,\\#begselectOfCreateEQ\\#end,\\#begselectOfAnonEQ\\#end,\\#begselectOfMemsetEQ\\#end,\\#begmemsetEmpty\\#end,\\#begselectCreatedOfAnonEQ\\#end,\\#begwellFormedStoreObjectEQ\\#end,\\#begwellFormedStoreLocSetEQ\\#end,\\#begwellFormedStorePrimitiveEQ\\#end,\\#begwellFormedAnonEQ\\#end,\\#begwellFormedMemsetObjectEQ\\#end,\\#begwellFormedMemsetPrimitiveEQ\\#end
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\functions {
   \unique LocSet localsPreProc;
   \unique LocSet localsBody;
   \unique LocSet args;
   boolean _condition;
   int _threshold;
   int _i;
   Object _result;
}

\predicates {
   Post(Object, boolean);
}

\programVariables {
   Object result;
   RemoveControlFlag objUnderTest;
   boolean done, condition, condition_anon;
   int i, threshold;
}

\problem {
   geq(_threshold, Z(0(#)))
->   (    {threshold:=_threshold
           || condition:=_condition
           || result:=_result
           || i:=_i}
            \<{ try {
                  result=objUnderTest.before(threshold,condition,result,done,i)@RemoveControlFlag;
                }   catch (Throwable t) {
                  result=t;
                }
              }\> Post(result, TRUE)<<AEPred>>
      <-> {threshold:=_threshold
           || condition:=_condition
           || result:=_result
           || i:=_i}
            \<{ try {
                   result=objUnderTest.between(threshold,condition,result,done,i)@RemoveControlFlag;
                }   catch (Throwable t) {
                  result=t;
                }
              }\> Post(result, TRUE)<<AEPred>>)
   & (    {threshold:=_threshold
           || condition:=_condition
           || result:=_result
           || i:=_i}
            \<{ try {
                   result=objUnderTest.betweenStrongerInv(threshold,condition,result,done,i)@RemoveControlFlag;
                }   catch (Throwable t) {
                  result=t;
                }
              }\> Post(result, TRUE)<<AEPred>>
      <-> {threshold:=_threshold
           || condition:=_condition
           || result:=_result
           || i:=_i}
            \<{ try {
                   result=objUnderTest.after(threshold,condition,result,i)@RemoveControlFlag;
                }   catch (Throwable t) {
                  result=t;
                }
              }\> Post(result, TRUE)<<AEPred>>)

}

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "94730")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD") (proofscript))
(rule "andRight" (formula "2") (proofscript))
(branch "Case 1"
   (rule "equiv_right" (formula "2") (proofscript))
   (branch "Case '->'"
      (rule "diamondToBox" (formula "1") (term "1"))
      (rule "notLeft" (formula "1"))
      (rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_between,savedHeapBefore_between,conditionBefore_between,doneBefore_between,iBefore_between,resultBefore_between,savedHeapBefore_between_0,thresholdBefore_between"))
      (rule "simplifyUpdate2" (formula "3") (term "1"))
      (rule "assignment" (formula "3") (term "1"))
      (rule "sequentialToParallel2" (formula "3"))
      (rule "simplifyUpdate3" (formula "3") (term "1,0"))
      (rule "assignment" (formula "3") (term "1"))
      (rule "sequentialToParallel2" (formula "3"))
      (rule "simplifyUpdate3" (formula "3") (term "1,0"))
      (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_before,savedHeapBefore_before,conditionBefore_before,doneBefore_before,iBefore_before,resultBefore_before,savedHeapBefore_before_0,thresholdBefore_before"))
      (rule "simplifyUpdate2" (formula "2") (term "1"))
      (rule "assignment" (formula "2") (term "1"))
      (rule "sequentialToParallel2" (formula "2"))
      (rule "simplifyUpdate3" (formula "2") (term "1,0"))
      (rule "assignment" (formula "2") (term "1"))
      (rule "sequentialToParallel2" (formula "2"))
      (rule "simplifyUpdate3" (formula "2") (term "1,0"))
      (rule "loopScopeInvBoxAEEquivUnrollSplit" (formula "2") (term "1") (newnames "i_0,done_0,result_0,o,f") (inst "i=Z(2(#))") (inst "#x=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0") (proofscript))
      (branch "Invariant Initially Valid"
         (rule "simplifyUpdate2" (formula "2") (proofscript))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "simplifyUpdate2" (formula "2") (term "0"))
         (rule "applyOnRigidFormula" (formula "2") (term "1"))
         (rule "simplifyUpdate1" (formula "2") (term "1,1"))
         (rule "simplifyUpdate1" (formula "2") (term "0,1"))
         (rule "applyOnPV" (formula "2") (term "1,1"))
         (rule "applyOnPV" (formula "2") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "0"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0"))
         (rule "applyOnPV" (formula "2") (term "0,0"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (rule "concrete_and_1" (formula "2"))
         (rule "inEqSimp_leqRight" (formula "2"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (rule "concrete_and_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Invariant Preserved and Used"
         (rule "loopScopeInvDiaAEEquiv" (formula "4") (term "1") (newnames "i_1,done_1,result_1,o,f") (inst "#x=x") (inst "#variant=variant") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_1") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_1") (inst "anon_heap_LOOP=anon_heap_LOOP_1") (proofscript))
         (branch "Invariant Initially Valid"
            (rule "false_to_not_true" (formula "3") (term "0,1,0,1,1,1") (proofscript))
            (rule "concrete_and_3" (formula "3") (term "0,0,1,1"))
            (rule "eqClose" (formula "3") (term "1,0,1,1"))
            (rule "concrete_and_3" (formula "3") (term "0,1,1"))
            (rule "concrete_and_3" (formula "3") (term "0,0,1,1,0,1,1,1"))
            (rule "simplifyUpdate2" (formula "4"))
            (rule "parallelWithSkip2" (formula "3") (term "0,1"))
            (rule "eqSymm" (formula "3") (term "0,0,1,1,1,0,1,1,1"))
            (rule "sequentialToParallel2" (formula "3"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "simplifyUpdate3" (formula "3") (term "1,0"))
            (rule "impRight" (formula "3"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1"))
            (rule "applyOnPV" (formula "6") (term "0,1"))
            (rule "applyOnPV" (formula "6") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "applyOnPV" (formula "6") (term "0,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0"))
            (rule "qeq_literals" (formula "6") (term "0"))
            (rule "concrete_and_1" (formula "6"))
            (rule "inEqSimp_leqRight" (formula "6"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,1,1,0,1"))
            (rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
            (rule "assignment" (formula "6") (term "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
            (rule "qeq_literals" (formula "5") (term "0"))
            (rule "concrete_and_2" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
         (branch "Invariant Preserved and Used"
            (rule "introduceAxiom" (inst "cutFormula=i_0 = i_1 & done_0 = done_1 & result_0 = result_1") (proofscript))
            (rule "false_to_not_true" (formula "5") (term "0,1,0,1,1,1") (proofscript))
            (rule "false_to_not_true" (formula "6") (term "0,1,0,1,1,1,1"))
            (rule "eqClose" (formula "5") (term "1,0,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,0,1,1,0,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,0,0,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1,0,1,1,1,1"))
            (rule "parallelWithSkip2" (formula "5") (term "0,1"))
            (rule "parallelWithSkip2" (formula "6") (term "0,1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "7") (term "0,0,1,1,1,0,1,1,1"))
            (rule "eqSymm" (formula "8") (term "0,0,1,0,1,1,0,1,1,1,1"))
            (rule "eqSymm" (formula "3"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "polySimp_elimSub" (formula "8") (term "0,0,1,1"))
            (rule "polySimp_elimSub" (formula "8") (term "0,1,1,1,0,1,1,1,1"))
            (rule "sequentialToParallel2" (formula "7"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "simplifyUpdate3" (formula "7") (term "1,0"))
            (rule "impRight" (formula "7"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "sequentialToParallel2" (formula "10") (term "1"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0,1"))
            (rule "applyOnElementary" (formula "10") (term "1,0,1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "impRight" (formula "10"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "1,0"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnParallel" (formula "12") (term "1,0"))
            (rule "simplifyUpdate3" (formula "12") (term "0,1,0"))
            (rule "applyOnElementary" (formula "12") (term "1,1,0"))
            (rule "sequentialToParallel1" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,1,1,0"))
            (rule "applyOnRigidFormula" (formula "4"))
            (rule "simplifyUpdate1" (formula "4") (term "0"))
            (rule "simplifyUpdate1" (formula "4") (term "1"))
            (rule "applyOnPV" (formula "4") (term "0"))
            (rule "applyOnPV" (formula "4") (term "1"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "applyOnRigidTerm" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,0,1,1,0"))
            (rule "applyOnPV" (formula "12") (term "1,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "12") (term "1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,1,0,1,1,0"))
            (rule "applyOnPV" (formula "12") (term "0,1,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,1,1,0,1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
            (rule "assignment" (formula "11") (term "1"))
            (rule "sequentialToParallel2" (formula "11"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0"))
            (rule "assignment" (formula "12") (term "1"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "5"))
            (rule "applyEq" (formula "11") (term "0,0,0,1,0,1,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
            (rule "applyEq" (formula "10") (term "0,1,0,1,1,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "10") (term "0,1,1,0,1,0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "10") (term "0,1,0,1,0,1,0,0") (ifseqformula "4"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv"))
            (rule "compound_assignment_3_nonsimple" (formula "9") (term "1"))
            (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_1"))
            (rule "compound_assignment_3_nonsimple" (formula "10") (term "1"))
            (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=boolv_1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv_2"))
            (rule "compound_assignment_2" (formula "9") (term "1") (inst "#v=v"))
            (rule "variableDeclarationAssign" (formula "9") (term "1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "v"))
            (rule "compound_assignment_1_new" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
            (rule "compound_assignment_1_new" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
            (rule "ifthenelse_concrete4" (formula "9") (term "0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "9") (term "1,0,0,1,0"))
            (rule "concrete_or_4" (formula "9") (term "0,0,1,0"))
            (rule "ifthenelse_negated" (formula "9") (term "0,1,0"))
            (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=boolv_2"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_3"))
            (rule "compound_assignment_2" (formula "10") (term "1") (inst "#v=v"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "v_1"))
            (rule "compound_assignment_1_new" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
            (rule "compound_assignment_1_new" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
            (rule "ifthenelse_concrete4" (formula "10") (term "0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "10") (term "1,0,0,1,0"))
            (rule "concrete_or_4" (formula "10") (term "0,0,1,0"))
            (rule "ifthenelse_negated" (formula "10") (term "0,1,0"))
            (rule "ifElseSplit" (formula "9"))
            (branch "if boolv_2 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "ifthenelse_concrete3" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "1"))
               (rule "concrete_or_4" (formula "1"))
               (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
               (rule "ifthenelse_true" (formula "11") (term "0,1,0"))
               (rule "ifSkipThen" (formula "10") (term "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "assignment" (formula "10") (term "1"))
               (rule "simplifyUpdate2" (formula "10") (term "1"))
               (rule "applyEq" (formula "11") (term "0,1,0,1,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "1"))
               (rule "emptyIndexedLoopScope" (formula "10") (term "1"))
               (rule "applyOnRigidFormula" (formula "10"))
               (rule "simplifyUpdate2" (formula "10") (term "0"))
               (rule "applyOnRigidFormula" (formula "10") (term "0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0"))
               (rule "applyOnPV" (formula "10") (term "0,0"))
               (rule "boolean_equal" (formula "10") (term "0"))
               (rule "ifthenelse_true_for" (formula "10"))
               (rule "methodCallReturn" (formula "10") (term "1"))
               (rule "assignment" (formula "10") (term "1"))
               (rule "elimSelfSingleUpdateFor" (formula "10") (term "1"))
               (rule "methodCallEmpty" (formula "10") (term "1"))
               (rule "tryEmpty" (formula "10") (term "1"))
               (rule "emptyModality" (formula "10") (term "1"))
               (rule "applyOnRigidFormula" (formula "10"))
               (rule "simplifyUpdate2" (formula "10") (term "0"))
               (rule "applyOnRigidFormula" (formula "10") (term "1"))
               (rule "simplifyUpdate2" (formula "10") (term "1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "0"))
               (rule "simplifyUpdate2" (formula "10") (term "1,0"))
               (rule "simplifyUpdate2" (formula "10") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "10") (term "1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "0,1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
               (rule "applyOnPV" (formula "10") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,0"))
               (rule "boolean_equal" (formula "10") (term "0,0"))
               (rule "concrete_impl_1" (formula "10") (term "0"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "1,0,1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,0,1"))
               (rule "applyOnPV" (formula "10") (term "0,0,0,1"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1"))
               (rule "boolean_equal" (formula "10") (term "0,0,1"))
               (rule "concrete_not_1" (formula "10") (term "0,1"))
               (rule "concrete_impl_2" (formula "10") (term "1"))
               (rule "concrete_and_3" (formula "10"))
               (rule "notRight" (formula "10"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "ifElseSplit" (formula "11"))
               (branch "if boolv_3 true"
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "ifSkipThen" (formula "12") (term "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_equal" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (rule "simplifyUpdate2" (formula "11") (term "1"))
                  (rule "emptyIndexedLoopScope" (formula "11") (term "1"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "simplifyUpdate2" (formula "11") (term "0"))
                  (rule "applyOnRigidFormula" (formula "11") (term "0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1,0"))
                  (rule "applyOnPV" (formula "11") (term "0,0"))
                  (rule "boolean_equal" (formula "11") (term "0"))
                  (rule "ifthenelse_true_for" (formula "11"))
                  (rule "methodCallReturn" (formula "11") (term "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (rule "elimSelfSingleUpdateFor" (formula "11") (term "1"))
                  (rule "methodCallEmpty" (formula "11") (term "1"))
                  (rule "tryEmpty" (formula "11") (term "1"))
                  (rule "emptyModality" (formula "11") (term "1"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "simplifyUpdate2" (formula "11") (term "0"))
                  (rule "applyOnRigidFormula" (formula "11") (term "1"))
                  (rule "simplifyUpdate2" (formula "11") (term "1,1"))
                  (rule "simplifyUpdate2" (formula "11") (term "0,1"))
                  (rule "applyOnRigidFormula" (formula "11") (term "0"))
                  (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                  (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "11") (term "1,1"))
                  (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                  (rule "simplifyUpdate2" (formula "11") (term "0,1,1"))
                  (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                  (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1,1,0"))
                  (rule "applyOnPV" (formula "11") (term "0,1,0"))
                  (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "1"))
                  (rule "concrete_impl_4" (formula "11") (term "0"))
                  (rule "concrete_and_1" (formula "11"))
                  (rule "impRight" (formula "11"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "12") (term "1"))
                  (rule "simplifyUpdate1" (formula "12") (term "1,1"))
                  (rule "simplifyUpdate1" (formula "12") (term "0,1"))
                  (rule "applyOnPV" (formula "12") (term "1,1"))
                  (rule "applyOnRigidFormula" (formula "12") (term "0"))
                  (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                  (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "simplifyUpdate1" (formula "11") (term "1"))
                  (rule "applyOnPV" (formula "11") (term "0"))
                  (rule "boolean_equal" (formula "11"))
                  (rule "closeTrue" (formula "11"))
               )
               (branch "if boolv_3 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "simplifyUpdate1" (formula "11") (term "1"))
                  (rule "applyOnPV" (formula "11") (term "0"))
                  (rule "boolean_equal" (formula "11"))
                  (rule "closeTrue" (formula "11"))
               )
            )
            (branch "if boolv_2 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "9"))
               (rule "applyOnPV" (formula "9") (term "0"))
               (rule "simplifyUpdate1" (formula "9") (term "1"))
               (rule "ifthenelse_concrete3" (formula "9"))
               (rule "boolean_not_equal_2" (formula "9") (term "1"))
               (rule "concrete_or_4" (formula "9"))
               (rule "replace_known_right" (formula "11") (term "0,0,1,0") (ifseqformula "9"))
               (rule "ifthenelse_false" (formula "11") (term "0,1,0"))
               (rule "apply_eq_boolean" (formula "10") (term "0,1,0,1,1,0,0") (ifseqformula "9"))
               (rule "apply_eq_boolean" (formula "11") (term "0,1,0,1,0,1,0,0,0") (ifseqformula "9"))
               (rule "apply_eq_boolean_rigid" (formula "4") (term "1") (ifseqformula "9"))
               (rule "false_to_not_true" (formula "4"))
               (rule "notLeft" (formula "4"))
               (rule "less_than_comparison_simple" (formula "10") (term "1"))
               (rule "sequentialToParallel2" (formula "10"))
               (rule "simplifyUpdate3" (formula "10") (term "1,0"))
               (rule "applyOnElementary" (formula "10") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
               (rule "simplifyUpdate1" (formula "10") (term "0,0,0,1,0"))
               (rule "applyOnPV" (formula "10") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
               (rule "blockEmpty" (formula "10") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
               (rule "ifElseSplit" (formula "11"))
               (branch "if boolv_3 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_3 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "8"))
                  (rule "simplifyUpdate1" (formula "8") (term "1"))
                  (rule "applyOnPV" (formula "8") (term "0"))
                  (rule "boolean_not_equal_2" (formula "8"))
                  (rule "false_right" (formula "8"))
                  (rule "less_than_comparison_simple" (formula "11") (term "1"))
                  (rule "sequentialToParallel2" (formula "11"))
                  (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                  (rule "applyOnElementary" (formula "11") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "0,0,0,1,0"))
                  (rule "applyOnPV" (formula "11") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
                  (rule "blockEmpty" (formula "11") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "ifSplit" (formula "10"))
                  (branch "if boolv true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "ifthenelse_concrete3" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1"))
                     (rule "concrete_or_4" (formula "1"))
                     (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "1"))
                     (rule "ifthenelse_true" (formula "12") (term "0,1,0"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                     (rule "concrete_or_1" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "2"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (rule "concrete_or_1" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=boolv"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_4"))
                     (rule "compound_assignment_1_new" (formula "10") (term "1"))
                     (rule "sequentialToParallel2" (formula "10"))
                     (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                     (rule "applyOnElementary" (formula "10") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
                     (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
                     (rule "boolean_not_equal_2" (formula "10") (term "0,0,1,0"))
                     (rule "ifthenelse_false" (formula "10") (term "0,1,0"))
                     (rule "ifSplit" (formula "11"))
                     (branch "if boolv_1 true"
                        (rule "simplifyUpdate2" (formula "12"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "boolean_equal" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifElseSplit" (formula "10"))
                        (branch "if boolv_4 true"
                           (rule "simplifyUpdate2" (formula "11"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=boolv"))
                           (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_5"))
                           (rule "less_than_comparison_simple" (formula "10") (term "1"))
                           (rule "sequentialToParallel2" (formula "10"))
                           (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                           (rule "applyOnElementary" (formula "10") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "0,0,0,1,0"))
                           (rule "applyOnPV" (formula "10") (term "1,0,0,1,0"))
                           (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
                           (rule "replace_known_left" (formula "10") (term "0,0,1,0") (ifseqformula "1"))
                           (rule "ifthenelse_true" (formula "10") (term "0,1,0"))
                           (rule "ifSplit" (formula "11") (newnames "normal,exc,returns,result_0,breaks,continues"))
                           (branch "if condition true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "12"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                              (rule "abstractExecutionNonVoidLoopScope" (formula "12") (term "1") (inst "#label1=_label1") (inst "#v1=v1") (inst "#label=_label0") (inst "continues=continues_Body_0") (inst "breaks=breaks_Body_0") (inst "result=result_Body_0") (inst "returns=returns_Body_0") (inst "exc=exc_Body_0") (inst "normal=normal_Body_0"))
                              (rule "eq_and" (formula "12") (term "1,1,1,0,1"))
                              (rule "concrete_and_3" (formula "12") (term "0,1,1,0,1"))
                              (rule "concrete_and_3" (formula "12") (term "0,1,1,0,1"))
                              (rule "concrete_and_3" (formula "12") (term "0,1,1,0,1"))
                              (rule "concrete_and_3" (formula "12") (term "0,1,1,0,1"))
                              (rule "simplifyUpdate2" (formula "12"))
                              (rule "simplifyUpdate2" (formula "12") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "12") (term "1,0,1"))
                              (rule "impRight" (formula "12"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,1,1,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,1,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,1,0,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,1,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,0,0,1,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1"))
                              (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                              (rule "andLeft" (formula "1"))
                              (rule "simplifyUpdate2Rigid" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1"))
                              (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                              (rule "andLeft" (formula "1"))
                              (rule "simplifyUpdate2" (formula "2"))
                              (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "11"))
                              (rule "concrete_not_2" (formula "2") (term "1,1"))
                              (rule "concrete_and_3" (formula "2") (term "1"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1"))
                              (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                              (rule "andLeft" (formula "1"))
                              (rule "simplifyUpdate2Rigid" (formula "2"))
                              (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "12"))
                              (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                              (rule "concrete_and_3" (formula "2") (term "1,0"))
                              (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "12"))
                              (rule "concrete_and_4" (formula "2") (term "1"))
                              (rule "concrete_or_4" (formula "2"))
                              (rule "replace_known_right" (formula "2") (term "0,1,1,0,0") (ifseqformula "12"))
                              (rule "concrete_not_2" (formula "2") (term "1,1,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "1,0,0"))
                              (rule "replace_known_right" (formula "2") (term "0,1,0,0,0") (ifseqformula "12"))
                              (rule "concrete_not_2" (formula "2") (term "1,0,0,0"))
                              (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                              (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "12"))
                              (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                              (rule "concrete_and_3" (formula "2") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "1") (term "1"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                              (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,1,0"))
                              (rule "applySkip1" (formula "1") (term "1,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                              (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                              (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                              (rule "apply_eq_boolean_rigid" (formula "16") (term "0,1,0,1,1") (ifseqformula "12"))
                              (rule "commute_and_2" (formula "3") (term "1"))
                              (rule "commute_and_2" (formula "2") (term "1"))
                              (rule "commute_and_2" (formula "2") (term "1,0"))
                              (rule "commute_and_2" (formula "2") (term "1,0,0"))
                              (rule "ifSplit" (formula "15"))
                              (branch "if boolv_5 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "16"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "commute_and_2" (formula "2") (term "0,0,0"))
                                 (rule "commute_and" (formula "3") (term "0,1"))
                                 (rule "commute_and" (formula "2") (term "0,1"))
                                 (rule "commute_and" (formula "2") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                                 (rule "eq_or" (formula "2") (term "1,1,0,0"))
                                 (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,0,1,0,0"))
                                 (rule "commute_and_2" (formula "2") (term "1,0,0"))
                                 (rule "commute_and" (formula "2") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "1,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
                                 (rule "elim_double_block_2" (formula "15") (term "1"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,1,0,0,0"))
                                 (rule "neq_or" (formula "2") (term "0,0,1,0,0,0"))
                                 (rule "concrete_and_1" (formula "2") (term "0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                                 (rule "eq_or" (formula "2") (term "1,0,0,0,0,0"))
                                 (rule "commute_and" (formula "2") (term "0,0,0,0,0"))
                                 (rule "elim_double_block_2" (formula "15") (term "1"))
                                 (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                                 (rule "shift_paren_and" (formula "2") (term "0,0"))
                                 (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0"))
                                 (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                 (rule "neq_or_3" (formula "2") (term "1,1,0"))
                                 (rule "concrete_and_3" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                 (rule "neq_or_3" (formula "2") (term "1,1,0"))
                                 (rule "concrete_and_3" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                 (rule "neq_or" (formula "2") (term "1,1,0"))
                                 (rule "concrete_and_3" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                 (rule "neq_or_3" (formula "2") (term "1,1,0"))
                                 (rule "concrete_and_3" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0"))
                                 (rule "commute_or" (formula "2") (term "0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                 (rule "neq_or_3" (formula "2") (term "1,0,1,0"))
                                 (rule "concrete_and_3" (formula "2") (term "0,1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                                 (rule "eq_or" (formula "2") (term "0,1,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                                 (rule "commute_or" (formula "2") (term "0,0,1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,1,0,0"))
                                 (rule "eq_or" (formula "2") (term "0,1,0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "eq_and_2" (formula "2") (term "0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "neq_or" (formula "2") (term "0,1,0,0,1,0,0"))
                                 (rule "concrete_or_1" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                                 (rule "neq_or_3" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,1,0,0,0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,1,0,0"))
                                 (rule "eq_or_2" (formula "2") (term "1,0,0,0,1,0,0"))
                                 (rule "commute_or" (formula "2") (term "0,0,0,0,1,0,0"))
                                 (rule "eq_and" (formula "2") (term "0,0,0,1,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0,0"))
                                 (rule "eq_or" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "eq_or" (formula "2") (term "0,1,0,0,0,0,0,0,0,0"))
                                 (rule "commute_and_2" (formula "2") (term "1,0"))
                                 (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0,0,0"))
                                 (rule "eq_or" (formula "2") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "shift_paren_and" (formula "2") (term "0,0"))
                                 (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                                 (rule "shift_paren_and" (formula "2") (term "0,0,0,0"))
                                 (rule "shift_paren_and" (formula "2") (term "0"))
                                 (rule "shift_paren_and" (formula "2") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "neq_or_4" (formula "3") (term "1"))
                                 (rule "concrete_and_3" (formula "3"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "neq_or_4" (formula "3") (term "1"))
                                 (rule "concrete_and_3" (formula "3"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "neq_or_4" (formula "3") (term "1"))
                                 (rule "concrete_and_3" (formula "3"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "eq_or_2" (formula "3") (term "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "replace_known_left" (formula "2") (term "1,0,0,0,0") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,0,0"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,1") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0,0,0,1"))
                                 (rule "eq_and_2" (formula "3") (term "0,0,0,1"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,1") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "3") (term "0,1"))
                                 (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0"))
                                 (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0,0,0"))
                                 (rule "eq_and_2" (formula "2") (term "0,0,0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "eq_or_2" (formula "3") (term "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "replace_known_left" (formula "2") (term "1,0,0,0,0") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "eq_or_2" (formula "3") (term "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0,0,0,0"))
                                 (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0,1") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "3") (term "0,0,1"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "eq_or_2" (formula "3") (term "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "commute_or_2" (formula "3") (term "1,1"))
                                 (rule "eq_or" (formula "3") (term "0,1,1"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "cnf_rightDist" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "commute_or" (formula "2"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "commute_or_2" (formula "4"))
                                 (rule "eq_or_2" (formula "4") (term "0"))
                                 (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "1"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "commute_or_2" (formula "4"))
                                 (rule "neq_or_3" (formula "4") (term "0"))
                                 (rule "concrete_or_1" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "cnf_rightDist" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "commute_or_2" (formula "3"))
                                 (rule "commute_or_2" (formula "3") (term "0"))
                                 (rule "neq_or_2" (formula "3") (term "0,0"))
                                 (rule "concrete_or_1" (formula "3") (term "0"))
                                 (rule "concrete_or_1" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "commute_or_2" (formula "4"))
                                 (rule "cnf_rightDist" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "commute_or_2" (formula "3"))
                                 (rule "neq_or_2" (formula "3") (term "0"))
                                 (rule "concrete_or_1" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "eq_or_2" (formula "3") (term "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "4"))
                                 (rule "concrete_or_1" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                                 (rule "concrete_or_1" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "replace_known_left" (formula "3") (term "0,1,0,1") (ifseqformula "4"))
                                 (rule "concrete_or_1" (formula "3") (term "1,0,1"))
                                 (rule "concrete_and_3" (formula "3") (term "0,1"))
                                 (rule "replace_known_left" (formula "2") (term "0,1,0,0,1") (ifseqformula "4"))
                                 (rule "concrete_or_1" (formula "2") (term "1,0,0,1"))
                                 (rule "concrete_and_3" (formula "2") (term "0,0,1"))
                                 (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "4"))
                                 (rule "concrete_and_3" (formula "2") (term "1"))
                                 (rule "cnf_rightDist" (formula "3"))
                                 (rule "neq_or_3" (formula "3") (term "1"))
                                 (rule "concrete_and_3" (formula "3"))
                                 (rule "commute_or" (formula "3"))
                                 (rule "cnf_rightDist" (formula "2"))
                                 (rule "neq_or" (formula "2") (term "0"))
                                 (rule "concrete_and_1" (formula "2"))
                                 (rule "commute_or_2" (formula "2"))
                                 (rule "neq_or_2" (formula "2") (term "0"))
                                 (rule "concrete_or_1" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "ifSplit" (formula "18"))
                                 (branch "if condition true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_equal" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "abstractExecutionNonVoidLoopScope" (formula "18") (term "1") (inst "#label1=_label3") (inst "#v1=v1") (inst "#label=_label2") (inst "continues=continues_Body_0") (inst "breaks=breaks_Body_0") (inst "result=result_Body_0") (inst "returns=returns_Body_0") (inst "exc=exc_Body_0") (inst "normal=normal_Body_0"))
                                    (rule "concrete_and_3" (formula "18") (term "0,1,1,0,1"))
                                    (rule "eq_and" (formula "18") (term "1,1,1,0,1"))
                                    (rule "concrete_and_3" (formula "18") (term "0,1,1,0,1"))
                                    (rule "concrete_and_3" (formula "18") (term "0,1,1,0,1"))
                                    (rule "concrete_and_3" (formula "18") (term "0,1,1,0,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "1,0,1"))
                                    (rule "impRight" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1,0,1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,1,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,1,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,1,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "17"))
                                    (rule "concrete_not_2" (formula "2") (term "1,1"))
                                    (rule "concrete_and_3" (formula "2") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,1,0,0,0") (ifseqformula "18"))
                                    (rule "concrete_not_2" (formula "2") (term "1,1,0,0,0"))
                                    (rule "concrete_and_3" (formula "2") (term "1,0,0,0"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,0,0,0,0") (ifseqformula "18"))
                                    (rule "concrete_not_2" (formula "2") (term "1,0,0,0,0"))
                                    (rule "concrete_and_3" (formula "2") (term "0,0,0,0"))
                                    (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "18"))
                                    (rule "concrete_and_4" (formula "2") (term "1"))
                                    (rule "concrete_or_4" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "18"))
                                    (rule "concrete_not_2" (formula "2") (term "1,1"))
                                    (rule "concrete_and_3" (formula "2") (term "1"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "18"))
                                    (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                                    (rule "concrete_and_3" (formula "2") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
                                    (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,0,1"))
                                    (rule "applySkip1" (formula "1") (term "1,0,0,1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,0,1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,0"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                                    (rule "apply_eq_boolean_rigid" (formula "20") (term "0,1,0,1,1") (ifseqformula "17"))
                                    (rule "commute_and_2" (formula "2") (term "1"))
                                    (rule "commute_and_2" (formula "1") (term "1"))
                                    (rule "commute_and_2" (formula "1") (term "1,0"))
                                    (rule "commute_and_2" (formula "1") (term "0,0,0"))
                                    (rule "commute_and_2" (formula "1") (term "1,0,0"))
                                    (rule "commute_and" (formula "2") (term "0,1"))
                                    (rule "commute_and" (formula "1") (term "0,1"))
                                    (rule "commute_and" (formula "1") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "eq_or" (formula "1") (term "1,1,0,0"))
                                    (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,1,0,0") (ifseqformula "5"))
                                    (rule "concrete_and_3" (formula "1") (term "0,1,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "6"))
                                    (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0,0") (ifseqformula "5"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                                    (rule "eq_or" (formula "1") (term "1,0,0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                                    (rule "concrete_and_1" (formula "1") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,1,0,0,0"))
                                    (rule "neq_or" (formula "1") (term "0,0,1,0,0,0"))
                                    (rule "concrete_and_1" (formula "1") (term "0,1,0,0,0"))
                                    (rule "shift_paren_and" (formula "1") (term "0,0,0"))
                                    (rule "commute_and_2" (formula "1") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                    (rule "neq_or_3" (formula "1") (term "1,1,0"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                    (rule "neq_or" (formula "1") (term "1,1,0"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,1,0,0"))
                                    (rule "neq_or" (formula "1") (term "0,1,1,0,0"))
                                    (rule "concrete_or_1" (formula "1") (term "1,1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "4"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,1,0,0") (ifseqformula "6"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "5"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "neq_or_3" (formula "1") (term "1,1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "3"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                    (rule "eq_or" (formula "1") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,0,0"))
                                    (rule "eq_or" (formula "1") (term "0,1,0,0"))
                                    (rule "shift_paren_and" (formula "1") (term "0"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "neq_or_4" (formula "2") (term "1"))
                                    (rule "concrete_and_3" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "neq_or_4" (formula "2") (term "1"))
                                    (rule "concrete_and_3" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "2"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "commute_or" (formula "1"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "neq_or_3" (formula "3") (term "0"))
                                    (rule "concrete_or_1" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "commute_or_2" (formula "2"))
                                    (rule "commute_or_2" (formula "2") (term "0"))
                                    (rule "neq_or_2" (formula "2") (term "0,0"))
                                    (rule "concrete_or_1" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
                                    (rule "concrete_or_1" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "commute_or_2" (formula "2"))
                                    (rule "neq_or_2" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "neq_or_3" (formula "2") (term "1"))
                                    (rule "concrete_and_3" (formula "2"))
                                    (rule "commute_or" (formula "2"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "neq_or" (formula "1") (term "0"))
                                    (rule "concrete_and_1" (formula "1"))
                                    (rule "commute_or_2" (formula "1"))
                                    (rule "neq_or_2" (formula "1") (term "0"))
                                    (rule "concrete_or_1" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "if" (formula "19") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "19") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "2,1,1"))
                                    (rule "applyOnRigidFormula" (formula "19") (term "0,1,1"))
                                    (rule "applyOnPV" (formula "19") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "19") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "19") (term "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "19") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "19"))
                                    (rule "simplifyUpdate2" (formula "19") (term "0"))
                                    (rule "blockReturn" (formula "19") (term "1,1,1,1"))
                                    (rule "blockReturn" (formula "19") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "1,1,1"))
                                    (rule "blockReturn" (formula "19") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "1"))
                                    (rule "blockReturn" (formula "19") (term "1,1,1,1"))
                                    (rule "ifthenelse_split_for" (formula "19"))
                                    (branch "returns_Body_0 = TRUE TRUE"
                                       (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "1"))
                                       (rule "concrete_not_1" (formula "3") (term "1"))
                                       (rule "concrete_or_4" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
                                       (rule "concrete_not_1" (formula "5") (term "0"))
                                       (rule "concrete_or_2" (formula "5"))
                                       (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "15"))
                                       (rule "concrete_not_2" (formula "4") (term "0"))
                                       (rule "concrete_or_1" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "4"))
                                       (rule "concrete_or_3" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "replace_known_left" (formula "4") (term "1,1") (ifseqformula "3"))
                                       (rule "concrete_and_3" (formula "4") (term "1"))
                                       (rule "replace_known_left" (formula "4") (term "0,1,1") (ifseqformula "1"))
                                       (rule "concrete_not_1" (formula "4") (term "1,1"))
                                       (rule "concrete_and_4" (formula "4") (term "1"))
                                       (rule "concrete_eq_4" (formula "4"))
                                       (rule "notLeft" (formula "4"))
                                       (rule "applyEqRigid" (formula "17") (term "0,1,0,0,0,0,1,1") (ifseqformula "1"))
                                       (rule "applyEqRigid" (formula "17") (term "0,0,0,0,0,0,1,1") (ifseqformula "3"))
                                       (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,0,1,1") (ifseqformula "13"))
                                       (rule "returnIndexedLoopScope" (formula "18") (term "1,1,1"))
                                       (rule "assignment" (formula "18") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                       (rule "methodCallReturn" (formula "18") (term "1,1,1"))
                                       (rule "assignment" (formula "18") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                       (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "18") (term "0,1,0,1,1"))
                                       (rule "methodCallEmpty" (formula "18") (term "1,1,1"))
                                       (rule "tryEmpty" (formula "18") (term "1,1,1"))
                                       (rule "emptyModality" (formula "18") (term "1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "1"))
                                       (rule "applySkip2" (formula "18") (term "1"))
                                       (rule "sequentialToParallel2" (formula "18"))
                                       (rule "simplifyUpdate2" (formula "18"))
                                       (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "18"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "0"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0,0"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "1,0"))
                                       (rule "simplifyUpdate1" (formula "18") (term "1,1,0"))
                                       (rule "applyOnPV" (formula "18") (term "0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "0,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "18") (term "1,0,0"))
                                       (rule "applyOnPV" (formula "18") (term "0,0,0"))
                                       (rule "boolean_equal" (formula "18") (term "0,0"))
                                       (rule "concrete_impl_1" (formula "18") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "0,0,1"))
                                       (rule "simplifyUpdate1Rigid" (formula "18") (term "1,0,0,1"))
                                       (rule "applyOnPV" (formula "18") (term "0,0,0,1"))
                                       (rule "boolean_equal" (formula "18") (term "0,0,1"))
                                       (rule "concrete_not_1" (formula "18") (term "0,1"))
                                       (rule "concrete_impl_2" (formula "18") (term "1"))
                                       (rule "concrete_and_3" (formula "18"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "2") (term "0,1,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0,0,0"))
                                       (rule "if" (formula "17") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                       (rule "boolean_equal" (formula "17") (term "0,1,1"))
                                       (rule "ifthenelse_true_for" (formula "17") (term "1,1"))
                                       (rule "blockReturn" (formula "17") (term "1,1,1"))
                                       (rule "blockReturn" (formula "17") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                       (rule "blockReturn" (formula "17") (term "1,1,1"))
                                       (rule "blockReturn" (formula "17") (term "1,1,1"))
                                       (rule "blockReturn" (formula "17") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "17"))
                                       (rule "returnIndexedLoopScope" (formula "17") (term "1,1,1"))
                                       (rule "assignment" (formula "17") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                       (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                                       (rule "assignment" (formula "17") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                                       (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                                       (rule "tryEmpty" (formula "17") (term "1,1,1"))
                                       (rule "emptyModality" (formula "17") (term "1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "1"))
                                       (rule "applySkip2" (formula "17") (term "1"))
                                       (rule "sequentialToParallel2" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "17"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,0"))
                                       (rule "boolean_equal" (formula "17") (term "0,0"))
                                       (rule "concrete_impl_1" (formula "17") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1"))
                                       (rule "boolean_equal" (formula "17") (term "0,0,1"))
                                       (rule "concrete_not_1" (formula "17") (term "0,1"))
                                       (rule "concrete_impl_2" (formula "17") (term "1"))
                                       (rule "concrete_and_3" (formula "17"))
                                       (rule "notRight" (formula "17"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "close" (formula "18") (ifseqformula "1"))
                                    )
                                    (branch "returns_Body_0 = TRUE FALSE"
                                       (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "19"))
                                       (rule "concrete_not_2" (formula "5") (term "0"))
                                       (rule "concrete_or_1" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "18"))
                                       (rule "concrete_not_2" (formula "2") (term "1"))
                                       (rule "concrete_or_3" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "17"))
                                       (rule "concrete_or_4" (formula "2") (term "0"))
                                       (rule "replace_known_right" (formula "3") (term "0,1,0,1") (ifseqformula "16"))
                                       (rule "concrete_not_2" (formula "3") (term "1,0,1"))
                                       (rule "concrete_and_3" (formula "3") (term "0,1"))
                                       (rule "apply_eq_boolean_rigid" (formula "15") (term "0,1,0,0,0,0,1,1") (ifseqformula "16"))
                                       (rule "ifUnfold" (formula "17") (term "1,1,1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "17") (term "1,1,1") (newnames "boolv_6"))
                                       (rule "inequality_comparison_simple" (formula "17") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0,1,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0,1,1"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "1") (term "0,1,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0"))
                                       (rule "if" (formula "15") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                       (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                       (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                       (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                                       (rule "boolean_not_equal_2" (formula "15") (term "0,1,1"))
                                       (rule "ifthenelse_false_for" (formula "15") (term "1,1"))
                                       (rule "ifUnfold" (formula "15") (term "1,1,1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "boolv_7"))
                                       (rule "inequality_comparison_simple" (formula "15") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                       (rule "applyOnElementary" (formula "15") (term "1,0,1,1"))
                                       (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1"))
                                       (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1"))
                                       (rule "applyConcrOnAbstrUpd" (formula "17"))
                                       (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                       (rule "applyConcrOnAbstrUpd" (formula "15"))
                                       (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                       (rule "if" (formula "17") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                       (rule "ifthenelse_concrete4" (formula "17") (term "0,1,1"))
                                       (rule "boolean_not_equal_2" (formula "17") (term "1,0,1,1"))
                                       (rule "concrete_or_4" (formula "17") (term "0,1,1"))
                                       (rule "ifthenelse_negated_for" (formula "17") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                       (rule "simplifyUpdate2Rigid" (formula "17") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0"))
                                       (rule "blockThrow" (formula "17") (term "1,1,1,2"))
                                       (rule "blockThrow" (formula "17") (term "1,1,1,2"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,2"))
                                       (rule "blockThrow" (formula "17") (term "1,1,1,2"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,2"))
                                       (rule "blockThrow" (formula "17") (term "1,1,1,2"))
                                       (rule "ifthenelse_split_for" (formula "17"))
                                       (branch "exc_Body_0 = null TRUE"
                                          (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                                          (rule "concrete_or_3" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "1"))
                                          (rule "concrete_and_3" (formula "3") (term "1"))
                                          (rule "applyEqRigid" (formula "15") (term "0,0,0,1,1,0,1,1") (ifseqformula "1"))
                                          (rule "eqClose" (formula "15") (term "0,0,1,1,0,1,1"))
                                          (rule "ifthenelse_true" (formula "15") (term "0,1,1,0,1,1"))
                                          (rule "applyEqRigid" (formula "15") (term "0,0,0,0,1,0,1,1") (ifseqformula "1"))
                                          (rule "if" (formula "15") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "0,1"))
                                          (rule "applySkip2" (formula "15") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "15"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1,0"))
                                          (rule "applyOnPV" (formula "15") (term "0,0"))
                                          (rule "boolean_not_equal_2" (formula "15") (term "0"))
                                          (rule "ifthenelse_false_for" (formula "15"))
                                          (rule "if" (formula "17") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                          (rule "boolean_not_equal_2" (formula "17") (term "0,1,1"))
                                          (rule "ifthenelse_false_for" (formula "17") (term "1,1"))
                                          (rule "if" (formula "15") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                                          (rule "boolean_not_equal_2" (formula "15") (term "0,1,1"))
                                          (rule "ifthenelse_false_for" (formula "15") (term "1,1"))
                                          (rule "if" (formula "17") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "17") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "17"))
                                          (rule "simplifyUpdate2Rigid" (formula "17") (term "0"))
                                          (rule "blockEmpty" (formula "17") (term "1,1,1,2"))
                                          (rule "assignment" (formula "17") (term "1,1,1,2"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1,2"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1,1,2"))
                                          (rule "ifthenelse_split_for" (formula "17"))
                                          (branch "breaks_Body_0 = TRUE TRUE"
                                             (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
                                             (rule "concrete_not_1" (formula "4") (term "1"))
                                             (rule "concrete_eq_4" (formula "4"))
                                             (rule "notLeft" (formula "4"))
                                             (rule "applyEqRigid" (formula "16") (term "0,1,0,1,1") (ifseqformula "1"))
                                             (rule "elim_double_block_2" (formula "18") (term "1,1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "unlabeledBreakIndexedLoopScope" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                             (rule "methodCallReturn" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "elimSelfSingleUpdateFor" (formula "18") (term "1,1,1"))
                                             (rule "methodCallEmpty" (formula "18") (term "1,1,1"))
                                             (rule "tryEmpty" (formula "18") (term "1,1,1"))
                                             (rule "emptyModality" (formula "18") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,1"))
                                             (rule "concrete_impl_1" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,0,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "0,1,1,1,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "1,1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,1,1"))
                                             (rule "simplifyUpdate1Rigid" (formula "18") (term "1,0,0,1,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,1,1"))
                                             (rule "concrete_not_1" (formula "18") (term "0,1,1,1"))
                                             (rule "concrete_impl_2" (formula "18") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18"))
                                             (rule "applyOnRigidFormula" (formula "18"))
                                             (rule "simplifyUpdate1Rigid" (formula "18") (term "1"))
                                             (rule "if" (formula "16") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                                             (rule "applyOnPV" (formula "16") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1"))
                                             (rule "boolean_equal" (formula "16") (term "0,1,1"))
                                             (rule "ifthenelse_true_for" (formula "16") (term "1,1"))
                                             (rule "blockBreak" (formula "16") (term "1,1,1"))
                                             (rule "blockBreak" (formula "16") (term "1,1,1"))
                                             (rule "blockBreak" (formula "16") (term "1,1,1"))
                                             (rule "blockBreak" (formula "16") (term "1,1,1"))
                                             (rule "blockBreak" (formula "16") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                             (rule "unlabeledBreakIndexedLoopScope" (formula "16") (term "1,1,1"))
                                             (rule "assignment" (formula "16") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                             (rule "methodCallReturn" (formula "16") (term "1,1,1"))
                                             (rule "assignment" (formula "16") (term "1,1,1"))
                                             (rule "elimSelfSingleUpdateFor" (formula "16") (term "1,1,1"))
                                             (rule "methodCallEmpty" (formula "16") (term "1,1,1"))
                                             (rule "tryEmpty" (formula "16") (term "1,1,1"))
                                             (rule "emptyModality" (formula "16") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "0,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1"))
                                             (rule "applyOnPV" (formula "16") (term "0,0,0,1,1"))
                                             (rule "boolean_equal" (formula "16") (term "0,0,1,1"))
                                             (rule "concrete_impl_1" (formula "16") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "16") (term "1,0,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1,1"))
                                             (rule "applyOnPV" (formula "16") (term "0,0,0,1,1,1"))
                                             (rule "boolean_equal" (formula "16") (term "0,0,1,1,1"))
                                             (rule "concrete_not_1" (formula "16") (term "0,1,1,1"))
                                             (rule "concrete_impl_2" (formula "16") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "16") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "16"))
                                             (rule "notRight" (formula "16"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                             (rule "close" (formula "18") (ifseqformula "1"))
                                          )
                                          (branch "breaks_Body_0 = TRUE FALSE"
                                             (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "17"))
                                             (rule "concrete_not_2" (formula "3") (term "1"))
                                             (rule "concrete_eq_3" (formula "3"))
                                             (rule "apply_eq_boolean_rigid" (formula "15") (term "0,1,0,1,1") (ifseqformula "17"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "unlabeledBreakIndexedLoopScope" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                             (rule "methodCallReturn" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "elimSelfSingleUpdateFor" (formula "18") (term "1,1,1"))
                                             (rule "methodCallEmpty" (formula "18") (term "1,1,1"))
                                             (rule "tryEmpty" (formula "18") (term "1,1,1"))
                                             (rule "emptyModality" (formula "18") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,1"))
                                             (rule "concrete_impl_1" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,0,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "0,1,1,1,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "1,1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,1,1"))
                                             (rule "concrete_not_1" (formula "18") (term "0,1,1,1"))
                                             (rule "concrete_impl_2" (formula "18") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18"))
                                             (rule "applyOnRigidFormula" (formula "18"))
                                             (rule "simplifyUpdate1Rigid" (formula "18") (term "1"))
                                             (rule "if" (formula "15") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                             (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                                             (rule "boolean_not_equal_2" (formula "15") (term "0,1,1"))
                                             (rule "ifthenelse_false_for" (formula "15") (term "1,1"))
                                             (rule "blockEmpty" (formula "15") (term "1,1,1"))
                                             (rule "assignment" (formula "15") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                             (rule "blockEmpty" (formula "15") (term "1,1,1"))
                                             (rule "postincrement" (formula "15") (term "1,1,1"))
                                             (rule "compound_int_cast_expression" (formula "15") (term "1,1,1") (inst "#v=o"))
                                             (rule "variableDeclarationAssign" (formula "15") (term "1,1,1"))
                                             (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "o"))
                                             (rule "remove_parentheses_right" (formula "15") (term "1,1,1"))
                                             (rule "assignmentAdditionInt" (formula "15") (term "1,1,1"))
                                             (rule "translateJavaAddInt" (formula "15") (term "0,0,1,1,1"))
                                             (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                             (rule "applyOnElementary" (formula "15") (term "1,0,1,1"))
                                             (rule "polySimp_addComm0" (formula "15") (term "1,0,1,0,1,1"))
                                             (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1"))
                                             (rule "applyOnPV" (formula "15") (term "1,0,1,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "0,0,1,0,1,1"))
                                             (rule "widening_identity_cast_5" (formula "15") (term "1,1,1"))
                                             (rule "assignment" (formula "15") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                             (rule "applyOnElementary" (formula "15") (term "1,0,1,1"))
                                             (rule "applyOnPV" (formula "15") (term "0,1,0,1,1"))
                                             (rule "blockEmpty" (formula "15") (term "1,1,1"))
                                             (rule "ifElseUnfold" (formula "15") (term "1,1,1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "boolv_8"))
                                             (rule "compound_assignment_1_new" (formula "15") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                             (rule "applyOnElementary" (formula "15") (term "1,0,1,1"))
                                             (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1"))
                                             (rule "simplifyUpdate1Rigid" (formula "15") (term "1,0,1,0,1,1"))
                                             (rule "simplifyUpdate1Rigid" (formula "15") (term "2,0,1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1"))
                                             (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1"))
                                             (rule "boolean_equal" (formula "15") (term "0,0,1,0,1,1"))
                                             (rule "ifthenelse_true" (formula "15") (term "0,1,0,1,1"))
                                             (rule "ifElse" (formula "15") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                             (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                                             (rule "boolean_not_equal_2" (formula "15") (term "0,1,1"))
                                             (rule "ifthenelse_false_for" (formula "15") (term "1,1"))
                                             (rule "blockBreak" (formula "15") (term "1,1,1"))
                                             (rule "blockBreak" (formula "15") (term "1,1,1"))
                                             (rule "unlabeledBreakIndexedLoopScope" (formula "15") (term "1,1,1"))
                                             (rule "assignment" (formula "15") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                             (rule "methodCallReturn" (formula "15") (term "1,1,1"))
                                             (rule "assignment" (formula "15") (term "1,1,1"))
                                             (rule "elimSelfSingleUpdateFor" (formula "15") (term "1,1,1"))
                                             (rule "methodCallEmpty" (formula "15") (term "1,1,1"))
                                             (rule "tryEmpty" (formula "15") (term "1,1,1"))
                                             (rule "emptyModality" (formula "15") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,1"))
                                             (rule "applyOnPV" (formula "15") (term "0,0,0,1,1"))
                                             (rule "boolean_equal" (formula "15") (term "0,0,1,1"))
                                             (rule "concrete_impl_1" (formula "15") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "15") (term "1,0,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,1,1"))
                                             (rule "applyOnPV" (formula "15") (term "0,0,0,1,1,1"))
                                             (rule "boolean_equal" (formula "15") (term "0,0,1,1,1"))
                                             (rule "concrete_not_1" (formula "15") (term "0,1,1,1"))
                                             (rule "concrete_impl_2" (formula "15") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "15") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "15"))
                                             (rule "notRight" (formula "15"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                             (rule "close" (formula "18") (ifseqformula "1"))
                                          )
                                       )
                                       (branch "exc_Body_0 = null FALSE"
                                          (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "17"))
                                          (rule "concrete_or_4" (formula "2"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "11"))
                                          (rule "concrete_not_2" (formula "2") (term "0,1"))
                                          (rule "concrete_and_1" (formula "2") (term "1"))
                                          (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "17"))
                                          (rule "concrete_eq_4" (formula "2"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "apply_eq_boolean_rigid" (formula "15") (term "0,1,0,0,1,0,1,1") (ifseqformula "11"))
                                          (rule "throwIndexedLoopScope" (formula "18") (term "1,1,1"))
                                          (rule "assignment" (formula "18") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                          (rule "methodCallParamThrow" (formula "18") (term "1,1,1"))
                                          (rule "tryCatchThrow" (formula "18") (term "1,1,1"))
                                          (rule "ifElseUnfold" (formula "18") (term "1,1,1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "18") (term "1,1,1") (newnames "boolv_8"))
                                          (rule "equality_comparison_simple" (formula "18") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnRigidTerm" (formula "18") (term "0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0,1,1"))
                                          (rule "if" (formula "15") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                          (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                                          (rule "ifthenelse_concrete4" (formula "15") (term "0,1,1"))
                                          (rule "boolean_not_equal_2" (formula "15") (term "1,0,1,1"))
                                          (rule "concrete_or_4" (formula "15") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "15") (term "0,1"))
                                          (rule "ifthenelse_negated_for" (formula "15") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "15"))
                                          (rule "simplifyUpdate2Rigid" (formula "15") (term "0"))
                                          (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "17"))
                                          (rule "ifthenelse_false_for" (formula "15"))
                                          (rule "blockThrow" (formula "15") (term "1,1,1"))
                                          (rule "blockThrow" (formula "15") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                          (rule "blockThrow" (formula "15") (term "1,1,1"))
                                          (rule "blockThrow" (formula "15") (term "1,1,1"))
                                          (rule "blockThrow" (formula "15") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                          (rule "throwIndexedLoopScope" (formula "15") (term "1,1,1"))
                                          (rule "assignment" (formula "15") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                          (rule "methodCallParamThrow" (formula "15") (term "1,1,1"))
                                          (rule "tryCatchThrow" (formula "15") (term "1,1,1"))
                                          (rule "ifElseUnfold" (formula "15") (term "1,1,1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "boolv_9"))
                                          (rule "equality_comparison_simple" (formula "15") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "15") (term "1,0,1,1"))
                                          (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1"))
                                          (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1"))
                                          (rule "ifElse" (formula "18") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,1,1"))
                                          (rule "ifthenelse_concrete3" (formula "18") (term "0,1,1"))
                                          (rule "boolean_not_equal_2" (formula "18") (term "1,0,1,1"))
                                          (rule "concrete_or_4" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "18") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0"))
                                          (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "17"))
                                          (rule "ifthenelse_false_for" (formula "18"))
                                          (rule "elim_double_block" (formula "18") (term "1,1,1"))
                                          (rule "ifElse" (formula "15") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "0,1"))
                                          (rule "applySkip2" (formula "15") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1,0,1"))
                                          (rule "applyOnPV" (formula "15") (term "0,0,1"))
                                          (rule "ifthenelse_concrete3" (formula "15") (term "0,1"))
                                          (rule "boolean_not_equal_2" (formula "15") (term "1,0,1"))
                                          (rule "concrete_or_4" (formula "15") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "15"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0"))
                                          (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "17"))
                                          (rule "ifthenelse_false_for" (formula "15"))
                                          (rule "elim_double_block" (formula "15") (term "1,1,1"))
                                          (rule "ifElse" (formula "18") (term "1,1,1"))
                                          (rule "instanceof_static_type" (formula "18") (term "2,0,0,1,1,1"))
                                          (rule "ifthenelse_concrete4" (formula "18") (term "0,1,1,1"))
                                          (rule "boolean_not_equal_2" (formula "18") (term "1,0,1,1,1"))
                                          (rule "concrete_or_4" (formula "18") (term "0,1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "0,1"))
                                          (rule "applySkip2" (formula "18") (term "0,1"))
                                          (rule "ifthenelse_negated_for" (formula "18") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0"))
                                          (rule "applyOnPV" (formula "18") (term "0,0"))
                                          (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "17"))
                                          (rule "ifthenelse_false_for" (formula "18"))
                                          (rule "variableDeclaration" (formula "18") (term "1,1,1") (newnames "t"))
                                          (rule "delete_unnecessary_cast" (formula "18") (term "1,1,1"))
                                          (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                                          (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                                          (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,1,0,1,1"))
                                          (rule "assignment" (formula "18") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,1,0,1,1"))
                                          (rule "emptyModality" (formula "18") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "1"))
                                          (rule "applySkip2" (formula "18") (term "1"))
                                          (rule "sequentialToParallel2" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "18"))
                                          (rule "simplifyUpdate3" (formula "18") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,0"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,0"))
                                          (rule "applyOnPV" (formula "18") (term "0,1,0"))
                                          (rule "simplifyUpdate1Rigid" (formula "18") (term "1,1,0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,0"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,0"))
                                          (rule "boolean_equal" (formula "18") (term "0,0"))
                                          (rule "concrete_impl_1" (formula "18") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,0,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,0,1"))
                                          (rule "simplifyUpdate1Rigid" (formula "18") (term "1,0,0,1"))
                                          (rule "boolean_equal" (formula "18") (term "0,0,1"))
                                          (rule "concrete_not_1" (formula "18") (term "0,1"))
                                          (rule "concrete_impl_2" (formula "18") (term "1"))
                                          (rule "concrete_and_3" (formula "18"))
                                          (rule "ifElse" (formula "15") (term "1,1,1"))
                                          (rule "instanceof_static_type" (formula "15") (term "2,0,0,1,1,1"))
                                          (rule "ifthenelse_concrete4" (formula "15") (term "0,1,1,1"))
                                          (rule "boolean_not_equal_2" (formula "15") (term "1,0,1,1,1"))
                                          (rule "concrete_or_4" (formula "15") (term "0,1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                          (rule "ifthenelse_negated_for" (formula "15") (term "1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "15") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "15"))
                                          (rule "simplifyUpdate2Rigid" (formula "15") (term "0"))
                                          (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "17"))
                                          (rule "ifthenelse_false_for" (formula "15"))
                                          (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "t_1"))
                                          (rule "delete_unnecessary_cast" (formula "15") (term "1,1,1"))
                                          (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                                          (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                                          (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "15") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "15") (term "0,1,0,1,1"))
                                          (rule "assignment" (formula "15") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "15") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "15") (term "0,1,0,1,1"))
                                          (rule "emptyModality" (formula "15") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "1"))
                                          (rule "applySkip2" (formula "15") (term "1"))
                                          (rule "sequentialToParallel2" (formula "15"))
                                          (rule "simplifyUpdate2" (formula "15"))
                                          (rule "simplifyUpdate3" (formula "15") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "15"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,0"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "1,0"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
                                          (rule "applyOnPV" (formula "15") (term "0,0,0"))
                                          (rule "boolean_equal" (formula "15") (term "0,0"))
                                          (rule "concrete_impl_1" (formula "15") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "15") (term "0,0,1"))
                                          (rule "applyOnPV" (formula "15") (term "0,0,0,1"))
                                          (rule "simplifyUpdate1Rigid" (formula "15") (term "1,0,0,1"))
                                          (rule "boolean_equal" (formula "15") (term "0,0,1"))
                                          (rule "concrete_not_1" (formula "15") (term "0,1"))
                                          (rule "concrete_impl_2" (formula "15") (term "1"))
                                          (rule "concrete_and_3" (formula "15"))
                                          (rule "notRight" (formula "15"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "close" (formula "18") (ifseqformula "1"))
                                       )
                                    )
                                 )
                                 (branch "if condition false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "15"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1"))
                                    (rule "applyOnPV" (formula "15") (term "0"))
                                    (rule "boolean_equal" (formula "15"))
                                    (rule "closeTrue" (formula "15"))
                                 )
                              )
                              (branch "if boolv_5 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "16"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "12"))
                                 (rule "applyOnPV" (formula "12") (term "0"))
                                 (rule "simplifyUpdate1" (formula "12") (term "1"))
                                 (rule "boolean_equal" (formula "12"))
                                 (rule "closeTrue" (formula "12"))
                              )
                           )
                           (branch "if condition false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "12"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "8"))
                              (rule "applyOnPV" (formula "8") (term "0"))
                              (rule "simplifyUpdate1" (formula "8") (term "1"))
                              (rule "apply_eq_boolean_rigid" (formula "11") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "8"))
                              (rule "postincrement" (formula "12") (term "1"))
                              (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=o"))
                              (rule "variableDeclarationAssign" (formula "12") (term "1"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "o"))
                              (rule "remove_parentheses_right" (formula "12") (term "1"))
                              (rule "assignmentAdditionInt" (formula "12") (term "1"))
                              (rule "translateJavaAddInt" (formula "12") (term "0,0,1"))
                              (rule "sequentialToParallel2" (formula "12"))
                              (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                              (rule "applyOnElementary" (formula "12") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
                              (rule "applyOnPV" (formula "12") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0"))
                              (rule "widening_identity_cast_5" (formula "12") (term "1"))
                              (rule "assignment" (formula "12") (term "1"))
                              (rule "sequentialToParallel2" (formula "12"))
                              (rule "simplifyUpdate2" (formula "12"))
                              (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                              (rule "applyOnElementary" (formula "12") (term "1,0"))
                              (rule "applyOnPV" (formula "12") (term "0,1,0"))
                              (rule "blockEmpty" (formula "12") (term "1"))
                              (rule "assignment" (formula "12") (term "1"))
                              (rule "sequentialToParallel2" (formula "12"))
                              (rule "simplifyUpdate2" (formula "12"))
                              (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                              (rule "emptyIndexedLoopScope" (formula "12") (term "1"))
                              (rule "applyOnRigidFormula" (formula "12"))
                              (rule "simplifyUpdate2" (formula "12") (term "0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0"))
                              (rule "simplifyUpdate1Rigid" (formula "12") (term "1,0"))
                              (rule "applyOnPV" (formula "12") (term "0,0"))
                              (rule "boolean_not_equal_2" (formula "12") (term "0"))
                              (rule "ifthenelse_false_for" (formula "12"))
                              (rule "emptyModality" (formula "12") (term "1"))
                              (rule "applyOnRigidFormula" (formula "12"))
                              (rule "simplifyUpdate2" (formula "12") (term "0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "1"))
                              (rule "simplifyUpdate2" (formula "12") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "12") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0"))
                              (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "12") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "12") (term "0,1,1"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "12") (term "1,0"))
                              (rule "applyOnPV" (formula "12") (term "0,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "12") (term "1,1,0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,0,0"))
                              (rule "applyOnPV" (formula "12") (term "0,0,0"))
                              (rule "boolean_not_equal_2" (formula "12") (term "0,0"))
                              (rule "concrete_impl_2" (formula "12") (term "0"))
                              (rule "concrete_and_1" (formula "12"))
                              (rule "impRight" (formula "12"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "13") (term "0"))
                              (rule "simplifyUpdate2" (formula "13") (term "0,0"))
                              (rule "simplifyUpdate2" (formula "13") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "13") (term "1"))
                              (rule "simplifyUpdate1" (formula "13") (term "0,1"))
                              (rule "simplifyUpdate1" (formula "13") (term "1,1"))
                              (rule "applyOnPV" (formula "13") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "8"))
                              (rule "simplifyUpdate1Rigid" (formula "8") (term "1"))
                              (rule "applyOnPV" (formula "8") (term "0"))
                              (rule "boolean_not_equal_2" (formula "8"))
                              (rule "false_right" (formula "8"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
                              (rule "simplifyUpdate2" (formula "12") (term "1,0,0"))
                              (rule "simplifyUpdate2" (formula "12") (term "0,0,0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "12") (term "0,1"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,0,1"))
                              (rule "simplifyUpdate1" (formula "12") (term "0,0,1"))
                              (rule "applyOnPV" (formula "12") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "12") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "12") (term "1,0,0"))
                              (rule "applyOnPV" (formula "12") (term "0,1,0,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,1,0,0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0,0,0"))
                              (rule "simplifyUpdate2" (formula "12") (term "0,0,0,0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0,1,0"))
                              (rule "precOfInt" (formula "12") (term "1"))
                              (rule "applyOnRigidFormula" (formula "12") (term "1,0,0,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "0,1,0,0,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,1,0,0,0"))
                              (rule "applyOnPV" (formula "12") (term "0,1,0,0,0"))
                              (rule "applyOnPV" (formula "12") (term "1,1,0,0,0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0,0,0,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0,0"))
                              (rule "applyOnPV" (formula "12") (term "0,0,0,0,0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
                              (rule "applyOnRigidTerm" (formula "12") (term "1,1,0,1"))
                              (rule "applyOnPV" (formula "12") (term "0,1,1,0,1"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,1,1,0,1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,1,0,1"))
                              (rule "mul_literals" (formula "12") (term "0,1,1,0,1"))
                              (rule "applyOnRigidTerm" (formula "12") (term "1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,1,0,1,1"))
                              (rule "applyOnPV" (formula "12") (term "0,1,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,1"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,1,1"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "12") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "12") (term "0,1,0,1"))
                              (rule "applyOnRigidTerm" (formula "12") (term "0,0,0,1,0"))
                              (rule "simplifyUpdate1Rigid" (formula "12") (term "2,0,0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0,1,0"))
                              (rule "applyOnPV" (formula "12") (term "0,0,0,0,1,0"))
                              (rule "eqClose" (formula "12") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
                              (rule "polySimp_addComm0" (formula "12") (term "0,0,1,1"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,1"))
                              (rule "add_literals" (formula "12") (term "1,1,0,1,1"))
                              (rule "times_zero_1" (formula "12") (term "1,0,1,1"))
                              (rule "add_zero_right" (formula "12") (term "0,1,1"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
                              (rule "add_literals" (formula "12") (term "0,0,0,1,1"))
                              (rule "add_zero_left" (formula "12") (term "0,0,1,1"))
                              (rule "polySimp_pullOutFactor2" (formula "12") (term "0,1,1"))
                              (rule "add_literals" (formula "12") (term "1,0,1,1"))
                              (rule "times_zero_1" (formula "12") (term "0,1,1"))
                              (rule "leq_literals" (formula "12") (term "1,1"))
                              (rule "concrete_and_3" (formula "12") (term "1"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0"))
                              (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
                              (rule "times_zero_2" (formula "12") (term "1,0,1"))
                              (rule "add_zero_right" (formula "12") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                              (rule "replace_known_left" (formula "12") (term "1,0,0,0") (ifseqformula "1"))
                              (rule "concrete_and_3" (formula "12") (term "0,0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                              (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "1"))
                              (rule "concrete_and_3" (formula "12"))
                              (rule "inEqSimp_subsumption1" (formula "12") (term "0,0") (ifseqformula "3"))
                              (rule "leq_literals" (formula "12") (term "0,0,0"))
                              (rule "concrete_or_1" (formula "12") (term "0,0"))
                              (rule "concrete_and_1" (formula "12") (term "0"))
                              (rule "all_unused" (formula "12") (term "1"))
                              (rule "all_unused" (formula "12") (term "1"))
                              (rule "concrete_and_3" (formula "12"))
                              (rule "ifSplit" (formula "11"))
                              (branch "if boolv_5 true"
                                 (rule "simplifyUpdate2" (formula "12"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "elim_double_block_2" (formula "11") (term "1"))
                                 (rule "elim_double_block_2" (formula "11") (term "1"))
                                 (rule "ifSplit" (formula "11"))
                                 (branch "if condition true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if condition false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "8"))
                                    (rule "simplifyUpdate1" (formula "8") (term "1"))
                                    (rule "applyOnPV" (formula "8") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "8"))
                                    (rule "false_right" (formula "8"))
                                    (rule "postincrement" (formula "11") (term "1"))
                                    (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=o"))
                                    (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                    (rule "variableDeclaration" (formula "11") (term "1") (newnames "o_1"))
                                    (rule "remove_parentheses_right" (formula "11") (term "1"))
                                    (rule "assignmentAdditionInt" (formula "11") (term "1"))
                                    (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
                                    (rule "sequentialToParallel2" (formula "11"))
                                    (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                                    (rule "applyOnElementary" (formula "11") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "11") (term "1,0,1,0"))
                                    (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "11") (term "1,0,1,0"))
                                    (rule "widening_identity_cast_5" (formula "11") (term "1"))
                                    (rule "assignment" (formula "11") (term "1"))
                                    (rule "sequentialToParallel2" (formula "11"))
                                    (rule "simplifyUpdate2" (formula "11"))
                                    (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                                    (rule "applyOnElementary" (formula "11") (term "1,0"))
                                    (rule "applyOnPV" (formula "11") (term "0,1,0"))
                                    (rule "blockEmpty" (formula "11") (term "1"))
                                    (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=boolv"))
                                    (rule "variableDeclaration" (formula "11") (term "1") (newnames "boolv_6"))
                                    (rule "compound_assignment_1_new" (formula "11") (term "1"))
                                    (rule "sequentialToParallel2" (formula "11"))
                                    (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                                    (rule "applyOnElementary" (formula "11") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
                                    (rule "boolean_not_equal_2" (formula "11") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "11") (term "0,1,0"))
                                    (rule "ifElseSplit" (formula "11"))
                                    (branch "if boolv_6 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "12"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "elim_double_block_2" (formula "11") (term "1"))
                                       (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "11") (term "1") (newnames "boolv_7"))
                                       (rule "less_than_comparison_simple" (formula "11") (term "1"))
                                       (rule "sequentialToParallel2" (formula "11"))
                                       (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                                       (rule "applyOnElementary" (formula "11") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "11") (term "0,0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
                                       (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
                                       (rule "applyOnPV" (formula "11") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,1,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
                                       (rule "ifSplit" (formula "11"))
                                       (branch "if boolv_7 true"
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "simplifyUpdate2" (formula "12"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "ifthenelse_concrete3" (formula "1"))
                                          (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                          (rule "concrete_or_4" (formula "1"))
                                          (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                          (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,0"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                          (rule "concrete_or_1" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                          (rule "times_zero_1" (formula "3") (term "0,0"))
                                          (rule "add_zero_left" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                          (rule "mul_literals" (formula "3") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                                          (rule "leq_literals" (formula "2") (term "0"))
                                          (rule "concrete_or_1" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "elim_double_block_2" (formula "11") (term "1"))
                                          (rule "elim_double_block_2" (formula "11") (term "1"))
                                          (rule "ifSplit" (formula "11"))
                                          (branch "if condition true"
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "12"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if condition false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "12"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "8"))
                                             (rule "applyOnPV" (formula "8") (term "0"))
                                             (rule "simplifyUpdate1" (formula "8") (term "1"))
                                             (rule "boolean_not_equal_2" (formula "8"))
                                             (rule "false_right" (formula "8"))
                                             (rule "postincrement" (formula "11") (term "1"))
                                             (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=o"))
                                             (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                             (rule "variableDeclaration" (formula "11") (term "1") (newnames "o_2"))
                                             (rule "remove_parentheses_right" (formula "11") (term "1"))
                                             (rule "assignmentAdditionInt" (formula "11") (term "1"))
                                             (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
                                             (rule "sequentialToParallel2" (formula "11"))
                                             (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                                             (rule "applyOnElementary" (formula "11") (term "1,0"))
                                             (rule "polySimp_addComm0" (formula "11") (term "1,0,1,0"))
                                             (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
                                             (rule "applyOnPV" (formula "11") (term "1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0,1,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,1,0"))
                                             (rule "widening_identity_cast_5" (formula "11") (term "1"))
                                             (rule "assignment" (formula "11") (term "1"))
                                             (rule "sequentialToParallel2" (formula "11"))
                                             (rule "simplifyUpdate2" (formula "11"))
                                             (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                                             (rule "applyOnElementary" (formula "11") (term "1,0"))
                                             (rule "applyOnPV" (formula "11") (term "0,1,0"))
                                             (rule "blockEmpty" (formula "11") (term "1"))
                                             (rule "assignment" (formula "11") (term "1"))
                                             (rule "sequentialToParallel2" (formula "11"))
                                             (rule "simplifyUpdate2" (formula "11"))
                                             (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                                             (rule "emptyIndexedLoopScope" (formula "11") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "11"))
                                             (rule "simplifyUpdate2" (formula "11") (term "0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0"))
                                             (rule "simplifyUpdate1" (formula "11") (term "1,0"))
                                             (rule "applyOnPV" (formula "11") (term "0,0"))
                                             (rule "boolean_not_equal_2" (formula "11") (term "0"))
                                             (rule "ifthenelse_false_for" (formula "11"))
                                             (rule "emptyModality" (formula "11") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "11"))
                                             (rule "simplifyUpdate2" (formula "11") (term "0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "1"))
                                             (rule "simplifyUpdate2" (formula "11") (term "0,1"))
                                             (rule "simplifyUpdate2" (formula "11") (term "1,1"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0"))
                                             (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                                             (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "11") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                                             (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
                                             (rule "applyOnPV" (formula "11") (term "0,0,0"))
                                             (rule "boolean_not_equal_2" (formula "11") (term "0,0"))
                                             (rule "concrete_impl_2" (formula "11") (term "0"))
                                             (rule "concrete_and_1" (formula "11"))
                                             (rule "impRight" (formula "11"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0"))
                                             (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                                             (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "8"))
                                             (rule "simplifyUpdate1Rigid" (formula "8") (term "1"))
                                             (rule "applyOnPV" (formula "8") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "8"))
                                             (rule "false_right" (formula "8"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                                             (rule "simplifyUpdate2" (formula "11") (term "0,0,0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "1,0,0"))
                                             (rule "simplifyUpdate1" (formula "11") (term "0,1,0,0"))
                                             (rule "simplifyUpdate1" (formula "11") (term "1,1,0,0"))
                                             (rule "applyOnPV" (formula "11") (term "0,1,0,0"))
                                             (rule "applyOnPV" (formula "11") (term "1,1,0,0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0,0,0"))
                                             (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0"))
                                             (rule "applyOnPV" (formula "11") (term "0,0,0,0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0,1,0"))
                                             (rule "simplifyUpdate1Rigid" (formula "11") (term "1,0,1,0"))
                                             (rule "applyOnPV" (formula "11") (term "0,0,1,0"))
                                             (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "12"))
                                             (rule "concrete_not_2" (formula "11") (term "1,0"))
                                             (rule "concrete_and_3" (formula "11") (term "0"))
                                             (rule "applyOnRigidFormula" (formula "11") (term "0,0,1"))
                                             (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1"))
                                             (rule "applyOnRigidTerm" (formula "11") (term "0,0,0,1"))
                                             (rule "simplifyUpdate1Rigid" (formula "11") (term "2,0,0,0,1"))
                                             (rule "applyOnPV" (formula "11") (term "0,0,0,0,1"))
                                             (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0,1"))
                                             (rule "eqClose" (formula "11") (term "0,0,1"))
                                             (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,1,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0"))
                                             (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "1"))
                                             (rule "concrete_and_3" (formula "11") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "11") (term "0") (ifseqformula "3"))
                                             (rule "leq_literals" (formula "11") (term "0,0"))
                                             (rule "concrete_or_1" (formula "11") (term "0"))
                                             (rule "concrete_and_1" (formula "11"))
                                             (rule "allRight" (formula "11") (inst "sk=f_0"))
                                             (rule "allRight" (formula "11") (inst "sk=o_0"))
                                             (rule "closeTrue" (formula "11"))
                                          )
                                       )
                                       (branch "if boolv_7 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "12"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "8"))
                                          (rule "simplifyUpdate1" (formula "8") (term "1"))
                                          (rule "applyOnPV" (formula "8") (term "0"))
                                          (rule "ifthenelse_concrete3" (formula "8"))
                                          (rule "boolean_not_equal_2" (formula "8") (term "1"))
                                          (rule "concrete_or_4" (formula "8"))
                                          (rule "inEqSimp_leqRight" (formula "8"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "blockEmpty" (formula "12") (term "1"))
                                          (rule "assignment" (formula "12") (term "1"))
                                          (rule "sequentialToParallel2" (formula "12"))
                                          (rule "simplifyUpdate2" (formula "12"))
                                          (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                                          (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "3"))
                                          (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                          (rule "add_literals" (formula "3") (term "1,0"))
                                          (rule "times_zero_1" (formula "3") (term "0"))
                                          (rule "qeq_literals" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "applyEq" (formula "12") (term "1,0,1,0,0") (ifseqformula "1"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "12") (term "0,1,0,0"))
                                          (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,0"))
                                          (rule "times_zero_1" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "4") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                          (rule "mul_literals" (formula "3") (term "1"))
                                          (rule "emptyIndexedLoopScope" (formula "10") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "10"))
                                          (rule "simplifyUpdate2" (formula "10") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0"))
                                          (rule "simplifyUpdate1" (formula "10") (term "1,0"))
                                          (rule "applyOnPV" (formula "10") (term "0,0"))
                                          (rule "boolean_not_equal_2" (formula "10") (term "0"))
                                          (rule "ifthenelse_false_for" (formula "10"))
                                          (rule "emptyModality" (formula "10") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "10"))
                                          (rule "simplifyUpdate2" (formula "10") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "1"))
                                          (rule "simplifyUpdate2" (formula "10") (term "0,1"))
                                          (rule "simplifyUpdate2" (formula "10") (term "1,1"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0"))
                                          (rule "simplifyUpdate2" (formula "10") (term "0,0"))
                                          (rule "simplifyUpdate2" (formula "10") (term "1,0"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "10") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "10") (term "1,0,0"))
                                          (rule "applyOnPV" (formula "10") (term "0,0,0"))
                                          (rule "boolean_not_equal_2" (formula "10") (term "0,0"))
                                          (rule "concrete_impl_2" (formula "10") (term "0"))
                                          (rule "concrete_and_1" (formula "10"))
                                          (rule "impRight" (formula "10"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0"))
                                          (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                                          (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "7"))
                                          (rule "simplifyUpdate1" (formula "7") (term "1"))
                                          (rule "applyOnPV" (formula "7") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "7"))
                                          (rule "false_right" (formula "7"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
                                          (rule "simplifyUpdate2" (formula "10") (term "0,0,0"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0,0,1"))
                                          (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
                                          (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
                                          (rule "replace_known_right" (formula "10") (term "0,1,0") (ifseqformula "11"))
                                          (rule "concrete_not_2" (formula "10") (term "1,0"))
                                          (rule "concrete_and_3" (formula "10") (term "0"))
                                          (rule "applyOnRigidTerm" (formula "10") (term "0,0,0,1"))
                                          (rule "simplifyUpdate1" (formula "10") (term "1,0,0,0,1"))
                                          (rule "simplifyUpdate1" (formula "10") (term "2,0,0,0,1"))
                                          (rule "applyOnPV" (formula "10") (term "0,0,0,0,1"))
                                          (rule "eqClose" (formula "10") (term "0,0,1"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "10") (term "1,0,0"))
                                          (rule "applyOnPV" (formula "10") (term "0,0,0"))
                                          (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
                                          (rule "simplifyUpdate1" (formula "10") (term "1,1,0"))
                                          (rule "simplifyUpdate1" (formula "10") (term "0,1,0"))
                                          (rule "applyOnPV" (formula "10") (term "1,1,0"))
                                          (rule "applyOnPV" (formula "10") (term "0,1,0"))
                                          (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0"))
                                          (rule "add_literals" (formula "10") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "10") (term "0,1,0"))
                                          (rule "leq_literals" (formula "10") (term "1,0"))
                                          (rule "concrete_and_3" (formula "10") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "2"))
                                          (rule "leq_literals" (formula "10") (term "0,0"))
                                          (rule "concrete_or_1" (formula "10") (term "0"))
                                          (rule "concrete_and_1" (formula "10"))
                                          (rule "allRight" (formula "10") (inst "sk=f_0"))
                                          (rule "allRight" (formula "10") (inst "sk=o_0"))
                                          (rule "closeTrue" (formula "10"))
                                       )
                                    )
                                    (branch "if boolv_6 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "12"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "8"))
                                       (rule "simplifyUpdate1" (formula "8") (term "1"))
                                       (rule "applyOnPV" (formula "8") (term "0"))
                                       (rule "boolean_equal" (formula "8"))
                                       (rule "closeTrue" (formula "8"))
                                    )
                                 )
                              )
                              (branch "if boolv_5 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "12"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "8"))
                                 (rule "simplifyUpdate1" (formula "8") (term "1"))
                                 (rule "applyOnPV" (formula "8") (term "0"))
                                 (rule "boolean_equal" (formula "8"))
                                 (rule "closeTrue" (formula "8"))
                              )
                           )
                        )
                        (branch "if boolv_4 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "11"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "8"))
                           (rule "applyOnPV" (formula "8") (term "0"))
                           (rule "simplifyUpdate1" (formula "8") (term "1"))
                           (rule "boolean_equal" (formula "8"))
                           (rule "closeTrue" (formula "8"))
                        )
                     )
                     (branch "if boolv_1 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "12"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "applyOnPV" (formula "8") (term "0"))
                        (rule "simplifyUpdate1" (formula "8") (term "1"))
                        (rule "boolean_equal" (formula "8"))
                        (rule "closeTrue" (formula "8"))
                     )
                  )
                  (branch "if boolv false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "ifthenelse_concrete3" (formula "8"))
                     (rule "boolean_not_equal_2" (formula "8") (term "1"))
                     (rule "concrete_or_4" (formula "8"))
                     (rule "replace_known_right" (formula "12") (term "0,0,1,0") (ifseqformula "8"))
                     (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
                     (rule "inEqSimp_leqRight" (formula "8"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "13") (term "0,1,0,1,1,0,0,0") (ifseqformula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "add_literals" (formula "13") (term "1,0,1,1,0,0,0"))
                     (rule "times_zero_1" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "12") (term "0,0,0,1,0,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,0"))
                     (rule "times_zero_1" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,0"))
                     (rule "times_zero_1" (formula "2") (term "0"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEqRigid" (formula "9") (term "0,0,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1"))
                     (rule "emptyIndexedLoopScope" (formula "9") (term "1"))
                     (rule "applyOnRigidFormula" (formula "9"))
                     (rule "simplifyUpdate2" (formula "9") (term "0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,0"))
                     (rule "applyOnPV" (formula "9") (term "0,0"))
                     (rule "boolean_equal" (formula "9") (term "0"))
                     (rule "ifthenelse_true_for" (formula "9"))
                     (rule "methodCallReturn" (formula "9") (term "1"))
                     (rule "assignment" (formula "9") (term "1"))
                     (rule "elimSelfSingleUpdateFor" (formula "9") (term "1"))
                     (rule "methodCallEmpty" (formula "9") (term "1"))
                     (rule "tryEmpty" (formula "9") (term "1"))
                     (rule "emptyModality" (formula "9") (term "1"))
                     (rule "applyOnRigidFormula" (formula "9"))
                     (rule "simplifyUpdate2" (formula "9") (term "0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,0"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,1,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,0,0"))
                     (rule "applyOnPV" (formula "9") (term "0,0,0"))
                     (rule "boolean_equal" (formula "9") (term "0,0"))
                     (rule "concrete_impl_1" (formula "9") (term "0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,0,1"))
                     (rule "applyOnPV" (formula "9") (term "0,0,0,1"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1"))
                     (rule "boolean_equal" (formula "9") (term "0,0,1"))
                     (rule "concrete_not_1" (formula "9") (term "0,1"))
                     (rule "concrete_impl_2" (formula "9") (term "1"))
                     (rule "concrete_and_3" (formula "9"))
                     (rule "notRight" (formula "9"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "ifSplit" (formula "10"))
                     (branch "if boolv_1 true"
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if boolv_1 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "simplifyUpdate1Rigid" (formula "8") (term "1"))
                        (rule "applyOnPV" (formula "8") (term "0"))
                        (rule "boolean_not_equal_2" (formula "8"))
                        (rule "false_right" (formula "8"))
                        (rule "emptyIndexedLoopScope" (formula "10") (term "1"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "simplifyUpdate2" (formula "10") (term "0"))
                        (rule "applyOnRigidFormula" (formula "10") (term "0"))
                        (rule "simplifyUpdate1" (formula "10") (term "1,0"))
                        (rule "applyOnPV" (formula "10") (term "0,0"))
                        (rule "boolean_equal" (formula "10") (term "0"))
                        (rule "ifthenelse_true_for" (formula "10"))
                        (rule "methodCallReturn" (formula "10") (term "1"))
                        (rule "assignment" (formula "10") (term "1"))
                        (rule "elimSelfSingleUpdateFor" (formula "10") (term "1"))
                        (rule "methodCallEmpty" (formula "10") (term "1"))
                        (rule "tryEmpty" (formula "10") (term "1"))
                        (rule "emptyModality" (formula "10") (term "1"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "simplifyUpdate2" (formula "10") (term "0"))
                        (rule "applyOnRigidFormula" (formula "10") (term "1"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "10") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "10") (term "0"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "10") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "10") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "10") (term "0,1,1"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
                        (rule "simplifyUpdate1" (formula "10") (term "1,1,0"))
                        (rule "applyOnPV" (formula "10") (term "0,1,0"))
                        (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "1"))
                        (rule "concrete_impl_4" (formula "10") (term "0"))
                        (rule "concrete_and_1" (formula "10"))
                        (rule "impRight" (formula "10"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "1"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,1"))
                        (rule "simplifyUpdate1" (formula "11") (term "0,1"))
                        (rule "applyOnPV" (formula "11") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0"))
                        (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "simplifyUpdate1" (formula "8") (term "1"))
                        (rule "applyOnPV" (formula "8") (term "0"))
                        (rule "boolean_equal" (formula "8"))
                        (rule "closeTrue" (formula "8"))
                     )
                  )
               )
            )
         )
      )
   )
   (branch "Case '<-'"
      (rule "diamondToBox" (formula "1") (term "1"))
      (rule "notLeft" (formula "1"))
      (rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_before,savedHeapBefore_before,conditionBefore_before,doneBefore_before,iBefore_before,resultBefore_before,thresholdBefore_before"))
      (rule "simplifyUpdate2" (formula "3") (term "1"))
      (rule "assignment" (formula "3") (term "1"))
      (rule "sequentialToParallel2" (formula "3"))
      (rule "simplifyUpdate3" (formula "3") (term "1,0"))
      (rule "assignment" (formula "3") (term "1"))
      (rule "sequentialToParallel2" (formula "3"))
      (rule "simplifyUpdate3" (formula "3") (term "1,0"))
      (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_between,savedHeapBefore_between,conditionBefore_between,doneBefore_between,iBefore_between,resultBefore_between,thresholdBefore_between"))
      (rule "simplifyUpdate2" (formula "2") (term "1"))
      (rule "assignment" (formula "2") (term "1"))
      (rule "sequentialToParallel2" (formula "2"))
      (rule "simplifyUpdate3" (formula "2") (term "1,0"))
      (rule "assignment" (formula "2") (term "1"))
      (rule "sequentialToParallel2" (formula "2"))
      (rule "simplifyUpdate3" (formula "2") (term "1,0"))
      (rule "loopScopeInvDiaAEEquivUnrollSplit" (formula "3") (term "1") (newnames "i_0,done_0,result_1,o,f") (inst "i=Z(2(#))") (inst "#x=x") (inst "#variant=variant") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0") (proofscript))
      (branch "Invariant Initially Valid"
         (rule "simplifyUpdate2" (formula "3") (proofscript))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "simplifyUpdate2" (formula "3") (term "0"))
         (rule "applyOnRigidFormula" (formula "3") (term "1"))
         (rule "simplifyUpdate1" (formula "3") (term "1,1"))
         (rule "simplifyUpdate1" (formula "3") (term "0,1"))
         (rule "applyOnPV" (formula "3") (term "1,1"))
         (rule "applyOnPV" (formula "3") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0"))
         (rule "applyOnPV" (formula "3") (term "0,0"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (rule "concrete_and_1" (formula "3"))
         (rule "inEqSimp_leqRight" (formula "3"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (rule "concrete_and_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Invariant Preserved and Used"
         (rule "loopScopeInvBoxAEEquiv" (formula "3") (term "1") (newnames "i_1,done_1,result_2,o,f") (inst "#x=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_1") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_1") (inst "anon_heap_LOOP=anon_heap_LOOP_1") (proofscript))
         (branch "Invariant Initially Valid"
            (rule "false_to_not_true" (formula "4") (term "0,1,0,1,1,1,1") (proofscript))
            (rule "eqClose" (formula "4") (term "1,0,1,1,1"))
            (rule "eq_and_2" (formula "4") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "4") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "4") (term "0,0,0,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "parallelWithSkip2" (formula "4") (term "0,1"))
            (rule "eqSymm" (formula "4") (term "0,0,1,0,1,1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1"))
            (rule "sequentialToParallel2" (formula "4"))
            (rule "simplifyUpdate2" (formula "4"))
            (rule "simplifyUpdate3" (formula "4") (term "1,0"))
            (rule "sequentialToParallel2" (formula "4"))
            (rule "simplifyUpdate3" (formula "4") (term "1,0"))
            (rule "impRight" (formula "4"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "1,0"))
            (rule "parallelWithSkip2" (formula "1") (term "0"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnElementary" (formula "6") (term "1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "5"))
            (rule "simplifyUpdate2" (formula "5") (term "0"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "5") (term "1"))
            (rule "simplifyUpdate1" (formula "5") (term "0,1"))
            (rule "simplifyUpdate1" (formula "5") (term "1,1"))
            (rule "applyOnPV" (formula "5") (term "0,1"))
            (rule "applyOnPV" (formula "5") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "5") (term "0"))
            (rule "applyOnPV" (formula "5") (term "0,0"))
            (rule "simplifyUpdate1" (formula "5") (term "1,0"))
            (rule "qeq_literals" (formula "5") (term "0"))
            (rule "concrete_and_1" (formula "5"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0,1,0"))
            (rule "inEqSimp_leqRight" (formula "5"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,0,1,1,0,1"))
            (rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
            (rule "assignment" (formula "6") (term "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
            (rule "qeq_literals" (formula "5") (term "0"))
            (rule "concrete_and_2" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
         (branch "Invariant Preserved and Used"
            (rule "introduceAxiom" (inst "cutFormula=i_0 = i_1 & done_0 = done_1 & result_1 = result_2") (proofscript))
            (rule "false_to_not_true" (formula "5") (term "0,1,0,1,1,1") (proofscript))
            (rule "false_to_not_true" (formula "6") (term "0,1,0,1,1,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,1,1"))
            (rule "eqClose" (formula "6") (term "1,0,1,1,1"))
            (rule "eq_and_2" (formula "6") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,0,1,1,0,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,0,0,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1,0,1,1,1,1"))
            (rule "parallelWithSkip2" (formula "6") (term "0,1"))
            (rule "parallelWithSkip2" (formula "5") (term "0,1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "8") (term "0,0,1,0,1,1,0,1,1,1,1"))
            (rule "eqSymm" (formula "7") (term "0,0,1,1,1,0,1,1,1"))
            (rule "eqSymm" (formula "3"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "polySimp_elimSub" (formula "8") (term "0,0,1,1"))
            (rule "polySimp_elimSub" (formula "8") (term "0,1,1,1,0,1,1,1,1"))
            (rule "sequentialToParallel2" (formula "7"))
            (rule "simplifyUpdate2" (formula "7"))
            (rule "simplifyUpdate3" (formula "7") (term "1,0"))
            (rule "impRight" (formula "7"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "sequentialToParallel2" (formula "10") (term "1"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0,1"))
            (rule "applyOnElementary" (formula "10") (term "1,0,1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "impRight" (formula "10"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "1,0"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnParallel" (formula "12") (term "1,0"))
            (rule "simplifyUpdate3" (formula "12") (term "0,1,0"))
            (rule "applyOnElementary" (formula "12") (term "1,1,0"))
            (rule "sequentialToParallel1" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,1,1,0"))
            (rule "applyOnRigidFormula" (formula "4"))
            (rule "simplifyUpdate1" (formula "4") (term "1"))
            (rule "simplifyUpdate1" (formula "4") (term "0"))
            (rule "applyOnPV" (formula "4") (term "1"))
            (rule "applyOnPV" (formula "4") (term "0"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnRigidTerm" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,0,1,1,0"))
            (rule "applyOnPV" (formula "12") (term "1,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "12") (term "1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,1,0,1,1,0"))
            (rule "applyOnPV" (formula "12") (term "0,1,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,1,1,0,1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
            (rule "assignment" (formula "11") (term "1"))
            (rule "sequentialToParallel2" (formula "11"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0"))
            (rule "assignment" (formula "12") (term "1"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0"))
            (rule "applyEq" (formula "11") (term "0,1,0,1,1,0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "10") (term "0,1,1,1,0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "10") (term "0,0,0,1,1,0,0") (ifseqformula "4"))
            (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "4"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv"))
            (rule "compound_assignment_3_nonsimple" (formula "9") (term "1"))
            (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_1"))
            (rule "compound_assignment_3_nonsimple" (formula "10") (term "1"))
            (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=boolv_1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv_2"))
            (rule "compound_assignment_2" (formula "9") (term "1") (inst "#v=v"))
            (rule "variableDeclarationAssign" (formula "9") (term "1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "v"))
            (rule "compound_assignment_1_new" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
            (rule "compound_assignment_1_new" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
            (rule "ifthenelse_concrete4" (formula "9") (term "0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "9") (term "1,0,0,1,0"))
            (rule "concrete_or_4" (formula "9") (term "0,0,1,0"))
            (rule "ifthenelse_negated" (formula "9") (term "0,1,0"))
            (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=boolv_2"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_3"))
            (rule "compound_assignment_2" (formula "10") (term "1") (inst "#v=v"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "v_1"))
            (rule "compound_assignment_1_new" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
            (rule "compound_assignment_1_new" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
            (rule "ifthenelse_concrete4" (formula "10") (term "0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "10") (term "1,0,0,1,0"))
            (rule "concrete_or_4" (formula "10") (term "0,0,1,0"))
            (rule "ifthenelse_negated" (formula "10") (term "0,1,0"))
            (rule "ifElseSplit" (formula "9"))
            (branch "if boolv_2 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "ifthenelse_concrete3" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "1"))
               (rule "concrete_or_4" (formula "1"))
               (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
               (rule "ifthenelse_true" (formula "11") (term "0,1,0"))
               (rule "ifSkipThen" (formula "10") (term "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "assignment" (formula "10") (term "1"))
               (rule "simplifyUpdate2" (formula "10") (term "1"))
               (rule "applyEq" (formula "5") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "11") (term "0,1,0,1,0,1,0,0,0") (ifseqformula "1"))
               (rule "emptyIndexedLoopScope" (formula "10") (term "1"))
               (rule "applyOnRigidFormula" (formula "10"))
               (rule "simplifyUpdate2" (formula "10") (term "0"))
               (rule "applyOnRigidFormula" (formula "10") (term "0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0"))
               (rule "applyOnPV" (formula "10") (term "0,0"))
               (rule "boolean_equal" (formula "10") (term "0"))
               (rule "ifthenelse_true_for" (formula "10"))
               (rule "methodCallReturn" (formula "10") (term "1"))
               (rule "assignment" (formula "10") (term "1"))
               (rule "elimSelfSingleUpdateFor" (formula "10") (term "1"))
               (rule "methodCallEmpty" (formula "10") (term "1"))
               (rule "tryEmpty" (formula "10") (term "1"))
               (rule "emptyModality" (formula "10") (term "1"))
               (rule "applyOnRigidFormula" (formula "10"))
               (rule "simplifyUpdate2" (formula "10") (term "0"))
               (rule "applyOnRigidFormula" (formula "10") (term "1"))
               (rule "simplifyUpdate2" (formula "10") (term "1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "0"))
               (rule "simplifyUpdate2" (formula "10") (term "1,0"))
               (rule "simplifyUpdate2" (formula "10") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "10") (term "1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "0,1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
               (rule "applyOnPV" (formula "10") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,0"))
               (rule "boolean_equal" (formula "10") (term "0,0"))
               (rule "concrete_impl_1" (formula "10") (term "0"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "1,0,1,1"))
               (rule "simplifyUpdate2" (formula "10") (term "0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,0,1"))
               (rule "applyOnPV" (formula "10") (term "0,0,0,1"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1"))
               (rule "boolean_equal" (formula "10") (term "0,0,1"))
               (rule "concrete_not_1" (formula "10") (term "0,1"))
               (rule "concrete_impl_2" (formula "10") (term "1"))
               (rule "concrete_and_3" (formula "10"))
               (rule "notRight" (formula "10"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "ifElseSplit" (formula "11"))
               (branch "if boolv_3 true"
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "ifSkipThen" (formula "12") (term "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_equal" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (rule "simplifyUpdate2" (formula "11") (term "1"))
                  (rule "emptyIndexedLoopScope" (formula "11") (term "1"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "simplifyUpdate2" (formula "11") (term "0"))
                  (rule "applyOnRigidFormula" (formula "11") (term "0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1,0"))
                  (rule "applyOnPV" (formula "11") (term "0,0"))
                  (rule "boolean_equal" (formula "11") (term "0"))
                  (rule "ifthenelse_true_for" (formula "11"))
                  (rule "methodCallReturn" (formula "11") (term "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (rule "elimSelfSingleUpdateFor" (formula "11") (term "1"))
                  (rule "methodCallEmpty" (formula "11") (term "1"))
                  (rule "tryEmpty" (formula "11") (term "1"))
                  (rule "emptyModality" (formula "11") (term "1"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "simplifyUpdate2" (formula "11") (term "0"))
                  (rule "applyOnRigidFormula" (formula "11") (term "1"))
                  (rule "simplifyUpdate2" (formula "11") (term "1,1"))
                  (rule "simplifyUpdate2" (formula "11") (term "0,1"))
                  (rule "applyOnRigidFormula" (formula "11") (term "0"))
                  (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                  (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "11") (term "1,1"))
                  (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                  (rule "simplifyUpdate2" (formula "11") (term "0,1,1"))
                  (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                  (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1,1,0"))
                  (rule "applyOnPV" (formula "11") (term "0,1,0"))
                  (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "1"))
                  (rule "concrete_impl_4" (formula "11") (term "0"))
                  (rule "concrete_and_1" (formula "11"))
                  (rule "impRight" (formula "11"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "12") (term "1"))
                  (rule "simplifyUpdate1" (formula "12") (term "0,1"))
                  (rule "simplifyUpdate1" (formula "12") (term "1,1"))
                  (rule "applyOnPV" (formula "12") (term "1,1"))
                  (rule "applyOnRigidFormula" (formula "12") (term "0"))
                  (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                  (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "applyOnPV" (formula "11") (term "0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1"))
                  (rule "boolean_equal" (formula "11"))
                  (rule "closeTrue" (formula "11"))
               )
               (branch "if boolv_3 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "11"))
                  (rule "simplifyUpdate1" (formula "11") (term "1"))
                  (rule "applyOnPV" (formula "11") (term "0"))
                  (rule "boolean_equal" (formula "11"))
                  (rule "closeTrue" (formula "11"))
               )
            )
            (branch "if boolv_2 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "9"))
               (rule "applyOnPV" (formula "9") (term "0"))
               (rule "simplifyUpdate1" (formula "9") (term "1"))
               (rule "ifthenelse_concrete3" (formula "9"))
               (rule "boolean_not_equal_2" (formula "9") (term "1"))
               (rule "concrete_or_4" (formula "9"))
               (rule "replace_known_right" (formula "11") (term "0,0,1,0") (ifseqformula "9"))
               (rule "ifthenelse_false" (formula "11") (term "0,1,0"))
               (rule "apply_eq_boolean" (formula "4") (term "1") (ifseqformula "9"))
               (rule "false_to_not_true" (formula "4"))
               (rule "notLeft" (formula "4"))
               (rule "apply_eq_boolean_rigid" (formula "11") (term "0,1,0,1,0,1,0,0,0") (ifseqformula "9"))
               (rule "apply_eq_boolean" (formula "10") (term "0,1,0,1,1,0,0") (ifseqformula "9"))
               (rule "less_than_comparison_simple" (formula "10") (term "1"))
               (rule "sequentialToParallel2" (formula "10"))
               (rule "simplifyUpdate3" (formula "10") (term "1,0"))
               (rule "applyOnElementary" (formula "10") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
               (rule "simplifyUpdate1" (formula "10") (term "0,0,0,1,0"))
               (rule "applyOnPV" (formula "10") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
               (rule "blockEmpty" (formula "10") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
               (rule "ifElseSplit" (formula "11"))
               (branch "if boolv_3 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_3 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "12"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "8"))
                  (rule "simplifyUpdate1" (formula "8") (term "1"))
                  (rule "applyOnPV" (formula "8") (term "0"))
                  (rule "boolean_not_equal_2" (formula "8"))
                  (rule "false_right" (formula "8"))
                  (rule "less_than_comparison_simple" (formula "11") (term "1"))
                  (rule "sequentialToParallel2" (formula "11"))
                  (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                  (rule "applyOnElementary" (formula "11") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "11") (term "0,0,0,1,0"))
                  (rule "applyOnPV" (formula "11") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "11") (term "0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,0"))
                  (rule "blockEmpty" (formula "11") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0"))
                  (rule "ifSplit" (formula "10"))
                  (branch "if boolv true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "ifthenelse_concrete3" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1"))
                     (rule "concrete_or_4" (formula "1"))
                     (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "1"))
                     (rule "ifthenelse_true" (formula "12") (term "0,1,0"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0"))
                     (rule "add_zero_right" (formula "3") (term "0,0"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                     (rule "concrete_or_1" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "2"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (rule "concrete_or_1" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "ifSplit" (formula "10"))
                     (branch "if condition true"
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                        (rule "abstractExecutionNonVoidLoopScope" (formula "11") (term "1") (inst "#label1=_label5") (inst "#v1=v1") (inst "#label=_label4") (inst "continues=continues_Body_0") (inst "breaks=breaks_Body_0") (inst "result=result_Body_0") (inst "returns=returns_Body_0") (inst "exc=exc_Body_0") (inst "normal=normal_Body_0"))
                        (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
                        (rule "eq_and" (formula "11") (term "1,1,1,0,1"))
                        (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
                        (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
                        (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                        (rule "simplifyUpdate2" (formula "11") (term "1,0,1"))
                        (rule "impRight" (formula "11"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,1,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,1,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,0,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0,0,1,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,0,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1"))
                        (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2Rigid" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,0,1,0,1,1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0,1,1"))
                        (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,0,0,0,0,1,0,1,1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1"))
                        (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2" (formula "2"))
                        (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "11"))
                        (rule "concrete_not_2" (formula "2") (term "1,1"))
                        (rule "concrete_and_3" (formula "2") (term "1"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1"))
                        (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "simplifyUpdate2Rigid" (formula "2"))
                        (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "12"))
                        (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "12"))
                        (rule "concrete_and_4" (formula "2") (term "1"))
                        (rule "concrete_or_4" (formula "2"))
                        (rule "replace_known_right" (formula "2") (term "0,1,1,0,0") (ifseqformula "12"))
                        (rule "concrete_not_2" (formula "2") (term "1,1,0,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0,0"))
                        (rule "replace_known_right" (formula "2") (term "0,1,0,0,0") (ifseqformula "12"))
                        (rule "concrete_not_2" (formula "2") (term "1,0,0,0"))
                        (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                        (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "12"))
                        (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "1") (term "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                        (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,1,0"))
                        (rule "applySkip1" (formula "1") (term "1,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0"))
                        (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                        (rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                        (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                        (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                        (rule "apply_eq_boolean_rigid" (formula "15") (term "0,1,0,1,1") (ifseqformula "12"))
                        (rule "commute_and_2" (formula "3") (term "1"))
                        (rule "commute_and_2" (formula "2") (term "1"))
                        (rule "commute_and_2" (formula "2") (term "1,0"))
                        (rule "commute_and_2" (formula "2") (term "1,0,0"))
                        (rule "ifSplit" (formula "16"))
                        (branch "if boolv_1 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "commute_and_2" (formula "2") (term "0,0,0"))
                           (rule "commute_and" (formula "3") (term "0,1"))
                           (rule "commute_and" (formula "2") (term "0,1"))
                           (rule "commute_and" (formula "2") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                           (rule "eq_or" (formula "2") (term "1,1,0,0"))
                           (rule "commute_and" (formula "2") (term "1,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "commute_or" (formula "2") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
                           (rule "commute_or" (formula "2") (term "0,0,1,0,0"))
                           (rule "commute_and_2" (formula "2") (term "1,0,0"))
                           (rule "commute_and" (formula "2") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "1,0,0,0"))
                           (rule "commute_or" (formula "2") (term "1,1,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                           (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,1,0,0,0"))
                           (rule "neq_or" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "concrete_and_1" (formula "2") (term "0,1,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                           (rule "eq_or" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "commute_and" (formula "2") (term "0,0,0,0,0"))
                           (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                           (rule "shift_paren_and" (formula "2") (term "0,0"))
                           (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0"))
                           (rule "cnf_rightDist" (formula "2") (term "1,0"))
                           (rule "neq_or_3" (formula "2") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "1,0"))
                           (rule "neq_or_3" (formula "2") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "1,0"))
                           (rule "neq_or" (formula "2") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "1,0"))
                           (rule "neq_or_3" (formula "2") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0"))
                           (rule "commute_or" (formula "2") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                           (rule "neq_or_3" (formula "2") (term "1,0,1,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,1,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                           (rule "eq_or" (formula "2") (term "0,1,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                           (rule "commute_or" (formula "2") (term "0,0,1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,0,1,0,0"))
                           (rule "eq_or" (formula "2") (term "0,1,0,1,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                           (rule "commute_or" (formula "2") (term "0,1,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                           (rule "commute_or" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "eq_and_2" (formula "2") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                           (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "neq_or" (formula "2") (term "0,1,0,0,1,0,0"))
                           (rule "concrete_or_1" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,1,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                           (rule "neq_or_3" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,1,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,0,0,1,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "commute_or" (formula "2") (term "0,1,0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,1,0,0"))
                           (rule "eq_or_2" (formula "2") (term "1,0,0,0,1,0,0"))
                           (rule "commute_or" (formula "2") (term "0,0,0,0,1,0,0"))
                           (rule "eq_and" (formula "2") (term "0,0,0,1,0,0"))
                           (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=boolv"))
                           (rule "variableDeclaration" (formula "16") (term "1") (newnames "boolv_4"))
                           (rule "compound_assignment_1_new" (formula "16") (term "1"))
                           (rule "sequentialToParallel2" (formula "16"))
                           (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                           (rule "applyOnElementary" (formula "16") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "16") (term "0,0,1,0"))
                           (rule "ifthenelse_false" (formula "16") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0,0"))
                           (rule "eq_or" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                           (rule "commute_and_2" (formula "2") (term "1,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0,0,0"))
                           (rule "eq_or" (formula "2") (term "0,1,0,0,0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "eq_or" (formula "2") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "shift_paren_and" (formula "2") (term "0,0"))
                           (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                           (rule "shift_paren_and" (formula "2") (term "0,0,0,0"))
                           (rule "shift_paren_and" (formula "2") (term "0"))
                           (rule "shift_paren_and" (formula "2") (term "0,0"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "neq_or_4" (formula "3") (term "1"))
                           (rule "concrete_and_3" (formula "3"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "neq_or_4" (formula "3") (term "1"))
                           (rule "concrete_and_3" (formula "3"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "neq_or_4" (formula "3") (term "1"))
                           (rule "concrete_and_3" (formula "3"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "eq_or_2" (formula "3") (term "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "2") (term "1,0,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0,0"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,1") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,1"))
                           (rule "eq_and_2" (formula "3") (term "0,0,0,1"))
                           (rule "replace_known_left" (formula "3") (term "1,0,1") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "3") (term "0,1"))
                           (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0,0,0"))
                           (rule "eq_and_2" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "eq_or_2" (formula "3") (term "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "replace_known_left" (formula "2") (term "1,0,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "eq_or_2" (formula "3") (term "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,1") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,1"))
                           (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "eq_or_2" (formula "3") (term "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "3") (term "1,1"))
                           (rule "eq_or" (formula "3") (term "0,1,1"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or" (formula "3"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or" (formula "2"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "0"))
                           (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "1"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4"))
                           (rule "neq_or_3" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3"))
                           (rule "commute_or_2" (formula "3") (term "0"))
                           (rule "neq_or_2" (formula "3") (term "0,0"))
                           (rule "concrete_or_1" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3"))
                           (rule "neq_or_2" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "eq_or_2" (formula "3") (term "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "4"))
                           (rule "concrete_or_1" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "concrete_or_1" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "replace_known_left" (formula "2") (term "0,1,0,0,1") (ifseqformula "4"))
                           (rule "concrete_or_1" (formula "2") (term "1,0,0,1"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,1"))
                           (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "2") (term "1"))
                           (rule "replace_known_left" (formula "3") (term "0,1,0,1") (ifseqformula "4"))
                           (rule "concrete_or_1" (formula "3") (term "1,0,1"))
                           (rule "concrete_and_3" (formula "3") (term "0,1"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "neq_or" (formula "2") (term "0"))
                           (rule "concrete_and_1" (formula "2"))
                           (rule "commute_or_2" (formula "2"))
                           (rule "neq_or_2" (formula "2") (term "0"))
                           (rule "concrete_or_1" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "neq_or_3" (formula "2") (term "1"))
                           (rule "concrete_and_3" (formula "2"))
                           (rule "commute_or" (formula "2"))
                           (rule "ifElseSplit" (formula "19"))
                           (branch "if boolv_4 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "boolean_equal" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "19") (term "1") (newnames "boolv_5"))
                              (rule "less_than_comparison_simple" (formula "19") (term "1"))
                              (rule "sequentialToParallel2" (formula "19"))
                              (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                              (rule "applyOnElementary" (formula "19") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "19") (term "0,0,0,1,0"))
                              (rule "applyOnPV" (formula "19") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0"))
                              (rule "replace_known_left" (formula "19") (term "0,0,1,0") (ifseqformula "8"))
                              (rule "ifthenelse_true" (formula "19") (term "0,1,0"))
                              (rule "ifSplit" (formula "19"))
                              (branch "if boolv_5 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "20"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "elim_double_block_2" (formula "19") (term "1"))
                                 (rule "ifSplit" (formula "19"))
                                 (branch "if condition true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_equal" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "abstractExecutionNonVoidLoopScope" (formula "19") (term "1") (inst "#label1=_label7") (inst "#v1=v1") (inst "#label=_label6") (inst "continues=continues_Body_0") (inst "breaks=breaks_Body_0") (inst "result=result_Body_0") (inst "returns=returns_Body_0") (inst "exc=exc_Body_0") (inst "normal=normal_Body_0"))
                                    (rule "eq_and" (formula "19") (term "1,1,1,0,1"))
                                    (rule "concrete_and_3" (formula "19") (term "0,1,1,0,1"))
                                    (rule "concrete_and_3" (formula "19") (term "0,1,1,0,1"))
                                    (rule "concrete_and_3" (formula "19") (term "0,1,1,0,1"))
                                    (rule "concrete_and_3" (formula "19") (term "0,1,1,0,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "19") (term "1,0,1"))
                                    (rule "impRight" (formula "19"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1,0,1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,1,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,1,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1,1,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,1,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "17"))
                                    (rule "concrete_not_2" (formula "2") (term "1,1"))
                                    (rule "concrete_and_3" (formula "2") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "simplifyUpdate2Rigid" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "18"))
                                    (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                                    (rule "concrete_and_3" (formula "2") (term "1,0"))
                                    (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "18"))
                                    (rule "concrete_and_4" (formula "2") (term "1"))
                                    (rule "concrete_or_4" (formula "2"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,0,0,0") (ifseqformula "18"))
                                    (rule "concrete_not_2" (formula "2") (term "1,0,0,0"))
                                    (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,1,0,0") (ifseqformula "18"))
                                    (rule "concrete_not_2" (formula "2") (term "1,1,0,0"))
                                    (rule "concrete_and_3" (formula "2") (term "1,0,0"))
                                    (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "18"))
                                    (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                                    (rule "concrete_and_3" (formula "2") (term "1,0"))
                                    (rule "applyOnRigidFormula" (formula "1") (term "1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
                                    (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,0,1"))
                                    (rule "applySkip1" (formula "1") (term "1,0,0,1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,0,1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,0"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                                    (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                                    (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                                    (rule "apply_eq_boolean_rigid" (formula "21") (term "0,1,0,1,1") (ifseqformula "17"))
                                    (rule "commute_and_2" (formula "2") (term "1"))
                                    (rule "commute_and_2" (formula "1") (term "1"))
                                    (rule "commute_and_2" (formula "1") (term "1,0"))
                                    (rule "commute_and_2" (formula "1") (term "0,0,0"))
                                    (rule "commute_and_2" (formula "1") (term "1,0,0"))
                                    (rule "commute_and" (formula "2") (term "0,1"))
                                    (rule "commute_and" (formula "1") (term "0,1"))
                                    (rule "commute_and" (formula "1") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "eq_or" (formula "1") (term "1,1,0,0"))
                                    (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,1,0,0") (ifseqformula "5"))
                                    (rule "concrete_and_3" (formula "1") (term "0,1,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "6"))
                                    (rule "concrete_and_1" (formula "1") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0,0") (ifseqformula "5"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                                    (rule "eq_or" (formula "1") (term "1,0,0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                                    (rule "concrete_and_1" (formula "1") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,1,0,0,0"))
                                    (rule "neq_or" (formula "1") (term "0,0,1,0,0,0"))
                                    (rule "concrete_and_1" (formula "1") (term "0,1,0,0,0"))
                                    (rule "shift_paren_and" (formula "1") (term "0,0,0"))
                                    (rule "commute_and_2" (formula "1") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                    (rule "neq_or_3" (formula "1") (term "1,1,0"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                    (rule "neq_or" (formula "1") (term "1,1,0"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                    (rule "commute_or" (formula "1") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,1,0,0"))
                                    (rule "neq_or" (formula "1") (term "0,1,1,0,0"))
                                    (rule "concrete_or_1" (formula "1") (term "1,1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "4"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,1,0,0") (ifseqformula "6"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "5"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "neq_or_3" (formula "1") (term "1,1,0,0"))
                                    (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                                    (rule "commute_or" (formula "1") (term "1,0,0"))
                                    (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "3"))
                                    (rule "concrete_and_3" (formula "1") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "1") (term "0,0"))
                                    (rule "eq_or" (formula "1") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "1") (term "1,0,0"))
                                    (rule "eq_or" (formula "1") (term "0,1,0,0"))
                                    (rule "shift_paren_and" (formula "1") (term "0"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "neq_or_4" (formula "2") (term "1"))
                                    (rule "concrete_and_3" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "neq_or_4" (formula "2") (term "1"))
                                    (rule "concrete_and_3" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or" (formula "2"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "commute_or" (formula "1"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "neq_or_3" (formula "3") (term "0"))
                                    (rule "concrete_or_1" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "commute_or_2" (formula "2"))
                                    (rule "commute_or_2" (formula "2") (term "0"))
                                    (rule "neq_or_2" (formula "2") (term "0,0"))
                                    (rule "concrete_or_1" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "3"))
                                    (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
                                    (rule "concrete_or_1" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "commute_or_2" (formula "2"))
                                    (rule "neq_or_2" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2"))
                                    (rule "neq_or_3" (formula "2") (term "1"))
                                    (rule "concrete_and_3" (formula "2"))
                                    (rule "commute_or" (formula "2"))
                                    (rule "cnf_rightDist" (formula "1"))
                                    (rule "neq_or" (formula "1") (term "0"))
                                    (rule "concrete_and_1" (formula "1"))
                                    (rule "commute_or_2" (formula "1"))
                                    (rule "neq_or_2" (formula "1") (term "0"))
                                    (rule "concrete_or_1" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "if" (formula "18") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "0,1"))
                                    (rule "applySkip2" (formula "18") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "18") (term "0,1"))
                                    (rule "simplifyUpdate1" (formula "18") (term "1,0,1"))
                                    (rule "applyOnPV" (formula "18") (term "0,0,1"))
                                    (rule "applyOnRigidFormula" (formula "18"))
                                    (rule "simplifyUpdate2" (formula "18") (term "0"))
                                    (rule "blockReturn" (formula "18") (term "1,1,1,1"))
                                    (rule "blockReturn" (formula "18") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                    (rule "blockReturn" (formula "18") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "18") (term "1"))
                                    (rule "blockReturn" (formula "18") (term "1,1,1,1"))
                                    (rule "ifthenelse_split_for" (formula "18"))
                                    (branch "returns_Body_0 = TRUE TRUE"
                                       (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
                                       (rule "concrete_not_1" (formula "6") (term "0"))
                                       (rule "concrete_or_2" (formula "6"))
                                       (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "1"))
                                       (rule "concrete_not_1" (formula "3") (term "1"))
                                       (rule "concrete_or_4" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "5"))
                                       (rule "concrete_or_3" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "14"))
                                       (rule "concrete_not_2" (formula "3") (term "0,0"))
                                       (rule "concrete_or_1" (formula "3") (term "0"))
                                       (rule "concrete_or_1" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "replace_known_right" (formula "4") (term "0,0,0,1") (ifseqformula "13"))
                                       (rule "concrete_not_2" (formula "4") (term "0,0,1"))
                                       (rule "concrete_and_1" (formula "4") (term "0,1"))
                                       (rule "replace_known_left" (formula "4") (term "0,0,1") (ifseqformula "1"))
                                       (rule "concrete_not_1" (formula "4") (term "0,1"))
                                       (rule "concrete_and_2" (formula "4") (term "1"))
                                       (rule "concrete_eq_4" (formula "4"))
                                       (rule "notLeft" (formula "4"))
                                       (rule "applyEqRigid" (formula "18") (term "0,1,0,0,0,0,1,1") (ifseqformula "1"))
                                       (rule "applyEqRigid" (formula "18") (term "0,0,0,0,0,0,1,1") (ifseqformula "3"))
                                       (rule "apply_eq_boolean_rigid" (formula "18") (term "0,1,0,0,1,1") (ifseqformula "13"))
                                       (rule "returnIndexedLoopScope" (formula "17") (term "1,1,1"))
                                       (rule "assignment" (formula "17") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                       (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                                       (rule "assignment" (formula "17") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                                       (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                                       (rule "tryEmpty" (formula "17") (term "1,1,1"))
                                       (rule "emptyModality" (formula "17") (term "1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "1"))
                                       (rule "applySkip2" (formula "17") (term "1"))
                                       (rule "sequentialToParallel2" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "17"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "17"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,0"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0"))
                                       (rule "boolean_equal" (formula "17") (term "0,0"))
                                       (rule "concrete_impl_1" (formula "17") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0,1"))
                                       (rule "boolean_equal" (formula "17") (term "0,0,1"))
                                       (rule "concrete_not_1" (formula "17") (term "0,1"))
                                       (rule "concrete_impl_2" (formula "17") (term "1"))
                                       (rule "concrete_and_3" (formula "17"))
                                       (rule "notRight" (formula "17"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "3") (term "0,1,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "3") (term "1,0,1,0,0,0"))
                                       (rule "if" (formula "18") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                       (rule "applyOnPV" (formula "18") (term "0,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "18") (term "1,0,1,1"))
                                       (rule "boolean_equal" (formula "18") (term "0,1,1"))
                                       (rule "ifthenelse_true_for" (formula "18") (term "1,1"))
                                       (rule "blockReturn" (formula "18") (term "1,1,1"))
                                       (rule "blockReturn" (formula "18") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                       (rule "blockReturn" (formula "18") (term "1,1,1"))
                                       (rule "blockReturn" (formula "18") (term "1,1,1"))
                                       (rule "blockReturn" (formula "18") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "18"))
                                       (rule "returnIndexedLoopScope" (formula "18") (term "1,1,1"))
                                       (rule "assignment" (formula "18") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                       (rule "methodCallReturn" (formula "18") (term "1,1,1"))
                                       (rule "assignment" (formula "18") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                       (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "18") (term "0,1,0,1,1"))
                                       (rule "methodCallEmpty" (formula "18") (term "1,1,1"))
                                       (rule "tryEmpty" (formula "18") (term "1,1,1"))
                                       (rule "emptyModality" (formula "18") (term "1,1,1"))
                                       (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "1"))
                                       (rule "applySkip2" (formula "18") (term "1"))
                                       (rule "sequentialToParallel2" (formula "18"))
                                       (rule "simplifyUpdate2" (formula "18"))
                                       (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                                       (rule "applyOnRigidFormula" (formula "18"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "0"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0,0"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "18") (term "1,0"))
                                       (rule "simplifyUpdate1Rigid" (formula "18") (term "1,1,0"))
                                       (rule "applyOnPV" (formula "18") (term "0,1,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "1"))
                                       (rule "concrete_impl_4" (formula "18") (term "0"))
                                       (rule "concrete_and_1" (formula "18"))
                                       (rule "impRight" (formula "18"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "19") (term "1"))
                                       (rule "simplifyUpdate1" (formula "19") (term "0,1"))
                                       (rule "simplifyUpdate1" (formula "19") (term "1,1"))
                                       (rule "applyOnPV" (formula "19") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "19") (term "0"))
                                       (rule "simplifyUpdate2" (formula "19") (term "1,0"))
                                       (rule "simplifyUpdate2" (formula "19") (term "0,0"))
                                       (rule "applyOnRigidFormula" (formula "13"))
                                       (rule "simplifyUpdate1Rigid" (formula "13") (term "1"))
                                       (rule "applyOnPV" (formula "13") (term "0"))
                                       (rule "boolean_equal" (formula "13"))
                                       (rule "closeTrue" (formula "13"))
                                    )
                                    (branch "returns_Body_0 = TRUE FALSE"
                                       (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "18"))
                                       (rule "concrete_not_2" (formula "2") (term "1"))
                                       (rule "concrete_or_3" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "17"))
                                       (rule "concrete_not_2" (formula "4") (term "0"))
                                       (rule "concrete_or_1" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "16"))
                                       (rule "concrete_or_4" (formula "2") (term "0"))
                                       (rule "replace_known_right" (formula "3") (term "0,1,0,1") (ifseqformula "15"))
                                       (rule "concrete_not_2" (formula "3") (term "1,0,1"))
                                       (rule "concrete_and_3" (formula "3") (term "0,1"))
                                       (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,0,0,0,1,1") (ifseqformula "15"))
                                       (rule "ifUnfold" (formula "16") (term "1,1,1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "16") (term "1,1,1") (newnames "boolv_6"))
                                       (rule "inequality_comparison_simple" (formula "16") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                       (rule "applyOnElementary" (formula "16") (term "1,0,1,1"))
                                       (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0,1,1"))
                                       (rule "applyOnPV" (formula "16") (term "0,0,0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0,1,1"))
                                       (rule "applyConcrOnAbstrUpdTerm" (formula "1") (term "0,1,0,0,0"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0"))
                                       (rule "if" (formula "17") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                       (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                       (rule "boolean_not_equal_2" (formula "17") (term "0,1,1"))
                                       (rule "ifthenelse_false_for" (formula "17") (term "1,1"))
                                       (rule "ifUnfold" (formula "17") (term "1,1,1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "17") (term "1,1,1") (newnames "boolv_7"))
                                       (rule "inequality_comparison_simple" (formula "17") (term "1,1,1"))
                                       (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                       (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,1,1"))
                                       (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0,1,1"))
                                       (rule "applyOnPV" (formula "17") (term "0,0,0,1,0,1,1"))
                                       (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0,1,1"))
                                       (rule "applyConcrOnAbstrUpd" (formula "16"))
                                       (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                       (rule "applyConcrOnAbstrUpd" (formula "17"))
                                       (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                       (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                       (rule "if" (formula "16") (term "1,1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                       (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                       (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                       (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                                       (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1"))
                                       (rule "applyOnPV" (formula "16") (term "0,0,1,1"))
                                       (rule "ifthenelse_concrete4" (formula "16") (term "0,1,1"))
                                       (rule "boolean_not_equal_2" (formula "16") (term "1,0,1,1"))
                                       (rule "concrete_or_4" (formula "16") (term "0,1,1"))
                                       (rule "ifthenelse_negated_for" (formula "16") (term "1,1"))
                                       (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                       (rule "simplifyUpdate2Rigid" (formula "16") (term "0,1"))
                                       (rule "applyOnRigidFormula" (formula "16"))
                                       (rule "simplifyUpdate2" (formula "16") (term "0"))
                                       (rule "blockThrow" (formula "16") (term "1,1,1,2"))
                                       (rule "blockThrow" (formula "16") (term "1,1,1,2"))
                                       (rule "simplifyUpdate2" (formula "16") (term "1,1,2"))
                                       (rule "blockThrow" (formula "16") (term "1,1,1,2"))
                                       (rule "simplifyUpdate2" (formula "16") (term "1,1,2"))
                                       (rule "blockThrow" (formula "16") (term "1,1,1,2"))
                                       (rule "ifthenelse_split_for" (formula "16"))
                                       (branch "exc_Body_0 = null TRUE"
                                          (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                                          (rule "concrete_or_3" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "1"))
                                          (rule "concrete_and_3" (formula "3") (term "1"))
                                          (rule "applyEqRigid" (formula "17") (term "0,0,0,1,1,0,1,1") (ifseqformula "1"))
                                          (rule "eqClose" (formula "17") (term "0,0,1,1,0,1,1"))
                                          (rule "ifthenelse_true" (formula "17") (term "0,1,1,0,1,1"))
                                          (rule "applyEqRigid" (formula "17") (term "0,0,0,0,1,0,1,1") (ifseqformula "1"))
                                          (rule "if" (formula "17") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "0,1"))
                                          (rule "applySkip2" (formula "17") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "17"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0"))
                                          (rule "applyOnPV" (formula "17") (term "0,0"))
                                          (rule "boolean_not_equal_2" (formula "17") (term "0"))
                                          (rule "ifthenelse_false_for" (formula "17"))
                                          (rule "if" (formula "16") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "0,1"))
                                          (rule "applySkip2" (formula "16") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "16"))
                                          (rule "simplifyUpdate2" (formula "16") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "16") (term "0"))
                                          (rule "simplifyUpdate1" (formula "16") (term "1,0"))
                                          (rule "applyOnPV" (formula "16") (term "0,0"))
                                          (rule "boolean_not_equal_2" (formula "16") (term "0"))
                                          (rule "ifthenelse_false_for" (formula "16"))
                                          (rule "if" (formula "17") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                          (rule "boolean_not_equal_2" (formula "17") (term "0,1,1"))
                                          (rule "ifthenelse_false_for" (formula "17") (term "1,1"))
                                          (rule "if" (formula "16") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                          (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                          (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                                          (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "16") (term "0,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "16") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "16"))
                                          (rule "simplifyUpdate2" (formula "16") (term "0"))
                                          (rule "blockEmpty" (formula "16") (term "1,1,1,2"))
                                          (rule "assignment" (formula "16") (term "1,1,1,2"))
                                          (rule "simplifyUpdate2" (formula "16") (term "1,1,2"))
                                          (rule "simplifyUpdate2" (formula "16") (term "1,1,1,2"))
                                          (rule "ifthenelse_split_for" (formula "16"))
                                          (branch "breaks_Body_0 = TRUE TRUE"
                                             (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
                                             (rule "concrete_not_1" (formula "4") (term "1"))
                                             (rule "concrete_eq_4" (formula "4"))
                                             (rule "notLeft" (formula "4"))
                                             (rule "applyEqRigid" (formula "18") (term "0,1,0,1,1") (ifseqformula "1"))
                                             (rule "blockBreak" (formula "17") (term "1,1,1"))
                                             (rule "blockBreak" (formula "17") (term "1,1,1"))
                                             (rule "blockBreak" (formula "17") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                             (rule "blockBreak" (formula "17") (term "1,1,1"))
                                             (rule "unlabeledBreakIndexedLoopScope" (formula "17") (term "1,1,1"))
                                             (rule "assignment" (formula "17") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                             (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                                             (rule "assignment" (formula "17") (term "1,1,1"))
                                             (rule "elimSelfSingleUpdateFor" (formula "17") (term "1,1,1"))
                                             (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                                             (rule "tryEmpty" (formula "17") (term "1,1,1"))
                                             (rule "emptyModality" (formula "17") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1"))
                                             (rule "applyOnPV" (formula "17") (term "0,0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1"))
                                             (rule "boolean_equal" (formula "17") (term "0,0,1,1"))
                                             (rule "concrete_impl_1" (formula "17") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1,1"))
                                             (rule "applyOnPV" (formula "17") (term "0,0,0,1,1,1"))
                                             (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,0,1,1,1"))
                                             (rule "boolean_equal" (formula "17") (term "0,0,1,1,1"))
                                             (rule "concrete_not_1" (formula "17") (term "0,1,1,1"))
                                             (rule "concrete_impl_2" (formula "17") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "17") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "17"))
                                             (rule "notRight" (formula "17"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                             (rule "if" (formula "18") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "0,1"))
                                             (rule "applySkip2" (formula "18") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,1"))
                                             (rule "ifthenelse_true_for" (formula "18") (term "1"))
                                             (rule "elim_double_block_2" (formula "18") (term "1,1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                             (rule "unlabeledBreakIndexedLoopScope" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                             (rule "methodCallReturn" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "elimSelfSingleUpdateFor" (formula "18") (term "1,1,1"))
                                             (rule "methodCallEmpty" (formula "18") (term "1,1,1"))
                                             (rule "tryEmpty" (formula "18") (term "1,1,1"))
                                             (rule "emptyModality" (formula "18") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,1"))
                                             (rule "concrete_impl_1" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,1,1,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "0,1,1,1,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "1,1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,0,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,1,1"))
                                             (rule "concrete_not_1" (formula "18") (term "0,1,1,1"))
                                             (rule "concrete_impl_2" (formula "18") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18"))
                                             (rule "applyOnRigidFormula" (formula "18"))
                                             (rule "simplifyUpdate1Rigid" (formula "18") (term "1"))
                                             (rule "close" (formula "18") (ifseqformula "1"))
                                          )
                                          (branch "breaks_Body_0 = TRUE FALSE"
                                             (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "16"))
                                             (rule "concrete_not_2" (formula "3") (term "1"))
                                             (rule "concrete_eq_3" (formula "3"))
                                             (rule "apply_eq_boolean_rigid" (formula "18") (term "0,1,0,1,1") (ifseqformula "16"))
                                             (rule "blockBreak" (formula "17") (term "1,1,1"))
                                             (rule "blockBreak" (formula "17") (term "1,1,1"))
                                             (rule "unlabeledBreakIndexedLoopScope" (formula "17") (term "1,1,1"))
                                             (rule "assignment" (formula "17") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                             (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                                             (rule "assignment" (formula "17") (term "1,1,1"))
                                             (rule "elimSelfSingleUpdateFor" (formula "17") (term "1,1,1"))
                                             (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                                             (rule "tryEmpty" (formula "17") (term "1,1,1"))
                                             (rule "emptyModality" (formula "17") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1"))
                                             (rule "applyOnPV" (formula "17") (term "0,0,0,1,1"))
                                             (rule "boolean_equal" (formula "17") (term "0,0,1,1"))
                                             (rule "concrete_impl_1" (formula "17") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1,1"))
                                             (rule "applyOnPV" (formula "17") (term "0,0,0,1,1,1"))
                                             (rule "boolean_equal" (formula "17") (term "0,0,1,1,1"))
                                             (rule "concrete_not_1" (formula "17") (term "0,1,1,1"))
                                             (rule "concrete_impl_2" (formula "17") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "17") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "17"))
                                             (rule "notRight" (formula "17"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                             (rule "if" (formula "18") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "0,1"))
                                             (rule "applySkip2" (formula "18") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,1"))
                                             (rule "boolean_not_equal_2" (formula "18") (term "0,1"))
                                             (rule "ifthenelse_false_for" (formula "18") (term "1"))
                                             (rule "blockEmpty" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                             (rule "blockEmpty" (formula "18") (term "1,1,1"))
                                             (rule "postincrement" (formula "18") (term "1,1,1"))
                                             (rule "compound_int_cast_expression" (formula "18") (term "1,1,1") (inst "#v=o"))
                                             (rule "variableDeclarationAssign" (formula "18") (term "1,1,1"))
                                             (rule "variableDeclaration" (formula "18") (term "1,1,1") (newnames "o"))
                                             (rule "remove_parentheses_right" (formula "18") (term "1,1,1"))
                                             (rule "assignmentAdditionInt" (formula "18") (term "1,1,1"))
                                             (rule "translateJavaAddInt" (formula "18") (term "0,0,1,1,1"))
                                             (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                             (rule "polySimp_addComm0" (formula "18") (term "1,0,1,0,1,1"))
                                             (rule "applyOnRigidTerm" (formula "18") (term "0,1,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "0,0,1,0,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "1,0,1,0,1,1"))
                                             (rule "widening_identity_cast_5" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,1,0,1,1"))
                                             (rule "blockEmpty" (formula "18") (term "1,1,1"))
                                             (rule "ifElseUnfold" (formula "18") (term "1,1,1") (inst "#boolv=boolv"))
                                             (rule "variableDeclaration" (formula "18") (term "1,1,1") (newnames "boolv_8"))
                                             (rule "compound_assignment_1_new" (formula "18") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnRigidTerm" (formula "18") (term "0,1,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,0,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,0,1,1"))
                                             (rule "ifthenelse_true" (formula "18") (term "0,1,0,1,1"))
                                             (rule "ifElse" (formula "18") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                             (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "0,1"))
                                             (rule "applySkip2" (formula "18") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "18"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0"))
                                             (rule "applyOnPV" (formula "18") (term "0,0"))
                                             (rule "boolean_not_equal_2" (formula "18") (term "0"))
                                             (rule "ifthenelse_false_for" (formula "18"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "blockBreak" (formula "18") (term "1,1,1"))
                                             (rule "unlabeledBreakIndexedLoopScope" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                             (rule "methodCallReturn" (formula "18") (term "1,1,1"))
                                             (rule "assignment" (formula "18") (term "1,1,1"))
                                             (rule "elimSelfSingleUpdateFor" (formula "18") (term "1,1,1"))
                                             (rule "methodCallEmpty" (formula "18") (term "1,1,1"))
                                             (rule "tryEmpty" (formula "18") (term "1,1,1"))
                                             (rule "emptyModality" (formula "18") (term "1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "1,1,1,1,1"))
                                             (rule "simplifyUpdate2" (formula "18") (term "0,1,1,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,1"))
                                             (rule "concrete_impl_1" (formula "18") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,1,1"))
                                             (rule "applyOnPV" (formula "18") (term "0,0,0,1,1,1"))
                                             (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,1,1"))
                                             (rule "boolean_equal" (formula "18") (term "0,0,1,1,1"))
                                             (rule "concrete_not_1" (formula "18") (term "0,1,1,1"))
                                             (rule "concrete_impl_2" (formula "18") (term "1,1,1"))
                                             (rule "concrete_and_3" (formula "18") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "18"))
                                             (rule "applyOnRigidFormula" (formula "18"))
                                             (rule "simplifyUpdate1Rigid" (formula "18") (term "1"))
                                             (rule "close" (formula "18") (ifseqformula "1"))
                                          )
                                       )
                                       (branch "exc_Body_0 = null FALSE"
                                          (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "16"))
                                          (rule "concrete_or_4" (formula "2"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "16"))
                                          (rule "concrete_and_4" (formula "2") (term "1"))
                                          (rule "concrete_eq_4" (formula "2"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "apply_eq_boolean_rigid" (formula "18") (term "0,1,0,0,1,0,1,1") (ifseqformula "11"))
                                          (rule "throwIndexedLoopScope" (formula "17") (term "1,1,1"))
                                          (rule "assignment" (formula "17") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                          (rule "methodCallParamThrow" (formula "17") (term "1,1,1"))
                                          (rule "tryCatchThrow" (formula "17") (term "1,1,1"))
                                          (rule "ifElseUnfold" (formula "17") (term "1,1,1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "17") (term "1,1,1") (newnames "boolv_8"))
                                          (rule "equality_comparison_simple" (formula "17") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0,1,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,0,0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0,1,1"))
                                          (rule "if" (formula "18") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,1,1"))
                                          (rule "ifthenelse_concrete4" (formula "18") (term "0,1,1"))
                                          (rule "boolean_not_equal_2" (formula "18") (term "1,0,1,1"))
                                          (rule "concrete_or_4" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "18") (term "0,1"))
                                          (rule "ifthenelse_negated_for" (formula "18") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0"))
                                          (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "16"))
                                          (rule "ifthenelse_false_for" (formula "18"))
                                          (rule "blockThrow" (formula "18") (term "1,1,1"))
                                          (rule "blockThrow" (formula "18") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "blockThrow" (formula "18") (term "1,1,1"))
                                          (rule "blockThrow" (formula "18") (term "1,1,1"))
                                          (rule "blockThrow" (formula "18") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "throwIndexedLoopScope" (formula "18") (term "1,1,1"))
                                          (rule "assignment" (formula "18") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                          (rule "methodCallParamThrow" (formula "18") (term "1,1,1"))
                                          (rule "tryCatchThrow" (formula "18") (term "1,1,1"))
                                          (rule "ifElseUnfold" (formula "18") (term "1,1,1") (inst "#boolv=boolv"))
                                          (rule "variableDeclaration" (formula "18") (term "1,1,1") (newnames "boolv_9"))
                                          (rule "equality_comparison_simple" (formula "18") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnRigidTerm" (formula "18") (term "0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,0,1,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0,1,1"))
                                          (rule "ifElse" (formula "17") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                          (rule "ifthenelse_concrete3" (formula "17") (term "0,1,1"))
                                          (rule "boolean_not_equal_2" (formula "17") (term "1,0,1,1"))
                                          (rule "concrete_or_4" (formula "17") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "17") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "17"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0"))
                                          (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
                                          (rule "ifthenelse_false_for" (formula "17"))
                                          (rule "elim_double_block" (formula "17") (term "1,1,1"))
                                          (rule "ifElse" (formula "18") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,1,1"))
                                          (rule "ifthenelse_concrete3" (formula "18") (term "0,1,1"))
                                          (rule "boolean_not_equal_2" (formula "18") (term "1,0,1,1"))
                                          (rule "concrete_or_4" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "18") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "18"))
                                          (rule "simplifyUpdate2Rigid" (formula "18") (term "0"))
                                          (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "16"))
                                          (rule "ifthenelse_false_for" (formula "18"))
                                          (rule "elim_double_block" (formula "18") (term "1,1,1"))
                                          (rule "ifElse" (formula "17") (term "1,1,1"))
                                          (rule "instanceof_static_type" (formula "17") (term "2,0,0,1,1,1"))
                                          (rule "ifthenelse_concrete4" (formula "17") (term "0,1,1,1"))
                                          (rule "boolean_not_equal_2" (formula "17") (term "1,0,1,1,1"))
                                          (rule "concrete_or_4" (formula "17") (term "0,1,1,1"))
                                          (rule "ifthenelse_negated_for" (formula "17") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                          (rule "simplifyUpdate2Rigid" (formula "17") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "17"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0"))
                                          (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
                                          (rule "ifthenelse_false_for" (formula "17"))
                                          (rule "variableDeclaration" (formula "17") (term "1,1,1") (newnames "t"))
                                          (rule "delete_unnecessary_cast" (formula "17") (term "1,1,1"))
                                          (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                                          (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                                          (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                                          (rule "assignment" (formula "17") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                                          (rule "emptyModality" (formula "17") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "1"))
                                          (rule "applySkip2" (formula "17") (term "1"))
                                          (rule "sequentialToParallel2" (formula "17"))
                                          (rule "simplifyUpdate2" (formula "17"))
                                          (rule "simplifyUpdate3" (formula "17") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "17"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,0"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "17") (term "1,0,0"))
                                          (rule "applyOnPV" (formula "17") (term "0,0,0"))
                                          (rule "boolean_equal" (formula "17") (term "0,0"))
                                          (rule "concrete_impl_1" (formula "17") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                          (rule "simplifyUpdate2" (formula "17") (term "0,0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                                          (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,0,1"))
                                          (rule "applyOnPV" (formula "17") (term "0,0,0,1"))
                                          (rule "boolean_equal" (formula "17") (term "0,0,1"))
                                          (rule "concrete_not_1" (formula "17") (term "0,1"))
                                          (rule "concrete_impl_2" (formula "17") (term "1"))
                                          (rule "concrete_and_3" (formula "17"))
                                          (rule "notRight" (formula "17"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "ifElse" (formula "18") (term "1,1,1"))
                                          (rule "instanceof_static_type" (formula "18") (term "2,0,0,1,1,1"))
                                          (rule "ifthenelse_concrete4" (formula "18") (term "0,1,1,1"))
                                          (rule "boolean_not_equal_2" (formula "18") (term "1,0,1,1,1"))
                                          (rule "concrete_or_4" (formula "18") (term "0,1,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "0,1"))
                                          (rule "applySkip2" (formula "18") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,0,0"))
                                          (rule "applyOnPV" (formula "18") (term "0,0,0"))
                                          (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "17"))
                                          (rule "concrete_not_2" (formula "18") (term "0"))
                                          (rule "ifthenelse_true_for" (formula "18"))
                                          (rule "variableDeclaration" (formula "18") (term "1,1,1") (newnames "t_1"))
                                          (rule "delete_unnecessary_cast" (formula "18") (term "1,1,1"))
                                          (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                                          (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                                          (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applySkip2" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,1,0,1,1"))
                                          (rule "assignment" (formula "18") (term "1,1,1"))
                                          (rule "sequentialToParallel2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate3" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnElementary" (formula "18") (term "1,0,1,1"))
                                          (rule "applyOnPV" (formula "18") (term "0,1,0,1,1"))
                                          (rule "emptyModality" (formula "18") (term "1,1,1"))
                                          (rule "dropEffectlessAbstractUpdate2" (formula "18") (term "1"))
                                          (rule "applySkip2" (formula "18") (term "1"))
                                          (rule "sequentialToParallel2" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "18"))
                                          (rule "simplifyUpdate3" (formula "18") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "18"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,0"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "18") (term "1,0"))
                                          (rule "applyOnPV" (formula "18") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "18") (term "1,1,0"))
                                          (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "1"))
                                          (rule "concrete_impl_4" (formula "18") (term "0"))
                                          (rule "concrete_and_1" (formula "18"))
                                          (rule "impRight" (formula "18"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "19") (term "0"))
                                          (rule "simplifyUpdate2" (formula "19") (term "0,0"))
                                          (rule "simplifyUpdate2" (formula "19") (term "1,0"))
                                          (rule "applyOnRigidFormula" (formula "19") (term "1"))
                                          (rule "simplifyUpdate1" (formula "19") (term "0,1"))
                                          (rule "simplifyUpdate1" (formula "19") (term "1,1"))
                                          (rule "applyOnPV" (formula "19") (term "1,1"))
                                          (rule "applyOnRigidFormula" (formula "11"))
                                          (rule "applyOnPV" (formula "11") (term "0"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1"))
                                          (rule "boolean_equal" (formula "11"))
                                          (rule "closeTrue" (formula "11"))
                                       )
                                    )
                                 )
                                 (branch "if condition false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "15"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1"))
                                    (rule "applyOnPV" (formula "15") (term "0"))
                                    (rule "boolean_equal" (formula "15"))
                                    (rule "closeTrue" (formula "15"))
                                 )
                              )
                              (branch "if boolv_5 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "20"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "15"))
                                 (rule "simplifyUpdate1" (formula "15") (term "1"))
                                 (rule "applyOnPV" (formula "15") (term "0"))
                                 (rule "boolean_equal" (formula "15"))
                                 (rule "closeTrue" (formula "15"))
                              )
                           )
                           (branch "if boolv_4 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "20"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "15"))
                              (rule "simplifyUpdate1" (formula "15") (term "1"))
                              (rule "applyOnPV" (formula "15") (term "0"))
                              (rule "boolean_equal" (formula "15"))
                              (rule "closeTrue" (formula "15"))
                           )
                        )
                        (branch "if boolv_1 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "17"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "12"))
                           (rule "applyOnPV" (formula "12") (term "0"))
                           (rule "simplifyUpdate1" (formula "12") (term "1"))
                           (rule "boolean_equal" (formula "12"))
                           (rule "closeTrue" (formula "12"))
                        )
                     )
                     (branch "if condition false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "applyOnPV" (formula "8") (term "0"))
                        (rule "simplifyUpdate1" (formula "8") (term "1"))
                        (rule "apply_eq_boolean_rigid" (formula "12") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "8"))
                        (rule "postincrement" (formula "11") (term "1"))
                        (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=o"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "o"))
                        (rule "remove_parentheses_right" (formula "11") (term "1"))
                        (rule "assignmentAdditionInt" (formula "11") (term "1"))
                        (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
                        (rule "sequentialToParallel2" (formula "11"))
                        (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                        (rule "applyOnElementary" (formula "11") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "1,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                        (rule "applyOnPV" (formula "11") (term "1,0,1,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
                        (rule "widening_identity_cast_5" (formula "11") (term "1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (rule "sequentialToParallel2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                        (rule "applyOnElementary" (formula "11") (term "1,0"))
                        (rule "applyOnPV" (formula "11") (term "0,1,0"))
                        (rule "blockEmpty" (formula "11") (term "1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (rule "sequentialToParallel2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                        (rule "emptyIndexedLoopScope" (formula "11") (term "1"))
                        (rule "applyOnRigidFormula" (formula "11"))
                        (rule "simplifyUpdate2" (formula "11") (term "0"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0"))
                        (rule "simplifyUpdate1Rigid" (formula "11") (term "1,0"))
                        (rule "applyOnPV" (formula "11") (term "0,0"))
                        (rule "boolean_not_equal_2" (formula "11") (term "0"))
                        (rule "ifthenelse_false_for" (formula "11"))
                        (rule "emptyModality" (formula "11") (term "1"))
                        (rule "applyOnRigidFormula" (formula "11"))
                        (rule "simplifyUpdate2" (formula "11") (term "0"))
                        (rule "applyOnRigidFormula" (formula "11") (term "1"))
                        (rule "simplifyUpdate2" (formula "11") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "11") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0"))
                        (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "11") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "11") (term "0,1,1"))
                        (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
                        (rule "applyOnPV" (formula "11") (term "0,0,0"))
                        (rule "boolean_not_equal_2" (formula "11") (term "0,0"))
                        (rule "concrete_impl_2" (formula "11") (term "0"))
                        (rule "concrete_and_1" (formula "11"))
                        (rule "impRight" (formula "11"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "12") (term "1"))
                        (rule "applyOnRigidFormula" (formula "12") (term "0"))
                        (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "simplifyUpdate1" (formula "8") (term "1"))
                        (rule "applyOnPV" (formula "8") (term "0"))
                        (rule "boolean_not_equal_2" (formula "8"))
                        (rule "false_right" (formula "8"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                        (rule "simplifyUpdate2" (formula "11") (term "0,0,0"))
                        (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0,0,1"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "1,0,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "0,1,0,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,1,0,0"))
                        (rule "applyOnPV" (formula "11") (term "0,1,0,0"))
                        (rule "applyOnPV" (formula "11") (term "1,1,0,0"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0,0,0"))
                        (rule "applyOnPV" (formula "11") (term "0,0,0,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
                        (rule "applyOnPV" (formula "11") (term "0,0,1,0"))
                        (rule "applyOnRigidTerm" (formula "11") (term "0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "11") (term "2,0,0,0,1"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0,1"))
                        (rule "applyOnPV" (formula "11") (term "0,0,0,0,1"))
                        (rule "eqClose" (formula "11") (term "0,0,1"))
                        (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                        (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "1"))
                        (rule "concrete_and_3" (formula "11") (term "0,0"))
                        (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "3"))
                        (rule "leq_literals" (formula "11") (term "0,0,0"))
                        (rule "concrete_or_1" (formula "11") (term "0,0"))
                        (rule "concrete_and_1" (formula "11") (term "0"))
                        (rule "all_unused" (formula "11") (term "0,1"))
                        (rule "all_unused" (formula "11") (term "1"))
                        (rule "concrete_and_3" (formula "11"))
                        (rule "notRight" (formula "11"))
                        (rule "ifSplit" (formula "12"))
                        (branch "if boolv_1 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "13"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=boolv"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "boolv_4"))
                           (rule "compound_assignment_1_new" (formula "12") (term "1"))
                           (rule "sequentialToParallel2" (formula "12"))
                           (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                           (rule "applyOnElementary" (formula "12") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
                           (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "12") (term "0,0,1,0"))
                           (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
                           (rule "ifElseSplit" (formula "12"))
                           (branch "if boolv_4 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "13"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "boolean_equal" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "boolv_5"))
                              (rule "less_than_comparison_simple" (formula "12") (term "1"))
                              (rule "sequentialToParallel2" (formula "12"))
                              (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                              (rule "applyOnElementary" (formula "12") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "12") (term "0,0,0,1,0"))
                              (rule "applyOnPV" (formula "12") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
                              (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "2"))
                              (rule "ifthenelse_true" (formula "12") (term "0,1,0"))
                              (rule "ifSplit" (formula "12"))
                              (branch "if boolv_5 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "13"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "elim_double_block_2" (formula "12") (term "1"))
                                 (rule "ifSplit" (formula "12"))
                                 (branch "if condition true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if condition false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "9"))
                                    (rule "applyOnPV" (formula "9") (term "0"))
                                    (rule "simplifyUpdate1" (formula "9") (term "1"))
                                    (rule "boolean_not_equal_2" (formula "9"))
                                    (rule "false_right" (formula "9"))
                                    (rule "postincrement" (formula "12") (term "1"))
                                    (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=o"))
                                    (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                    (rule "variableDeclaration" (formula "12") (term "1") (newnames "o_1"))
                                    (rule "remove_parentheses_right" (formula "12") (term "1"))
                                    (rule "assignmentAdditionInt" (formula "12") (term "1"))
                                    (rule "translateJavaAddInt" (formula "12") (term "0,0,1"))
                                    (rule "sequentialToParallel2" (formula "12"))
                                    (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                                    (rule "applyOnElementary" (formula "12") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
                                    (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "12") (term "1,0,1,0"))
                                    (rule "widening_identity_cast_5" (formula "12") (term "1"))
                                    (rule "assignment" (formula "12") (term "1"))
                                    (rule "sequentialToParallel2" (formula "12"))
                                    (rule "simplifyUpdate2" (formula "12"))
                                    (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                                    (rule "applyOnElementary" (formula "12") (term "1,0"))
                                    (rule "applyOnPV" (formula "12") (term "0,1,0"))
                                    (rule "blockEmpty" (formula "12") (term "1"))
                                    (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=boolv"))
                                    (rule "variableDeclaration" (formula "12") (term "1") (newnames "boolv_6"))
                                    (rule "compound_assignment_1_new" (formula "12") (term "1"))
                                    (rule "sequentialToParallel2" (formula "12"))
                                    (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                                    (rule "applyOnElementary" (formula "12") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
                                    (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
                                    (rule "boolean_not_equal_2" (formula "12") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
                                    (rule "ifElseSplit" (formula "12"))
                                    (branch "if boolv_6 true"
                                       (rule "simplifyUpdate2" (formula "13"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "elim_double_block_2" (formula "12") (term "1"))
                                       (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=boolv"))
                                       (rule "variableDeclaration" (formula "12") (term "1") (newnames "boolv_7"))
                                       (rule "less_than_comparison_simple" (formula "12") (term "1"))
                                       (rule "sequentialToParallel2" (formula "12"))
                                       (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                                       (rule "applyOnElementary" (formula "12") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "12") (term "0,0,0,1,0"))
                                       (rule "applyOnPV" (formula "12") (term "1,0,0,1,0"))
                                       (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,1,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
                                       (rule "ifSplit" (formula "12"))
                                       (branch "if boolv_7 true"
                                          (rule "simplifyUpdate2" (formula "13"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "1"))
                                          (rule "simplifyUpdate1" (formula "1") (term "1"))
                                          (rule "applyOnPV" (formula "1") (term "0"))
                                          (rule "ifthenelse_concrete3" (formula "1"))
                                          (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                          (rule "concrete_or_4" (formula "1"))
                                          (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                          (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                                          (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                                          (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "3") (term "0,0"))
                                          (rule "qeq_literals" (formula "3") (term "0"))
                                          (rule "concrete_or_1" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                                          (rule "times_zero_1" (formula "4") (term "0,0"))
                                          (rule "add_zero_left" (formula "4") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                          (rule "mul_literals" (formula "4") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "3") (term "0"))
                                          (rule "concrete_or_1" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "elim_double_block_2" (formula "12") (term "1"))
                                          (rule "ifSplit" (formula "12"))
                                          (branch "if condition true"
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "simplifyUpdate2" (formula "13"))
                                             (rule "applyOnRigidFormula" (formula "1"))
                                             (rule "simplifyUpdate1" (formula "1") (term "1"))
                                             (rule "applyOnPV" (formula "1") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if condition false"
                                             (rule "false_to_not_true" (formula "1") (term "1"))
                                             (rule "simplifyUpdate2" (formula "13"))
                                             (rule "simplifyUpdate2" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "9"))
                                             (rule "simplifyUpdate1Rigid" (formula "9") (term "1"))
                                             (rule "applyOnPV" (formula "9") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "9"))
                                             (rule "false_right" (formula "9"))
                                             (rule "postincrement" (formula "12") (term "1"))
                                             (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=o"))
                                             (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                             (rule "variableDeclaration" (formula "12") (term "1") (newnames "o_2"))
                                             (rule "remove_parentheses_right" (formula "12") (term "1"))
                                             (rule "assignmentAdditionInt" (formula "12") (term "1"))
                                             (rule "translateJavaAddInt" (formula "12") (term "0,0,1"))
                                             (rule "sequentialToParallel2" (formula "12"))
                                             (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                                             (rule "applyOnElementary" (formula "12") (term "1,0"))
                                             (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
                                             (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0"))
                                             (rule "applyOnPV" (formula "12") (term "1,0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,1,0"))
                                             (rule "widening_identity_cast_5" (formula "12") (term "1"))
                                             (rule "assignment" (formula "12") (term "1"))
                                             (rule "sequentialToParallel2" (formula "12"))
                                             (rule "simplifyUpdate2" (formula "12"))
                                             (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                                             (rule "applyOnElementary" (formula "12") (term "1,0"))
                                             (rule "applyOnPV" (formula "12") (term "0,1,0"))
                                             (rule "blockEmpty" (formula "12") (term "1"))
                                             (rule "assignment" (formula "12") (term "1"))
                                             (rule "sequentialToParallel2" (formula "12"))
                                             (rule "simplifyUpdate2" (formula "12"))
                                             (rule "simplifyUpdate3" (formula "12") (term "1,0"))
                                             (rule "emptyIndexedLoopScope" (formula "12") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "12"))
                                             (rule "simplifyUpdate2" (formula "12") (term "0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0"))
                                             (rule "applyOnPV" (formula "12") (term "0,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,0"))
                                             (rule "boolean_not_equal_2" (formula "12") (term "0"))
                                             (rule "ifthenelse_false_for" (formula "12"))
                                             (rule "emptyModality" (formula "12") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "12"))
                                             (rule "simplifyUpdate2" (formula "12") (term "0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "1"))
                                             (rule "simplifyUpdate2" (formula "12") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "12") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0"))
                                             (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                                             (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "1,1"))
                                             (rule "simplifyUpdate2" (formula "12") (term "1,1,1"))
                                             (rule "simplifyUpdate2" (formula "12") (term "0,1,1"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "1,0"))
                                             (rule "applyOnPV" (formula "12") (term "0,1,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,1,0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
                                             (rule "applyOnPV" (formula "12") (term "0,0,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,0,0"))
                                             (rule "boolean_not_equal_2" (formula "12") (term "0,0"))
                                             (rule "concrete_impl_2" (formula "12") (term "0"))
                                             (rule "concrete_and_1" (formula "12"))
                                             (rule "impRight" (formula "12"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyOnRigidFormula" (formula "13") (term "1"))
                                             (rule "simplifyUpdate1" (formula "13") (term "0,1"))
                                             (rule "simplifyUpdate1" (formula "13") (term "1,1"))
                                             (rule "applyOnPV" (formula "13") (term "1,1"))
                                             (rule "applyOnRigidFormula" (formula "13") (term "0"))
                                             (rule "simplifyUpdate2" (formula "13") (term "0,0"))
                                             (rule "simplifyUpdate2" (formula "13") (term "1,0"))
                                             (rule "applyOnRigidFormula" (formula "9"))
                                             (rule "simplifyUpdate1Rigid" (formula "9") (term "1"))
                                             (rule "applyOnPV" (formula "9") (term "0"))
                                             (rule "boolean_not_equal_2" (formula "9"))
                                             (rule "false_right" (formula "9"))
                                             (rule "applyOnRigidTerm" (formula "12") (term "0,1"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,0,1"))
                                             (rule "simplifyUpdate1" (formula "12") (term "0,0,1"))
                                             (rule "applyOnPV" (formula "12") (term "1,0,1"))
                                             (rule "polySimp_addComm0" (formula "12") (term "0,1"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
                                             (rule "simplifyUpdate2" (formula "12") (term "1,0,0"))
                                             (rule "simplifyUpdate2" (formula "12") (term "0,0,0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "1,0"))
                                             (rule "applyOnRigidTerm" (formula "12") (term "1,0,1"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,1,0,1"))
                                             (rule "applyOnPV" (formula "12") (term "0,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,1"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,1"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,1"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,1"))
                                             (rule "polySimp_addComm0" (formula "12") (term "0,0,1"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "1,0,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,1,0,0"))
                                             (rule "applyOnPV" (formula "12") (term "0,1,0,0"))
                                             (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "2"))
                                             (rule "concrete_and_3" (formula "12") (term "0,0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0,1,0"))
                                             (rule "precOfInt" (formula "12") (term "1"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0,0"))
                                             (rule "simplifyUpdate2" (formula "12") (term "0,0,0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "1,0,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,1,0,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "0,1,0,0"))
                                             (rule "applyOnPV" (formula "12") (term "1,1,0,0"))
                                             (rule "applyOnPV" (formula "12") (term "0,1,0,0"))
                                             (rule "applyOnRigidFormula" (formula "12") (term "0,0,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0"))
                                             (rule "applyOnPV" (formula "12") (term "0,0,0,0"))
                                             (rule "applyOnRigidTerm" (formula "12") (term "0,0,0,1,0"))
                                             (rule "applyOnPV" (formula "12") (term "0,0,0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "1,0,0,0,1,0"))
                                             (rule "simplifyUpdate1" (formula "12") (term "2,0,0,0,1,0"))
                                             (rule "eqClose" (formula "12") (term "0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1,1"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,1"))
                                             (rule "add_literals" (formula "12") (term "1,1,0,1,1"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,1,1"))
                                             (rule "add_zero_right" (formula "12") (term "0,1,1"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
                                             (rule "add_literals" (formula "12") (term "0,0,0,1,1"))
                                             (rule "polySimp_pullOutFactor2b" (formula "12") (term "0,1,1"))
                                             (rule "add_literals" (formula "12") (term "1,1,0,1,1"))
                                             (rule "times_zero_1" (formula "12") (term "1,0,1,1"))
                                             (rule "add_zero_right" (formula "12") (term "0,1,1"))
                                             (rule "leq_literals" (formula "12") (term "1,1"))
                                             (rule "concrete_and_3" (formula "12") (term "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "12") (term "0,1,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
                                             (rule "times_zero_2" (formula "12") (term "1,0,1"))
                                             (rule "add_zero_right" (formula "12") (term "0,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                                             (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "1"))
                                             (rule "concrete_and_3" (formula "12") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "12") (term "0,1"))
                                             (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "1"))
                                             (rule "concrete_and_3" (formula "12"))
                                             (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "4"))
                                             (rule "leq_literals" (formula "12") (term "0,0"))
                                             (rule "concrete_or_1" (formula "12") (term "0"))
                                             (rule "concrete_and_1" (formula "12"))
                                             (rule "allRight" (formula "12") (inst "sk=f_0"))
                                             (rule "allRight" (formula "12") (inst "sk=o_0"))
                                             (rule "closeTrue" (formula "12"))
                                          )
                                       )
                                       (branch "if boolv_7 false"
                                          (rule "false_to_not_true" (formula "1") (term "1"))
                                          (rule "simplifyUpdate2" (formula "13"))
                                          (rule "simplifyUpdate2" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "9"))
                                          (rule "applyOnPV" (formula "9") (term "0"))
                                          (rule "simplifyUpdate1" (formula "9") (term "1"))
                                          (rule "ifthenelse_concrete3" (formula "9"))
                                          (rule "boolean_not_equal_2" (formula "9") (term "1"))
                                          (rule "concrete_or_4" (formula "9"))
                                          (rule "inEqSimp_leqRight" (formula "9"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0"))
                                          (rule "blockEmpty" (formula "13") (term "1"))
                                          (rule "assignment" (formula "13") (term "1"))
                                          (rule "sequentialToParallel2" (formula "13"))
                                          (rule "simplifyUpdate2" (formula "13"))
                                          (rule "simplifyUpdate3" (formula "13") (term "1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
                                          (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "1"))
                                          (rule "applyEqRigid" (formula "14") (term "0,1,0,1,1,0,0,0") (ifseqformula "1"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "14") (term "0,0,1,1,0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "14") (term "1,1,0,1,1,0,0,0"))
                                          (rule "times_zero_1" (formula "14") (term "1,0,1,1,0,0,0"))
                                          (rule "add_zero_right" (formula "14") (term "0,1,1,0,0,0"))
                                          (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq0" (formula "4"))
                                          (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                          (rule "add_literals" (formula "4") (term "1,0"))
                                          (rule "times_zero_1" (formula "4") (term "0"))
                                          (rule "qeq_literals" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "2"))
                                          (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                          (rule "add_literals" (formula "2") (term "1,0"))
                                          (rule "times_zero_1" (formula "2") (term "0"))
                                          (rule "leq_literals" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "applyEq" (formula "12") (term "1,0,1,0,0") (ifseqformula "1"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "12") (term "0,1,0,0"))
                                          (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                          (rule "mul_literals" (formula "4") (term "1"))
                                          (rule "emptyIndexedLoopScope" (formula "11") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "11"))
                                          (rule "simplifyUpdate2" (formula "11") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,0"))
                                          (rule "applyOnPV" (formula "11") (term "0,0"))
                                          (rule "boolean_not_equal_2" (formula "11") (term "0"))
                                          (rule "ifthenelse_false_for" (formula "11"))
                                          (rule "emptyModality" (formula "11") (term "1"))
                                          (rule "applyOnRigidFormula" (formula "11"))
                                          (rule "simplifyUpdate2" (formula "11") (term "0"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "1"))
                                          (rule "simplifyUpdate2" (formula "11") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "11") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0"))
                                          (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                                          (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "1,1"))
                                          (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                                          (rule "simplifyUpdate2" (formula "11") (term "0,1,1"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                                          (rule "applyOnPV" (formula "11") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,1,0"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
                                          (rule "applyOnPV" (formula "11") (term "0,0,0"))
                                          (rule "boolean_not_equal_2" (formula "11") (term "0,0"))
                                          (rule "concrete_impl_2" (formula "11") (term "0"))
                                          (rule "concrete_and_1" (formula "11"))
                                          (rule "impRight" (formula "11"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyOnRigidFormula" (formula "12") (term "1"))
                                          (rule "simplifyUpdate1" (formula "12") (term "0,1"))
                                          (rule "simplifyUpdate1" (formula "12") (term "1,1"))
                                          (rule "applyOnPV" (formula "12") (term "1,1"))
                                          (rule "applyOnRigidFormula" (formula "12") (term "0"))
                                          (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                                          (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "8"))
                                          (rule "simplifyUpdate1" (formula "8") (term "1"))
                                          (rule "applyOnPV" (formula "8") (term "0"))
                                          (rule "boolean_not_equal_2" (formula "8"))
                                          (rule "false_right" (formula "8"))
                                          (rule "applyOnRigidTerm" (formula "11") (term "0,1"))
                                          (rule "simplifyUpdate1" (formula "11") (term "0,0,1"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,0,1"))
                                          (rule "applyOnPV" (formula "11") (term "1,0,1"))
                                          (rule "polySimp_addComm0" (formula "11") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                                          (rule "simplifyUpdate2" (formula "11") (term "1,0,0"))
                                          (rule "simplifyUpdate2" (formula "11") (term "0,0,0"))
                                          (rule "applyOnRigidTerm" (formula "11") (term "1,0,1"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1"))
                                          (rule "applyOnPV" (formula "11") (term "0,1,0,1"))
                                          (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1"))
                                          (rule "add_literals" (formula "11") (term "1,0,1"))
                                          (rule "times_zero_1" (formula "11") (term "0,1"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0,1,0"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "1,0,0"))
                                          (rule "applyOnPV" (formula "11") (term "0,1,0,0"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,1,0,0"))
                                          (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "2"))
                                          (rule "concrete_and_3" (formula "11") (term "0,0"))
                                          (rule "precOfInt" (formula "11") (term "1"))
                                          (rule "leq_literals" (formula "11") (term "0,1"))
                                          (rule "concrete_and_1" (formula "11") (term "1"))
                                          (rule "less_literals" (formula "11") (term "1"))
                                          (rule "concrete_and_3" (formula "11"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0"))
                                          (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0,0,1"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                                          (rule "simplifyUpdate1" (formula "11") (term "0,1,0"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,1,0"))
                                          (rule "applyOnPV" (formula "11") (term "0,1,0"))
                                          (rule "applyOnPV" (formula "11") (term "1,1,0"))
                                          (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                                          (rule "applyOnPV" (formula "11") (term "0,0,0"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
                                          (rule "applyOnRigidTerm" (formula "11") (term "0,0,0,1"))
                                          (rule "simplifyUpdate1" (formula "11") (term "2,0,0,0,1"))
                                          (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0,1"))
                                          (rule "applyOnPV" (formula "11") (term "0,0,0,0,1"))
                                          (rule "eqClose" (formula "11") (term "0,0,1"))
                                          (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,0"))
                                          (rule "add_literals" (formula "11") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "11") (term "0,1,0"))
                                          (rule "leq_literals" (formula "11") (term "1,0"))
                                          (rule "concrete_and_3" (formula "11") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "11") (term "0") (ifseqformula "3"))
                                          (rule "leq_literals" (formula "11") (term "0,0"))
                                          (rule "concrete_or_1" (formula "11") (term "0"))
                                          (rule "concrete_and_1" (formula "11"))
                                          (rule "allRight" (formula "11") (inst "sk=f_0"))
                                          (rule "allRight" (formula "11") (inst "sk=o_0"))
                                          (rule "closeTrue" (formula "11"))
                                       )
                                    )
                                    (branch "if boolv_6 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "13"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "9"))
                                       (rule "applyOnPV" (formula "9") (term "0"))
                                       (rule "simplifyUpdate1" (formula "9") (term "1"))
                                       (rule "boolean_equal" (formula "9"))
                                       (rule "closeTrue" (formula "9"))
                                    )
                                 )
                              )
                              (branch "if boolv_5 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "13"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "9"))
                                 (rule "applyOnPV" (formula "9") (term "0"))
                                 (rule "simplifyUpdate1" (formula "9") (term "1"))
                                 (rule "boolean_equal" (formula "9"))
                                 (rule "closeTrue" (formula "9"))
                              )
                           )
                           (branch "if boolv_4 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "13"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "9"))
                              (rule "applyOnPV" (formula "9") (term "0"))
                              (rule "simplifyUpdate1" (formula "9") (term "1"))
                              (rule "boolean_equal" (formula "9"))
                              (rule "closeTrue" (formula "9"))
                           )
                        )
                        (branch "if boolv_1 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "13"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "9"))
                           (rule "applyOnPV" (formula "9") (term "0"))
                           (rule "simplifyUpdate1" (formula "9") (term "1"))
                           (rule "boolean_equal" (formula "9"))
                           (rule "closeTrue" (formula "9"))
                        )
                     )
                  )
                  (branch "if boolv false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "ifthenelse_concrete3" (formula "8"))
                     (rule "boolean_not_equal_2" (formula "8") (term "1"))
                     (rule "concrete_or_4" (formula "8"))
                     (rule "replace_known_right" (formula "12") (term "0,0,1,0") (ifseqformula "8"))
                     (rule "ifthenelse_false" (formula "12") (term "0,1,0"))
                     (rule "inEqSimp_leqRight" (formula "8"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "3"))
                     (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,0"))
                     (rule "times_zero_1" (formula "3") (term "0"))
                     (rule "qeq_literals" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "applyEq" (formula "10") (term "0,0,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "11") (term "0,0,0,1,0,1,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "11") (term "0,1,0,1,1,0,0,0") (ifseqformula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "1,0,1,1,0,0,0"))
                     (rule "times_zero_1" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,0"))
                     (rule "times_zero_1" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1"))
                     (rule "emptyIndexedLoopScope" (formula "9") (term "1"))
                     (rule "applyOnRigidFormula" (formula "9"))
                     (rule "simplifyUpdate2" (formula "9") (term "0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,0"))
                     (rule "applyOnPV" (formula "9") (term "0,0"))
                     (rule "boolean_equal" (formula "9") (term "0"))
                     (rule "ifthenelse_true_for" (formula "9"))
                     (rule "methodCallReturn" (formula "9") (term "1"))
                     (rule "assignment" (formula "9") (term "1"))
                     (rule "elimSelfSingleUpdateFor" (formula "9") (term "1"))
                     (rule "methodCallEmpty" (formula "9") (term "1"))
                     (rule "tryEmpty" (formula "9") (term "1"))
                     (rule "emptyModality" (formula "9") (term "1"))
                     (rule "applyOnRigidFormula" (formula "9"))
                     (rule "simplifyUpdate2" (formula "9") (term "0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,0"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,1,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,0,0"))
                     (rule "applyOnPV" (formula "9") (term "0,0,0"))
                     (rule "boolean_equal" (formula "9") (term "0,0"))
                     (rule "concrete_impl_1" (formula "9") (term "0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,0,1"))
                     (rule "applyOnPV" (formula "9") (term "0,0,0,1"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1"))
                     (rule "boolean_equal" (formula "9") (term "0,0,1"))
                     (rule "concrete_not_1" (formula "9") (term "0,1"))
                     (rule "concrete_impl_2" (formula "9") (term "1"))
                     (rule "concrete_and_3" (formula "9"))
                     (rule "notRight" (formula "9"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "ifSplit" (formula "10"))
                     (branch "if boolv_1 true"
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if boolv_1 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "simplifyUpdate1Rigid" (formula "8") (term "1"))
                        (rule "applyOnPV" (formula "8") (term "0"))
                        (rule "boolean_not_equal_2" (formula "8"))
                        (rule "false_right" (formula "8"))
                        (rule "emptyIndexedLoopScope" (formula "10") (term "1"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "simplifyUpdate2" (formula "10") (term "0"))
                        (rule "applyOnRigidFormula" (formula "10") (term "0"))
                        (rule "simplifyUpdate1" (formula "10") (term "1,0"))
                        (rule "applyOnPV" (formula "10") (term "0,0"))
                        (rule "boolean_equal" (formula "10") (term "0"))
                        (rule "ifthenelse_true_for" (formula "10"))
                        (rule "methodCallReturn" (formula "10") (term "1"))
                        (rule "assignment" (formula "10") (term "1"))
                        (rule "elimSelfSingleUpdateFor" (formula "10") (term "1"))
                        (rule "methodCallEmpty" (formula "10") (term "1"))
                        (rule "tryEmpty" (formula "10") (term "1"))
                        (rule "emptyModality" (formula "10") (term "1"))
                        (rule "applyOnRigidFormula" (formula "10"))
                        (rule "simplifyUpdate2" (formula "10") (term "0"))
                        (rule "applyOnRigidFormula" (formula "10") (term "1"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "10") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "10") (term "0"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "10") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "10") (term "1,1"))
                        (rule "simplifyUpdate2" (formula "10") (term "0,1,1"))
                        (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                        (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
                        (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
                        (rule "simplifyUpdate1" (formula "10") (term "1,1,0"))
                        (rule "applyOnPV" (formula "10") (term "0,1,0"))
                        (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "1"))
                        (rule "concrete_impl_4" (formula "10") (term "0"))
                        (rule "concrete_and_1" (formula "10"))
                        (rule "impRight" (formula "10"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "1"))
                        (rule "simplifyUpdate1" (formula "11") (term "1,1"))
                        (rule "simplifyUpdate1" (formula "11") (term "0,1"))
                        (rule "applyOnPV" (formula "11") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "11") (term "0"))
                        (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                        (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "simplifyUpdate1" (formula "8") (term "1"))
                        (rule "applyOnPV" (formula "8") (term "0"))
                        (rule "boolean_equal" (formula "8"))
                        (rule "closeTrue" (formula "8"))
                     )
                  )
               )
            )
         )
      )
   )
)
(branch "Case 2"
   (rule "equiv_right" (formula "2") (proofscript))
   (branch "Case '->'"
      (rule "diamondToBox" (formula "1") (term "1"))
      (rule "notLeft" (formula "1"))
      (rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_after,savedHeapBefore_after,conditionBefore_after,iBefore_after,resultBefore_after,savedHeapBefore_after_0,thresholdBefore_after"))
      (rule "simplifyUpdate2" (formula "3") (term "1"))
      (rule "assignment" (formula "3") (term "1"))
      (rule "sequentialToParallel2" (formula "3"))
      (rule "simplifyUpdate3" (formula "3") (term "1,0"))
      (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_betweenStrongerInv,savedHeapBefore_betweenStrongerInv,conditionBefore_betweenStrongerInv,doneBefore_betweenStrongerInv,iBefore_betweenStrongerInv,resultBefore_betweenStrongerInv,savedHeapBefore_betweenStrongerInv_0,thresholdBefore_betweenStrongerInv"))
      (rule "simplifyUpdate2" (formula "2") (term "1"))
      (rule "assignment" (formula "2") (term "1"))
      (rule "sequentialToParallel2" (formula "2"))
      (rule "simplifyUpdate3" (formula "2") (term "1,0"))
      (rule "assignment" (formula "2") (term "1"))
      (rule "sequentialToParallel2" (formula "2"))
      (rule "simplifyUpdate3" (formula "2") (term "1,0"))
      (rule "loopScopeInvDiaAEEquiv" (formula "3") (term "1") (newnames "i_0,result_1,o,f") (inst "#x=x") (inst "#variant=variant") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0") (proofscript))
      (branch "Invariant Initially Valid"
         (rule "simplifyUpdate2" (formula "3") (proofscript))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "simplifyUpdate2" (formula "3") (term "0"))
         (rule "applyOnRigidFormula" (formula "3") (term "1"))
         (rule "simplifyUpdate1" (formula "3") (term "1,1"))
         (rule "simplifyUpdate1" (formula "3") (term "0,1"))
         (rule "applyOnPV" (formula "3") (term "1,1"))
         (rule "applyOnPV" (formula "3") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0"))
         (rule "applyOnPV" (formula "3") (term "0,0"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (rule "concrete_and_1" (formula "3"))
         (rule "inEqSimp_leqRight" (formula "3"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (rule "concrete_and_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Invariant Preserved and Used"
         (rule "loopScopeInvBoxAEEquiv" (formula "3") (term "1") (newnames "i_1,done_0,result_2,o,f") (inst "#x=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_1") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_1") (inst "anon_heap_LOOP=anon_heap_LOOP_1") (proofscript))
         (branch "Invariant Initially Valid"
            (rule "false_to_not_true" (formula "4") (term "0,1,0,1,1,1,1") (proofscript))
            (rule "concrete_and_3" (formula "4") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "4") (term "0,0,0,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "parallelWithSkip2" (formula "4") (term "0,1"))
            (rule "eqSymm" (formula "4") (term "0,0,1,0,1,1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1"))
            (rule "sequentialToParallel2" (formula "4"))
            (rule "simplifyUpdate3" (formula "4") (term "1,0"))
            (rule "sequentialToParallel2" (formula "4"))
            (rule "simplifyUpdate3" (formula "4") (term "1,0"))
            (rule "impRight" (formula "4"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "1,0"))
            (rule "parallelWithSkip2" (formula "1") (term "0"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnElementary" (formula "6") (term "1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "5"))
            (rule "simplifyUpdate2" (formula "5") (term "0"))
            (rule "simplifyUpdate2" (formula "5") (term "1"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
            (rule "applyOnRigidFormula" (formula "5") (term "0"))
            (rule "simplifyUpdate2" (formula "5") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "5") (term "1"))
            (rule "applyOnRigidTerm" (formula "6") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1,0,1,0"))
            (rule "applyOnPV" (formula "6") (term "0,1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "5") (term "1,0"))
            (rule "simplifyUpdate1" (formula "5") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "5") (term "1,1,0"))
            (rule "applyOnPV" (formula "5") (term "0,1,0"))
            (rule "applyOnPV" (formula "5") (term "1,1,0"))
            (rule "applyOnRigidFormula" (formula "5") (term "0,0"))
            (rule "applyOnPV" (formula "5") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "5") (term "1,0,0"))
            (rule "qeq_literals" (formula "5") (term "0,0"))
            (rule "concrete_and_1" (formula "5") (term "0"))
            (rule "applyOnRigidFormula" (formula "5") (term "0,1"))
            (rule "simplifyUpdate1" (formula "5") (term "1,0,1"))
            (rule "applyOnPV" (formula "5") (term "0,0,1"))
            (rule "boolean_not_equal_2" (formula "5") (term "0,1"))
            (rule "concrete_not_2" (formula "5") (term "1"))
            (rule "concrete_and_3" (formula "5"))
            (rule "inEqSimp_leqRight" (formula "5"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,0,1,1,0,1"))
            (rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
            (rule "assignment" (formula "6") (term "1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (rule "concrete_and_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Invariant Preserved and Used"
            (rule "introduceAxiom" (inst "cutFormula=i_0 = i_1 & result_1 = result_2") (proofscript))
            (rule "false_to_not_true" (formula "5") (term "0,1,0,1,1,1") (proofscript))
            (rule "false_to_not_true" (formula "6") (term "0,1,0,1,1,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,0,1,1,0,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,0,0,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0,1,1"))
            (rule "parallelWithSkip2" (formula "6") (term "0,1"))
            (rule "parallelWithSkip2" (formula "5") (term "0,1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "7") (term "0,0,1,0,1,1,0,1,1,1,1"))
            (rule "eqSymm" (formula "6") (term "0,0,1,1,1,0,1,1,1"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,1,1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "impRight" (formula "6"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "3"))
            (rule "sequentialToParallel2" (formula "10") (term "1"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0,1"))
            (rule "applyOnElementary" (formula "10") (term "1,0,1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "impRight" (formula "10"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "1,0"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnParallel" (formula "12") (term "1,0"))
            (rule "simplifyUpdate3" (formula "12") (term "0,1,0"))
            (rule "applyOnElementary" (formula "12") (term "1,1,0"))
            (rule "sequentialToParallel1" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,1,1,0"))
            (rule "applyOnRigidFormula" (formula "4"))
            (rule "simplifyUpdate1" (formula "4") (term "1"))
            (rule "simplifyUpdate1" (formula "4") (term "0"))
            (rule "applyOnPV" (formula "4") (term "1"))
            (rule "applyOnPV" (formula "4") (term "0"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "applyOnRigidFormula" (formula "10"))
            (rule "simplifyUpdate1" (formula "10") (term "1"))
            (rule "applyOnPV" (formula "10") (term "0"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnRigidTerm" (formula "12") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,0,1,1,0"))
            (rule "applyOnPV" (formula "12") (term "1,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0"))
            (rule "applyOnRigidTerm" (formula "12") (term "1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,1,0,1,1,0"))
            (rule "applyOnPV" (formula "12") (term "0,1,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,1,1,0,1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
            (rule "assignment" (formula "11") (term "1"))
            (rule "sequentialToParallel2" (formula "11"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0"))
            (rule "assignment" (formula "12") (term "1"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0"))
            (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "4"))
            (rule "applyEq" (formula "9") (term "0,0,0,1,1,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "9") (term "0,1,1,1,0,0") (ifseqformula "4"))
            (rule "apply_eq_boolean_rigid" (formula "9") (term "0,1,0,1,1,0,0") (ifseqformula "8"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv"))
            (rule "compound_assignment_3_nonsimple" (formula "9") (term "1"))
            (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_1"))
            (rule "less_than_comparison_simple" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "0,0,0,1,0"))
            (rule "applyOnPV" (formula "10") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
            (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=boolv_1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv_2"))
            (rule "compound_assignment_2" (formula "9") (term "1") (inst "#v=v"))
            (rule "variableDeclarationAssign" (formula "9") (term "1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "v"))
            (rule "compound_assignment_1_new" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "9") (term "0,0,1,0"))
            (rule "ifthenelse_false" (formula "9") (term "0,1,0"))
            (rule "compound_assignment_1_new" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
            (rule "boolean_equal" (formula "9") (term "0,0,1,0"))
            (rule "ifthenelse_true" (formula "9") (term "0,1,0"))
            (rule "ifSplit" (formula "10"))
            (branch "if boolv_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "11"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "ifthenelse_concrete3" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "1"))
               (rule "concrete_or_4" (formula "1"))
               (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (rule "concrete_or_1" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
               (rule "times_zero_1" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "2"))
               (rule "leq_literals" (formula "8") (term "0"))
               (rule "concrete_or_1" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "ifElseSplit" (formula "9"))
               (branch "if boolv_2 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "10"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "10"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "8"))
                  (rule "applyOnPV" (formula "8") (term "0"))
                  (rule "simplifyUpdate1" (formula "8") (term "1"))
                  (rule "boolean_not_equal_2" (formula "8"))
                  (rule "false_right" (formula "8"))
                  (rule "less_than_comparison_simple" (formula "9") (term "1"))
                  (rule "sequentialToParallel2" (formula "9"))
                  (rule "simplifyUpdate3" (formula "9") (term "1,0"))
                  (rule "applyOnElementary" (formula "9") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "0,0,0,1,0"))
                  (rule "applyOnPV" (formula "9") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
                  (rule "blockEmpty" (formula "9") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
                  (rule "replace_known_left" (formula "9") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "ifthenelse_true" (formula "9") (term "0,1,0"))
                  (rule "ifSplit" (formula "10"))
                  (branch "if condition true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "applyEq" (formula "10") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "abstractExecutionNonVoidLoopScope" (formula "11") (term "1") (inst "#label1=_label9") (inst "#v1=v1") (inst "#label=_label8") (inst "continues=continues_Body_0") (inst "breaks=breaks_Body_0") (inst "result=result_Body_0") (inst "returns=returns_Body_0") (inst "exc=exc_Body_0") (inst "normal=normal_Body_0"))
                     (rule "eq_and" (formula "11") (term "1,1,1,0,1"))
                     (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
                     (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
                     (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
                     (rule "concrete_and_3" (formula "11") (term "0,1,1,0,1"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,0,1"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                     (rule "impRight" (formula "11"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,1,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2Rigid" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "11"))
                     (rule "concrete_not_2" (formula "2") (term "1,1"))
                     (rule "concrete_and_3" (formula "2") (term "1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2Rigid" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "12"))
                     (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                     (rule "concrete_and_3" (formula "2") (term "1,0"))
                     (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "12"))
                     (rule "concrete_and_4" (formula "2") (term "1"))
                     (rule "concrete_or_4" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "0,1,1,0,0") (ifseqformula "12"))
                     (rule "concrete_not_2" (formula "2") (term "1,1,0,0"))
                     (rule "concrete_and_3" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "0,1,0,0,0") (ifseqformula "12"))
                     (rule "concrete_not_2" (formula "2") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                     (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "12"))
                     (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                     (rule "concrete_and_3" (formula "2") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
                     (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,0,1"))
                     (rule "applySkip1" (formula "1") (term "1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0,1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                     (rule "apply_eq_boolean_rigid" (formula "15") (term "0,1,0,1,1") (ifseqformula "12"))
                     (rule "commute_and_2" (formula "3") (term "1"))
                     (rule "commute_and_2" (formula "2") (term "1"))
                     (rule "commute_and_2" (formula "2") (term "1,0"))
                     (rule "commute_and_2" (formula "2") (term "1,0,0"))
                     (rule "ifSplit" (formula "14"))
                     (branch "if boolv true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "15"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_equal" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "commute_and_2" (formula "2") (term "0,0,0"))
                        (rule "commute_and" (formula "3") (term "0,1"))
                        (rule "commute_and" (formula "2") (term "0,1"))
                        (rule "commute_and" (formula "2") (term "0,1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                        (rule "eq_or" (formula "2") (term "1,1,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,1,0,0"))
                        (rule "commute_and_2" (formula "2") (term "1,0,0"))
                        (rule "commute_and" (formula "2") (term "0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "1,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0,0,0"))
                        (rule "neq_or" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "concrete_and_1" (formula "2") (term "0,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                        (rule "eq_or" (formula "2") (term "1,0,0,0,0,0"))
                        (rule "commute_and" (formula "2") (term "0,0,0,0,0"))
                        (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                        (rule "shift_paren_and" (formula "2") (term "0,0"))
                        (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "neq_or_3" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "neq_or_3" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "neq_or" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "neq_or_3" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                        (rule "neq_or_3" (formula "2") (term "1,0,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "0,1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                        (rule "eq_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                        (rule "commute_or" (formula "2") (term "0,0,1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,1,0,0"))
                        (rule "eq_or" (formula "2") (term "0,1,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                        (rule "commute_or" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "eq_and_2" (formula "2") (term "0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                        (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "neq_or" (formula "2") (term "0,1,0,0,1,0,0"))
                        (rule "concrete_or_1" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "concrete_and_3" (formula "2") (term "0,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                        (rule "neq_or_3" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "concrete_and_3" (formula "2") (term "0,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,1,0,0"))
                        (rule "eq_or_2" (formula "2") (term "1,0,0,0,1,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0,1,0,0"))
                        (rule "eq_and" (formula "2") (term "0,0,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0,0"))
                        (rule "eq_or" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "eq_or" (formula "2") (term "0,1,0,0,0,0,0,0,0,0"))
                        (rule "commute_and_2" (formula "2") (term "1,0"))
                        (rule "ifSplit" (formula "14"))
                        (branch "if condition true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "15"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "abstractExecutionNonVoidLoopScope" (formula "14") (term "1") (inst "#label1=_label11") (inst "#v1=v1") (inst "#label=_label10") (inst "continues=continues_Body_0") (inst "breaks=breaks_Body_0") (inst "result=result_Body_0") (inst "returns=returns_Body_0") (inst "exc=exc_Body_0") (inst "normal=normal_Body_0"))
                           (rule "eq_and" (formula "14") (term "1,1,1,0,1"))
                           (rule "concrete_and_3" (formula "14") (term "0,1,1,0,1"))
                           (rule "concrete_and_3" (formula "14") (term "0,1,1,0,1"))
                           (rule "concrete_and_3" (formula "14") (term "0,1,1,0,1"))
                           (rule "concrete_and_3" (formula "14") (term "0,1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "14"))
                           (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "14") (term "1,0,1"))
                           (rule "impRight" (formula "14"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,1,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2Rigid" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "14"))
                           (rule "concrete_not_2" (formula "2") (term "1,1"))
                           (rule "concrete_and_3" (formula "2") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2Rigid" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0,1,1,0,0") (ifseqformula "15"))
                           (rule "concrete_not_2" (formula "2") (term "1,1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "15"))
                           (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0"))
                           (rule "replace_known_right" (formula "2") (term "0,1,1,0,0,0") (ifseqformula "15"))
                           (rule "concrete_not_2" (formula "2") (term "1,1,0,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "15"))
                           (rule "concrete_and_4" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0,1,0,0,0") (ifseqformula "15"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                           (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,1,0"))
                           (rule "applySkip1" (formula "1") (term "1,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                           (rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                           (rule "apply_eq_boolean_rigid" (formula "16") (term "0,1,0,1,1") (ifseqformula "14"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "eq_or" (formula "4") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "commute_and_2" (formula "2") (term "1"))
                           (rule "commute_and_2" (formula "1") (term "1"))
                           (rule "commute_and_2" (formula "4") (term "0,1,0,0"))
                           (rule "eq_and_2" (formula "4") (term "1,0,0"))
                           (rule "commute_and_2" (formula "1") (term "1,0"))
                           (rule "commute_and_2" (formula "1") (term "1,0,0"))
                           (rule "commute_and_2" (formula "1") (term "0,0,0"))
                           (rule "commute_and" (formula "2") (term "0,1"))
                           (rule "commute_and" (formula "1") (term "0,1"))
                           (rule "commute_and" (formula "1") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                           (rule "eq_or" (formula "1") (term "1,1,0,0"))
                           (rule "commute_and" (formula "1") (term "1,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "commute_and_2" (formula "1") (term "1,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0,1,0,0"))
                           (rule "commute_and" (formula "1") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,1,0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0"))
                           (rule "shift_paren_and" (formula "3") (term "0,0"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "neq_or_4" (formula "4") (term "1"))
                           (rule "concrete_and_3" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "neq_or_4" (formula "4") (term "1"))
                           (rule "concrete_and_3" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "neq_or_4" (formula "4") (term "1"))
                           (rule "concrete_and_3" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0,0,1") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "4") (term "0,0,0,1"))
                           (rule "eq_and_2" (formula "4") (term "0,0,1"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,0,0,0"))
                           (rule "eq_and_2" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "1") (term "1,0,1,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "1") (term "0,1,0,0"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0,0"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0,1") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "4") (term "0,0,1"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,1,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "4") (term "1,1"))
                           (rule "eq_or" (formula "4") (term "0,1,1"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or" (formula "4"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or" (formula "3"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "5"))
                           (rule "eq_or_2" (formula "5") (term "0"))
                           (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "1"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "5"))
                           (rule "neq_or_3" (formula "5") (term "0"))
                           (rule "concrete_or_1" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4"))
                           (rule "commute_or_2" (formula "4") (term "0"))
                           (rule "neq_or_2" (formula "4") (term "0,0"))
                           (rule "concrete_or_1" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "5"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4"))
                           (rule "neq_or_2" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "replace_known_left" (formula "3") (term "0,1,0,0,1") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "3") (term "1,0,0,1"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,1"))
                           (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "1"))
                           (rule "replace_known_left" (formula "4") (term "0,1,0,1") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "4") (term "1,0,1"))
                           (rule "concrete_and_3" (formula "4") (term "0,1"))
                           (rule "cnf_rightDist" (formula "1") (term "0,1,0,0,0"))
                           (rule "neq_or" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,1,0,0,0"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "neq_or" (formula "3") (term "0"))
                           (rule "concrete_and_1" (formula "3"))
                           (rule "commute_or_2" (formula "3"))
                           (rule "neq_or_2" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "neq_or_3" (formula "3") (term "1"))
                           (rule "concrete_and_3" (formula "3"))
                           (rule "commute_or" (formula "3"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                           (rule "eq_or" (formula "1") (term "1,0,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                           (rule "concrete_and_1" (formula "1") (term "0,0,0,0"))
                           (rule "shift_paren_and" (formula "1") (term "0,0,0"))
                           (rule "commute_and_2" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0"))
                           (rule "neq_or_3" (formula "1") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "1") (term "1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0"))
                           (rule "neq_or" (formula "1") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "1") (term "1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0"))
                           (rule "commute_or" (formula "1") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0"))
                           (rule "commute_or" (formula "1") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                           (rule "commute_or_2" (formula "1") (term "1,1,0,0"))
                           (rule "neq_or" (formula "1") (term "0,1,1,0,0"))
                           (rule "concrete_or_1" (formula "1") (term "1,1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                           (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                           (rule "commute_or" (formula "1") (term "1,1,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,1,0,0") (ifseqformula "6"))
                           (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                           (rule "neq_or_3" (formula "1") (term "1,1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "3"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0"))
                           (rule "eq_or" (formula "1") (term "0,0,0"))
                           (rule "commute_or_2" (formula "1") (term "1,0,0"))
                           (rule "eq_or" (formula "1") (term "0,1,0,0"))
                           (rule "shift_paren_and" (formula "1") (term "0"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "neq_or_4" (formula "2") (term "1"))
                           (rule "concrete_and_3" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "neq_or_4" (formula "2") (term "1"))
                           (rule "concrete_and_3" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or" (formula "2"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or" (formula "1"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3"))
                           (rule "neq_or_3" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0"))
                           (rule "neq_or_2" (formula "2") (term "0,0"))
                           (rule "concrete_or_1" (formula "2") (term "0"))
                           (rule "concrete_or_1" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3"))
                           (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "2"))
                           (rule "neq_or_2" (formula "2") (term "0"))
                           (rule "concrete_or_1" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "neq_or_3" (formula "2") (term "1"))
                           (rule "concrete_and_3" (formula "2"))
                           (rule "commute_or" (formula "2"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "neq_or" (formula "1") (term "0"))
                           (rule "concrete_and_1" (formula "1"))
                           (rule "commute_or_2" (formula "1"))
                           (rule "neq_or_2" (formula "1") (term "0"))
                           (rule "concrete_or_1" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "if" (formula "18") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "2,1,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "0,1,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "0,1,1"))
                           (rule "simplifyUpdate1" (formula "18") (term "1,0,1,1"))
                           (rule "applyOnPV" (formula "18") (term "0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "18") (term "1"))
                           (rule "simplifyUpdate2Rigid" (formula "18") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "18"))
                           (rule "simplifyUpdate2" (formula "18") (term "0"))
                           (rule "blockReturn" (formula "18") (term "1,1,1,1"))
                           (rule "blockReturn" (formula "18") (term "1,1,1,1"))
                           (rule "simplifyUpdate2" (formula "18") (term "1,1,1"))
                           (rule "blockReturn" (formula "18") (term "1,1,1,1"))
                           (rule "blockReturn" (formula "18") (term "1,1,1,1"))
                           (rule "ifthenelse_split_for" (formula "18"))
                           (branch "returns_Body_0 = TRUE TRUE"
                              (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "6") (term "0"))
                              (rule "concrete_or_2" (formula "6"))
                              (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "3") (term "1"))
                              (rule "concrete_or_4" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "5"))
                              (rule "concrete_or_3" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "14"))
                              (rule "concrete_not_2" (formula "3") (term "0,0"))
                              (rule "concrete_or_1" (formula "3") (term "0"))
                              (rule "concrete_or_1" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "replace_known_left" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "4") (term "1"))
                              (rule "replace_known_right" (formula "4") (term "0,0,1") (ifseqformula "13"))
                              (rule "concrete_not_2" (formula "4") (term "0,1"))
                              (rule "concrete_and_1" (formula "4") (term "1"))
                              (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "4") (term "1"))
                              (rule "concrete_eq_4" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "apply_eq_boolean_rigid" (formula "16") (term "0,1,0,0,1,1") (ifseqformula "13"))
                              (rule "applyEqRigid" (formula "16") (term "0,0,0,0,0,0,1,1") (ifseqformula "3"))
                              (rule "applyEqRigid" (formula "16") (term "0,1,0,0,0,0,1,1") (ifseqformula "1"))
                              (rule "returnIndexedLoopScope" (formula "17") (term "1,1,1"))
                              (rule "assignment" (formula "17") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                              (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                              (rule "assignment" (formula "17") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                              (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                              (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                              (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                              (rule "tryEmpty" (formula "17") (term "1,1,1"))
                              (rule "emptyModality" (formula "17") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "1"))
                              (rule "applySkip2" (formula "17") (term "1"))
                              (rule "sequentialToParallel2" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17") (term "0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1,0"))
                              (rule "applyOnPV" (formula "17") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,1,0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,0"))
                              (rule "applyOnPV" (formula "17") (term "0,0,0"))
                              (rule "boolean_equal" (formula "17") (term "0,0"))
                              (rule "concrete_impl_1" (formula "17") (term "0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                              (rule "applyOnPV" (formula "17") (term "0,0,0,1"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1"))
                              (rule "boolean_equal" (formula "17") (term "0,0,1"))
                              (rule "concrete_not_1" (formula "17") (term "0,1"))
                              (rule "concrete_impl_2" (formula "17") (term "1"))
                              (rule "concrete_and_3" (formula "17"))
                              (rule "applyConcrOnAbstrUpdTerm" (formula "2") (term "0,1,0,0,0"))
                              (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0,0,0"))
                              (rule "if" (formula "16") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "0,1"))
                              (rule "applySkip2" (formula "16") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "16"))
                              (rule "simplifyUpdate2" (formula "16") (term "0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0"))
                              (rule "applyOnPV" (formula "16") (term "0,0"))
                              (rule "boolean_equal" (formula "16") (term "0"))
                              (rule "ifthenelse_true_for" (formula "16"))
                              (rule "blockReturn" (formula "16") (term "1,1,1"))
                              (rule "blockReturn" (formula "16") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                              (rule "blockReturn" (formula "16") (term "1,1,1"))
                              (rule "blockReturn" (formula "16") (term "1,1,1"))
                              (rule "returnIndexedLoopScope" (formula "16") (term "1,1,1"))
                              (rule "assignment" (formula "16") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                              (rule "methodCallReturn" (formula "16") (term "1,1,1"))
                              (rule "assignment" (formula "16") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnElementary" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnPV" (formula "16") (term "0,1,0,1,1"))
                              (rule "methodCallEmpty" (formula "16") (term "1,1,1"))
                              (rule "tryEmpty" (formula "16") (term "1,1,1"))
                              (rule "emptyModality" (formula "16") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1"))
                              (rule "applySkip2" (formula "16") (term "1"))
                              (rule "sequentialToParallel2" (formula "16"))
                              (rule "simplifyUpdate2" (formula "16"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "16"))
                              (rule "simplifyUpdate2" (formula "16") (term "0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
                              (rule "applyOnPV" (formula "16") (term "0,0,0"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,0"))
                              (rule "boolean_equal" (formula "16") (term "0,0"))
                              (rule "concrete_impl_1" (formula "16") (term "0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,0,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,0,1"))
                              (rule "applyOnPV" (formula "16") (term "0,0,0,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1"))
                              (rule "boolean_equal" (formula "16") (term "0,0,1"))
                              (rule "concrete_not_1" (formula "16") (term "0,1"))
                              (rule "concrete_impl_2" (formula "16") (term "1"))
                              (rule "concrete_and_3" (formula "16"))
                              (rule "notRight" (formula "16"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "close" (formula "17") (ifseqformula "1"))
                           )
                           (branch "returns_Body_0 = TRUE FALSE"
                              (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "18"))
                              (rule "concrete_not_2" (formula "5") (term "0"))
                              (rule "concrete_or_1" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "17"))
                              (rule "concrete_not_2" (formula "2") (term "1"))
                              (rule "concrete_or_3" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "16"))
                              (rule "concrete_or_4" (formula "2") (term "0"))
                              (rule "replace_known_right" (formula "3") (term "0,1,0,1") (ifseqformula "15"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,1"))
                              (rule "concrete_and_3" (formula "3") (term "0,1"))
                              (rule "apply_eq_boolean_rigid" (formula "14") (term "0,1,0,0,0,0,1,1") (ifseqformula "15"))
                              (rule "ifUnfold" (formula "16") (term "1,1,1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "16") (term "1,1,1") (newnames "boolv_3"))
                              (rule "inequality_comparison_simple" (formula "16") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnElementary" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0,1,1"))
                              (rule "applyOnPV" (formula "16") (term "0,0,0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0,1,1"))
                              (rule "applyConcrOnAbstrUpdTerm" (formula "1") (term "0,1,0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0"))
                              (rule "if" (formula "14") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "2,1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                              (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
                              (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1"))
                              (rule "applyOnPV" (formula "14") (term "0,0,1,1"))
                              (rule "boolean_not_equal_2" (formula "14") (term "0,1,1"))
                              (rule "ifthenelse_false_for" (formula "14") (term "1,1"))
                              (rule "ifUnfold" (formula "14") (term "1,1,1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "14") (term "1,1,1") (newnames "boolv_4"))
                              (rule "inequality_comparison_simple" (formula "14") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "14") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "14") (term "1,0,1,1"))
                              (rule "applyOnElementary" (formula "14") (term "1,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0,1,1"))
                              (rule "applyOnPV" (formula "14") (term "0,0,0,1,0,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "14") (term "1,0,0,1,0,1,1"))
                              (rule "applyConcrOnAbstrUpd" (formula "16"))
                              (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                              (rule "applyConcrOnAbstrUpd" (formula "14"))
                              (rule "sequentialToParallel2" (formula "14") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "14") (term "1,0,1,1"))
                              (rule "if" (formula "16") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                              (rule "applyOnPV" (formula "16") (term "0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1"))
                              (rule "ifthenelse_concrete4" (formula "16") (term "0,1,1"))
                              (rule "boolean_not_equal_2" (formula "16") (term "1,0,1,1"))
                              (rule "concrete_or_4" (formula "16") (term "0,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1"))
                              (rule "simplifyUpdate2Rigid" (formula "16") (term "0,1"))
                              (rule "ifthenelse_negated_for" (formula "16") (term "1"))
                              (rule "applyOnRigidFormula" (formula "16"))
                              (rule "simplifyUpdate2Rigid" (formula "16") (term "0"))
                              (rule "blockThrow" (formula "16") (term "1,1,1,2"))
                              (rule "blockThrow" (formula "16") (term "1,1,1,2"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1,2"))
                              (rule "blockThrow" (formula "16") (term "1,1,1,2"))
                              (rule "blockThrow" (formula "16") (term "1,1,1,2"))
                              (rule "ifthenelse_split_for" (formula "16"))
                              (branch "exc_Body_0 = null TRUE"
                                 (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                                 (rule "concrete_or_3" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "1"))
                                 (rule "concrete_and_3" (formula "3") (term "1"))
                                 (rule "applyEqRigid" (formula "14") (term "0,0,0,1,1,0,1,1") (ifseqformula "1"))
                                 (rule "eqClose" (formula "14") (term "0,0,1,1,0,1,1"))
                                 (rule "ifthenelse_true" (formula "14") (term "0,1,1,0,1,1"))
                                 (rule "applyEqRigid" (formula "14") (term "0,0,0,0,1,0,1,1") (ifseqformula "1"))
                                 (rule "if" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "14") (term "0,1,1"))
                                 (rule "ifthenelse_false_for" (formula "14") (term "1,1"))
                                 (rule "if" (formula "16") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "0,1"))
                                 (rule "applySkip2" (formula "16") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,0,1"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0,1"))
                                 (rule "boolean_not_equal_2" (formula "16") (term "0,1"))
                                 (rule "ifthenelse_false_for" (formula "16") (term "1"))
                                 (rule "if" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "14") (term "0,1,1"))
                                 (rule "ifthenelse_false_for" (formula "14") (term "1,1"))
                                 (rule "if" (formula "16") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "0,1"))
                                 (rule "applySkip2" (formula "16") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "16"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0"))
                                 (rule "applyOnPV" (formula "16") (term "0,0"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0"))
                                 (rule "blockEmpty" (formula "16") (term "1,1,1,2"))
                                 (rule "ifthenelse_split_for" (formula "16"))
                                 (branch "breaks_Body_0 = TRUE TRUE"
                                    (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
                                    (rule "concrete_not_1" (formula "4") (term "1"))
                                    (rule "concrete_eq_4" (formula "4"))
                                    (rule "notLeft" (formula "4"))
                                    (rule "applyEqRigid" (formula "15") (term "0,1,0,1,1") (ifseqformula "1"))
                                    (rule "elim_double_block_2" (formula "17") (term "1,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "unlabeledBreakIndexedLoopScope" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                    (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "17") (term "1,1,1"))
                                    (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                                    (rule "tryEmpty" (formula "17") (term "1,1,1"))
                                    (rule "emptyModality" (formula "17") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,0,1,1"))
                                    (rule "concrete_impl_1" (formula "17") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,0,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "0,1,1,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,1,1,1,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "1,1,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,0,1,1,1"))
                                    (rule "concrete_not_1" (formula "17") (term "0,1,1,1"))
                                    (rule "concrete_impl_2" (formula "17") (term "1,1,1"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17"))
                                    (rule "applyOnRigidFormula" (formula "17"))
                                    (rule "simplifyUpdate1Rigid" (formula "17") (term "1"))
                                    (rule "if" (formula "15") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "15") (term "0,1"))
                                    (rule "applySkip2" (formula "15") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "0,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1,0,1"))
                                    (rule "applyOnPV" (formula "15") (term "0,0,1"))
                                    (rule "boolean_equal" (formula "15") (term "0,1"))
                                    (rule "ifthenelse_true_for" (formula "15") (term "1"))
                                    (rule "blockBreak" (formula "15") (term "1,1,1"))
                                    (rule "blockBreak" (formula "15") (term "1,1,1"))
                                    (rule "blockBreak" (formula "15") (term "1,1,1"))
                                    (rule "blockBreak" (formula "15") (term "1,1,1"))
                                    (rule "unlabeledBreakIndexedLoopScope" (formula "15") (term "1,1,1"))
                                    (rule "assignment" (formula "15") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                                    (rule "methodCallReturn" (formula "15") (term "1,1,1"))
                                    (rule "assignment" (formula "15") (term "1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "15") (term "1,1,1"))
                                    (rule "methodCallEmpty" (formula "15") (term "1,1,1"))
                                    (rule "tryEmpty" (formula "15") (term "1,1,1"))
                                    (rule "emptyModality" (formula "15") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "0,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "0,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "15") (term "1,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "15") (term "0,0,0,1,1"))
                                    (rule "boolean_equal" (formula "15") (term "0,0,1,1"))
                                    (rule "concrete_impl_1" (formula "15") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,1,1"))
                                    (rule "applyOnPV" (formula "15") (term "0,0,0,1,1,1"))
                                    (rule "boolean_equal" (formula "15") (term "0,0,1,1,1"))
                                    (rule "concrete_not_1" (formula "15") (term "0,1,1,1"))
                                    (rule "concrete_impl_2" (formula "15") (term "1,1,1"))
                                    (rule "concrete_and_3" (formula "15") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "15"))
                                    (rule "notRight" (formula "15"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "close" (formula "17") (ifseqformula "1"))
                                 )
                                 (branch "breaks_Body_0 = TRUE FALSE"
                                    (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "16"))
                                    (rule "concrete_not_2" (formula "3") (term "1"))
                                    (rule "concrete_eq_3" (formula "3"))
                                    (rule "apply_eq_boolean_rigid" (formula "14") (term "0,1,0,1,1") (ifseqformula "16"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "unlabeledBreakIndexedLoopScope" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                    (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "17") (term "1,1,1"))
                                    (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                                    (rule "tryEmpty" (formula "17") (term "1,1,1"))
                                    (rule "emptyModality" (formula "17") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,0,1,1"))
                                    (rule "concrete_impl_1" (formula "17") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,0,1,1,1"))
                                    (rule "concrete_not_1" (formula "17") (term "0,1,1,1"))
                                    (rule "concrete_impl_2" (formula "17") (term "1,1,1"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17"))
                                    (rule "applyOnRigidFormula" (formula "17"))
                                    (rule "simplifyUpdate1Rigid" (formula "17") (term "1"))
                                    (rule "if" (formula "14") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "2,1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "1"))
                                    (rule "dropEffectlessAbstractUpdate2" (formula "14") (term "0,1"))
                                    (rule "applySkip2" (formula "14") (term "0,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
                                    (rule "simplifyUpdate1" (formula "14") (term "1,0,1"))
                                    (rule "applyOnPV" (formula "14") (term "0,0,1"))
                                    (rule "boolean_not_equal_2" (formula "14") (term "0,1"))
                                    (rule "ifthenelse_false_for" (formula "14") (term "1"))
                                    (rule "blockEmpty" (formula "14") (term "1,1,1"))
                                    (rule "assignment" (formula "14") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "14") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "14") (term "1,0,1,1"))
                                    (rule "blockBreak" (formula "14") (term "1,1,1"))
                                    (rule "blockBreak" (formula "14") (term "1,1,1"))
                                    (rule "unlabeledBreakIndexedLoopScope" (formula "14") (term "1,1,1"))
                                    (rule "assignment" (formula "14") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "14") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "14") (term "1,0,1,1"))
                                    (rule "methodCallReturn" (formula "14") (term "1,1,1"))
                                    (rule "assignment" (formula "14") (term "1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "14") (term "1,1,1"))
                                    (rule "methodCallEmpty" (formula "14") (term "1,1,1"))
                                    (rule "tryEmpty" (formula "14") (term "1,1,1"))
                                    (rule "emptyModality" (formula "14") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "0,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "0,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "14") (term "1,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "14") (term "0,0,0,1,1"))
                                    (rule "boolean_equal" (formula "14") (term "0,0,1,1"))
                                    (rule "concrete_impl_1" (formula "14") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,1,1"))
                                    (rule "applyOnPV" (formula "14") (term "0,0,0,1,1,1"))
                                    (rule "boolean_equal" (formula "14") (term "0,0,1,1,1"))
                                    (rule "concrete_not_1" (formula "14") (term "0,1,1,1"))
                                    (rule "concrete_impl_2" (formula "14") (term "1,1,1"))
                                    (rule "concrete_and_3" (formula "14") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "14"))
                                    (rule "notRight" (formula "14"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "close" (formula "17") (ifseqformula "1"))
                                 )
                              )
                              (branch "exc_Body_0 = null FALSE"
                                 (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "16"))
                                 (rule "concrete_or_4" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "11"))
                                 (rule "concrete_not_2" (formula "2") (term "0,1"))
                                 (rule "concrete_and_1" (formula "2") (term "1"))
                                 (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "16"))
                                 (rule "concrete_eq_4" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "apply_eq_boolean_rigid" (formula "14") (term "0,1,0,0,1,0,1,1") (ifseqformula "11"))
                                 (rule "throwIndexedLoopScope" (formula "17") (term "1,1,1"))
                                 (rule "assignment" (formula "17") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                 (rule "methodCallParamThrow" (formula "17") (term "1,1,1"))
                                 (rule "tryCatchThrow" (formula "17") (term "1,1,1"))
                                 (rule "ifElseUnfold" (formula "17") (term "1,1,1") (inst "#boolv=boolv"))
                                 (rule "variableDeclaration" (formula "17") (term "1,1,1") (newnames "boolv_5"))
                                 (rule "equality_comparison_simple" (formula "17") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,0,1,0,1,1"))
                                 (rule "if" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,0,1,1"))
                                 (rule "ifthenelse_concrete4" (formula "14") (term "0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "14") (term "1,0,1,1"))
                                 (rule "concrete_or_4" (formula "14") (term "0,1,1"))
                                 (rule "ifthenelse_negated_for" (formula "14") (term "1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1"))
                                 (rule "simplifyUpdate2Rigid" (formula "14") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "14"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0"))
                                 (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "16"))
                                 (rule "ifthenelse_false_for" (formula "14"))
                                 (rule "blockThrow" (formula "14") (term "1,1,1"))
                                 (rule "blockThrow" (formula "14") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1"))
                                 (rule "blockThrow" (formula "14") (term "1,1,1"))
                                 (rule "blockThrow" (formula "14") (term "1,1,1"))
                                 (rule "throwIndexedLoopScope" (formula "14") (term "1,1,1"))
                                 (rule "assignment" (formula "14") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "14") (term "1,0,1,1"))
                                 (rule "methodCallParamThrow" (formula "14") (term "1,1,1"))
                                 (rule "tryCatchThrow" (formula "14") (term "1,1,1"))
                                 (rule "ifElseUnfold" (formula "14") (term "1,1,1") (inst "#boolv=boolv"))
                                 (rule "variableDeclaration" (formula "14") (term "1,1,1") (newnames "boolv_6"))
                                 (rule "equality_comparison_simple" (formula "14") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnRigidTerm" (formula "14") (term "0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "14") (term "2,0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1,0,1,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0,1,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,0,0,1,0,1,1"))
                                 (rule "ifElse" (formula "17") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                 (rule "ifthenelse_concrete3" (formula "17") (term "0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "17") (term "1,0,1,1"))
                                 (rule "concrete_or_4" (formula "17") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                 (rule "simplifyUpdate2Rigid" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
                                 (rule "ifthenelse_false_for" (formula "17"))
                                 (rule "elim_double_block" (formula "17") (term "1,1,1"))
                                 (rule "ifElse" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "2,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,0,1,1"))
                                 (rule "ifthenelse_concrete3" (formula "14") (term "0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "14") (term "1,0,1,1"))
                                 (rule "concrete_or_4" (formula "14") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1"))
                                 (rule "simplifyUpdate2Rigid" (formula "14") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "14"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0"))
                                 (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "16"))
                                 (rule "ifthenelse_false_for" (formula "14"))
                                 (rule "elim_double_block" (formula "14") (term "1,1,1"))
                                 (rule "ifElse" (formula "17") (term "1,1,1"))
                                 (rule "instanceof_static_type" (formula "17") (term "2,0,0,1,1,1"))
                                 (rule "ifthenelse_concrete4" (formula "17") (term "0,1,1,1"))
                                 (rule "boolean_not_equal_2" (formula "17") (term "1,0,1,1,1"))
                                 (rule "concrete_or_4" (formula "17") (term "0,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "0,1"))
                                 (rule "applySkip2" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                 (rule "ifthenelse_negated_for" (formula "17"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                 (rule "applyOnPV" (formula "17") (term "0,0"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
                                 (rule "ifthenelse_false_for" (formula "17"))
                                 (rule "variableDeclaration" (formula "17") (term "1,1,1") (newnames "t"))
                                 (rule "delete_unnecessary_cast" (formula "17") (term "1,1,1"))
                                 (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                                 (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                                 (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                                 (rule "assignment" (formula "17") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                                 (rule "emptyModality" (formula "17") (term "1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "1"))
                                 (rule "applySkip2" (formula "17") (term "1"))
                                 (rule "sequentialToParallel2" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17"))
                                 (rule "simplifyUpdate3" (formula "17") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,0"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,0"))
                                 (rule "boolean_equal" (formula "17") (term "0,0"))
                                 (rule "concrete_impl_1" (formula "17") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,1,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "0,1,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,0,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1"))
                                 (rule "boolean_equal" (formula "17") (term "0,0,1"))
                                 (rule "concrete_not_1" (formula "17") (term "0,1"))
                                 (rule "concrete_impl_2" (formula "17") (term "1"))
                                 (rule "concrete_and_3" (formula "17"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1"))
                                 (rule "applyOnPV" (formula "17") (term "0"))
                                 (rule "ifElse" (formula "14") (term "1,1,1"))
                                 (rule "instanceof_static_type" (formula "14") (term "2,0,0,1,1,1"))
                                 (rule "ifthenelse_concrete4" (formula "14") (term "0,1,1,1"))
                                 (rule "boolean_not_equal_2" (formula "14") (term "1,0,1,1,1"))
                                 (rule "concrete_or_4" (formula "14") (term "0,1,1,1"))
                                 (rule "ifthenelse_negated_for" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,0,1,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1"))
                                 (rule "simplifyUpdate2Rigid" (formula "14") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "14"))
                                 (rule "simplifyUpdate2Rigid" (formula "14") (term "0"))
                                 (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "16"))
                                 (rule "ifthenelse_false_for" (formula "14"))
                                 (rule "variableDeclaration" (formula "14") (term "1,1,1") (newnames "t_1"))
                                 (rule "delete_unnecessary_cast" (formula "14") (term "1,1,1"))
                                 (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                                 (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                                 (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,1,0,1,1"))
                                 (rule "assignment" (formula "14") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "14") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,1,0,1,1"))
                                 (rule "emptyModality" (formula "14") (term "1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "14") (term "1"))
                                 (rule "applySkip2" (formula "14") (term "1"))
                                 (rule "sequentialToParallel2" (formula "14"))
                                 (rule "simplifyUpdate2" (formula "14"))
                                 (rule "simplifyUpdate3" (formula "14") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "14"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,0"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,0"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "14") (term "1,0,0"))
                                 (rule "applyOnPV" (formula "14") (term "0,0,0"))
                                 (rule "boolean_equal" (formula "14") (term "0,0"))
                                 (rule "concrete_impl_1" (formula "14") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "1,0,1,1"))
                                 (rule "simplifyUpdate2" (formula "14") (term "0,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "14") (term "0,0,1"))
                                 (rule "applyOnPV" (formula "14") (term "0,0,0,1"))
                                 (rule "simplifyUpdate1" (formula "14") (term "1,0,0,1"))
                                 (rule "boolean_equal" (formula "14") (term "0,0,1"))
                                 (rule "concrete_not_1" (formula "14") (term "0,1"))
                                 (rule "concrete_impl_2" (formula "14") (term "1"))
                                 (rule "concrete_and_3" (formula "14"))
                                 (rule "notRight" (formula "14"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                 (rule "close" (formula "17") (ifseqformula "1"))
                              )
                           )
                        )
                        (branch "if condition false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "15"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "12"))
                           (rule "simplifyUpdate1" (formula "12") (term "1"))
                           (rule "applyOnPV" (formula "12") (term "0"))
                           (rule "boolean_equal" (formula "12"))
                           (rule "closeTrue" (formula "12"))
                        )
                     )
                     (branch "if boolv false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "15"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "12"))
                        (rule "applyOnPV" (formula "12") (term "0"))
                        (rule "simplifyUpdate1" (formula "12") (term "1"))
                        (rule "boolean_equal" (formula "12"))
                        (rule "closeTrue" (formula "12"))
                     )
                  )
                  (branch "if condition false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "apply_eq_boolean" (formula "10") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "8"))
                     (rule "postincrement" (formula "11") (term "1"))
                     (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=o"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "o"))
                     (rule "remove_parentheses_right" (formula "11") (term "1"))
                     (rule "assignmentAdditionInt" (formula "11") (term "1"))
                     (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
                     (rule "sequentialToParallel2" (formula "11"))
                     (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                     (rule "applyOnElementary" (formula "11") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "11") (term "1,0,1,0"))
                     (rule "widening_identity_cast_5" (formula "11") (term "1"))
                     (rule "assignment" (formula "11") (term "1"))
                     (rule "sequentialToParallel2" (formula "11"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                     (rule "applyOnElementary" (formula "11") (term "1,0"))
                     (rule "applyOnPV" (formula "11") (term "0,1,0"))
                     (rule "blockEmpty" (formula "11") (term "1"))
                     (rule "assignment" (formula "11") (term "1"))
                     (rule "sequentialToParallel2" (formula "11"))
                     (rule "simplifyUpdate2" (formula "11"))
                     (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                     (rule "emptyIndexedLoopScope" (formula "11") (term "1"))
                     (rule "applyOnRigidFormula" (formula "11"))
                     (rule "simplifyUpdate2" (formula "11") (term "0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,0"))
                     (rule "applyOnPV" (formula "11") (term "0,0"))
                     (rule "boolean_not_equal_2" (formula "11") (term "0"))
                     (rule "ifthenelse_false_for" (formula "11"))
                     (rule "emptyModality" (formula "11") (term "1"))
                     (rule "applyOnRigidFormula" (formula "11"))
                     (rule "simplifyUpdate2" (formula "11") (term "0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "1"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "11") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "11") (term "0,1,1"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                     (rule "applyOnPV" (formula "11") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,1,0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
                     (rule "applyOnPV" (formula "11") (term "0,0,0"))
                     (rule "boolean_not_equal_2" (formula "11") (term "0,0"))
                     (rule "concrete_impl_2" (formula "11") (term "0"))
                     (rule "concrete_and_1" (formula "11"))
                     (rule "impRight" (formula "11"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "12") (term "0"))
                     (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "12") (term "1"))
                     (rule "simplifyUpdate1" (formula "12") (term "0,1"))
                     (rule "simplifyUpdate1" (formula "12") (term "1,1"))
                     (rule "applyOnPV" (formula "12") (term "1,1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "boolean_not_equal_2" (formula "8"))
                     (rule "false_right" (formula "8"))
                     (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                     (rule "simplifyUpdate2" (formula "11") (term "0,0,0"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,0,0"))
                     (rule "applyOnRigidTerm" (formula "11") (term "0,1"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,0,1"))
                     (rule "simplifyUpdate1" (formula "11") (term "0,0,1"))
                     (rule "applyOnPV" (formula "11") (term "1,0,1"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0,1,0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0,0,0"))
                     (rule "simplifyUpdate2" (formula "11") (term "0,0,0,0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "1,0,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,1,0,0"))
                     (rule "applyOnPV" (formula "11") (term "0,1,0,0"))
                     (rule "applyOnRigidTerm" (formula "11") (term "1,0,1"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1"))
                     (rule "applyOnPV" (formula "11") (term "0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,1"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,1"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "1,0,0,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,1,0,0,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "0,1,0,0,0"))
                     (rule "applyOnPV" (formula "11") (term "1,1,0,0,0"))
                     (rule "applyOnPV" (formula "11") (term "0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "11") (term "0,0,1"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0,0,0,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0,0"))
                     (rule "applyOnPV" (formula "11") (term "0,0,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "11") (term "0,0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "2,0,0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0,1,0"))
                     (rule "applyOnPV" (formula "11") (term "0,0,0,0,1,0"))
                     (rule "eqClose" (formula "11") (term "0,0,1,0"))
                     (rule "precOfInt" (formula "11") (term "1"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,1"))
                     (rule "add_literals" (formula "11") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "11") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "11") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,1"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,1"))
                     (rule "polySimp_pullOutFactor2" (formula "11") (term "0,1,1"))
                     (rule "add_literals" (formula "11") (term "1,0,1,1"))
                     (rule "times_zero_1" (formula "11") (term "0,1,1"))
                     (rule "leq_literals" (formula "11") (term "1,1"))
                     (rule "concrete_and_3" (formula "11") (term "1"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                     (rule "times_zero_2" (formula "11") (term "1,0,1"))
                     (rule "add_zero_right" (formula "11") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "replace_known_left" (formula "11") (term "1,0,0,0") (ifseqformula "1"))
                     (rule "concrete_and_3" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,1"))
                     (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "1"))
                     (rule "concrete_and_3" (formula "11"))
                     (rule "inEqSimp_subsumption1" (formula "11") (term "0,0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "11") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "11") (term "0,0"))
                     (rule "concrete_and_1" (formula "11") (term "0"))
                     (rule "all_unused" (formula "11") (term "1"))
                     (rule "all_unused" (formula "11") (term "1"))
                     (rule "concrete_and_3" (formula "11"))
                     (rule "ifSplit" (formula "10"))
                     (branch "if boolv true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_equal" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifSplit" (formula "10"))
                        (branch "if condition true"
                           (rule "simplifyUpdate2" (formula "11"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if condition false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "11"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "8"))
                           (rule "simplifyUpdate1" (formula "8") (term "1"))
                           (rule "applyOnPV" (formula "8") (term "0"))
                           (rule "boolean_not_equal_2" (formula "8"))
                           (rule "false_right" (formula "8"))
                           (rule "postincrement" (formula "10") (term "1"))
                           (rule "compound_int_cast_expression" (formula "10") (term "1") (inst "#v=o"))
                           (rule "variableDeclarationAssign" (formula "10") (term "1"))
                           (rule "variableDeclaration" (formula "10") (term "1") (newnames "o_1"))
                           (rule "remove_parentheses_right" (formula "10") (term "1"))
                           (rule "assignmentAdditionInt" (formula "10") (term "1"))
                           (rule "translateJavaAddInt" (formula "10") (term "0,0,1"))
                           (rule "sequentialToParallel2" (formula "10"))
                           (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                           (rule "applyOnElementary" (formula "10") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "10") (term "1,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
                           (rule "applyOnPV" (formula "10") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0"))
                           (rule "widening_identity_cast_5" (formula "10") (term "1"))
                           (rule "assignment" (formula "10") (term "1"))
                           (rule "sequentialToParallel2" (formula "10"))
                           (rule "simplifyUpdate2" (formula "10"))
                           (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                           (rule "applyOnElementary" (formula "10") (term "1,0"))
                           (rule "applyOnPV" (formula "10") (term "0,1,0"))
                           (rule "blockEmpty" (formula "10") (term "1"))
                           (rule "assignment" (formula "10") (term "1"))
                           (rule "sequentialToParallel2" (formula "10"))
                           (rule "simplifyUpdate2" (formula "10"))
                           (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                           (rule "emptyIndexedLoopScope" (formula "10") (term "1"))
                           (rule "applyOnRigidFormula" (formula "10"))
                           (rule "simplifyUpdate2" (formula "10") (term "0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0"))
                           (rule "applyOnPV" (formula "10") (term "0,0"))
                           (rule "boolean_not_equal_2" (formula "10") (term "0"))
                           (rule "ifthenelse_false_for" (formula "10"))
                           (rule "emptyModality" (formula "10") (term "1"))
                           (rule "applyOnRigidFormula" (formula "10"))
                           (rule "simplifyUpdate2" (formula "10") (term "0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "1"))
                           (rule "simplifyUpdate2" (formula "10") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "10") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0"))
                           (rule "simplifyUpdate2" (formula "10") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "10") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                           (rule "simplifyUpdate2" (formula "10") (term "0,1,1"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
                           (rule "applyOnPV" (formula "10") (term "0,0,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0,0"))
                           (rule "boolean_not_equal_2" (formula "10") (term "0,0"))
                           (rule "concrete_impl_2" (formula "10") (term "0"))
                           (rule "concrete_and_1" (formula "10"))
                           (rule "impRight" (formula "10"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0"))
                           (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "1"))
                           (rule "applyOnRigidFormula" (formula "8"))
                           (rule "simplifyUpdate1" (formula "8") (term "1"))
                           (rule "applyOnPV" (formula "8") (term "0"))
                           (rule "boolean_not_equal_2" (formula "8"))
                           (rule "false_right" (formula "8"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "10") (term "1,0,0"))
                           (rule "simplifyUpdate2" (formula "10") (term "0,0,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "10") (term "1,0,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "10") (term "0,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "10") (term "1,0,1,0"))
                           (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
                           (rule "replace_known_right" (formula "10") (term "0,1,0") (ifseqformula "11"))
                           (rule "concrete_not_2" (formula "10") (term "1,0"))
                           (rule "concrete_and_3" (formula "10") (term "0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,0,1"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,0,0"))
                           (rule "applyOnPV" (formula "10") (term "0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "1,0,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,1,0,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "0,1,0,0"))
                           (rule "applyOnPV" (formula "10") (term "1,1,0,0"))
                           (rule "applyOnPV" (formula "10") (term "0,1,0,0"))
                           (rule "applyOnRigidFormula" (formula "10") (term "0,1,0"))
                           (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "10") (term "0,1,0"))
                           (rule "concrete_not_2" (formula "10") (term "1,0"))
                           (rule "concrete_and_3" (formula "10") (term "0"))
                           (rule "applyOnRigidTerm" (formula "10") (term "0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "10") (term "2,0,0,0,1"))
                           (rule "simplifyUpdate1" (formula "10") (term "1,0,0,0,1"))
                           (rule "applyOnPV" (formula "10") (term "0,0,0,0,1"))
                           (rule "eqClose" (formula "10") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,1,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0"))
                           (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "1"))
                           (rule "concrete_and_3" (formula "10") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "3"))
                           (rule "leq_literals" (formula "10") (term "0,0"))
                           (rule "concrete_or_1" (formula "10") (term "0"))
                           (rule "concrete_and_1" (formula "10"))
                           (rule "allRight" (formula "10") (inst "sk=f_0"))
                           (rule "allRight" (formula "10") (inst "sk=o_0"))
                           (rule "closeTrue" (formula "10"))
                        )
                     )
                     (branch "if boolv false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "11"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "8"))
                        (rule "simplifyUpdate1" (formula "8") (term "1"))
                        (rule "applyOnPV" (formula "8") (term "0"))
                        (rule "boolean_equal" (formula "8"))
                        (rule "closeTrue" (formula "8"))
                     )
                  )
               )
            )
            (branch "if boolv_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "11"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate1" (formula "8") (term "1"))
               (rule "applyOnPV" (formula "8") (term "0"))
               (rule "ifthenelse_concrete3" (formula "8"))
               (rule "boolean_not_equal_2" (formula "8") (term "1"))
               (rule "concrete_or_4" (formula "8"))
               (rule "inEqSimp_leqRight" (formula "8"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
               (rule "applyEq" (formula "11") (term "0,0,0,1,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,0"))
               (rule "times_zero_1" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "11") (term "0,1,0,1,1,0,0") (ifseqformula "1"))
               (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,1,0,0"))
               (rule "add_literals" (formula "11") (term "1,0,1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "0,1,1,0,0"))
               (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "3"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "1,0"))
               (rule "times_zero_1" (formula "3") (term "0"))
               (rule "qeq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "10") (term "0,0,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
               (rule "emptyIndexedLoopScope" (formula "9") (term "1"))
               (rule "applyOnRigidFormula" (formula "9"))
               (rule "simplifyUpdate2" (formula "9") (term "0"))
               (rule "applyOnRigidFormula" (formula "9") (term "0"))
               (rule "simplifyUpdate1" (formula "9") (term "1,0"))
               (rule "applyOnPV" (formula "9") (term "0,0"))
               (rule "boolean_equal" (formula "9") (term "0"))
               (rule "ifthenelse_true_for" (formula "9"))
               (rule "methodCallReturn" (formula "9") (term "1"))
               (rule "assignment" (formula "9") (term "1"))
               (rule "elimSelfSingleUpdateFor" (formula "9") (term "1"))
               (rule "methodCallEmpty" (formula "9") (term "1"))
               (rule "tryEmpty" (formula "9") (term "1"))
               (rule "emptyModality" (formula "9") (term "1"))
               (rule "applyOnRigidFormula" (formula "9"))
               (rule "simplifyUpdate2" (formula "9") (term "0"))
               (rule "applyOnRigidFormula" (formula "9") (term "1"))
               (rule "simplifyUpdate2" (formula "9") (term "1,1"))
               (rule "simplifyUpdate2" (formula "9") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "9") (term "0"))
               (rule "simplifyUpdate2" (formula "9") (term "1,0"))
               (rule "simplifyUpdate2" (formula "9") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "9") (term "1,1"))
               (rule "simplifyUpdate2" (formula "9") (term "0,1,1"))
               (rule "simplifyUpdate2" (formula "9") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "9") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "9") (term "1,0"))
               (rule "simplifyUpdate1" (formula "9") (term "1,1,0"))
               (rule "applyOnPV" (formula "9") (term "0,1,0"))
               (rule "applyOnRigidFormula" (formula "9") (term "0,0"))
               (rule "simplifyUpdate1" (formula "9") (term "1,0,0"))
               (rule "applyOnPV" (formula "9") (term "0,0,0"))
               (rule "boolean_equal" (formula "9") (term "0,0"))
               (rule "concrete_impl_1" (formula "9") (term "0"))
               (rule "applyOnRigidFormula" (formula "9") (term "0,1,1"))
               (rule "simplifyUpdate2" (formula "9") (term "1,0,1,1"))
               (rule "simplifyUpdate2" (formula "9") (term "0,0,1,1"))
               (rule "applyOnRigidFormula" (formula "9") (term "1,1,1"))
               (rule "simplifyUpdate1" (formula "9") (term "0,1,1,1"))
               (rule "simplifyUpdate1" (formula "9") (term "1,1,1,1"))
               (rule "applyOnPV" (formula "9") (term "1,1,1,1"))
               (rule "applyOnRigidFormula" (formula "9") (term "0,0,1"))
               (rule "applyOnPV" (formula "9") (term "0,0,0,1"))
               (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1"))
               (rule "boolean_equal" (formula "9") (term "0,0,1"))
               (rule "concrete_not_1" (formula "9") (term "0,1"))
               (rule "concrete_impl_2" (formula "9") (term "1"))
               (rule "concrete_and_3" (formula "9"))
               (rule "ifElseSplit" (formula "8"))
               (branch "if boolv_2 true"
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "ifSkipThen" (formula "9") (term "1"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "9"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "7"))
                  (rule "applyOnPV" (formula "7") (term "0"))
                  (rule "simplifyUpdate1" (formula "7") (term "1"))
                  (rule "boolean_not_equal_2" (formula "7"))
                  (rule "false_right" (formula "7"))
                  (rule "less_than_comparison_simple" (formula "8") (term "1"))
                  (rule "sequentialToParallel2" (formula "8"))
                  (rule "simplifyUpdate3" (formula "8") (term "1,0"))
                  (rule "applyOnElementary" (formula "8") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "8") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "8") (term "0,0,0,1,0"))
                  (rule "applyOnPV" (formula "8") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "8") (term "0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "8") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "8") (term "1,1,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,0,1,0"))
                  (rule "leq_literals" (formula "8") (term "0,0,1,0"))
                  (rule "ifthenelse_false" (formula "8") (term "0,1,0"))
                  (rule "blockEmpty" (formula "8") (term "1"))
                  (rule "ifSplit" (formula "8"))
                  (branch "if boolv true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "9"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "9"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "7"))
                     (rule "applyOnPV" (formula "7") (term "0"))
                     (rule "simplifyUpdate1" (formula "7") (term "1"))
                     (rule "boolean_not_equal_2" (formula "7"))
                     (rule "false_right" (formula "7"))
                     (rule "emptyIndexedLoopScope" (formula "8") (term "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate2" (formula "8") (term "0"))
                     (rule "applyOnRigidFormula" (formula "8") (term "0"))
                     (rule "simplifyUpdate1" (formula "8") (term "1,0"))
                     (rule "applyOnPV" (formula "8") (term "0,0"))
                     (rule "boolean_equal" (formula "8") (term "0"))
                     (rule "ifthenelse_true_for" (formula "8"))
                     (rule "methodCallReturn" (formula "8") (term "1"))
                     (rule "assignment" (formula "8") (term "1"))
                     (rule "elimSelfSingleUpdateFor" (formula "8") (term "1"))
                     (rule "methodCallEmpty" (formula "8") (term "1"))
                     (rule "tryEmpty" (formula "8") (term "1"))
                     (rule "emptyModality" (formula "8") (term "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate2" (formula "8") (term "0"))
                     (rule "applyOnRigidFormula" (formula "8") (term "1"))
                     (rule "simplifyUpdate2" (formula "8") (term "0,1"))
                     (rule "simplifyUpdate2" (formula "8") (term "1,1"))
                     (rule "applyOnRigidFormula" (formula "8") (term "0"))
                     (rule "simplifyUpdate2" (formula "8") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "8") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "8") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "8") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "8") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "8") (term "0,1,1"))
                     (rule "applyOnRigidFormula" (formula "8") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "8") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "8") (term "1,0,0"))
                     (rule "applyOnPV" (formula "8") (term "0,0,0"))
                     (rule "boolean_equal" (formula "8") (term "0,0"))
                     (rule "concrete_impl_1" (formula "8") (term "0"))
                     (rule "applyOnRigidFormula" (formula "8") (term "0,0,1"))
                     (rule "applyOnPV" (formula "8") (term "0,0,0,1"))
                     (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1"))
                     (rule "boolean_equal" (formula "8") (term "0,0,1"))
                     (rule "concrete_not_1" (formula "8") (term "0,1"))
                     (rule "concrete_impl_2" (formula "8") (term "1"))
                     (rule "concrete_and_3" (formula "8"))
                     (rule "notRight" (formula "8"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "close" (formula "9") (ifseqformula "1"))
                  )
               )
            )
         )
      )
   )
   (branch "Case '<-'"
      (rule "diamondToBox" (formula "1") (term "1"))
      (rule "notLeft" (formula "1"))
      (rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_betweenStrongerInv,savedHeapBefore_betweenStrongerInv,conditionBefore_betweenStrongerInv,doneBefore_betweenStrongerInv,iBefore_betweenStrongerInv,resultBefore_betweenStrongerInv,thresholdBefore_betweenStrongerInv"))
      (rule "simplifyUpdate2" (formula "3") (term "1"))
      (rule "assignment" (formula "3") (term "1"))
      (rule "sequentialToParallel2" (formula "3"))
      (rule "simplifyUpdate3" (formula "3") (term "1,0"))
      (rule "assignment" (formula "3") (term "1"))
      (rule "sequentialToParallel2" (formula "3"))
      (rule "simplifyUpdate3" (formula "3") (term "1,0"))
      (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_after,savedHeapBefore_after,conditionBefore_after,iBefore_after,resultBefore_after,thresholdBefore_after"))
      (rule "simplifyUpdate2" (formula "2") (term "1"))
      (rule "assignment" (formula "2") (term "1"))
      (rule "sequentialToParallel2" (formula "2"))
      (rule "simplifyUpdate3" (formula "2") (term "1,0"))
      (rule "loopScopeInvDiaAEEquiv" (formula "3") (term "1") (newnames "i_0,done_0,result_1,o,f") (inst "#x=x") (inst "#variant=variant") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0") (proofscript))
      (branch "Invariant Initially Valid"
         (rule "simplifyUpdate2" (formula "3") (proofscript))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "simplifyUpdate2" (formula "3") (term "1"))
         (rule "simplifyUpdate2" (formula "3") (term "0"))
         (rule "applyOnRigidFormula" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "3") (term "0"))
         (rule "simplifyUpdate2" (formula "3") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0,1"))
         (rule "applyOnPV" (formula "3") (term "0,0,1"))
         (rule "boolean_not_equal_2" (formula "3") (term "0,1"))
         (rule "concrete_not_2" (formula "3") (term "1"))
         (rule "concrete_and_3" (formula "3"))
         (rule "applyOnRigidFormula" (formula "3") (term "1"))
         (rule "simplifyUpdate1" (formula "3") (term "1,1"))
         (rule "simplifyUpdate1" (formula "3") (term "0,1"))
         (rule "applyOnPV" (formula "3") (term "1,1"))
         (rule "applyOnPV" (formula "3") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0"))
         (rule "applyOnPV" (formula "3") (term "0,0"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (rule "concrete_and_1" (formula "3"))
         (rule "inEqSimp_leqRight" (formula "3"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (rule "concrete_and_2" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
      (branch "Invariant Preserved and Used"
         (rule "loopScopeInvBoxAEEquiv" (formula "3") (term "1") (newnames "i_1,result_2,o,f") (inst "#x=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_1") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_1") (inst "anon_heap_LOOP=anon_heap_LOOP_1") (proofscript))
         (branch "Invariant Initially Valid"
            (rule "false_to_not_true" (formula "4") (term "0,1,0,1,1,1,1") (proofscript))
            (rule "concrete_and_3" (formula "4") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "4") (term "0,0,0,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,1,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "4") (term "0,0,1,1"))
            (rule "simplifyUpdate2" (formula "3"))
            (rule "parallelWithSkip2" (formula "4") (term "0,1"))
            (rule "eqSymm" (formula "4") (term "0,0,1,0,1,1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,1,1,1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "4") (term "0,0,1,1"))
            (rule "sequentialToParallel2" (formula "4") (term "1"))
            (rule "simplifyUpdate3" (formula "4") (term "1,0,1"))
            (rule "applyOnElementary" (formula "4") (term "1,0,1"))
            (rule "sequentialToParallel2" (formula "4"))
            (rule "simplifyUpdate2" (formula "4"))
            (rule "simplifyUpdate3" (formula "4") (term "1,0"))
            (rule "impRight" (formula "4"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "1,0"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "3"))
            (rule "applyOnParallel" (formula "7") (term "1,0"))
            (rule "simplifyUpdate3" (formula "7") (term "0,1,0"))
            (rule "applyOnElementary" (formula "7") (term "1,1,0"))
            (rule "sequentialToParallel1" (formula "7") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "0,1,1,0"))
            (rule "simplifyUpdate3" (formula "7") (term "1,0,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "7") (term "1,0,1,1,0"))
            (rule "applyOnRigidFormula" (formula "6"))
            (rule "simplifyUpdate2" (formula "6") (term "0"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnRigidFormula" (formula "5"))
            (rule "simplifyUpdate1" (formula "5") (term "1"))
            (rule "applyOnPV" (formula "5") (term "0"))
            (rule "applyOnRigidTerm" (formula "7") (term "0,1,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "0,0,1,1,0"))
            (rule "applyOnPV" (formula "7") (term "1,0,1,1,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,1,1,0"))
            (rule "applyOnRigidFormula" (formula "6") (term "1"))
            (rule "simplifyUpdate1" (formula "6") (term "1,1"))
            (rule "simplifyUpdate1" (formula "6") (term "0,1"))
            (rule "applyOnPV" (formula "6") (term "1,1"))
            (rule "applyOnPV" (formula "6") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "6") (term "0"))
            (rule "simplifyUpdate1" (formula "6") (term "1,0"))
            (rule "applyOnPV" (formula "6") (term "0,0"))
            (rule "qeq_literals" (formula "6") (term "0"))
            (rule "concrete_and_1" (formula "6"))
            (rule "applyOnRigidTerm" (formula "7") (term "1,0,1,1,0"))
            (rule "applyOnPV" (formula "7") (term "0,1,0,1,1,0"))
            (rule "simplifyUpdate1" (formula "7") (term "1,1,0,1,1,0"))
            (rule "inEqSimp_leqRight" (formula "6"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,0,0,1,1,0,1"))
            (rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
            (rule "assignment" (formula "7") (term "1"))
            (rule "sequentialToParallel2" (formula "7"))
            (rule "simplifyUpdate3" (formula "7") (term "1,0"))
            (rule "apply_eq_boolean_rigid" (formula "7") (term "0,1,0,1,0,1,0,0") (ifseqformula "6"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (rule "concrete_and_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Invariant Preserved and Used"
            (rule "introduceAxiom" (inst "cutFormula=i_0 = i_1 & result_1 = result_2") (proofscript))
            (rule "false_to_not_true" (formula "5") (term "0,1,0,1,1,1") (proofscript))
            (rule "false_to_not_true" (formula "6") (term "0,1,0,1,1,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,1,1,1"))
            (rule "concrete_and_3" (formula "5") (term "0,0,1,1,0,1,1,1"))
            (rule "concrete_and_3" (formula "6") (term "0,0,0,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,1,1,1,0,1,1,1,1"))
            (rule "translateJavaSubInt" (formula "6") (term "0,0,1,1"))
            (rule "parallelWithSkip2" (formula "6") (term "0,1"))
            (rule "parallelWithSkip2" (formula "5") (term "0,1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "7") (term "0,0,1,0,1,1,0,1,1,1,1"))
            (rule "eqSymm" (formula "6") (term "0,0,1,1,1,0,1,1,1"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "polySimp_elimSub" (formula "7") (term "0,1,1,1,0,1,1,1,1"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,1,1"))
            (rule "sequentialToParallel2" (formula "6"))
            (rule "simplifyUpdate3" (formula "6") (term "1,0"))
            (rule "impRight" (formula "6"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "impRight" (formula "9"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate3" (formula "1") (term "1,0"))
            (rule "parallelWithSkip2" (formula "1") (term "0"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnElementary" (formula "12") (term "1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "4"))
            (rule "simplifyUpdate1" (formula "4") (term "1"))
            (rule "simplifyUpdate1" (formula "4") (term "0"))
            (rule "applyOnPV" (formula "4") (term "1"))
            (rule "applyOnPV" (formula "4") (term "0"))
            (rule "applyOnRigidFormula" (formula "3"))
            (rule "simplifyUpdate1" (formula "3") (term "1"))
            (rule "applyOnPV" (formula "3") (term "0"))
            (rule "applyOnRigidFormula" (formula "10"))
            (rule "applyOnPV" (formula "10") (term "0"))
            (rule "simplifyUpdate1" (formula "10") (term "1"))
            (rule "applyOnRigidFormula" (formula "2"))
            (rule "simplifyUpdate1" (formula "2") (term "0"))
            (rule "simplifyUpdate1" (formula "2") (term "1"))
            (rule "applyOnPV" (formula "2") (term "0"))
            (rule "applyOnPV" (formula "2") (term "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "12") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,1,0"))
            (rule "applyOnRigidTerm" (formula "12") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "12") (term "1,1,0,1,0"))
            (rule "applyOnPV" (formula "12") (term "0,1,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0,1,1,0,1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
            (rule "assignment" (formula "11") (term "1"))
            (rule "sequentialToParallel2" (formula "11"))
            (rule "simplifyUpdate3" (formula "11") (term "1,0"))
            (rule "assignment" (formula "12") (term "1"))
            (rule "sequentialToParallel2" (formula "12"))
            (rule "simplifyUpdate3" (formula "12") (term "1,0"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "5"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
            (rule "applyEqRigid" (formula "9") (term "0,1,1,1,0,0") (ifseqformula "4"))
            (rule "apply_eq_boolean" (formula "10") (term "0,1,0,1,1,0,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "9") (term "0,0,1,1,0,0") (ifseqformula "3"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "boolv"))
            (rule "less_than_comparison_simple" (formula "9") (term "1"))
            (rule "sequentialToParallel2" (formula "9"))
            (rule "simplifyUpdate3" (formula "9") (term "1,0"))
            (rule "applyOnElementary" (formula "9") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "9") (term "0,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0"))
            (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_1"))
            (rule "compound_assignment_3_nonsimple" (formula "10") (term "1"))
            (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=boolv_2"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "boolv_2"))
            (rule "compound_assignment_2" (formula "10") (term "1") (inst "#v=v"))
            (rule "variableDeclarationAssign" (formula "10") (term "1"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "v"))
            (rule "compound_assignment_1_new" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "10") (term "0,0,1,0"))
            (rule "ifthenelse_false" (formula "10") (term "0,1,0"))
            (rule "compound_assignment_1_new" (formula "10") (term "1"))
            (rule "sequentialToParallel2" (formula "10"))
            (rule "simplifyUpdate2" (formula "10"))
            (rule "simplifyUpdate3" (formula "10") (term "1,0"))
            (rule "applyOnElementary" (formula "10") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
            (rule "boolean_equal" (formula "10") (term "0,0,1,0"))
            (rule "ifthenelse_true" (formula "10") (term "0,1,0"))
            (rule "ifSplit" (formula "9"))
            (branch "if boolv true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "ifthenelse_concrete3" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "1"))
               (rule "concrete_or_4" (formula "1"))
               (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (rule "concrete_or_1" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
               (rule "times_zero_1" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "2"))
               (rule "leq_literals" (formula "8") (term "0"))
               (rule "concrete_or_1" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "ifElseSplit" (formula "10"))
               (branch "if boolv_2 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "11"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "11"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "8"))
                  (rule "applyOnPV" (formula "8") (term "0"))
                  (rule "simplifyUpdate1" (formula "8") (term "1"))
                  (rule "boolean_not_equal_2" (formula "8"))
                  (rule "false_right" (formula "8"))
                  (rule "less_than_comparison_simple" (formula "10") (term "1"))
                  (rule "sequentialToParallel2" (formula "10"))
                  (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                  (rule "applyOnElementary" (formula "10") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "10") (term "0,0,0,1,0"))
                  (rule "applyOnPV" (formula "10") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
                  (rule "blockEmpty" (formula "10") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "replace_known_left" (formula "10") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "ifthenelse_true" (formula "10") (term "0,1,0"))
                  (rule "ifSplit" (formula "9"))
                  (branch "if condition true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "applyEqRigid" (formula "11") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
                     (rule "abstractExecutionNonVoidLoopScope" (formula "10") (term "1") (inst "#label1=_label13") (inst "#v1=v1") (inst "#label=_label12") (inst "continues=continues_Body_0") (inst "breaks=breaks_Body_0") (inst "result=result_Body_0") (inst "returns=returns_Body_0") (inst "exc=exc_Body_0") (inst "normal=normal_Body_0"))
                     (rule "eq_and" (formula "10") (term "1,1,1,0,1"))
                     (rule "concrete_and_3" (formula "10") (term "0,1,1,0,1"))
                     (rule "concrete_and_3" (formula "10") (term "0,1,1,0,1"))
                     (rule "concrete_and_3" (formula "10") (term "0,1,1,0,1"))
                     (rule "concrete_and_3" (formula "10") (term "0,1,1,0,1"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,0,1"))
                     (rule "impRight" (formula "10"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,1,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2Rigid" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "11"))
                     (rule "concrete_not_2" (formula "2") (term "1,1"))
                     (rule "concrete_and_3" (formula "2") (term "1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2Rigid" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "12"))
                     (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                     (rule "concrete_and_3" (formula "2") (term "1,0"))
                     (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "12"))
                     (rule "concrete_and_4" (formula "2") (term "1"))
                     (rule "concrete_or_4" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "0,1,1,0,0") (ifseqformula "12"))
                     (rule "concrete_not_2" (formula "2") (term "1,1,0,0"))
                     (rule "concrete_and_3" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "0,1,0,0,0") (ifseqformula "12"))
                     (rule "concrete_not_2" (formula "2") (term "1,0,0,0"))
                     (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                     (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "12"))
                     (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                     (rule "concrete_and_3" (formula "2") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "1,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,1"))
                     (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,0,1"))
                     (rule "applySkip1" (formula "1") (term "1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0,1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                     (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                     (rule "apply_eq_boolean_rigid" (formula "14") (term "0,1,0,1,1") (ifseqformula "12"))
                     (rule "commute_and_2" (formula "3") (term "1"))
                     (rule "commute_and_2" (formula "2") (term "1"))
                     (rule "commute_and_2" (formula "2") (term "1,0"))
                     (rule "commute_and_2" (formula "2") (term "1,0,0"))
                     (rule "ifSplit" (formula "15"))
                     (branch "if boolv_1 true"
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "16"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_equal" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "commute_and_2" (formula "2") (term "0,0,0"))
                        (rule "commute_and" (formula "3") (term "0,1"))
                        (rule "commute_and" (formula "2") (term "0,1"))
                        (rule "commute_and" (formula "2") (term "0,1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                        (rule "eq_or" (formula "2") (term "1,1,0,0"))
                        (rule "commute_and" (formula "2") (term "1,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,1,0,0"))
                        (rule "commute_and_2" (formula "2") (term "1,0,0"))
                        (rule "commute_and" (formula "2") (term "0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0,0,0"))
                        (rule "commute_or" (formula "2") (term "1,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0,0,0"))
                        (rule "neq_or" (formula "2") (term "0,0,1,0,0,0"))
                        (rule "concrete_and_1" (formula "2") (term "0,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                        (rule "eq_or" (formula "2") (term "1,0,0,0,0,0"))
                        (rule "commute_and" (formula "2") (term "0,0,0,0,0"))
                        (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                        (rule "shift_paren_and" (formula "2") (term "0,0"))
                        (rule "shift_paren_and" (formula "2") (term "0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "neq_or_3" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "neq_or_3" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "neq_or" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "neq_or_3" (formula "2") (term "1,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                        (rule "neq_or_3" (formula "2") (term "1,0,1,0"))
                        (rule "concrete_and_3" (formula "2") (term "0,1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "1,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0"))
                        (rule "eq_or" (formula "2") (term "0,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0"))
                        (rule "commute_or" (formula "2") (term "0,0,1,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,1,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,1,0,0"))
                        (rule "eq_or" (formula "2") (term "0,1,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                        (rule "commute_or" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "eq_and_2" (formula "2") (term "0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                        (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "neq_or" (formula "2") (term "0,1,0,0,1,0,0"))
                        (rule "concrete_or_1" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "concrete_and_3" (formula "2") (term "0,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                        (rule "neq_or_3" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "concrete_and_3" (formula "2") (term "0,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,1,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0"))
                        (rule "commute_or" (formula "2") (term "0,1,0,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,1,0,0"))
                        (rule "eq_or_2" (formula "2") (term "1,0,0,0,1,0,0"))
                        (rule "commute_or" (formula "2") (term "0,0,0,0,1,0,0"))
                        (rule "eq_and" (formula "2") (term "0,0,0,1,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0,0"))
                        (rule "eq_or" (formula "2") (term "0,1,0,0,0,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "eq_or" (formula "2") (term "0,1,0,0,0,0,0,0,0,0"))
                        (rule "commute_and_2" (formula "2") (term "1,0"))
                        (rule "ifSplit" (formula "15"))
                        (branch "if condition true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "16"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "abstractExecutionNonVoidLoopScope" (formula "15") (term "1") (inst "#label1=_label15") (inst "#v1=v1") (inst "#label=_label14") (inst "continues=continues_Body_0") (inst "breaks=breaks_Body_0") (inst "result=result_Body_0") (inst "returns=returns_Body_0") (inst "exc=exc_Body_0") (inst "normal=normal_Body_0"))
                           (rule "eq_and" (formula "15") (term "1,1,1,0,1"))
                           (rule "concrete_and_3" (formula "15") (term "0,1,1,0,1"))
                           (rule "concrete_and_3" (formula "15") (term "0,1,1,0,1"))
                           (rule "concrete_and_3" (formula "15") (term "0,1,1,0,1"))
                           (rule "concrete_and_3" (formula "15") (term "0,1,1,0,1"))
                           (rule "simplifyUpdate2" (formula "15"))
                           (rule "simplifyUpdate2" (formula "15") (term "1,0,1"))
                           (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                           (rule "impRight" (formula "15"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,1,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,1,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate2" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,1,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,1,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,1,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "0,0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0,0,0,0,0,0,1,0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2Rigid" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0,1,1") (ifseqformula "14"))
                           (rule "concrete_not_2" (formula "2") (term "1,1"))
                           (rule "concrete_and_3" (formula "2") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "simplifyUpdate2Rigid" (formula "1") (term "1,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "simplifyUpdate2Rigid" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0,1,1,0,0") (ifseqformula "15"))
                           (rule "concrete_not_2" (formula "2") (term "1,1,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "0,1,1,0") (ifseqformula "15"))
                           (rule "concrete_not_2" (formula "2") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0"))
                           (rule "replace_known_right" (formula "2") (term "0,1,1,0,0,0") (ifseqformula "15"))
                           (rule "concrete_not_2" (formula "2") (term "1,1,0,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "1,0,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,1") (ifseqformula "15"))
                           (rule "concrete_and_4" (formula "2") (term "1"))
                           (rule "concrete_or_4" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0,1,0,0,0") (ifseqformula "15"))
                           (rule "concrete_not_2" (formula "2") (term "1,0,0,0"))
                           (rule "concrete_and_3" (formula "2") (term "0,0,0"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "1,1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
                           (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,1,0"))
                           (rule "applySkip1" (formula "1") (term "1,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,0,1,0"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "0,0,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
                           (rule "simplifyUpdate1" (formula "1") (term "0,0,0,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "1,0,0"))
                           (rule "applyOnPV" (formula "1") (term "0,1,0,0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "1,0,0,0"))
                           (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,1,1") (ifseqformula "14"))
                           (rule "cnf_rightDist" (formula "4") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "eq_or" (formula "4") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "commute_and_2" (formula "2") (term "1"))
                           (rule "commute_and_2" (formula "1") (term "1"))
                           (rule "commute_and_2" (formula "4") (term "0,1,0,0"))
                           (rule "eq_and_2" (formula "4") (term "1,0,0"))
                           (rule "commute_and_2" (formula "1") (term "1,0"))
                           (rule "commute_and_2" (formula "1") (term "1,0,0"))
                           (rule "commute_and_2" (formula "1") (term "0,0,0"))
                           (rule "commute_and" (formula "2") (term "0,1"))
                           (rule "commute_and" (formula "1") (term "0,1"))
                           (rule "commute_and" (formula "1") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                           (rule "eq_or" (formula "1") (term "1,1,0,0"))
                           (rule "commute_and" (formula "1") (term "1,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,1,0,0"))
                           (rule "commute_and_2" (formula "1") (term "1,0,0"))
                           (rule "commute_or" (formula "1") (term "0,0,1,0,0"))
                           (rule "commute_and" (formula "1") (term "0,1,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,1,0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0"))
                           (rule "shift_paren_and" (formula "3") (term "0,0"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "neq_or_4" (formula "4") (term "1"))
                           (rule "concrete_and_3" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "neq_or_4" (formula "4") (term "1"))
                           (rule "concrete_and_3" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "neq_or_4" (formula "4") (term "1"))
                           (rule "concrete_and_3" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0,0,1") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "4") (term "0,0,0,1"))
                           (rule "eq_and_2" (formula "4") (term "0,0,1"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,0,0,0"))
                           (rule "eq_and_2" (formula "3") (term "0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "1") (term "1,0,1,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "1") (term "0,1,0,0"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,0,0,0,0"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0,1") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "4") (term "0,0,1"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,1,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "4") (term "1,1"))
                           (rule "eq_or" (formula "4") (term "0,1,1"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or" (formula "4"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or" (formula "3"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "5"))
                           (rule "eq_or_2" (formula "5") (term "0"))
                           (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "1"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "5"))
                           (rule "neq_or_3" (formula "5") (term "0"))
                           (rule "concrete_or_1" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4"))
                           (rule "commute_or_2" (formula "4") (term "0"))
                           (rule "neq_or_2" (formula "4") (term "0,0"))
                           (rule "concrete_or_1" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "andLeft" (formula "4"))
                           (rule "commute_or_2" (formula "5"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "andLeft" (formula "3"))
                           (rule "commute_or_2" (formula "4"))
                           (rule "neq_or_2" (formula "4") (term "0"))
                           (rule "concrete_or_1" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "eq_or_2" (formula "4") (term "1"))
                           (rule "andLeft" (formula "4"))
                           (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "replace_known_left" (formula "3") (term "0,1,0,0,1") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "3") (term "1,0,0,1"))
                           (rule "concrete_and_3" (formula "3") (term "0,0,1"))
                           (rule "replace_known_left" (formula "4") (term "0,1,0,1") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "4") (term "1,0,1"))
                           (rule "concrete_and_3" (formula "4") (term "0,1"))
                           (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "3") (term "1"))
                           (rule "cnf_rightDist" (formula "1") (term "0,1,0,0,0"))
                           (rule "neq_or" (formula "1") (term "0,0,1,0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,1,0,0,0"))
                           (rule "cnf_rightDist" (formula "4"))
                           (rule "neq_or_3" (formula "4") (term "1"))
                           (rule "concrete_and_3" (formula "4"))
                           (rule "commute_or" (formula "4"))
                           (rule "cnf_rightDist" (formula "3"))
                           (rule "neq_or" (formula "3") (term "0"))
                           (rule "concrete_and_1" (formula "3"))
                           (rule "commute_or_2" (formula "3"))
                           (rule "neq_or_2" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0,0"))
                           (rule "eq_or" (formula "1") (term "1,0,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                           (rule "concrete_and_1" (formula "1") (term "0,0,0,0"))
                           (rule "shift_paren_and" (formula "1") (term "0,0,0"))
                           (rule "commute_and_2" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0"))
                           (rule "neq_or_3" (formula "1") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "1") (term "1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0"))
                           (rule "neq_or" (formula "1") (term "1,1,0"))
                           (rule "concrete_and_3" (formula "1") (term "1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0"))
                           (rule "commute_or" (formula "1") (term "0,1,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0"))
                           (rule "commute_or" (formula "1") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                           (rule "commute_or_2" (formula "1") (term "1,1,0,0"))
                           (rule "neq_or" (formula "1") (term "0,1,1,0,0"))
                           (rule "concrete_or_1" (formula "1") (term "1,1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "commute_or_2" (formula "1") (term "1,0,0,0"))
                           (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "4"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                           (rule "commute_or" (formula "1") (term "1,1,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,1,0,0") (ifseqformula "6"))
                           (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "5"))
                           (rule "concrete_and_3" (formula "1") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
                           (rule "neq_or_3" (formula "1") (term "1,1,0,0"))
                           (rule "concrete_and_3" (formula "1") (term "1,0,0"))
                           (rule "commute_or" (formula "1") (term "1,0,0"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "3"))
                           (rule "concrete_and_3" (formula "1") (term "0,0"))
                           (rule "cnf_rightDist" (formula "1") (term "0,0"))
                           (rule "eq_or" (formula "1") (term "0,0,0"))
                           (rule "commute_or_2" (formula "1") (term "1,0,0"))
                           (rule "eq_or" (formula "1") (term "0,1,0,0"))
                           (rule "shift_paren_and" (formula "1") (term "0"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "neq_or_4" (formula "2") (term "1"))
                           (rule "concrete_and_3" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "neq_or_4" (formula "2") (term "1"))
                           (rule "concrete_and_3" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or" (formula "2"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or" (formula "1"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3"))
                           (rule "neq_or_3" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "2"))
                           (rule "commute_or_2" (formula "2") (term "0"))
                           (rule "neq_or_2" (formula "2") (term "0,0"))
                           (rule "concrete_or_1" (formula "2") (term "0"))
                           (rule "concrete_or_1" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "commute_or_2" (formula "3"))
                           (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "commute_or_2" (formula "2"))
                           (rule "neq_or_2" (formula "2") (term "0"))
                           (rule "concrete_or_1" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "cnf_rightDist" (formula "2"))
                           (rule "neq_or_3" (formula "2") (term "1"))
                           (rule "concrete_and_3" (formula "2"))
                           (rule "commute_or" (formula "2"))
                           (rule "cnf_rightDist" (formula "1"))
                           (rule "neq_or" (formula "1") (term "0"))
                           (rule "concrete_and_1" (formula "1"))
                           (rule "commute_or_2" (formula "1"))
                           (rule "neq_or_2" (formula "1") (term "0"))
                           (rule "concrete_or_1" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "if" (formula "17") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                           (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                           (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                           (rule "applyOnRigidFormula" (formula "17") (term "1"))
                           (rule "simplifyUpdate2Rigid" (formula "17") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "17"))
                           (rule "simplifyUpdate2" (formula "17") (term "0"))
                           (rule "blockReturn" (formula "17") (term "1,1,1,1"))
                           (rule "blockReturn" (formula "17") (term "1,1,1,1"))
                           (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                           (rule "blockReturn" (formula "17") (term "1,1,1,1"))
                           (rule "blockReturn" (formula "17") (term "1,1,1,1"))
                           (rule "ifthenelse_split_for" (formula "17"))
                           (branch "returns_Body_0 = TRUE TRUE"
                              (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "3") (term "1"))
                              (rule "concrete_or_4" (formula "3"))
                              (rule "notLeft" (formula "3"))
                              (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "5") (term "0"))
                              (rule "concrete_or_2" (formula "5"))
                              (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "15"))
                              (rule "concrete_not_2" (formula "4") (term "0"))
                              (rule "concrete_or_1" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "4"))
                              (rule "concrete_or_3" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "replace_known_left" (formula "4") (term "1,1") (ifseqformula "3"))
                              (rule "concrete_and_3" (formula "4") (term "1"))
                              (rule "replace_known_right" (formula "4") (term "0,0,1") (ifseqformula "13"))
                              (rule "concrete_not_2" (formula "4") (term "0,1"))
                              (rule "concrete_and_1" (formula "4") (term "1"))
                              (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
                              (rule "concrete_not_1" (formula "4") (term "1"))
                              (rule "concrete_eq_4" (formula "4"))
                              (rule "notLeft" (formula "4"))
                              (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,0,1,1") (ifseqformula "13"))
                              (rule "applyEqRigid" (formula "17") (term "0,1,0,0,0,0,1,1") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "17") (term "0,0,0,0,0,0,1,1") (ifseqformula "3"))
                              (rule "returnIndexedLoopScope" (formula "16") (term "1,1,1"))
                              (rule "assignment" (formula "16") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                              (rule "methodCallReturn" (formula "16") (term "1,1,1"))
                              (rule "assignment" (formula "16") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnElementary" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnPV" (formula "16") (term "0,1,0,1,1"))
                              (rule "methodCallEmpty" (formula "16") (term "1,1,1"))
                              (rule "tryEmpty" (formula "16") (term "1,1,1"))
                              (rule "emptyModality" (formula "16") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1"))
                              (rule "applySkip2" (formula "16") (term "1"))
                              (rule "sequentialToParallel2" (formula "16"))
                              (rule "simplifyUpdate2" (formula "16"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "16"))
                              (rule "simplifyUpdate2" (formula "16") (term "0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
                              (rule "applyOnPV" (formula "16") (term "0,0,0"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,0"))
                              (rule "boolean_equal" (formula "16") (term "0,0"))
                              (rule "concrete_impl_1" (formula "16") (term "0"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,0,1"))
                              (rule "applyOnPV" (formula "16") (term "0,0,0,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1"))
                              (rule "boolean_equal" (formula "16") (term "0,0,1"))
                              (rule "concrete_not_1" (formula "16") (term "0,1"))
                              (rule "concrete_impl_2" (formula "16") (term "1"))
                              (rule "concrete_and_3" (formula "16"))
                              (rule "notRight" (formula "16"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyConcrOnAbstrUpdTerm" (formula "3") (term "0,1,0,0,0"))
                              (rule "simplifyUpdate1" (formula "3") (term "1,0,1,0,0,0"))
                              (rule "if" (formula "17") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "0,1"))
                              (rule "applySkip2" (formula "17") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17") (term "0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0"))
                              (rule "applyOnPV" (formula "17") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,0"))
                              (rule "boolean_equal" (formula "17") (term "0"))
                              (rule "ifthenelse_true_for" (formula "17"))
                              (rule "blockReturn" (formula "17") (term "1,1,1"))
                              (rule "blockReturn" (formula "17") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                              (rule "blockReturn" (formula "17") (term "1,1,1"))
                              (rule "blockReturn" (formula "17") (term "1,1,1"))
                              (rule "returnIndexedLoopScope" (formula "17") (term "1,1,1"))
                              (rule "assignment" (formula "17") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                              (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                              (rule "assignment" (formula "17") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                              (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                              (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                              (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                              (rule "tryEmpty" (formula "17") (term "1,1,1"))
                              (rule "emptyModality" (formula "17") (term "1,1,1"))
                              (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "1"))
                              (rule "applySkip2" (formula "17") (term "1"))
                              (rule "sequentialToParallel2" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17"))
                              (rule "simplifyUpdate3" (formula "17") (term "1,0"))
                              (rule "applyOnRigidFormula" (formula "17"))
                              (rule "simplifyUpdate2" (formula "17") (term "0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                              (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "17") (term "1,0"))
                              (rule "applyOnPV" (formula "17") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "17") (term "1,1,0"))
                              (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "1"))
                              (rule "concrete_impl_4" (formula "17") (term "0"))
                              (rule "concrete_and_1" (formula "17"))
                              (rule "impRight" (formula "17"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "18") (term "1"))
                              (rule "simplifyUpdate1" (formula "18") (term "0,1"))
                              (rule "simplifyUpdate1" (formula "18") (term "1,1"))
                              (rule "applyOnPV" (formula "18") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "18") (term "0"))
                              (rule "simplifyUpdate2" (formula "18") (term "1,0"))
                              (rule "simplifyUpdate2" (formula "18") (term "0,0"))
                              (rule "applyOnRigidFormula" (formula "13"))
                              (rule "simplifyUpdate1" (formula "13") (term "1"))
                              (rule "applyOnPV" (formula "13") (term "0"))
                              (rule "boolean_equal" (formula "13"))
                              (rule "closeTrue" (formula "13"))
                           )
                           (branch "returns_Body_0 = TRUE FALSE"
                              (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "17"))
                              (rule "concrete_not_2" (formula "2") (term "1"))
                              (rule "concrete_or_3" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "16"))
                              (rule "concrete_not_2" (formula "4") (term "0"))
                              (rule "concrete_or_1" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "15"))
                              (rule "concrete_or_4" (formula "2") (term "0"))
                              (rule "replace_known_right" (formula "3") (term "0,1,0,1") (ifseqformula "14"))
                              (rule "concrete_not_2" (formula "3") (term "1,0,1"))
                              (rule "concrete_and_3" (formula "3") (term "0,1"))
                              (rule "apply_eq_boolean_rigid" (formula "16") (term "0,1,0,0,0,0,1,1") (ifseqformula "14"))
                              (rule "ifUnfold" (formula "15") (term "1,1,1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "15") (term "1,1,1") (newnames "boolv_3"))
                              (rule "inequality_comparison_simple" (formula "15") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                              (rule "applyOnElementary" (formula "15") (term "1,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "15") (term "0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "15") (term "2,0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "15") (term "1,0,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "15") (term "0,0,1,0,1,1"))
                              (rule "applyOnPV" (formula "15") (term "0,0,0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "15") (term "1,0,0,1,0,1,1"))
                              (rule "applyConcrOnAbstrUpdTerm" (formula "1") (term "0,1,0,0,0"))
                              (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0,0,0"))
                              (rule "if" (formula "16") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                              (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnPV" (formula "16") (term "0,0,1,1"))
                              (rule "boolean_not_equal_2" (formula "16") (term "0,1,1"))
                              (rule "ifthenelse_false_for" (formula "16") (term "1,1"))
                              (rule "ifUnfold" (formula "16") (term "1,1,1") (inst "#boolv=boolv"))
                              (rule "variableDeclaration" (formula "16") (term "1,1,1") (newnames "boolv_4"))
                              (rule "inequality_comparison_simple" (formula "16") (term "1,1,1"))
                              (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnElementary" (formula "16") (term "1,0,1,1"))
                              (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,1,1"))
                              (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,1,1"))
                              (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0,1,1"))
                              (rule "applyOnPV" (formula "16") (term "0,0,0,1,0,1,1"))
                              (rule "simplifyUpdate1Rigid" (formula "16") (term "1,0,0,1,0,1,1"))
                              (rule "applyConcrOnAbstrUpd" (formula "15"))
                              (rule "sequentialToParallel2" (formula "15") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "15") (term "1,0,1,1"))
                              (rule "applyConcrOnAbstrUpd" (formula "16"))
                              (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                              (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                              (rule "if" (formula "15") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                              (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                              (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                              (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                              (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                              (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                              (rule "ifthenelse_concrete4" (formula "15") (term "0,1,1"))
                              (rule "boolean_not_equal_2" (formula "15") (term "1,0,1,1"))
                              (rule "concrete_or_4" (formula "15") (term "0,1,1"))
                              (rule "applyOnRigidFormula" (formula "15") (term "1"))
                              (rule "simplifyUpdate2Rigid" (formula "15") (term "0,1"))
                              (rule "applyOnRigidFormula" (formula "15"))
                              (rule "simplifyUpdate2" (formula "15") (term "0"))
                              (rule "ifthenelse_negated_for" (formula "15"))
                              (rule "blockThrow" (formula "15") (term "1,1,1,2"))
                              (rule "blockThrow" (formula "15") (term "1,1,1,2"))
                              (rule "simplifyUpdate2" (formula "15") (term "1,1,2"))
                              (rule "blockThrow" (formula "15") (term "1,1,1,2"))
                              (rule "blockThrow" (formula "15") (term "1,1,1,2"))
                              (rule "ifthenelse_split_for" (formula "15"))
                              (branch "exc_Body_0 = null TRUE"
                                 (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
                                 (rule "concrete_or_3" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "1"))
                                 (rule "concrete_and_3" (formula "3") (term "1"))
                                 (rule "applyEqRigid" (formula "16") (term "0,0,0,0,1,0,1,1") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "16") (term "0,0,0,1,1,0,1,1") (ifseqformula "1"))
                                 (rule "eqClose" (formula "16") (term "0,0,1,1,0,1,1"))
                                 (rule "ifthenelse_true" (formula "16") (term "0,1,1,0,1,1"))
                                 (rule "if" (formula "16") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "0,1"))
                                 (rule "applySkip2" (formula "16") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,0,1"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0,1"))
                                 (rule "boolean_not_equal_2" (formula "16") (term "0,1"))
                                 (rule "ifthenelse_false_for" (formula "16") (term "1"))
                                 (rule "if" (formula "15") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "15") (term "0,1,1"))
                                 (rule "ifthenelse_false_for" (formula "15") (term "1,1"))
                                 (rule "if" (formula "16") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "0,1"))
                                 (rule "applySkip2" (formula "16") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,0,1"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0,1"))
                                 (rule "boolean_not_equal_2" (formula "16") (term "0,1"))
                                 (rule "ifthenelse_false_for" (formula "16") (term "1"))
                                 (rule "if" (formula "15") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "15") (term "2,1,1"))
                                 (rule "applyOnRigidFormula" (formula "15") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "15") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "15") (term "0,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "15") (term "1"))
                                 (rule "simplifyUpdate2Rigid" (formula "15") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "15"))
                                 (rule "simplifyUpdate2" (formula "15") (term "0"))
                                 (rule "blockEmpty" (formula "15") (term "1,1,1,2"))
                                 (rule "ifthenelse_split_for" (formula "15"))
                                 (branch "breaks_Body_0 = TRUE TRUE"
                                    (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "1"))
                                    (rule "concrete_not_1" (formula "4") (term "1"))
                                    (rule "concrete_eq_4" (formula "4"))
                                    (rule "notLeft" (formula "4"))
                                    (rule "applyEqRigid" (formula "17") (term "0,1,0,1,1") (ifseqformula "1"))
                                    (rule "blockBreak" (formula "16") (term "1,1,1"))
                                    (rule "blockBreak" (formula "16") (term "1,1,1"))
                                    (rule "blockBreak" (formula "16") (term "1,1,1"))
                                    (rule "blockBreak" (formula "16") (term "1,1,1"))
                                    (rule "unlabeledBreakIndexedLoopScope" (formula "16") (term "1,1,1"))
                                    (rule "assignment" (formula "16") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                    (rule "methodCallReturn" (formula "16") (term "1,1,1"))
                                    (rule "assignment" (formula "16") (term "1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "16") (term "1,1,1"))
                                    (rule "methodCallEmpty" (formula "16") (term "1,1,1"))
                                    (rule "tryEmpty" (formula "16") (term "1,1,1"))
                                    (rule "emptyModality" (formula "16") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "0,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "0,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,1"))
                                    (rule "applyOnPV" (formula "16") (term "0,0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1"))
                                    (rule "boolean_equal" (formula "16") (term "0,0,1,1"))
                                    (rule "concrete_impl_1" (formula "16") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1,1"))
                                    (rule "applyOnPV" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "boolean_equal" (formula "16") (term "0,0,1,1,1"))
                                    (rule "concrete_not_1" (formula "16") (term "0,1,1,1"))
                                    (rule "concrete_impl_2" (formula "16") (term "1,1,1"))
                                    (rule "concrete_and_3" (formula "16") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "16"))
                                    (rule "notRight" (formula "16"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "if" (formula "17") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,1,1"))
                                    (rule "ifthenelse_true_for" (formula "17") (term "1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "unlabeledBreakIndexedLoopScope" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                    (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "17") (term "1,1,1"))
                                    (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                                    (rule "tryEmpty" (formula "17") (term "1,1,1"))
                                    (rule "emptyModality" (formula "17") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,0,1,1"))
                                    (rule "concrete_impl_1" (formula "17") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,0,1,1,1"))
                                    (rule "concrete_not_1" (formula "17") (term "0,1,1,1"))
                                    (rule "concrete_impl_2" (formula "17") (term "1,1,1"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17"))
                                    (rule "applyOnRigidFormula" (formula "17"))
                                    (rule "simplifyUpdate1Rigid" (formula "17") (term "1"))
                                    (rule "close" (formula "17") (ifseqformula "1"))
                                 )
                                 (branch "breaks_Body_0 = TRUE FALSE"
                                    (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "15"))
                                    (rule "concrete_not_2" (formula "3") (term "1"))
                                    (rule "concrete_eq_3" (formula "3"))
                                    (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,1,1") (ifseqformula "15"))
                                    (rule "blockBreak" (formula "16") (term "1,1,1"))
                                    (rule "blockBreak" (formula "16") (term "1,1,1"))
                                    (rule "unlabeledBreakIndexedLoopScope" (formula "16") (term "1,1,1"))
                                    (rule "assignment" (formula "16") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                    (rule "methodCallReturn" (formula "16") (term "1,1,1"))
                                    (rule "assignment" (formula "16") (term "1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "16") (term "1,1,1"))
                                    (rule "methodCallEmpty" (formula "16") (term "1,1,1"))
                                    (rule "tryEmpty" (formula "16") (term "1,1,1"))
                                    (rule "emptyModality" (formula "16") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "0,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "1,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "16") (term "0,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "16") (term "0,0,0,1,1"))
                                    (rule "boolean_equal" (formula "16") (term "0,0,1,1"))
                                    (rule "concrete_impl_1" (formula "16") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,1,1"))
                                    (rule "applyOnPV" (formula "16") (term "0,0,0,1,1,1"))
                                    (rule "boolean_equal" (formula "16") (term "0,0,1,1,1"))
                                    (rule "concrete_not_1" (formula "16") (term "0,1,1,1"))
                                    (rule "concrete_impl_2" (formula "16") (term "1,1,1"))
                                    (rule "concrete_and_3" (formula "16") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "16"))
                                    (rule "notRight" (formula "16"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "simplifyUpdate1Rigid" (formula "1") (term "1"))
                                    (rule "if" (formula "17") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                    (rule "boolean_not_equal_2" (formula "17") (term "0,1,1"))
                                    (rule "ifthenelse_false_for" (formula "17") (term "1,1"))
                                    (rule "blockEmpty" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "blockBreak" (formula "17") (term "1,1,1"))
                                    (rule "unlabeledBreakIndexedLoopScope" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                    (rule "methodCallReturn" (formula "17") (term "1,1,1"))
                                    (rule "assignment" (formula "17") (term "1,1,1"))
                                    (rule "elimSelfSingleUpdateFor" (formula "17") (term "1,1,1"))
                                    (rule "methodCallEmpty" (formula "17") (term "1,1,1"))
                                    (rule "tryEmpty" (formula "17") (term "1,1,1"))
                                    (rule "emptyModality" (formula "17") (term "1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "1,1,1,1,1"))
                                    (rule "simplifyUpdate2" (formula "17") (term "0,1,1,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,0,1,1"))
                                    (rule "concrete_impl_1" (formula "17") (term "0,1,1"))
                                    (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,1,1"))
                                    (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,1,1"))
                                    (rule "applyOnPV" (formula "17") (term "0,0,0,1,1,1"))
                                    (rule "boolean_equal" (formula "17") (term "0,0,1,1,1"))
                                    (rule "concrete_not_1" (formula "17") (term "0,1,1,1"))
                                    (rule "concrete_impl_2" (formula "17") (term "1,1,1"))
                                    (rule "concrete_and_3" (formula "17") (term "1,1"))
                                    (rule "simplifyUpdate2" (formula "17"))
                                    (rule "applyOnRigidFormula" (formula "17"))
                                    (rule "simplifyUpdate1Rigid" (formula "17") (term "1"))
                                    (rule "close" (formula "17") (ifseqformula "1"))
                                 )
                              )
                              (branch "exc_Body_0 = null FALSE"
                                 (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "15"))
                                 (rule "concrete_or_4" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "11"))
                                 (rule "concrete_not_2" (formula "2") (term "0,1"))
                                 (rule "concrete_and_1" (formula "2") (term "1"))
                                 (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "15"))
                                 (rule "concrete_eq_4" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "apply_eq_boolean_rigid" (formula "17") (term "0,1,0,0,1,0,1,1") (ifseqformula "11"))
                                 (rule "throwIndexedLoopScope" (formula "16") (term "1,1,1"))
                                 (rule "assignment" (formula "16") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                 (rule "methodCallParamThrow" (formula "16") (term "1,1,1"))
                                 (rule "tryCatchThrow" (formula "16") (term "1,1,1"))
                                 (rule "ifElseUnfold" (formula "16") (term "1,1,1") (inst "#boolv=boolv"))
                                 (rule "variableDeclaration" (formula "16") (term "1,1,1") (newnames "boolv_5"))
                                 (rule "equality_comparison_simple" (formula "16") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "16") (term "1,0,1,1"))
                                 (rule "applyOnRigidTerm" (formula "16") (term "0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0,1,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,0,0,1,0,1,1"))
                                 (rule "if" (formula "17") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                 (rule "ifthenelse_concrete4" (formula "17") (term "0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "17") (term "1,0,1,1"))
                                 (rule "concrete_or_4" (formula "17") (term "0,1,1"))
                                 (rule "ifthenelse_negated_for" (formula "17") (term "1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                 (rule "simplifyUpdate2Rigid" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "15"))
                                 (rule "ifthenelse_false_for" (formula "17"))
                                 (rule "blockThrow" (formula "17") (term "1,1,1"))
                                 (rule "blockThrow" (formula "17") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "blockThrow" (formula "17") (term "1,1,1"))
                                 (rule "blockThrow" (formula "17") (term "1,1,1"))
                                 (rule "throwIndexedLoopScope" (formula "17") (term "1,1,1"))
                                 (rule "assignment" (formula "17") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                 (rule "methodCallParamThrow" (formula "17") (term "1,1,1"))
                                 (rule "tryCatchThrow" (formula "17") (term "1,1,1"))
                                 (rule "ifElseUnfold" (formula "17") (term "1,1,1") (inst "#boolv=boolv"))
                                 (rule "variableDeclaration" (formula "17") (term "1,1,1") (newnames "boolv_6"))
                                 (rule "equality_comparison_simple" (formula "17") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnRigidTerm" (formula "17") (term "0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,0,1,0,1,1"))
                                 (rule "ifElse" (formula "16") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,0,1,1"))
                                 (rule "ifthenelse_concrete3" (formula "16") (term "0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "16") (term "1,0,1,1"))
                                 (rule "concrete_or_4" (formula "16") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                 (rule "simplifyUpdate2Rigid" (formula "16") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "16"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0"))
                                 (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "15"))
                                 (rule "ifthenelse_false_for" (formula "16"))
                                 (rule "elim_double_block" (formula "16") (term "1,1,1"))
                                 (rule "ifElse" (formula "17") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "2,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,1,1"))
                                 (rule "ifthenelse_concrete3" (formula "17") (term "0,1,1"))
                                 (rule "boolean_not_equal_2" (formula "17") (term "1,0,1,1"))
                                 (rule "concrete_or_4" (formula "17") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                 (rule "simplifyUpdate2Rigid" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "15"))
                                 (rule "ifthenelse_false_for" (formula "17"))
                                 (rule "elim_double_block" (formula "17") (term "1,1,1"))
                                 (rule "ifElse" (formula "16") (term "1,1,1"))
                                 (rule "instanceof_static_type" (formula "16") (term "2,0,0,1,1,1"))
                                 (rule "ifthenelse_concrete4" (formula "16") (term "0,1,1,1"))
                                 (rule "boolean_not_equal_2" (formula "16") (term "1,0,1,1,1"))
                                 (rule "concrete_or_4" (formula "16") (term "0,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "0,1"))
                                 (rule "applySkip2" (formula "16") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "16"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0"))
                                 (rule "ifthenelse_negated_for" (formula "16"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0"))
                                 (rule "applyOnPV" (formula "16") (term "0,0"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0"))
                                 (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "15"))
                                 (rule "ifthenelse_false_for" (formula "16"))
                                 (rule "variableDeclaration" (formula "16") (term "1,1,1") (newnames "t"))
                                 (rule "delete_unnecessary_cast" (formula "16") (term "1,1,1"))
                                 (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                                 (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                                 (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "16") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,1,0,1,1"))
                                 (rule "assignment" (formula "16") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "16") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "16") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,1,0,1,1"))
                                 (rule "emptyModality" (formula "16") (term "1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "16") (term "1"))
                                 (rule "applySkip2" (formula "16") (term "1"))
                                 (rule "sequentialToParallel2" (formula "16"))
                                 (rule "simplifyUpdate2" (formula "16"))
                                 (rule "simplifyUpdate3" (formula "16") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "16"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,0"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,0"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "16") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "16") (term "1,0,0"))
                                 (rule "applyOnPV" (formula "16") (term "0,0,0"))
                                 (rule "boolean_equal" (formula "16") (term "0,0"))
                                 (rule "concrete_impl_1" (formula "16") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "16") (term "0,0,1"))
                                 (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1"))
                                 (rule "applyOnPV" (formula "16") (term "0,0,0,1"))
                                 (rule "boolean_equal" (formula "16") (term "0,0,1"))
                                 (rule "concrete_not_1" (formula "16") (term "0,1"))
                                 (rule "concrete_impl_2" (formula "16") (term "1"))
                                 (rule "concrete_and_3" (formula "16"))
                                 (rule "notRight" (formula "16"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "ifElse" (formula "17") (term "1,1,1"))
                                 (rule "instanceof_static_type" (formula "17") (term "2,0,0,1,1,1"))
                                 (rule "ifthenelse_concrete4" (formula "17") (term "0,1,1,1"))
                                 (rule "boolean_not_equal_2" (formula "17") (term "1,0,1,1,1"))
                                 (rule "concrete_or_4" (formula "17") (term "0,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "0,1"))
                                 (rule "applySkip2" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0"))
                                 (rule "ifthenelse_negated_for" (formula "17"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                 (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0"))
                                 (rule "applyOnPV" (formula "17") (term "0,0"))
                                 (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
                                 (rule "ifthenelse_false_for" (formula "17"))
                                 (rule "variableDeclaration" (formula "17") (term "1,1,1") (newnames "t_1"))
                                 (rule "delete_unnecessary_cast" (formula "17") (term "1,1,1"))
                                 (rule "instanceof_static_type" (formula "1") (term "0,1,1,1,1"))
                                 (rule "boolean_equal" (formula "1") (term "1,1,1,1"))
                                 (rule "concrete_or_3" (formula "1") (term "1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applySkip2" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                                 (rule "assignment" (formula "17") (term "1,1,1"))
                                 (rule "sequentialToParallel2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate3" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnElementary" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,1,0,1,1"))
                                 (rule "emptyModality" (formula "17") (term "1,1,1"))
                                 (rule "dropEffectlessAbstractUpdate2" (formula "17") (term "1"))
                                 (rule "applySkip2" (formula "17") (term "1"))
                                 (rule "sequentialToParallel2" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17"))
                                 (rule "simplifyUpdate3" (formula "17") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,0"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,0"))
                                 (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,0"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,0"))
                                 (rule "boolean_equal" (formula "17") (term "0,0"))
                                 (rule "concrete_impl_1" (formula "17") (term "0"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "0,0,1,1"))
                                 (rule "simplifyUpdate2" (formula "17") (term "1,0,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "1,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "0,1,1,1"))
                                 (rule "simplifyUpdate1" (formula "17") (term "1,1,1,1"))
                                 (rule "applyOnPV" (formula "17") (term "1,1,1,1"))
                                 (rule "applyOnRigidFormula" (formula "17") (term "0,0,1"))
                                 (rule "simplifyUpdate1Rigid" (formula "17") (term "1,0,0,1"))
                                 (rule "applyOnPV" (formula "17") (term "0,0,0,1"))
                                 (rule "boolean_equal" (formula "17") (term "0,0,1"))
                                 (rule "concrete_not_1" (formula "17") (term "0,1"))
                                 (rule "concrete_impl_2" (formula "17") (term "1"))
                                 (rule "concrete_and_3" (formula "17"))
                                 (rule "applyOnRigidFormula" (formula "17"))
                                 (rule "simplifyUpdate1Rigid" (formula "17") (term "1"))
                                 (rule "applyOnPV" (formula "17") (term "0"))
                                 (rule "close" (formula "17") (ifseqformula "1"))
                              )
                           )
                        )
                        (branch "if condition false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "16"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "12"))
                           (rule "simplifyUpdate1" (formula "12") (term "1"))
                           (rule "applyOnPV" (formula "12") (term "0"))
                           (rule "boolean_equal" (formula "12"))
                           (rule "closeTrue" (formula "12"))
                        )
                     )
                     (branch "if boolv_1 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "16"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "12"))
                        (rule "applyOnPV" (formula "12") (term "0"))
                        (rule "simplifyUpdate1" (formula "12") (term "1"))
                        (rule "boolean_equal" (formula "12"))
                        (rule "closeTrue" (formula "12"))
                     )
                  )
                  (branch "if condition false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "apply_eq_boolean_rigid" (formula "11") (term "0,1,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                     (rule "postincrement" (formula "10") (term "1"))
                     (rule "compound_int_cast_expression" (formula "10") (term "1") (inst "#v=o"))
                     (rule "variableDeclarationAssign" (formula "10") (term "1"))
                     (rule "variableDeclaration" (formula "10") (term "1") (newnames "o"))
                     (rule "remove_parentheses_right" (formula "10") (term "1"))
                     (rule "assignmentAdditionInt" (formula "10") (term "1"))
                     (rule "translateJavaAddInt" (formula "10") (term "0,0,1"))
                     (rule "sequentialToParallel2" (formula "10"))
                     (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                     (rule "applyOnElementary" (formula "10") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "10") (term "1,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "10") (term "1,0,1,0"))
                     (rule "widening_identity_cast_5" (formula "10") (term "1"))
                     (rule "assignment" (formula "10") (term "1"))
                     (rule "sequentialToParallel2" (formula "10"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                     (rule "applyOnElementary" (formula "10") (term "1,0"))
                     (rule "applyOnPV" (formula "10") (term "0,1,0"))
                     (rule "blockEmpty" (formula "10") (term "1"))
                     (rule "assignment" (formula "10") (term "1"))
                     (rule "sequentialToParallel2" (formula "10"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "simplifyUpdate3" (formula "10") (term "1,0"))
                     (rule "emptyIndexedLoopScope" (formula "10") (term "1"))
                     (rule "applyOnRigidFormula" (formula "10"))
                     (rule "simplifyUpdate2" (formula "10") (term "0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0"))
                     (rule "applyOnPV" (formula "10") (term "0,0"))
                     (rule "boolean_not_equal_2" (formula "10") (term "0"))
                     (rule "ifthenelse_false_for" (formula "10"))
                     (rule "emptyModality" (formula "10") (term "1"))
                     (rule "applyOnRigidFormula" (formula "10"))
                     (rule "simplifyUpdate2" (formula "10") (term "0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "1"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "10") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "10") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "10") (term "0,1,1"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,0"))
                     (rule "applyOnPV" (formula "10") (term "0,0,0"))
                     (rule "boolean_not_equal_2" (formula "10") (term "0,0"))
                     (rule "concrete_impl_2" (formula "10") (term "0"))
                     (rule "concrete_and_1" (formula "10"))
                     (rule "impRight" (formula "10"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "11") (term "0"))
                     (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "11") (term "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "boolean_not_equal_2" (formula "8"))
                     (rule "false_right" (formula "8"))
                     (rule "applyOnRigidFormula" (formula "10") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,0"))
                     (rule "simplifyUpdate2" (formula "10") (term "0,0,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
                     (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "1,0,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,1,0,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "0,1,0,0"))
                     (rule "applyOnPV" (formula "10") (term "1,1,0,0"))
                     (rule "applyOnPV" (formula "10") (term "0,1,0,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,0,0"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,0,0"))
                     (rule "applyOnPV" (formula "10") (term "0,0,0,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0,0,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "10") (term "0,0,0,1"))
                     (rule "applyOnPV" (formula "10") (term "0,0,0,0,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "2,0,0,0,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,0,0,0,1"))
                     (rule "eqClose" (formula "10") (term "0,0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
                     (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "1"))
                     (rule "concrete_and_3" (formula "10") (term "0,0"))
                     (rule "inEqSimp_subsumption1" (formula "10") (term "0,0") (ifseqformula "3"))
                     (rule "leq_literals" (formula "10") (term "0,0,0"))
                     (rule "concrete_or_1" (formula "10") (term "0,0"))
                     (rule "concrete_and_1" (formula "10") (term "0"))
                     (rule "all_unused" (formula "10") (term "1"))
                     (rule "all_unused" (formula "10") (term "1"))
                     (rule "concrete_and_3" (formula "10"))
                     (rule "notRight" (formula "10"))
                     (rule "ifSplit" (formula "11"))
                     (branch "if boolv_1 true"
                        (rule "simplifyUpdate2" (formula "12"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "boolean_equal" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifSplit" (formula "11"))
                        (branch "if condition true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "12"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if condition false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "12"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "9"))
                           (rule "simplifyUpdate1" (formula "9") (term "1"))
                           (rule "applyOnPV" (formula "9") (term "0"))
                           (rule "boolean_not_equal_2" (formula "9"))
                           (rule "false_right" (formula "9"))
                           (rule "postincrement" (formula "11") (term "1"))
                           (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=o"))
                           (rule "variableDeclarationAssign" (formula "11") (term "1"))
                           (rule "variableDeclaration" (formula "11") (term "1") (newnames "o_1"))
                           (rule "remove_parentheses_right" (formula "11") (term "1"))
                           (rule "assignmentAdditionInt" (formula "11") (term "1"))
                           (rule "translateJavaAddInt" (formula "11") (term "0,0,1"))
                           (rule "sequentialToParallel2" (formula "11"))
                           (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                           (rule "applyOnElementary" (formula "11") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "11") (term "1,0,1,0"))
                           (rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "11") (term "1,0,1,0"))
                           (rule "widening_identity_cast_5" (formula "11") (term "1"))
                           (rule "assignment" (formula "11") (term "1"))
                           (rule "sequentialToParallel2" (formula "11"))
                           (rule "simplifyUpdate2" (formula "11"))
                           (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                           (rule "applyOnElementary" (formula "11") (term "1,0"))
                           (rule "applyOnPV" (formula "11") (term "0,1,0"))
                           (rule "blockEmpty" (formula "11") (term "1"))
                           (rule "assignment" (formula "11") (term "1"))
                           (rule "sequentialToParallel2" (formula "11"))
                           (rule "simplifyUpdate2" (formula "11"))
                           (rule "simplifyUpdate3" (formula "11") (term "1,0"))
                           (rule "emptyIndexedLoopScope" (formula "11") (term "1"))
                           (rule "applyOnRigidFormula" (formula "11"))
                           (rule "simplifyUpdate2" (formula "11") (term "0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,0"))
                           (rule "applyOnPV" (formula "11") (term "0,0"))
                           (rule "boolean_not_equal_2" (formula "11") (term "0"))
                           (rule "ifthenelse_false_for" (formula "11"))
                           (rule "emptyModality" (formula "11") (term "1"))
                           (rule "applyOnRigidFormula" (formula "11"))
                           (rule "simplifyUpdate2" (formula "11") (term "0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "1"))
                           (rule "simplifyUpdate2" (formula "11") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "11") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0"))
                           (rule "simplifyUpdate2" (formula "11") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "11") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "11") (term "0,1,1"))
                           (rule "simplifyUpdate2" (formula "11") (term "1,1,1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,0,0"))
                           (rule "applyOnPV" (formula "11") (term "0,0,0"))
                           (rule "boolean_not_equal_2" (formula "11") (term "0,0"))
                           (rule "concrete_impl_2" (formula "11") (term "0"))
                           (rule "concrete_and_1" (formula "11"))
                           (rule "impRight" (formula "11"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "12") (term "0"))
                           (rule "simplifyUpdate2" (formula "12") (term "1,0"))
                           (rule "simplifyUpdate2" (formula "12") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "12") (term "1"))
                           (rule "simplifyUpdate1" (formula "12") (term "1,1"))
                           (rule "simplifyUpdate1" (formula "12") (term "0,1"))
                           (rule "applyOnPV" (formula "12") (term "1,1"))
                           (rule "applyOnRigidFormula" (formula "9"))
                           (rule "simplifyUpdate1" (formula "9") (term "1"))
                           (rule "applyOnPV" (formula "9") (term "0"))
                           (rule "boolean_not_equal_2" (formula "9"))
                           (rule "false_right" (formula "9"))
                           (rule "applyOnRigidFormula" (formula "11") (term "1,0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "11") (term "1,0,0"))
                           (rule "simplifyUpdate2" (formula "11") (term "0,0,0"))
                           (rule "applyOnRigidTerm" (formula "11") (term "0,1"))
                           (rule "simplifyUpdate1" (formula "11") (term "0,0,1"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,0,1"))
                           (rule "applyOnPV" (formula "11") (term "1,0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,1,0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "1,0,0"))
                           (rule "applyOnPV" (formula "11") (term "0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,1,0,0"))
                           (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "1"))
                           (rule "concrete_and_3" (formula "11") (term "0,0"))
                           (rule "applyOnRigidTerm" (formula "11") (term "1,0,1"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,1,0,1"))
                           (rule "applyOnPV" (formula "11") (term "0,1,0,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,1"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,1"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0,1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,0"))
                           (rule "simplifyUpdate2" (formula "11") (term "1,0,0"))
                           (rule "simplifyUpdate2" (formula "11") (term "0,0,0"))
                           (rule "applyOnRigidTerm" (formula "11") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "2,0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0,1,0"))
                           (rule "applyOnPV" (formula "11") (term "0,0,0,0,1,0"))
                           (rule "eqClose" (formula "11") (term "0,0,1,0"))
                           (rule "precOfInt" (formula "11") (term "1"))
                           (rule "applyOnRigidFormula" (formula "11") (term "1,0,0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,0,0"))
                           (rule "simplifyUpdate2" (formula "11") (term "0,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,1,0,0"))
                           (rule "applyOnPV" (formula "11") (term "0,0,1,0,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,0,1,0,0"))
                           (rule "boolean_not_equal_2" (formula "11") (term "0,1,0,0"))
                           (rule "concrete_not_2" (formula "11") (term "1,0,0"))
                           (rule "concrete_and_3" (formula "11") (term "0,0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "0,0,0"))
                           (rule "applyOnPV" (formula "11") (term "0,0,0,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,0,0,0"))
                           (rule "applyOnRigidFormula" (formula "11") (term "1,0,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "1,1,0,0"))
                           (rule "simplifyUpdate1" (formula "11") (term "0,1,0,0"))
                           (rule "applyOnPV" (formula "11") (term "1,1,0,0"))
                           (rule "applyOnPV" (formula "11") (term "0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,1,1"))
                           (rule "add_literals" (formula "11") (term "1,1,0,1,1"))
                           (rule "times_zero_1" (formula "11") (term "1,0,1,1"))
                           (rule "add_zero_right" (formula "11") (term "0,1,1"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,1"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor2" (formula "11") (term "0,1,1"))
                           (rule "add_literals" (formula "11") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "11") (term "0,1,1"))
                           (rule "leq_literals" (formula "11") (term "1,1"))
                           (rule "concrete_and_3" (formula "11") (term "1"))
                           (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                           (rule "times_zero_2" (formula "11") (term "1,0,1"))
                           (rule "add_zero_right" (formula "11") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                           (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "2"))
                           (rule "concrete_and_3" (formula "11") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "0,1"))
                           (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                           (rule "concrete_and_3" (formula "11"))
                           (rule "inEqSimp_subsumption1" (formula "11") (term "0") (ifseqformula "4"))
                           (rule "leq_literals" (formula "11") (term "0,0"))
                           (rule "concrete_or_1" (formula "11") (term "0"))
                           (rule "concrete_and_1" (formula "11"))
                           (rule "allRight" (formula "11") (inst "sk=f_0"))
                           (rule "allRight" (formula "11") (inst "sk=o_0"))
                           (rule "closeTrue" (formula "11"))
                        )
                     )
                     (branch "if boolv_1 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "12"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "9"))
                        (rule "simplifyUpdate1" (formula "9") (term "1"))
                        (rule "applyOnPV" (formula "9") (term "0"))
                        (rule "boolean_equal" (formula "9"))
                        (rule "closeTrue" (formula "9"))
                     )
                  )
               )
            )
            (branch "if boolv false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate1" (formula "8") (term "1"))
               (rule "applyOnPV" (formula "8") (term "0"))
               (rule "ifthenelse_concrete3" (formula "8"))
               (rule "boolean_not_equal_2" (formula "8") (term "1"))
               (rule "concrete_or_4" (formula "8"))
               (rule "inEqSimp_leqRight" (formula "8"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
               (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "10") (term "0,0,1,1,0,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "11") (term "0,1,0,1,0,0,0") (ifseqformula "1"))
               (rule "polySimp_pullOutFactor1" (formula "11") (term "0,1,0,0,0"))
               (rule "add_literals" (formula "11") (term "1,0,1,0,0,0"))
               (rule "times_zero_1" (formula "11") (term "0,1,0,0,0"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "3"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "1,0"))
               (rule "times_zero_1" (formula "3") (term "0"))
               (rule "qeq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "10") (term "0,0,0,1,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,0"))
               (rule "times_zero_1" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1"))
               (rule "emptyIndexedLoopScope" (formula "8") (term "1"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate2" (formula "8") (term "0"))
               (rule "applyOnRigidFormula" (formula "8") (term "0"))
               (rule "simplifyUpdate1" (formula "8") (term "1,0"))
               (rule "applyOnPV" (formula "8") (term "0,0"))
               (rule "boolean_equal" (formula "8") (term "0"))
               (rule "ifthenelse_true_for" (formula "8"))
               (rule "methodCallReturn" (formula "8") (term "1"))
               (rule "assignment" (formula "8") (term "1"))
               (rule "elimSelfSingleUpdateFor" (formula "8") (term "1"))
               (rule "methodCallEmpty" (formula "8") (term "1"))
               (rule "tryEmpty" (formula "8") (term "1"))
               (rule "emptyModality" (formula "8") (term "1"))
               (rule "applyOnRigidFormula" (formula "8"))
               (rule "simplifyUpdate2" (formula "8") (term "0"))
               (rule "applyOnRigidFormula" (formula "8") (term "1"))
               (rule "simplifyUpdate2" (formula "8") (term "1,1"))
               (rule "simplifyUpdate2" (formula "8") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "8") (term "0"))
               (rule "simplifyUpdate2" (formula "8") (term "1,0"))
               (rule "simplifyUpdate2" (formula "8") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "8") (term "1,1"))
               (rule "simplifyUpdate2" (formula "8") (term "0,1,1"))
               (rule "simplifyUpdate2" (formula "8") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "8") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "8") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "8") (term "0,0"))
               (rule "simplifyUpdate1" (formula "8") (term "1,0,0"))
               (rule "applyOnPV" (formula "8") (term "0,0,0"))
               (rule "boolean_equal" (formula "8") (term "0,0"))
               (rule "concrete_impl_1" (formula "8") (term "0"))
               (rule "applyOnRigidFormula" (formula "8") (term "0,1,1"))
               (rule "simplifyUpdate2" (formula "8") (term "0,0,1,1"))
               (rule "simplifyUpdate2" (formula "8") (term "1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "8") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "8") (term "0,0,1"))
               (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1"))
               (rule "applyOnPV" (formula "8") (term "0,0,0,1"))
               (rule "boolean_equal" (formula "8") (term "0,0,1"))
               (rule "concrete_not_1" (formula "8") (term "0,1"))
               (rule "concrete_impl_2" (formula "8") (term "1"))
               (rule "concrete_and_3" (formula "8"))
               (rule "notRight" (formula "8"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "ifElseSplit" (formula "9"))
               (branch "if boolv_2 true"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "10"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv_2 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "10"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "8"))
                  (rule "simplifyUpdate1" (formula "8") (term "1"))
                  (rule "applyOnPV" (formula "8") (term "0"))
                  (rule "boolean_not_equal_2" (formula "8"))
                  (rule "false_right" (formula "8"))
                  (rule "less_than_comparison_simple" (formula "9") (term "1"))
                  (rule "sequentialToParallel2" (formula "9"))
                  (rule "simplifyUpdate3" (formula "9") (term "1,0"))
                  (rule "applyOnElementary" (formula "9") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "9") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "9") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "1,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "9") (term "0,0,0,1,0"))
                  (rule "applyOnPV" (formula "9") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "9") (term "0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "9") (term "0,0,0,1,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,1,0"))
                  (rule "leq_literals" (formula "9") (term "0,0,1,0"))
                  (rule "ifthenelse_false" (formula "9") (term "0,1,0"))
                  (rule "blockEmpty" (formula "9") (term "1"))
                  (rule "ifSplit" (formula "9"))
                  (branch "if boolv_1 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if boolv_1 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "10"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "boolean_not_equal_2" (formula "8"))
                     (rule "false_right" (formula "8"))
                     (rule "emptyIndexedLoopScope" (formula "9") (term "1"))
                     (rule "applyOnRigidFormula" (formula "9"))
                     (rule "simplifyUpdate2" (formula "9") (term "0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,0"))
                     (rule "applyOnPV" (formula "9") (term "0,0"))
                     (rule "boolean_equal" (formula "9") (term "0"))
                     (rule "ifthenelse_true_for" (formula "9"))
                     (rule "methodCallReturn" (formula "9") (term "1"))
                     (rule "assignment" (formula "9") (term "1"))
                     (rule "elimSelfSingleUpdateFor" (formula "9") (term "1"))
                     (rule "methodCallEmpty" (formula "9") (term "1"))
                     (rule "tryEmpty" (formula "9") (term "1"))
                     (rule "emptyModality" (formula "9") (term "1"))
                     (rule "applyOnRigidFormula" (formula "9"))
                     (rule "simplifyUpdate2" (formula "9") (term "0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,0"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "1,1,1"))
                     (rule "simplifyUpdate2" (formula "9") (term "0,1,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "9") (term "1,0"))
                     (rule "simplifyUpdate1" (formula "9") (term "1,1,0"))
                     (rule "applyOnPV" (formula "9") (term "0,1,0"))
                     (rule "replace_known_left" (formula "9") (term "1,0") (ifseqformula "1"))
                     (rule "concrete_impl_4" (formula "9") (term "0"))
                     (rule "concrete_and_1" (formula "9"))
                     (rule "impRight" (formula "9"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "10") (term "0"))
                     (rule "simplifyUpdate2" (formula "10") (term "0,0"))
                     (rule "simplifyUpdate2" (formula "10") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "10") (term "1"))
                     (rule "simplifyUpdate1" (formula "10") (term "1,1"))
                     (rule "simplifyUpdate1" (formula "10") (term "0,1"))
                     (rule "applyOnPV" (formula "10") (term "1,1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "applyOnPV" (formula "8") (term "0"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "boolean_equal" (formula "8"))
                     (rule "closeTrue" (formula "8"))
                  )
               )
            )
         )
      )
   )
)
)
}
