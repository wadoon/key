<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:aeRelationalModel xmlns:ns2="http://www.key-project.org/abstractexecution" preCondition="(\exists any _frB, _fpL; (\exists int _I;&#10;  (\forall any frB, fpL; (\forall int I;&#10;     (&#10;          (&#10;             I &gt;= 0 &amp;&amp; decrExpr(fpL, I) &gt;= 0 &amp;&amp;&#10;             ( doneCondition(fpL, I)  ==&gt; bodyPost(frB, fpL, I)) &amp;&amp;&#10;             (!doneCondition(fpL, I)  ==&gt; unsuccessfulInv(frB, fpL, I)) &amp;&amp;&#10;             ( doneCondition(fpL, I) || !guardVal(fpL, I))&#10;          )&#10;        &lt;==&gt;&#10;          (_frB == frB &amp;&amp; _fpL == fpL &amp;&amp; _I == I)&#10;     )&#10;   ))&#10;))" postCondition="\result_1==\result_2">
    <programOne>/*@ ae_constraint
  @   \disjoint(frameBody, i) &amp;&amp;
  @   \disjoint(frameBody, done) &amp;&amp;
  @   \disjoint(loopFootprint, i) &amp;&amp;
  @   \disjoint(loopFootprint, done);
  @*/
{ ; }

/*@ ae_constraint
  @   \disjoint(frameBody, loopFootprint);
  @*/
{ ; }

done = false;
i = 0;

/*@ ae_constraint
  @   decrExpr(\value(loopFootprint), 0) &gt;= 0 &amp;&amp;
  @   unsuccessfulInv(\value(frameBody), \value(loopFootprint), 0) &amp;&amp;
  @   !doneCondition(\value(loopFootprint), 0);
  @*/
{ ; }

/*@ loop_invariant
  @   i &gt;= 0 &amp;&amp; decrExpr(\value(loopFootprint), i) &gt;= 0 &amp;&amp;
  @   ( done &lt;==&gt; doneCondition(\value(loopFootprint), i)) &amp;&amp;
  @   ( done  ==&gt; bodyPost(\value(frameBody), \value(loopFootprint), i)) &amp;&amp;
  @   (!done  ==&gt; unsuccessfulInv(\value(frameBody), \value(loopFootprint), i));
  @ assignable frameBody;
  @ decreases decrExpr(\value(loopFootprint), i);
  @*/
while (!done &amp;&amp; 
    /*@ assignable \nothing;
      @ accessible loopFootprint, i;
      @ normal_behavior ensures (boolean) \result &lt;==&gt; guardVal(\value(loopFootprint), i);
      @ exceptional_behavior requires false;
      @*/
    \abstract_expression boolean g
) {
    /*@ ae_constraint
      @   \disjoint(frameBody, i) &amp;&amp;
      @   \disjoint(frameBody, done) &amp;&amp;
      @   \disjoint(loopFootprint, i) &amp;&amp;
      @   \disjoint(loopFootprint, done);
      @*/
    { ; }
    
    //@ ghost int oldDecrExpr; // = decrExpr(\value(loopFootprint), i);

    /*@ ae_constraint
      @   \disjoint(frameBody, oldDecrExpr) &amp;&amp;
      @   \disjoint(loopFootprint, oldDecrExpr);
      @*/
    { ; }

    /*@ assignable \hasTo(oldDecrExpr);
      @ accessible loopFootprint, i;
      @ normal_behavior ensures oldDecrExpr == decrExpr(\value(loopFootprint), i);
      @ exceptional_behavior requires false;
      @ return_behavior requires false;
      @ break_behavior requires false;
      @ continue_behavior requires false;
      @*/
    \abstract_statement GhostSetter;
    
    if (
        /*@ assignable \nothing;
          @ accessible loopFootprint, i;
          @ normal_behavior ensures 
          @   ((boolean) \result &lt;==&gt;
          @     doneCondition(\value(loopFootprint), i+1)) &amp;&amp;
          @   (!((boolean) \result) ==&gt; 
          @     unsuccessfulInv(\value(frameBody), \value(loopFootprint), i+1));
          @ exceptional_behavior requires false;
          @*/
        \abstract_expression boolean e
    ) {
        /*@ assignable frameBody;
          @ accessible loopFootprint, i;
          @ normal_behavior ensures
          @   bodyPost(\value(frameBody), \value(loopFootprint), i+1);
          @ exceptional_behavior requires false;
          @ return_behavior requires false;
          @ break_behavior requires false;
          @ continue_behavior requires false;
          @*/
        \abstract_statement Body;








        done = true;
    }
    
    i++;

    /*@ ae_constraint
      @   decrExpr(\value(loopFootprint), i) &gt;= 0 &amp;&amp;
      @   oldDecrExpr &gt; decrExpr(\value(loopFootprint), i);
      @*/
    { ; }
}</programOne>
    <programTwo>/*@ ae_constraint
  @   \disjoint(frameBody, i) &amp;&amp;
  @   \disjoint(frameBody, done) &amp;&amp;
  @   \disjoint(loopFootprint, i) &amp;&amp;
  @   \disjoint(loopFootprint, done);
  @*/
{ ; }

/*@ ae_constraint
  @   \disjoint(frameBody, loopFootprint);
  @*/
{ ; }

done = false;
i = 0;

/*@ ae_constraint
  @   decrExpr(\value(loopFootprint), 0) &gt;= 0 &amp;&amp;
  @   unsuccessfulInv(\value(frameBody), \value(loopFootprint), 0) &amp;&amp;
  @   !doneCondition(\value(loopFootprint), 0);
  @*/
{ ; }

/*@ loop_invariant
  @   i &gt;= 0 &amp;&amp; decrExpr(\value(loopFootprint), i) &gt;= 0 &amp;&amp;
  @   !doneCondition(\value(loopFootprint), i) &amp;&amp;
  @   unsuccessfulInv(\value(frameBody), \value(loopFootprint), i);
  @ assignable frameBody;
  @ decreases decrExpr(\value(loopFootprint), i);
  @*/
while (
    /*@ assignable \nothing;
      @ accessible loopFootprint, i;
      @ normal_behavior ensures (boolean) \result &lt;==&gt; guardVal(\value(loopFootprint), i);
      @ exceptional_behavior requires false;
      @*/
    \abstract_expression boolean g
) {
    /*@ ae_constraint
      @   \disjoint(frameBody, i) &amp;&amp;
      @   \disjoint(frameBody, done) &amp;&amp;
      @   \disjoint(loopFootprint, i) &amp;&amp;
      @   \disjoint(loopFootprint, done);
      @*/
    { ; }
    
    //@ ghost int oldDecrExpr; // = decrExpr(\value(loopFootprint), i);

    /*@ ae_constraint
      @   \disjoint(frameBody, oldDecrExpr) &amp;&amp;
      @   \disjoint(loopFootprint, oldDecrExpr);
      @*/
    { ; }

    /*@ assignable \hasTo(oldDecrExpr);
      @ accessible loopFootprint, i;
      @ normal_behavior ensures oldDecrExpr == decrExpr(\value(loopFootprint), i);
      @ exceptional_behavior requires false;
      @ return_behavior requires false;
      @ break_behavior requires false;
      @ continue_behavior requires false;
      @*/
    \abstract_statement GhostSetter;
    
    if (
        /*@ assignable \nothing;
          @ accessible loopFootprint, i;
          @ normal_behavior ensures 
          @   ((boolean) \result &lt;==&gt;
          @     doneCondition(\value(loopFootprint), i+1)) &amp;&amp;
          @   (!((boolean) \result) ==&gt; 
          @     unsuccessfulInv(\value(frameBody), \value(loopFootprint), i+1));
          @ exceptional_behavior requires false;
          @*/
        \abstract_expression boolean e
    ) {
        /*@ assignable frameBody;
          @ accessible loopFootprint, i;
          @ normal_behavior ensures
          @   bodyPost(\value(frameBody), \value(loopFootprint), i+1);
          @ exceptional_behavior requires false;
          @ return_behavior requires false;
          @ break_behavior requires false;
          @ continue_behavior requires false;
          @*/
        \abstract_statement Body;
    
        i++;
    
        /*@ ae_constraint
          @   decrExpr(\value(loopFootprint), i) &gt;= 0 &amp;&amp;
          @   oldDecrExpr &gt; decrExpr(\value(loopFootprint), i);
          @*/
        { ; }

        break;
    }
    
    i++;

    /*@ ae_constraint
      @   decrExpr(\value(loopFootprint), i) &gt;= 0 &amp;&amp;
      @   oldDecrExpr &gt; decrExpr(\value(loopFootprint), i);
      @*/
    { ; }
}</programTwo>
    <methodLevelContext></methodLevelContext>
    <locationSets>
        <locationSet locsetName="frameBody">
            <relevantOne>0</relevantOne>
            <relevantTwo>0</relevantTwo>
        </locationSet>
        <locationSet locsetName="loopFootprint">
            <relevantOne>1</relevantOne>
            <relevantTwo>1</relevantTwo>
        </locationSet>
    </locationSets>
    <functions>
        <function funcName="decrExpr" resultSortName="int">
            <argSort>any</argSort>
            <argSort>int</argSort>
        </function>
        <function funcName="guardVal" resultSortName="boolean">
            <argSort>any</argSort>
            <argSort>int</argSort>
        </function>
    </functions>
    <predicates>
        <predicate predName="bodyPost">
            <argSort>any</argSort>
            <argSort>any</argSort>
            <argSort>int</argSort>
        </predicate>
        <predicate predName="unsuccessfulInv">
            <argSort>any</argSort>
            <argSort>any</argSort>
            <argSort>int</argSort>
        </predicate>
        <predicate predName="doneCondition">
            <argSort>any</argSort>
            <argSort>int</argSort>
        </predicate>
    </predicates>
    <programVariables>
        <programVariable typeName="boolean" varName="done">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </programVariable>
        <programVariable typeName="int" varName="i">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </programVariable>
    </programVariables>
</ns2:aeRelationalModel>
