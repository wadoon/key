<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:aeRelationalModel xmlns:ns2="http://www.key-project.org/abstractexecution" preCondition="oldFrameBody == \value(frameBody) &amp;&amp;&#10;(\forall boolean g,_g; (\forall any fpE,_fpE,frB,_frB,fpG,_fpG; (\forall int I,_I; &#10;  (&#10;    (loopGuardAfterLeft(g)   &amp;&amp; !g  &amp;&amp; I &gt;= 0  &amp;&amp; decrExpr(I) &gt;= 0 &amp;&amp;&#10;     loopGuardAfterRight(_g) &amp;&amp; !_g &amp;&amp; _I &gt;= 0 &amp;&amp; decrExpr(_I) &gt;= 0 &amp;&amp;&#10;     (   bodyPost(frB,fpE,I,fpG) &amp;&amp; bodyPost(_frB,_fpE,_I,_fpG)&#10;      || unsuccessfulInv(frB,fpE,I,fpG) &amp;&amp; unsuccessfulInv(_frB,_fpE,_I,_fpG)))&#10;  ) ==&gt; frB == _frB&#10;)))" postCondition="\result_1==\result_2">
    <programOne>/*@ ae_constraint
  @   \disjoint(frameBody, i) &amp;&amp;
  @   \disjoint(frameBody, done) &amp;&amp;
  @   \disjoint(footprintBody, done) &amp;&amp;
  @   \disjoint(footprintE, done) &amp;&amp;
  @   \disjoint(footprintG, done);
  @*/
{ ; }

/*@ ae_constraint
  @   \disjoint(footprintBody, footprintE) &amp;&amp;
  @   \disjoint(frameBody, footprintG) &amp;&amp;
  @   \disjoint(frameBody, footprintE) &amp;&amp;
  @   \disjoint(frameBody, footprintBody);
  @*/
{ ; }

done = false;
i = 0;

/*@ ae_constraint
  @   decrExpr(0) &gt;= 0 &amp;&amp;
  @   unsuccessfulInv(\value(frameBody), \value(footprintE), 0, \value(footprintG)) &amp;&amp;
  @   !doneCondition(\value(footprintE), 0, \value(footprintG));
  @*/
{ ; }

/*@ loop_invariant
  @   i &gt;= 0 &amp;&amp; decrExpr(i) &gt;= 0 &amp;&amp;
  @   (done &lt;==&gt; doneCondition(\value(footprintE), i, \value(footprintG))) &amp;&amp;
  @   ( done ==&gt; bodyPost(\value(frameBody), \value(footprintE), i, \value(footprintG))) &amp;&amp;
  @   (!done ==&gt; unsuccessfulInv(\value(frameBody), \value(footprintE), i, \value(footprintG)));
  @ assignable frameBody;
  @ decreases decrExpr(i);
  @*/
while (!done &amp;&amp; 
    /*@ assignable \nothing;
      @ accessible footprintG, i;
      @ normal_behavior ensures (boolean) \result &lt;==&gt; guardVal(\value(footprintG), i);
      @ exceptional_behavior requires false;
      @*/
    \abstract_expression boolean g
) {
    /*@ ae_constraint
      @   \disjoint(frameBody, i) &amp;&amp;
      @   \disjoint(frameBody, done) &amp;&amp;
      @   \disjoint(footprintBody, done) &amp;&amp;
      @   \disjoint(footprintE, done) &amp;&amp;
      @   \disjoint(footprintG, done);
      @*/
    { ; }
    
    if (
        /*@ assignable \nothing;
          @ accessible footprintE, i, threshold;
          @ normal_behavior ensures 
          @   ((boolean) \result &lt;==&gt;
          @     doneCondition(\value(footprintE), i+1, \value(footprintG))) &amp;&amp;
          @   (!((boolean) \result) ==&gt; 
          @     unsuccessfulInv(\value(frameBody), \value(footprintE), i+1, \value(footprintG)));
          @ exceptional_behavior requires false;
          @*/
        \abstract_expression boolean e
    ) {
        /*@ assignable \hasTo(frameBody);
          @ accessible footprintE, i, threshold;
          @ normal_behavior ensures
          @   bodyPost(\value(frameBody), \value(footprintE), i+1, \value(footprintG));
          @ exceptional_behavior requires false;
          @ return_behavior requires false;
          @ break_behavior requires false;
          @ continue_behavior requires false;
          @*/
        \abstract_statement Body;

        done = true;
    }
    
    i++;

    /*@ ae_constraint
      @   decrExpr(i) &gt;= 0 &amp;&amp; decrExpr(i-1) &gt; decrExpr(i);
      @*/
    { ; }
}

/*@ ae_constraint
  @   done &lt;==&gt; (\exists int i; doneCondition(\value(footprintE), i, \value(footprintG)));
  @*/
{ ; }

/*@ ae_constraint
  @   loopGuardAfterLeft(guardVal(\value(footprintG), i));
  @*/
{ ; }</programOne>
    <programTwo>/*@ ae_constraint
  @   \disjoint(frameBody, i) &amp;&amp;
  @   \disjoint(frameBody, done) &amp;&amp;
  @   \disjoint(footprintBody, done) &amp;&amp;
  @   \disjoint(footprintE, done) &amp;&amp;
  @   \disjoint(footprintG, done);
  @*/
{ ; }

/*@ ae_constraint
  @   \disjoint(footprintBody, footprintE) &amp;&amp;
  @   \disjoint(frameBody, footprintG) &amp;&amp;
  @   \disjoint(frameBody, footprintE) &amp;&amp;
  @   \disjoint(frameBody, footprintBody);
  @*/
{ ; }

done = false;
i = 0;

/*@ ae_constraint
  @   decrExpr(0) &gt;= 0 &amp;&amp;
  @   unsuccessfulInv(\value(frameBody), \value(footprintE), 0, \value(footprintG)) &amp;&amp;
  @   !doneCondition(\value(footprintE), 0, \value(footprintG));
  @*/
{ ; }

/*@ loop_invariant
  @   i &gt;= 0 &amp;&amp; decrExpr(i) &gt;= 0 &amp;&amp;
  @   (done &lt;==&gt; doneCondition(\value(footprintE), i, \value(footprintG))) &amp;&amp;
  @   ( done ==&gt; bodyPost(\value(frameBody), \value(footprintE), i, \value(footprintG))) &amp;&amp;
  @   (!done ==&gt; unsuccessfulInv(\value(frameBody), \value(footprintE), i, \value(footprintG)));
  @ assignable frameBody;
  @ decreases decrExpr(i);
  @*/
while (!done &amp;&amp; 
    /*@ assignable \nothing;
      @ accessible footprintG, i;
      @ normal_behavior ensures (boolean) \result &lt;==&gt; guardVal(\value(footprintG), i);
      @ exceptional_behavior requires false;
      @*/
    \abstract_expression boolean g
) {
    /*@ ae_constraint
      @   \disjoint(frameBody, i) &amp;&amp;
      @   \disjoint(frameBody, done) &amp;&amp;
      @   \disjoint(footprintBody, done) &amp;&amp;
      @   \disjoint(footprintE, done) &amp;&amp;
      @   \disjoint(footprintG, done);
      @*/
    { ; }
    
    if (
        /*@ assignable \nothing;
          @ accessible footprintE, i, threshold;
          @ normal_behavior ensures 
          @   ((boolean) \result &lt;==&gt;
          @     doneCondition(\value(footprintE), i+1, \value(footprintG))) &amp;&amp;
          @   (!((boolean) \result) ==&gt; 
          @     unsuccessfulInv(\value(frameBody), \value(footprintE), i+1, \value(footprintG)));
          @ exceptional_behavior requires false;
          @*/
        \abstract_expression boolean e
    ) {
        /*@ assignable \hasTo(frameBody);
          @ accessible footprintE, i, threshold;
          @ normal_behavior ensures
          @   bodyPost(\value(frameBody), \value(footprintE), i+1, \value(footprintG));
          @ exceptional_behavior requires false;
          @ return_behavior requires false;
          @ break_behavior requires false;
          @ continue_behavior requires false;
          @*/
        \abstract_statement Body;

        done = true;
    }
    
    i++;

    /*@ ae_constraint
      @   decrExpr(i) &gt;= 0 &amp;&amp; decrExpr(i-1) &gt; decrExpr(i);
      @*/
    { ; }
}

/*@ ae_constraint
  @   done &lt;==&gt; (\exists int i; doneCondition(\value(footprintE), i, \value(footprintG)));
  @*/
{ ; }

/*@ ae_constraint
  @   loopGuardAfterRight(guardVal(\value(footprintG), i));
  @*/
{ ; }</programTwo>
    <methodLevelContext></methodLevelContext>
    <locationSets>
        <locationSet locsetName="relevant">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
        <locationSet locsetName="footprintBody">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
        <locationSet locsetName="frameBody">
            <relevantOne>0</relevantOne>
            <relevantTwo>0</relevantTwo>
        </locationSet>
        <locationSet locsetName="frameE">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
        <locationSet locsetName="footprintE">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
        <locationSet locsetName="footprintG">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
    </locationSets>
    <functions>
        <function funcName="oldFrameBody" resultSortName="any"/>
        <function funcName="decrExpr" resultSortName="int">
            <argSort>int</argSort>
        </function>
        <function funcName="guardVal" resultSortName="boolean">
            <argSort>any</argSort>
            <argSort>int</argSort>
        </function>
    </functions>
    <predicates>
        <predicate predName="bodyPost">
            <argSort>any</argSort>
            <argSort>any</argSort>
            <argSort>int</argSort>
            <argSort>any</argSort>
        </predicate>
        <predicate predName="unsuccessfulInv">
            <argSort>any</argSort>
            <argSort>any</argSort>
            <argSort>int</argSort>
            <argSort>any</argSort>
        </predicate>
        <predicate predName="loopGuardAfterLeft">
            <argSort>boolean</argSort>
        </predicate>
        <predicate predName="loopGuardAfterRight">
            <argSort>boolean</argSort>
        </predicate>
        <predicate predName="doneCondition">
            <argSort>any</argSort>
            <argSort>int</argSort>
            <argSort>int</argSort>
            <argSort>any</argSort>
        </predicate>
    </predicates>
    <programVariables>
        <programVariable typeName="boolean" varName="done">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </programVariable>
        <programVariable typeName="int" varName="i">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </programVariable>
        <programVariable typeName="int" varName="threshold">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </programVariable>
    </programVariables>
</ns2:aeRelationalModel>
