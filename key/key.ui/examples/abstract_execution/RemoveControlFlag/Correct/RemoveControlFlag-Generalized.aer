<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:aeRelationalModel xmlns:ns2="http://www.key-project.org/abstractexecution" preCondition="(\exists any _frL; (\exists boolean _Done; (&#10;  (\forall any frL; (\forall boolean Done; (&#10;          (&#10;             (Done &lt;==&gt; doneCondition(frL)) &amp;&amp;&#10;             decrExpr(frL) &gt;= 0 &amp;&amp;&#10;             bodyInv(frL) &amp;&amp;&#10;             (!guardVal(frL) || Done)&#10;          )&#10;        &lt;==&gt;&#10;          (_frL == frL &amp;&amp; _Done == Done)&#10;  )))&#10;)))" postCondition="\result_1==\result_2">
    <programOne>/*@ ae_constraint
  @   \disjoint(loopLocs, done);
  @*/
{ ; }

done = false;

/*@ ae_constraint
  @   decrExpr(\value(loopLocs)) &gt;= 0 &amp;&amp;
  @   (done &lt;==&gt; doneCondition(\value(loopLocs))) &amp;&amp;
  @   bodyInv(\value(loopLocs));
  @*/
{ ; }

/*@ loop_invariant
  @   (done &lt;==&gt; doneCondition(\value(loopLocs))) &amp;&amp;
  @   decrExpr(\value(loopLocs)) &gt;= 0 &amp;&amp;
  @   bodyInv(\value(loopLocs));
  @ assignable loopLocs;
  @ decreases decrExpr(\value(loopLocs));
  @*/
while (
    /*@ assignable \nothing;
      @ accessible loopLocs;
      @ normal_behavior ensures (boolean) \result &lt;==&gt;
      @   (guardVal(\value(loopLocs)) &amp;&amp; !done);
      @ exceptional_behavior requires false;
      @*/
    \abstract_expression boolean g
) {
    /*@ ae_constraint
      @   \disjoint(loopLocs, done);
      @*/
    { ; }
    
    //@ ghost int oldDecrExpr; // = decrExpr(\value(loopLocs));

    /*@ ae_constraint
      @   \disjoint(loopLocs, oldDecrExpr);
      @*/
    { ; }

    /*@ assignable \hasTo(oldDecrExpr);
      @ accessible loopLocs;
      @ normal_behavior ensures oldDecrExpr == decrExpr(\value(loopLocs));
      @ exceptional_behavior requires false;
      @ return_behavior requires false;
      @ break_behavior requires false;
      @ continue_behavior requires false;
      @*/
    \abstract_statement GhostSetter;
    
    /*@ assignable loopLocs, \hasTo(done);
      @ accessible loopLocs;
      @ normal_behavior ensures
      @   (done &lt;==&gt; doneCondition(\value(loopLocs))) &amp;&amp;
      @   decrExpr(\value(loopLocs)) &gt;= 0 &amp;&amp;
      @   bodyInv(\value(loopLocs)) &amp;&amp;
      @   oldDecrExpr &gt; decrExpr(\value(loopLocs));
      @ exceptional_behavior requires false;
      @ return_behavior requires false;
      @ break_behavior requires false;
      @ continue_behavior requires false;
      @*/
    \abstract_statement Body;




    
}</programOne>
    <programTwo>/*@ ae_constraint
  @   \disjoint(loopLocs, done);
  @*/
{ ; }

done = false; // ghost boolean done = false;

/*@ ae_constraint
  @   decrExpr(\value(loopLocs)) &gt;= 0 &amp;&amp;
  @   (done &lt;==&gt; doneCondition(\value(loopLocs))) &amp;&amp;
  @   bodyInv(\value(loopLocs));
  @*/
{ ; }

/*@ loop_invariant
  @   (done &lt;==&gt; doneCondition(\value(loopLocs))) &amp;&amp;
  @   decrExpr(\value(loopLocs)) &gt;= 0 &amp;&amp;
  @   bodyInv(\value(loopLocs));
  @ assignable loopLocs;
  @ decreases decrExpr(\value(loopLocs));
  @*/
while (
    /*@ assignable \nothing;
      @ accessible loopLocs;
      @ normal_behavior ensures (boolean) \result &lt;==&gt;
      @   (guardVal(\value(loopLocs)));
      @ exceptional_behavior requires false;
      @*/
    \abstract_expression boolean g
) {
    /*@ ae_constraint
      @   \disjoint(loopLocs, done);
      @*/
    { ; }
   
    //@ ghost int oldDecrExpr; // = decrExpr(\value(loopLocs));

    /*@ ae_constraint
      @   \disjoint(loopLocs, oldDecrExpr);
      @*/
    { ; }

    /*@ assignable \hasTo(oldDecrExpr);
      @ accessible loopLocs;
      @ normal_behavior ensures oldDecrExpr == decrExpr(\value(loopLocs));
      @ exceptional_behavior requires false;
      @ return_behavior requires false;
      @ break_behavior requires false;
      @ continue_behavior requires false;
      @*/
    \abstract_statement GhostSetter;
    
    /*@ assignable loopLocs, \hasTo(done);
      @ accessible loopLocs;
      @ normal_behavior ensures
      @   !done &amp;&amp; !doneCondition(\value(loopLocs)) &amp;&amp;
      @   decrExpr(\value(loopLocs)) &gt;= 0 &amp;&amp;
      @   bodyInv(\value(loopLocs)) &amp;&amp;
      @   oldDecrExpr &gt; decrExpr(\value(loopLocs));
      @ exceptional_behavior requires false;
      @ return_behavior requires false;
      @ break_behavior
      @   ensures
      @     done &amp;&amp; doneCondition(\value(loopLocs)) &amp;&amp;
      @     decrExpr(\value(loopLocs)) &gt;= 0 &amp;&amp;
      @     bodyInv(\value(loopLocs)) &amp;&amp;
      @     oldDecrExpr &gt; decrExpr(\value(loopLocs));
      @ continue_behavior requires false;
      @*/
    \abstract_statement Body;
}</programTwo>
    <methodLevelContext></methodLevelContext>
    <locationSets>
        <locationSet locsetName="loopLocs">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </locationSet>
    </locationSets>
    <functions>
        <function funcName="decrExpr" resultSortName="int">
            <argSort>any</argSort>
        </function>
        <function funcName="guardVal" resultSortName="boolean">
            <argSort>any</argSort>
        </function>
    </functions>
    <predicates>
        <predicate predName="bodyInv">
            <argSort>any</argSort>
        </predicate>
        <predicate predName="doneCondition">
            <argSort>any</argSort>
        </predicate>
    </predicates>
    <programVariables>
        <programVariable typeName="boolean" varName="done">
            <relevantOne>-1</relevantOne>
            <relevantTwo>-1</relevantTwo>
        </programVariable>
    </programVariables>
</ns2:aeRelationalModel>
