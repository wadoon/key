\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 07 10:38:34 CET 2019
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , initialisation-initialisation\\:disableStaticInitialisation , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , permissions-permissions\\:off , moreSeqRules-moreSeqRules\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Thu Mar 07 10:38:34 CET 2019
name=SegSum[SegSum\\:\\:segSum([I,int,int)].JML normal_behavior operation contract.0
contract=SegSum[SegSum\\:\\:segSum([I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "andre" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "511")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "a,i,j,result,exc,heapAtPre,o,f"))
(rule "translateJavaCastInt" (formula "1") (term "1,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "8") (term "0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
(builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "inEqSimp_sepNegMonomial0" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_segSum,savedHeapBefore_segSum,_aBefore_segSum,_iBefore_segSum,_jBefore_segSum"))
(builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "s"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "for_to_while" (formula "8") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "n"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(builtin "Loop (Scope) Invariant" (formula "8") (newnames "heapBefore_LOOP,nBefore_LOOP,sBefore_LOOP,n_0,s_0,heap_After_LOOP,anon_heap_LOOP,o,f,variant"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
   (rule "bsum_lower_equals_upper" (formula "8") (term "0,1,1"))
   (rule "translateJavaCastInt" (formula "8") (term "1,1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1"))
   (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_leqRight" (formula "8"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Invariant Preserved and Used"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaCastInt" (formula "7") (term "1,1"))
   (rule "translateJavaCastInt" (formula "10") (term "1,1,0,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "eqSymm" (formula "12") (term "1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "12") (term "1,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "9"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
   (rule "assignment" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
   (rule "polySimp_mulComm0" (formula "7") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1"))
   (rule "polySimp_elimOne" (formula "7") (term "1"))
   (rule "blockLoopScopes" (formula "12") (term "1"))
   (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
   (rule "less_than_comparison_simple" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
   (rule "ifSplit" (formula "12"))
   (branch "if x_1 true"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
      (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0"))
      (rule "qeq_literals" (formula "9") (term "0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "8") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8"))
      (rule "polySimp_mulComm0" (formula "8") (term "1"))
      (rule "polySimp_rightDist" (formula "8") (term "1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
      (rule "mul_literals" (formula "8") (term "0,1"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
      (rule "add_literals" (formula "6") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0"))
      (rule "qeq_literals" (formula "6") (term "0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "compound_assignment_op_plus" (formula "12") (term "1"))
      (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x_1"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_2"))
      (rule "remove_parentheses_right" (formula "12") (term "1"))
      (rule "compound_addition_2" (formula "12") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_4"))
      (rule "remove_parentheses_right" (formula "12") (term "1"))
      (rule "assignment_array2" (formula "12"))
      (branch "Normal Execution (_a != null)"
         (builtin "One Step Simplification" (formula "12"))
         (rule "pullOutSelect" (formula "12") (term "0,1,0") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "assignmentAdditionInt" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "12") (term "1"))
         (rule "assignment" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "blockEmpty" (formula "12") (term "1"))
         (rule "postincrement" (formula "12") (term "1"))
         (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x_1"))
         (rule "variableDeclarationAssign" (formula "12") (term "1"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_5"))
         (rule "remove_parentheses_right" (formula "12") (term "1"))
         (rule "assignmentAdditionInt" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "12") (term "1"))
         (rule "assignment" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "assignment" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "emptyIndexedLoopScope" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "emptyModality" (formula "12") (term "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "eqSymm" (formula "12") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,1"))
         (rule "mul_literals" (formula "12") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1"))
         (rule "polySimp_addComm0" (formula "12") (term "0,0,1"))
         (rule "bsum_induction_upper_concrete" (formula "12") (term "0,1,0,0"))
         (rule "replaceKnownSelect_taclet001_0" (formula "12") (term "1,1,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet001_1" (formula "12") (term "1,1,0,1,0,0"))
         (rule "polySimp_homoEq" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0"))
         (rule "polySimp_addComm0" (formula "12") (term "1,1,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
         (rule "precOfInt" (formula "12") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,1,1"))
         (rule "add_literals" (formula "12") (term "1,1,0,1,1"))
         (rule "times_zero_1" (formula "12") (term "1,0,1,1"))
         (rule "add_zero_right" (formula "12") (term "0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,1"))
         (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,1"))
         (rule "add_zero_left" (formula "12") (term "0,0,1,1"))
         (rule "polySimp_pullOutFactor2" (formula "12") (term "0,1,1"))
         (rule "add_literals" (formula "12") (term "1,0,1,1"))
         (rule "times_zero_1" (formula "12") (term "0,1,1"))
         (rule "leq_literals" (formula "12") (term "1,1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,1,0,0,1,0,0"))
         (rule "replace_known_left" (formula "12") (term "0,0,1,0,0,1,0,0") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "1"))
         (rule "times_zero_2" (formula "12") (term "1,0,1"))
         (rule "add_zero_right" (formula "12") (term "0,1"))
         (rule "apply_eq_monomials" (formula "12") (term "1,0,1,0,0") (ifseqformula "9"))
         (rule "polySimp_rightDist" (formula "12") (term "0,1,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,1,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "1,0,1,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,1,0,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,1,0,1,0,0"))
         (rule "add_zero_right" (formula "12") (term "1,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0,0"))
         (rule "add_literals" (formula "12") (term "1,0,1,0,0"))
         (rule "times_zero_1" (formula "12") (term "0,1,0,0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0"))
         (rule "replace_known_left" (formula "12") (term "1,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "1"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,1"))
         (rule "polySimp_elimOne" (formula "12") (term "0,1"))
         (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,0"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,0"))
         (rule "qeq_literals" (formula "12") (term "0,0"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "allRight" (formula "12") (inst "sk=f_0"))
         (rule "allRight" (formula "12") (inst "sk=o_0"))
         (rule "orRight" (formula "12"))
         (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
         (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "closeTrue" (formula "14"))
      )
      (branch "Null Reference (_a = null)"
         (rule "false_right" (formula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (_a != null, but n Out of Bounds!)"
         (rule "false_right" (formula "13"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "commute_or" (formula "1"))
         (rule "arrayLengthIsAShort" (formula "7") (term "0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "arrayLengthNotNegative" (formula "7") (term "0"))
         (rule "cut_direct" (formula "1") (term "1"))
         (branch "CUT: a.length <= n_0 TRUE"
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
            (rule "times_zero_1" (formula "7") (term "0,0"))
            (rule "add_zero_left" (formula "7") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
            (rule "polySimp_rightDist" (formula "9") (term "0,0"))
            (rule "mul_literals" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_rightDist" (formula "9") (term "1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
            (rule "mul_literals" (formula "9") (term "0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "9"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch "CUT: a.length <= n_0 FALSE"
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_leqRight" (formula "13"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "polySimp_elimOne" (formula "11") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "7"))
            (rule "qeq_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "closeFalse" (formula "11"))
         )
      )
   )
   (branch "if x_1 false"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "9"))
      (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "10"))
      (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
      (rule "add_literals" (formula "10") (term "1,0"))
      (rule "times_zero_1" (formula "10") (term "0"))
      (rule "qeq_literals" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "13") (term "0,1,0,1,1,1,0,0") (ifseqformula "1"))
      (rule "polySimp_pullOutFactor1" (formula "13") (term "0,1,1,1,0,0"))
      (rule "add_literals" (formula "13") (term "1,0,1,1,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "0,1,1,1,0,0"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "12") (term "0,0,0,0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,0"))
      (rule "times_zero_1" (formula "2") (term "0"))
      (rule "leq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "emptyIndexedLoopScope" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallReturn" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "tryEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "8")))
      (rule "closeTrue" (formula "11"))
   )
)
)
}
