\profile "Solidity";

\javaSource "src/";

\programVariables {
  SimpleAuctionVul self;
  java.lang.Message msg;
}

\rules {
  
 insertCInv {
    \schemaVar \term Heap h;
    \schemaVar \term SimpleAuctionVul self;
    \schemaVar \variable java.lang.Address a;
    \find(CInv(h, self))
    \varcond(\notFreeIn(a, h, self))
    \replacewith(
    int::select(heap, net, address(java.lang.Address::select(heap, self, SimpleAuction::$auctionOwner))) <= 0  & 
    int::select(heap, net, address(java.lang.Address::select(heap, self, SimpleAuction::$auctionOwner)))+
    int::select(heap, net, address(java.lang.Address::select(heap, self, SimpleAuction::$currentBidder)))=
    int::select(heap, self, SimpleAuction::$currentBid) &
    (int::select(heap, net, address(java.lang.Address::select(heap, self, SimpleAuction::$auctionOwner))) < 0 -> int::select(heap, self, SimpleAuction::$currentBid) >= 0)
    &
    (boolean::select(heap, self, SimpleAuction::$auctionOpen) = TRUE -> int::select(heap, net, address(java.lang.Address::select(heap, self, SimpleAuction::$auctionOwner))) = 0)
    & java.lang.Address::select(heap, self, SimpleAuction::$auctionOwner) != java.lang.Address::select(heap, self, SimpleAuction::$currentBidder) 
    & java.lang.Address::select(heap, self, SimpleAuction::$auctionOwner) != self 
    & java.lang.Address::select(heap, self, SimpleAuction::$currentBidder) != self
    & (\forall  a; ( 
         a = java.lang.Address::select(heap, self, SimpleAuction::$auctionOwner) | a = java.lang.Address::select(heap, self, SimpleAuction::$currentBidder) | a = self | int::select(heap, net, address(a)) = 0 
      ))
    )
    \heuristics(userTaclets1)
 };

}

\problem {
 msg.value>=0 & CInv(heap, self) -> {savedHeap:=heap || heap:=store(heap, net, address(msg.sender), int::select(heap, net, address(msg.sender)) + msg.value)} 
     \[{ 
         self.placeBid(msg)@SimpleAuctionVul;                
      }\] CInv(heap, self)

}
