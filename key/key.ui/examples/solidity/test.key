\profile "Solidity";

\javaSource "sol/";


\programVariables {
  OneAuction self;
  Message msg;
 }
\rules {
  
 insertCInv {
    \schemaVar \term Heap h;
    \schemaVar \term OneAuction self;
    \schemaVar \variable Address a;
    \find(CInv(h, self))
    \varcond(\notFreeIn(a, h, self))
    \replacewith(    
    int::select(heap, net, 
        address(Address::select(heap, self, OneAuction::$auctionOwner))) <= 0  & 
    int::select(heap, net, address(Address::select(heap, self, OneAuction::$auctionOwner)))+
    int::select(heap, net, address(Address::select(heap, self, OneAuction::$currentBidder)))=
    int::select(heap, self, OneAuction::$currentBid) &
    (int::select(heap, net, address(Address::select(heap, self, OneAuction::$auctionOwner))) < 0 -> int::select(heap, self, OneAuction::$currentBid) >= 0)
    &
    (boolean::select(heap, self, OneAuction::$auctionOpen) = TRUE -> int::select(heap, net, address(Address::select(heap, self, OneAuction::$auctionOwner))) = 0)
    & Address::select(heap, self, OneAuction::$auctionOwner) != Address::select(heap, self, OneAuction::$currentBidder) 
    & Address::select(heap, self, OneAuction::$auctionOwner) != self 
    & Address::select(heap, self, OneAuction::$currentBidder) != self
    & (\forall  a; ( 
         a = Address::select(heap, self, OneAuction::$auctionOwner) | a = Address::select(heap, self, OneAuction::$currentBidder) | a = self | int::select(heap, net, address(a)) = 0 
      ))
    )
    \heuristics(userTaclets1)
 };

 }
 
\problem {
msg.value>=0 & CInv(heap, self) -> {savedHeap:=heap || heap:=store(heap, net, address(msg.sender), int::select(heap, net, address(msg.sender)) + msg.value)}
\[{ 
    self.closeAuction(msg)@OneAuction;
}\] CInv(heap, self)

}