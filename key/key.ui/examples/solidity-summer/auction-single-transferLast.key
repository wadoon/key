\profile "Solidity";

\javaSource "casino-transfer/";


\programVariables {
  OneAuction self;
  Message msg;
}
 
\rules {
  
 insertCInv {
    \schemaVar \term Heap h;
    \schemaVar \term OneAuction self;
    \schemaVar \variable Address a;
    \find(CInv(h, self))
    \varcond(\notFreeIn(a, h, self))
    \replacewith(    
// line 39-40
       Address::select(h,
          OneAuction.AuctionInformation::select(h, self, OneAuction::$auction),
           OneAuction.AuctionInformation::$owner) != self &
       Address::select(h, 
          OneAuction.BidInformation::select(h, self, OneAuction::$bid), 
             OneAuction.BidInformation::$bidder) != self &             
//line 51
      int::select(h, 
          OneAuction.BidInformation::select(h, self, OneAuction::$bid),
                     OneAuction.BidInformation::$value) = 
      int::select(h, net, address(
            Address::select(h, 
               OneAuction.BidInformation::select(h, self, OneAuction::$bid), 
                 OneAuction.BidInformation::$bidder))) + 
      int::select(h, net, address(
        Address::select(h,
          OneAuction.AuctionInformation::select(h, self, OneAuction::$auction),
           OneAuction.AuctionInformation::$owner)
      ))                 
      &
// line 52-54:
 (\forall  a;(  
     (a != Address::select(h,
              OneAuction.AuctionInformation::select(h, self, OneAuction::$auction),
                          OneAuction.AuctionInformation::$owner) & 
      a != Address::select(h,
              OneAuction.BidInformation::select(h, self, OneAuction::$bid), 
                          OneAuction.BidInformation::$bidder) &
      a != self) -> int::select(h, net, address(a)) = 0) 
 ) &    
// line 55:  
    int::select(h, net, 
       address( Address::select(h,
          OneAuction.AuctionInformation::select(h, self, OneAuction::$auction),
           OneAuction.AuctionInformation::$owner))) <= 0   
& 
//line 56:
  (OneAuction.AuctionMode::select(h,null,OneAuction.AuctionMode::$Open) = 
     OneAuction.AuctionMode::select(h, 
         OneAuction.AuctionInformation::select(h, self, OneAuction::$auction),
              OneAuction.AuctionInformation::$mode) ->
      int::select(h, net, address(
         Address::select(h,
            OneAuction.AuctionInformation::select(h, self, OneAuction::$auction),
                       OneAuction.AuctionInformation::$owner))) = 0)  
 )
    \heuristics(userTaclets1)
  };

 }
 
\problem {
msg.sender != self         &
self.bid != null           &
self.bid.bidder != null    & 
self.auction != null       &
self.auction.owner != null &
msg.value >= 0 & CInv(heap, self) 
->
{savedHeap:=heap || heap:=store(heap, net, address(msg.sender), int::select(heap, net, address(msg.sender)) + msg.value)}
 \[{ 
    self.makeBid(msg)@OneAuction;
}\] ( CInv(heap, self) 

/*      &
      self.bid.value >= self.bid.value@savedHeap // cannot be shown, anonymization after transfer
      &
      int::select(heap, net, address(
         Address::select(heap,
            OneAuction.BidInformation::select(heap, self, OneAuction::$bid),
                       OneAuction.BidInformation::$bidder))) = msg.value
     &
      int::select(heap, net, address(
         Address::select(savedHeap,
            OneAuction.BidInformation::select(savedHeap, self, OneAuction::$bid),
                       OneAuction.BidInformation::$bidder))) = 0
*/          
)

}
