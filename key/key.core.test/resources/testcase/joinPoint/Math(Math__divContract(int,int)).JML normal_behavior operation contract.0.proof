\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Jan 28 15:17:52 CET 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Sat Jan 28 15:17:52 CET 2017
name=Math[Math\\:\\:divContract(int,int)].JML normal_behavior operation contract.0
contract=Math[Math\\:\\:divContract(int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "melissamendoza" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "14924")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "0,1,0,0,0") (newnames "divident,divisor,self,result,exc,heapAtPre,o,f"))
(rule "concrete_and_1" (formula "1") (term "1,0,0,0"))
(rule "inInt" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "insert_constant_value" (formula "1") (term "1,1,0,1,0,0,0,1,1"))
(rule "translateJavaDivInt" (formula "1") (term "1,1,0,0,0,0,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "simplifyUpdate3" (formula "7") (term "1,0"))
(rule "all_unused" (formula "7") (term "0,1,0,1"))
(rule "all_unused" (formula "7") (term "1,0,1"))
(rule "concrete_and_3" (formula "7") (term "0,1"))
(rule "Class_invariant_axiom_for_Math" (formula "5") (ifseqformula "3"))
(rule "true_left" (formula "5"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_divContract,savedHeapBefore_divContract"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "result_1"))
(builtin "Block Contract" (formula "6"))
(rule "assignmentDivisionInt" (formula "6") (term "1"))
(rule "translateJavaDivInt" (formula "6") (term "0,0,1,1"))
(rule "applyOnRigidFormula" (formula "6"))
(rule "simplifyUpdate2" (formula "6") (term "2"))
(rule "simplifyUpdate2" (formula "6") (term "0"))
(rule "sequentialToParallel2" (formula "6") (term "1"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "simplifyUpdate3" (formula "6") (term "1,0,1"))
(rule "applyOnElementary" (formula "6") (term "1,0,1"))
(rule "applyOnRigidFormula" (formula "6") (term "0"))
(rule "applyOnRigidTerm" (formula "6") (term "0,1,0,1"))
(rule "simplifyUpdate1" (formula "6") (term "0,0,1,0,1"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,1,0,1"))
(rule "applyOnPV" (formula "6") (term "0,0,1,0,1"))
(rule "applyOnPV" (formula "6") (term "1,0,1,0,1"))
(rule "applyOnRigidFormula" (formula "6") (term "0,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,0"))
(rule "applyOnPV" (formula "6") (term "0,0,0"))
(rule "ifthenelse_negated_for" (formula "6"))
(rule "ifthenelse_split_for" (formula "6"))
(branch "divisor = 0 TRUE"
   (rule "throwUnfold" (formula "7") (term "1") (inst "#v0=a"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "a"))
   (rule "instanceCreationAssignment" (formula "7") (term "1") (inst "#v0=a_1"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "a_1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "7") (term "1") (inst "#v0=a_2"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "a_2"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
   (rule "simplifyUpdate2" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "__NEW__"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "7") (term "1") (inst "#v0=a_3"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "a_3"))
   (rule "allocateInstance" (formula "7"))
   (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "4"))
   (rule "concrete_impl_1" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "blockEmpty" (formula "10") (term "1"))
   (rule "assignment" (formula "10") (term "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "assignment_write_attribute_this" (formula "10") (term "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "1,0,1,0"))
   (rule "methodCallWithinClass" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallSuper" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallSuper" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallSuper" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallSuper" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "blockEmpty" (formula "10") (term "1"))
   (rule "assignment_write_attribute_this" (formula "10") (term "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "1,0,1,0"))
   (rule "assignment_write_attribute_this" (formula "10") (term "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "1,0,1,0"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "blockEmpty" (formula "10") (term "1"))
   (rule "methodCallReturnIgnoreResult" (formula "10") (term "1"))
   (rule "methodCallReturn" (formula "10") (term "1"))
   (rule "assignment" (formula "10") (term "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0"))
   (rule "applyOnPV" (formula "10") (term "0,1,0"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "blockEmpty" (formula "10") (term "1"))
   (rule "assignment" (formula "10") (term "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0"))
   (rule "applyOnPV" (formula "10") (term "0,1,0"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallSuper" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallSuper" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallSuper" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallSuper" (formula "10") (term "1"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
   (rule "simplifyUpdate2" (formula "10") (term "1"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "blockEmpty" (formula "10") (term "1"))
   (rule "assignment_write_attribute_this" (formula "10") (term "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "1,0,1,0"))
   (rule "dropEffectlessStores" (formula "10") (term "0,1,0"))
   (rule "assignment_write_attribute_this" (formula "10") (term "1"))
   (rule "sequentialToParallel2" (formula "10"))
   (rule "simplifyUpdate2" (formula "10"))
   (rule "simplifyUpdate3" (formula "10") (term "1,0"))
   (rule "applyOnElementary" (formula "10") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "3,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "10") (term "1,0,1,0"))
   (rule "dropEffectlessStores" (formula "10") (term "0,1,0"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "blockEmpty" (formula "10") (term "1"))
   (rule "assignment_write_attribute" (formula "10") (term "1"))
   (branch "Normal Execution (a_1 != null)"
      (rule "simplifyUpdate2" (formula "10"))
      (rule "sequentialToParallel2" (formula "11"))
      (rule "simplifyUpdate2" (formula "11"))
      (rule "simplifyUpdate3" (formula "11") (term "1,0"))
      (rule "applyOnElementary" (formula "11") (term "1,0"))
      (rule "applyOnRigidFormula" (formula "10"))
      (rule "applyOnPV" (formula "10") (term "0"))
      (rule "simplifyUpdate1" (formula "10") (term "1"))
      (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "10") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "10") (term "3,0,1,0"))
      (rule "applyOnPV" (formula "10") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "10") (term "1,0,1,0"))
      (rule "dropEffectlessStores" (formula "10") (term "0,1,0"))
      (rule "assignment" (formula "10") (term "1"))
      (rule "sequentialToParallel2" (formula "10"))
      (rule "simplifyUpdate2" (formula "10"))
      (rule "simplifyUpdate3" (formula "10") (term "1,0"))
      (rule "applyOnElementary" (formula "10") (term "1,0"))
      (rule "applyOnPV" (formula "10") (term "0,1,0"))
      (rule "tryCatchThrow" (formula "10") (term "1"))
      (rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
      (rule "equality_comparison_simple" (formula "10") (term "1"))
      (rule "sequentialToParallel2" (formula "10"))
      (rule "simplifyUpdate3" (formula "10") (term "1,0"))
      (rule "applyOnElementary" (formula "10") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "10") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "10") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "10") (term "2,0,1,0"))
      (rule "applyOnRigidFormula" (formula "10") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "10") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "10") (term "1,0,0,1,0"))
      (rule "replace_known_right" (formula "10") (term "0,0,1,0") (ifseqformula "8"))
      (rule "ifthenelse_false" (formula "10") (term "0,1,0"))
      (rule "ifElseSplit" (formula "10"))
      (branch "if x true"
         (rule "simplifyUpdate2" (formula "11"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "11"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "7"))
         (rule "applyOnPV" (formula "7") (term "0"))
         (rule "simplifyUpdate1" (formula "7") (term "1"))
         (rule "boolean_not_equal_2" (formula "7"))
         (rule "false_right" (formula "7"))
         (rule "ifElseSplit" (formula "10"))
         (branch "if a instanceof ArithmeticException true"
            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
            (rule "ifthenelse_concrete4" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
            (rule "concrete_or_4" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "7"))
            (rule "simplifyUpdate1" (formula "7") (term "1"))
            (rule "applyOnPV" (formula "7") (term "0"))
            (rule "variableDeclaration" (formula "10") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "10") (term "1"))
            (branch "Normal Execution (a instanceof ArithmeticException)"
               (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
               (rule "boolean_equal" (formula "1") (term "1,1"))
               (rule "concrete_or_3" (formula "1") (term "1"))
               (rule "true_left" (formula "1"))
               (rule "simplifyUpdate2" (formula "10") (term "1"))
               (rule "simplifyUpdate2" (formula "10"))
               (rule "assignment" (formula "10") (term "1"))
               (rule "insert_constant_value" (formula "10") (term "0,0,1"))
               (rule "sequentialToParallel2" (formula "10"))
               (rule "simplifyUpdate3" (formula "10") (term "1,0"))
               (rule "blockEmpty" (formula "10") (term "1"))
               (builtin "Join Point" (formula "10"))
               (builtin "JoinRule" (formula "10") (joinProc "JoinByIfThenElse") (nrJoinPartners "1") (joinId "320"))
               (builtin "DeleteJoinPoint" (formula "7"))
               (rule "notLeft" (formula "2"))
               (rule "blockEmpty" (formula "7") (term "1"))
               (rule "commute_and_2" (formula "1") (term "0,0"))
               (rule "commute_and_2" (formula "7") (term "0,0,0,1,0"))
               (rule "methodCallReturn" (formula "7") (term "1"))
               (rule "assignment" (formula "7") (term "1"))
               (rule "sequentialToParallel2" (formula "7"))
               (rule "simplifyUpdate2" (formula "7"))
               (rule "simplifyUpdate3" (formula "7") (term "1,0"))
               (rule "applyOnElementary" (formula "7") (term "1,0"))
               (rule "applyOnPV" (formula "7") (term "0,1,0"))
               (rule "commute_and_2" (formula "7") (term "0,0,0,1,0"))
               (rule "methodCallEmpty" (formula "7") (term "1"))
               (rule "tryEmpty" (formula "7") (term "1"))
               (rule "emptyModality" (formula "7") (term "1"))
               (rule "applyOnRigidFormula" (formula "7"))
               (rule "simplifyUpdate2" (formula "7") (term "1"))
               (rule "simplifyUpdate2" (formula "7") (term "0"))
               (rule "applyOnRigidFormula" (formula "7") (term "1"))
               (rule "applyOnPV" (formula "7") (term "0,1"))
               (rule "simplifyUpdate1" (formula "7") (term "1,1"))
               (rule "eqClose" (formula "7") (term "1"))
               (rule "concrete_and_3" (formula "7"))
               (rule "applyOnRigidFormula" (formula "7"))
               (rule "simplifyUpdate2" (formula "7") (term "0"))
               (rule "applyOnRigidFormula" (formula "7") (term "1"))
               (rule "simplifyUpdate2" (formula "7") (term "0,1"))
               (rule "simplifyUpdate2" (formula "7") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "7") (term "0"))
               (rule "simplifyUpdate2" (formula "7") (term "0,0"))
               (rule "applyOnRigidFormula" (formula "7") (term "0,1"))
               (rule "simplifyUpdate2" (formula "7") (term "0,0,1"))
               (rule "applyOnRigidFormula" (formula "7") (term "1,1"))
               (rule "applyOnPV" (formula "7") (term "0,1,1"))
               (rule "simplifyUpdate1" (formula "7") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "7") (term "1,0"))
               (rule "simplifyUpdate1" (formula "7") (term "1,1,0"))
               (rule "applyOnPV" (formula "7") (term "0,1,0"))
               (rule "ifthenelse_concrete4" (formula "7") (term "1,0"))
               (rule "eqSymm" (formula "7") (term "1,1,0"))
               (rule "applyOnRigidFormula" (formula "7") (term "1,0,1"))
               (rule "applyOnPV" (formula "7") (term "0,1,0,1"))
               (rule "simplifyUpdate1" (formula "7") (term "1,1,0,1"))
               (rule "ifthenelse_concrete3" (formula "7") (term "1,0,1"))
               (rule "Class_invariant_axiom_for_Math" (formula "7") (term "1,1") (ifseqformula "4"))
               (rule "concrete_and_3" (formula "7") (term "1"))
               (rule "commute_or" (formula "7") (term "1,1"))
               (rule "orLeft" (formula "1"))
               (branch " !a_3 = null & java.lang.ArithmeticException::exactInstance(a_3) = TRUE & !a_3.<created> = TRUE & divisor = 0"
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_right" (formula "10") (term "0,1,0,1,1,1") (ifseqformula "8"))
                  (rule "concrete_not_2" (formula "10") (term "1,0,1,1,1"))
                  (rule "concrete_and_3" (formula "10") (term "0,1,1,1"))
                  (rule "replace_known_left" (formula "10") (term "1,0,1,1,1") (ifseqformula "1"))
                  (rule "concrete_and_3" (formula "10") (term "0,1,1,1"))
                  (rule "replace_known_right" (formula "10") (term "0,0,1,1,1") (ifseqformula "7"))
                  (rule "concrete_not_2" (formula "10") (term "0,1,1,1"))
                  (rule "concrete_and_1" (formula "10") (term "1,1,1"))
                  (rule "replace_known_left" (formula "10") (term "1,1,1") (ifseqformula "2"))
                  (rule "concrete_or_3" (formula "10") (term "1,1"))
                  (rule "concrete_impl_4" (formula "10") (term "1"))
                  (rule "concrete_and_3" (formula "10"))
                  (rule "impRight" (formula "10"))
                  (rule "orRight" (formula "11"))
                  (rule "notLeft" (formula "1"))
                  (rule "close" (formula "7") (ifseqformula "2"))
               )
               (branch " !divisor = 0 & divident / divisor = quotient_0 & divisor * quotient_0 <= divident & if (divisor >= 0) then ( divisor * quotient_0 >= 1 + divident + divisor * -1) else ( divisor * quotient_0 >= 1 + divident + divisor) & divident * -1 / divisor = quotient_1 & divisor * quotient_1 <= divident * -1 & if (divisor >= 0) then ( divisor * quotient_1 >= 1 + divident * -1 + divisor * -1) else ( divisor * quotient_1 >= 1 + divident * -1 + divisor) & if (divident >= 0) then (quotient_0) else (quotient_1 * -1) = jdiv(divident, divisor)"
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "12"))
                  (rule "concrete_impl_2" (formula "14") (term "1"))
                  (rule "concrete_and_3" (formula "14"))
                  (rule "impRight" (formula "14"))
                  (rule "orRight" (formula "15"))
                  (rule "notLeft" (formula "1"))
                  (rule "notRight" (formula "14"))
                  (rule "andLeft" (formula "1"))
                  (rule "close" (formula "14") (ifseqformula "2"))
               )
            )
            (branch "ClassCastException (!(a instanceof ArithmeticException))"
               (rule "instanceof_static_type" (formula "10") (term "0,1,1"))
               (rule "boolean_equal" (formula "10") (term "1,1"))
               (rule "concrete_or_3" (formula "10") (term "1"))
               (rule "closeTrue" (formula "10"))
            )
         )
         (branch "if a instanceof ArithmeticException false"
            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
            (rule "concrete_or_4" (formula "1") (term "0,1"))
            (rule "double_not" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "close" (formula "9") (ifseqformula "1"))
         )
      )
   )
   (branch "Null Reference (a_1 = null)"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "close" (formula "9") (ifseqformula "1"))
   )
)
(branch "divisor = 0 FALSE"
   (rule "tryEmpty" (formula "7") (term "1"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (rule "jdiv_axiom" (formula "7") (term "0,1,0"))
   (rule "eqSymm" (formula "1"))
   (rule "div_axiom" (formula "1") (term "1,0") (inst "quotient=quotient_0"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "8"))
   (rule "concrete_or_2" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,1,1"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,2"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0"))
   (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
   (rule "div_axiom" (formula "4") (term "0,2,0") (inst "quotient=quotient_1"))
   (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "11"))
   (rule "concrete_or_2" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,1"))
   (rule "polySimp_mulComm0" (formula "6") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "6") (term "0,2"))
   (rule "polySimp_mulComm0" (formula "5") (term "0"))
   (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "4"))
   (builtin "CloseAfterJoin" (formula "14") (joinNode "328"))
)
)

}
