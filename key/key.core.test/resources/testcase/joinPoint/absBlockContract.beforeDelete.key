\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 30 20:20:12 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=90
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "../../../../../../../../B-Arbeit/Beispiele/ExampleB";

\proofObligation "#Proof Obligation Settings
#Wed Nov 30 20:20:12 CET 2016
name=Example2[Example2\\:\\:absBlockContract(int)].JML normal_behavior operation contract.0
contract=Example2[Example2\\:\\:absBlockContract(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "melissamendoza" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "melissamendoza" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "1603")

(branch "dummy ID"
(rule "inInt" (formula "1") (term "1,0,0,0") (newnames "num,self,result,exc,heapAtPre,o,f"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "7") (term "1"))
(rule "sequentialToParallel2" (formula "7"))
(rule "simplifyUpdate3" (formula "7") (term "1,0"))
(rule "all_unused" (formula "7") (term "1,0,1"))
(rule "all_unused" (formula "7") (term "1,0,1"))
(rule "concrete_and_3" (formula "7") (term "0,1"))
(rule "Class_invariant_axiom_for_Example2" (formula "5") (ifseqformula "3"))
(rule "true_left" (formula "5"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_absBlockContract,savedHeapBefore_absBlockContract"))
(rule "simplifyUpdate2" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "y"))
(builtin "Block Contract" (formula "6"))
(rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "6") (term "1"))
(rule "sequentialToParallel2" (formula "6"))
(rule "simplifyUpdate3" (formula "6") (term "1,0"))
(rule "applyOnElementary" (formula "6") (term "1,0"))
(rule "applyOnRigidTerm" (formula "6") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "2,0,1,0"))
(rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0"))
(rule "applyOnPV" (formula "6") (term "0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,1,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,1,0"))
(rule "ifElseSplit" (formula "6"))
(branch "if x true"
   (rule "simplifyUpdate2" (formula "1"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "applyOnRigidFormula" (formula "1"))
   (rule "simplifyUpdate1" (formula "1") (term "1"))
   (rule "applyOnPV" (formula "1") (term "0"))
   (rule "ifthenelse_concrete3" (formula "1"))
   (rule "boolean_not_equal_2" (formula "1") (term "1"))
   (rule "concrete_or_4" (formula "1"))
   (rule "unaryMinusInt" (formula "7") (term "1"))
   (rule "translateJavaUnaryMinusInt" (formula "7") (term "0,0,1"))
   (rule "polySimp_elimNeg" (formula "7") (term "0,0,1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "7") (term "0,1,0"))
   (rule "applyOnPV" (formula "7") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "7") (term "1,0,1,0"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (builtin "JoinPoint" (formula "7"))
   (builtin "JoinRule" (formula "7") (joinProc "JoinByIfThenElse") (nrJoinPartners "1") (joinId "84"))
   (rule "notLeft" (formula "1"))
   (opengoal " ")
)
(branch "if x false"
   (rule "false_to_not_true" (formula "1") (term "1"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate2" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "applyOnRigidFormula" (formula "5"))
   (rule "applyOnPV" (formula "5") (term "0"))
   (rule "simplifyUpdate1" (formula "5") (term "1"))
   (rule "ifthenelse_concrete3" (formula "5"))
   (rule "boolean_not_equal_2" (formula "5") (term "1"))
   (rule "concrete_or_4" (formula "5"))
   (rule "inEqSimp_leqRight" (formula "5"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "assignment" (formula "7") (term "1"))
   (rule "sequentialToParallel2" (formula "7"))
   (rule "simplifyUpdate2" (formula "7"))
   (rule "simplifyUpdate3" (formula "7") (term "1,0"))
   (rule "applyOnElementary" (formula "7") (term "1,0"))
   (rule "applyOnPV" (formula "7") (term "0,1,0"))
   (rule "blockEmpty" (formula "7") (term "1"))
   (builtin "CloseAfterJoin" (formula "7") (joinNode "85"))
   (opengoal " ")
)
)

}
