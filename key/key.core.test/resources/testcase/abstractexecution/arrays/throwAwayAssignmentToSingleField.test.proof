\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri May 24 16:05:19 CEST 2019
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , javaLoopTreatment-javaLoopTreatment\\:efficient
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\functions {
   int _result;
   int[] _A;
   LocSet localsP0;
   Throwable _exc;
}

\predicates {
   Post(int, Throwable);
}

\programVariables {
   int result;
   Throwable exc;
   int x;
   int[] A;
   BasicArrayTests objUnderTest;
}

\problem {
   !_A = null & gt(length(_A), Z(4(1(#))))
-> \forall int _x1;
     \forall int _x2;
       (    {result:=_result
             || A:=_A
             || x:=_x1
             || exc:=_exc}
              \<{ try {
                    result=objUnderTest.throwAwayAssignmentToSingleField(A,x)@BasicArrayTests;
                  }   catch (Throwable t) {
                    exc=t;
                  }
                }\> Post(result, exc)
        <-> {result:=_result
             || A:=_A
             || x:=_x2
             || exc:=_exc}
              \<{ try {
                    result=objUnderTest.throwAwayAssignmentToSingleField(A,x)@BasicArrayTests;
                  }   catch (Throwable t) {
                    exc=t;
                  }
                }\> Post(result, exc))

}

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "e9b73208cb39bcd1f117e342317538c3bc976fd5"))

(autoModeTime "24923")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD,heap_Before_BLOCK,savedHeap_Before_BLOCK,heap_Before_METHOD,savedHeap_Before_METHOD"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "allRight" (formula "3") (inst "sk=_x1_0"))
(rule "allRight" (formula "3") (inst "sk=_x2_0"))
(rule "inEqSimp_gtToGeq" (formula "1"))
(rule "mul_literals" (formula "1") (term "1,0,0"))
(rule "add_literals" (formula "1") (term "0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1"))
(rule "mul_literals" (formula "1") (term "1"))
(rule "equiv_right" (formula "3"))
(branch "Case '->'"
   (rule "diamondToBox" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_throwAwayAssignmentToSingleField,savedHeapBefore_throwAwayAssignmentToSingleField"))
   (rule "simplifyUpdate2" (formula "4") (term "1"))
   (rule "assignment_to_primitive_array_component" (formula "4"))
   (branch "Normal Execution (A != null)"
      (rule "sequentialToParallel2" (formula "4"))
      (rule "simplifyUpdate2" (formula "4"))
      (rule "simplifyUpdate3" (formula "4") (term "1,0"))
      (rule "applyOnElementary" (formula "4") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "4") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "3,0,1,0"))
      (rule "applyOnPV" (formula "4") (term "1,0,1,0"))
      (rule "applyOnPV" (formula "4") (term "3,0,1,0"))
      (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_throwAwayAssignmentToSingleField_0,savedHeapBefore_throwAwayAssignmentToSingleField_0"))
      (rule "simplifyUpdate2" (formula "2") (term "1"))
      (rule "assignment_to_primitive_array_component" (formula "2"))
      (branch "Normal Execution (A != null)"
         (rule "sequentialToParallel2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate3" (formula "2") (term "1,0"))
         (rule "applyOnElementary" (formula "2") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "2") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "3,0,1,0"))
         (rule "applyOnPV" (formula "2") (term "1,0,1,0"))
         (rule "applyOnPV" (formula "2") (term "3,0,1,0"))
         (rule "abstractExecutionNonVoid" (formula "4") (term "1") (inst "#label=_label2") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
         (rule "concrete_and_3" (formula "4") (term "0,0,1,1,0,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "4") (term "0,1"))
         (rule "translateJavaSubInt" (formula "4") (term "2,0,1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "4") (term "2,0,1,0,0,0,0,0,1,1,0,1"))
         (rule "applySkip2" (formula "4") (term "0,1"))
         (rule "simplifyUpdate2" (formula "4") (term "0,1"))
         (rule "simplifyUpdate2" (formula "4") (term "1,1,1"))
         (rule "impRight" (formula "4"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "notLeft" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "polySimp_elimSub" (formula "9") (term "2,0,1,0,0,1"))
         (rule "mul_literals" (formula "9") (term "1,2,0,1,0,0,1"))
         (rule "polySimp_elimSub" (formula "1") (term "2,0,1,0,1"))
         (rule "mul_literals" (formula "1") (term "1,2,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "9") (term "2,0,1,0,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "2,0,1,0,1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "simplifyUpdate1" (formula "4") (term "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "simplifyUpdate2" (formula "3") (term "0"))
         (rule "simplifyUpdate2" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "6"))
         (rule "applyOnPV" (formula "6") (term "0"))
         (rule "simplifyUpdate1Rigid" (formula "6") (term "1"))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnRigidFormula" (formula "3") (term "0"))
         (rule "applyOnPV" (formula "3") (term "0,0"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "3") (term "1"))
         (rule "simplifyUpdate2" (formula "3") (term "0,1"))
         (rule "simplifyUpdate2" (formula "3") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "0"))
         (rule "applyOnRigidFormula" (formula "2") (term "1"))
         (rule "simplifyUpdate2" (formula "2") (term "0,1"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
         (rule "applyOnPV" (formula "3") (term "0,1,1"))
         (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
         (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "4"))
         (rule "concrete_and_3" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
         (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
         (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
         (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
         (rule "simplifyUpdate1Rigid" (formula "3") (term "1,0,1"))
         (rule "applyOnPV" (formula "3") (term "0,0,1"))
         (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "6"))
         (rule "concrete_not_2" (formula "3") (term "1"))
         (rule "concrete_eq_3" (formula "3"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,1,0"))
         (rule "applyOnPV" (formula "2") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
         (rule "replace_known_right" (formula "2") (term "0,1,0") (ifseqformula "6"))
         (rule "concrete_and_2" (formula "2") (term "1,0"))
         (rule "concrete_or_4" (formula "2") (term "0"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,0,1"))
         (rule "applyOnPV" (formula "2") (term "0,0,0,1"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0,0,1"))
         (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "6"))
         (rule "concrete_not_2" (formula "2") (term "0,1"))
         (rule "concrete_and_1" (formula "2") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "2,0,0,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
         (rule "applyOnPV" (formula "2") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "1,1,0"))
         (rule "replace_known_left" (formula "2") (term "1,0") (ifseqformula "4"))
         (rule "concrete_and_3" (formula "2") (term "0"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
         (rule "applyOnPV" (formula "2") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
         (rule "replace_known_left" (formula "2") (term "0,1") (ifseqformula "4"))
         (rule "concrete_not_1" (formula "2") (term "1"))
         (rule "concrete_or_4" (formula "2"))
         (rule "notLeft" (formula "2"))
         (rule "applyOnRigidTerm" (formula "1") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "0,2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "5"))
         (rule "applyOnPV" (formula "5") (term "0"))
         (rule "simplifyUpdate1" (formula "5") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,2,0,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,1,2,0,1,0"))
         (rule "apply_eq_boolean_rigid" (formula "8") (term "0,1,0,0,1,1") (ifseqformula "5"))
         (rule "applyEqRigid" (formula "8") (term "0,0,0,0,1,1") (ifseqformula "3"))
         (rule "abstractExecutionNonVoid" (formula "6") (term "1") (inst "#label=_label3") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
         (rule "concrete_and_3" (formula "6") (term "0,0,1,1,0,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "6") (term "0,1"))
         (rule "translateJavaSubInt" (formula "6") (term "2,0,1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "6") (term "2,0,1,0,0,0,0,0,1,1,0,1"))
         (rule "applySkip2" (formula "6") (term "0,1"))
         (rule "simplifyUpdate2" (formula "6") (term "0,1"))
         (rule "simplifyUpdate2" (formula "6") (term "1,1,1"))
         (rule "impRight" (formula "6"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "notLeft" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "polySimp_elimSub" (formula "11") (term "2,0,1,0,0,1"))
         (rule "mul_literals" (formula "11") (term "1,2,0,1,0,0,1"))
         (rule "polySimp_elimSub" (formula "1") (term "2,0,1,0,1"))
         (rule "mul_literals" (formula "1") (term "1,2,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "11") (term "2,0,1,0,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "2,0,1,0,1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "simplifyUpdate1" (formula "4") (term "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "simplifyUpdate2" (formula "3") (term "0"))
         (rule "simplifyUpdate2" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "8"))
         (rule "applyOnPV" (formula "8") (term "0"))
         (rule "simplifyUpdate1" (formula "8") (term "1"))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnRigidFormula" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0"))
         (rule "applyOnPV" (formula "3") (term "0,0"))
         (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
         (rule "concrete_eq_1" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "simplifyUpdate2" (formula "4"))
         (rule "simplifyUpdate2" (formula "3"))
         (rule "notLeft" (formula "3"))
         (rule "applyOnRigidFormula" (formula "2") (term "0"))
         (rule "applyOnRigidFormula" (formula "2") (term "1"))
         (rule "simplifyUpdate2" (formula "2") (term "0,1"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1"))
         (rule "replace_known_left" (formula "2") (term "0,1,1,1") (ifseqformula "3"))
         (rule "concrete_not_1" (formula "2") (term "1,1,1"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1"))
         (rule "concrete_and_4" (formula "2") (term "1"))
         (rule "concrete_or_4" (formula "2"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "applyOnPV" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "7"))
         (rule "simplifyUpdate1" (formula "7") (term "1"))
         (rule "applyOnPV" (formula "7") (term "0"))
         (rule "applyOnRigidFormula" (formula "2") (term "1"))
         (rule "simplifyUpdate2" (formula "2") (term "0,1"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "0"))
         (rule "simplifyUpdate2" (formula "2") (term "1,0"))
         (rule "simplifyUpdate2" (formula "2") (term "0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
         (rule "applyOnPV" (formula "2") (term "0,0,1"))
         (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "7"))
         (rule "concrete_and_2" (formula "2") (term "1"))
         (rule "concrete_or_4" (formula "2"))
         (rule "andLeft" (formula "2"))
         (rule "notLeft" (formula "2"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "2,0,0,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "applyOnPV" (formula "2") (term "0"))
         (rule "simplifyUpdate1" (formula "2") (term "1"))
         (rule "applyOnRigidFormula" (formula "6"))
         (rule "applyOnPV" (formula "6") (term "0"))
         (rule "simplifyUpdate1Rigid" (formula "6") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "0,2,0,1,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,2,0,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,1,2,0,1,0"))
         (rule "apply_eq_boolean_rigid" (formula "6") (term "0,1,0,0,1,1") (ifseqformula "5"))
         (rule "applyEqRigid" (formula "6") (term "0,0,0,0,1,1") (ifseqformula "3"))
         (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
         (rule "inInt" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "arrayLengthNotNegative" (formula "4") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
         (rule "leq_literals" (formula "4") (term "0"))
         (rule "concrete_or_1" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1,0,0,1"))
         (rule "inInt" (formula "1") (term "1"))
         (rule "true_left" (formula "1"))
         (rule "arrayLengthNotNegative" (formula "8") (term "1,2,0,1,0,0,1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "applyOnPV" (formula "1") (term "0,0"))
         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
         (rule "leq_literals" (formula "1") (term "0"))
         (rule "concrete_or_1" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifSplit" (formula "8"))
         (branch "if returns true"
            (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applySkip2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if returns false"
            (rule "false_to_not_true" (formula "1") (term "1,1,1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applySkip2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "5"))
            (rule "applyOnPV" (formula "5") (term "0"))
            (rule "simplifyUpdate1Rigid" (formula "5") (term "1"))
            (rule "boolean_not_equal_2" (formula "5"))
            (rule "false_right" (formula "5"))
            (rule "ifUnfold" (formula "8") (term "1,1,1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "8") (term "1,1,1") (newnames "boolv"))
            (rule "inequality_comparison_simple" (formula "8") (term "1,1,1"))
            (rule "sequentialToParallel2" (formula "8") (term "1,1"))
            (rule "applyOnElementary" (formula "8") (term "1,0,1,1"))
            (rule "applyOnRigidTerm" (formula "8") (term "0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0,1,1"))
            (rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0,1,1"))
            (rule "applyOnPV" (formula "8") (term "0,0,0,1,0,1,1"))
            (rule "eqClose" (formula "8") (term "0,0,1,0,1,1"))
            (rule "ifthenelse_true" (formula "8") (term "0,1,0,1,1"))
            (rule "arrayLengthIsAnInt" (formula "6") (term "1,2,0,1,0,0,1"))
            (rule "inInt" (formula "1") (term "1"))
            (rule "true_left" (formula "1"))
            (rule "arrayLengthNotNegative" (formula "6") (term "1,2,0,1,0,0,1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
            (rule "leq_literals" (formula "1") (term "0"))
            (rule "concrete_or_1" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifSplit" (formula "6"))
            (branch "if returns true"
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "7") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if returns false"
               (rule "false_to_not_true" (formula "1") (term "1,1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "7") (term "1,1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "5"))
               (rule "applyOnPV" (formula "5") (term "0"))
               (rule "simplifyUpdate1Rigid" (formula "5") (term "1"))
               (rule "boolean_not_equal_2" (formula "5"))
               (rule "false_right" (formula "5"))
               (rule "ifUnfold" (formula "6") (term "1,1,1") (inst "#boolv=boolv"))
               (rule "variableDeclaration" (formula "6") (term "1,1,1") (newnames "boolv_1"))
               (rule "inequality_comparison_simple" (formula "6") (term "1,1,1"))
               (rule "sequentialToParallel2" (formula "6") (term "1,1"))
               (rule "applyOnElementary" (formula "6") (term "1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "6") (term "0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0,1,1"))
               (rule "applyOnPV" (formula "6") (term "0,0,0,1,0,1,1"))
               (rule "eqClose" (formula "6") (term "0,0,1,0,1,1"))
               (rule "ifthenelse_true" (formula "6") (term "0,1,0,1,1"))
               (rule "ifSplit" (formula "8"))
               (branch "if boolv true"
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "9") (term "1,1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv false"
                  (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "9") (term "1,1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "5"))
                  (rule "applyOnPV" (formula "5") (term "0"))
                  (rule "simplifyUpdate1" (formula "5") (term "1"))
                  (rule "boolean_not_equal_2" (formula "5"))
                  (rule "false_right" (formula "5"))
                  (rule "blockEmpty" (formula "8") (term "1,1"))
                  (rule "returnUnfold" (formula "8") (term "1,1") (inst "#v0=o"))
                  (rule "variableDeclarationAssign" (formula "8") (term "1,1"))
                  (rule "variableDeclaration" (formula "8") (term "1,1") (newnames "o"))
                  (rule "assignment_array2" (formula "8"))
                  (branch "Normal Execution (A != null)"
                     (rule "methodCallReturn" (formula "8") (term "1,1,1"))
                     (rule "assignment" (formula "8") (term "1,1,1"))
                     (rule "sequentialToParallel2" (formula "8") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "8") (term "1,1"))
                     (rule "applyOnElementary" (formula "8") (term "0,1,1"))
                     (rule "applyOnPV" (formula "8") (term "0,0,1,1"))
                     (rule "methodCallEmpty" (formula "8") (term "1,1,1"))
                     (rule "tryEmpty" (formula "8") (term "1,1,1"))
                     (rule "emptyModality" (formula "8") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "8") (term "1,1"))
                     (rule "simplifyUpdate1" (formula "8") (term "1,1,1"))
                     (rule "applyOnPV" (formula "8") (term "0,1,1"))
                     (rule "simplifyUpdate2" (formula "8"))
                     (rule "applyOnRigidFormula" (formula "8") (term "1"))
                     (rule "dropEffectlessAbstractUpdate1" (formula "8") (term "1,1"))
                     (rule "applySkip1" (formula "8") (term "1,1"))
                     (rule "applyOnRigidTerm" (formula "8") (term "0,1"))
                     (rule "dropEffectlessAbstractUpdate1" (formula "8") (term "1,0,1"))
                     (rule "applySkip1" (formula "8") (term "1,0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "8") (term "2,0,1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "simplifyUpdate1" (formula "8") (term "0"))
                     (rule "applyOnPV" (formula "8") (term "1"))
                     (rule "applyOnRigidTerm" (formula "8") (term "0"))
                     (rule "simplifyUpdate1" (formula "8") (term "1,0"))
                     (rule "simplifyUpdate1" (formula "8") (term "2,0"))
                     (rule "applyOnPV" (formula "8") (term "1,0"))
                     (rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=arr_0"))
                     (rule "ifSplit" (formula "7"))
                     (branch "if boolv_1 true"
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "8") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if boolv_1 false"
                        (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "8") (term "1,1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "6"))
                        (rule "applyOnPV" (formula "6") (term "0"))
                        (rule "simplifyUpdate1" (formula "6") (term "1"))
                        (rule "boolean_not_equal_2" (formula "6"))
                        (rule "false_right" (formula "6"))
                        (rule "blockEmpty" (formula "7") (term "1,1"))
                        (rule "returnUnfold" (formula "7") (term "1,1") (inst "#v0=o"))
                        (rule "variableDeclarationAssign" (formula "7") (term "1,1"))
                        (rule "variableDeclaration" (formula "7") (term "1,1") (newnames "o_1"))
                        (rule "assignment_array2" (formula "7"))
                        (branch "Normal Execution (A != null)"
                           (rule "methodCallReturn" (formula "7") (term "1,1,1"))
                           (rule "assignment" (formula "7") (term "1,1,1"))
                           (rule "sequentialToParallel2" (formula "7") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "7") (term "1,1"))
                           (rule "applyOnElementary" (formula "7") (term "0,1,1"))
                           (rule "applyOnPV" (formula "7") (term "0,0,1,1"))
                           (rule "methodCallEmpty" (formula "7") (term "1,1,1"))
                           (rule "tryEmpty" (formula "7") (term "1,1,1"))
                           (rule "emptyModality" (formula "7") (term "1,1,1"))
                           (rule "notRight" (formula "7"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,1"))
                           (rule "applySkip1" (formula "1") (term "1,1"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                           (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,1"))
                           (rule "applySkip1" (formula "1") (term "1,0,1"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "2,0,1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "1"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                           (rule "simplifyUpdate1" (formula "1") (term "2,0"))
                           (rule "applyOnPV" (formula "1") (term "1,0"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_1"))
                           (rule "arrayLengthIsAnInt" (formula "3") (term "1,2,0,1,0,0,1,0,0"))
                           (rule "inInt" (formula "3") (term "1"))
                           (rule "true_left" (formula "3"))
                           (rule "arrayLengthNotNegative" (formula "3") (term "1,2,0,1,0,0,1,0,0"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate1" (formula "3") (term "1"))
                           (rule "applyOnRigidTerm" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "8"))
                           (rule "leq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "arrayLengthIsAnInt" (formula "1") (term "1,2,0,1,0,0,1,0,0"))
                           (rule "inInt" (formula "1") (term "1"))
                           (rule "true_left" (formula "1"))
                           (rule "arrayLengthNotNegative" (formula "1") (term "1,2,0,1,0,0,1,0,0"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0"))
                           (rule "applyOnPV" (formula "1") (term "0,0"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "8"))
                           (rule "leq_literals" (formula "1") (term "0"))
                           (rule "concrete_or_1" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyConcrOnAbstrUpdTerm" (formula "3") (term "0,0"))
                           (rule "elimSelfSingleUpdateTrm" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0,0"))
                           (rule "applyOnPV" (formula "3") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                            (opengoal "   !_A = null & gt(length(_A), Z(4(1(#)))) -> \\forall int _x1;      \\forall int _x2;        (    {result:=_result              || A:=_A              || x:=_x1              || exc:=_exc}               \\<{ try {                     result=objUnderTest.throwAwayAssignmentToSingleField(A,x)@BasicArrayTests;                   }   catch (Throwable t) {                     exc=t;                   }                 }\\> Post(result, exc)         <-> {result:=_result              || A:=_A              || x:=_x2              || exc:=_exc}               \\<{ try {                     result=objUnderTest.throwAwayAssignmentToSingleField(A,x)@BasicArrayTests;                   }   catch (Throwable t) {                     exc=t;                   }                 }\\> Post(result, exc)) ")
                        )
                        (branch "Null Reference (A = null)"
                           (rule "false_right" (formula "8"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "close" (formula "8") (ifseqformula "1"))
                        )
                        (branch "Index Out of Bounds (A != null, but 14 Out of Bounds!)"
                           (rule "false_right" (formula "8"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "less_literals" (formula "1") (term "1,1,1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1,1,1"))
                           (rule "applySkip2" (formula "1") (term "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnRigidFormula" (formula "7"))
                           (rule "simplifyUpdate1Rigid" (formula "7") (term "1"))
                           (rule "applyOnPV" (formula "7") (term "0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0"))
                           (rule "applyOnPV" (formula "1") (term "0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (rule "concrete_and_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (A = null)"
                     (rule "false_right" (formula "9"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1") (term "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "close" (formula "8") (ifseqformula "1"))
                  )
                  (branch "Index Out of Bounds (A != null, but 14 Out of Bounds!)"
                     (rule "false_right" (formula "9"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "less_literals" (formula "1") (term "1,1,1,1"))
                     (rule "concrete_or_4" (formula "1") (term "1,1,1"))
                     (rule "applySkip2" (formula "1") (term "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnRigidFormula" (formula "6"))
                     (rule "applyOnPV" (formula "6") (term "0"))
                     (rule "simplifyUpdate1" (formula "6") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "applyOnPV" (formula "1") (term "0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (rule "concrete_and_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
      )
      (branch "Null Reference (A = null)"
         (rule "false_right" (formula "3"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "close" (formula "3") (ifseqformula "1"))
      )
      (branch "Index Out of Bounds (A != null, but 14 Out of Bounds!)"
         (rule "false_right" (formula "3"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "less_literals" (formula "1") (term "1,1,1"))
         (rule "concrete_or_4" (formula "1") (term "1,1"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "applyOnPV" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "applyOnPV" (formula "1") (term "0,0"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (rule "concrete_and_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (A = null)"
      (rule "false_right" (formula "5"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "close" (formula "4") (ifseqformula "1"))
   )
   (branch "Index Out of Bounds (A != null, but 14 Out of Bounds!)"
      (rule "false_right" (formula "5"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "less_literals" (formula "1") (term "1,1,1"))
      (rule "concrete_or_4" (formula "1") (term "1,1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnRigidFormula" (formula "3"))
      (rule "applyOnPV" (formula "3") (term "0"))
      (rule "simplifyUpdate1" (formula "3") (term "1"))
      (rule "applyOnRigidTerm" (formula "1") (term "0"))
      (rule "applyOnPV" (formula "1") (term "0,0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (rule "concrete_and_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Case '<-'"
   (rule "diamondToBox" (formula "1") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_throwAwayAssignmentToSingleField,savedHeapBefore_throwAwayAssignmentToSingleField"))
   (rule "simplifyUpdate2" (formula "4") (term "1"))
   (rule "assignment_to_primitive_array_component" (formula "4") (newnames "normal,exc_0,returns,result_0"))
   (branch "Normal Execution (A != null)"
      (rule "sequentialToParallel2" (formula "4"))
      (rule "simplifyUpdate2" (formula "4"))
      (rule "simplifyUpdate3" (formula "4") (term "1,0"))
      (rule "applyOnElementary" (formula "4") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "4") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "3,0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "4") (term "2,0,1,0"))
      (rule "applyOnPV" (formula "4") (term "3,0,1,0"))
      (rule "applyOnPV" (formula "4") (term "1,0,1,0"))
      (rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_throwAwayAssignmentToSingleField_0,savedHeapBefore_throwAwayAssignmentToSingleField_0"))
      (rule "simplifyUpdate2" (formula "2") (term "1"))
      (rule "assignment_to_primitive_array_component" (formula "2"))
      (branch "Normal Execution (A != null)"
         (rule "sequentialToParallel2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate3" (formula "2") (term "1,0"))
         (rule "applyOnElementary" (formula "2") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "2") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "3,0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "2") (term "2,0,1,0"))
         (rule "applyOnPV" (formula "2") (term "3,0,1,0"))
         (rule "applyOnPV" (formula "2") (term "1,0,1,0"))
         (rule "abstractExecutionNonVoid" (formula "4") (term "1") (inst "#label=_label0") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
         (rule "concrete_and_3" (formula "4") (term "0,0,1,1,0,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "4") (term "0,1"))
         (rule "translateJavaSubInt" (formula "4") (term "2,0,1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "4") (term "2,0,1,0,0,0,0,0,1,1,0,1"))
         (rule "applySkip2" (formula "4") (term "0,1"))
         (rule "simplifyUpdate2" (formula "4") (term "0,1"))
         (rule "simplifyUpdate2" (formula "4") (term "1,1,1"))
         (rule "impRight" (formula "4"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "notLeft" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "polySimp_elimSub" (formula "9") (term "2,0,1,0,0,1"))
         (rule "mul_literals" (formula "9") (term "1,2,0,1,0,0,1"))
         (rule "polySimp_elimSub" (formula "1") (term "2,0,1,0,1"))
         (rule "mul_literals" (formula "1") (term "1,2,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "9") (term "2,0,1,0,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "2,0,1,0,1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "simplifyUpdate1" (formula "4") (term "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "simplifyUpdate2" (formula "3") (term "0"))
         (rule "simplifyUpdate2" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "6"))
         (rule "applyOnPV" (formula "6") (term "0"))
         (rule "simplifyUpdate1" (formula "6") (term "1"))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnRigidFormula" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0"))
         (rule "applyOnPV" (formula "3") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "3") (term "1"))
         (rule "simplifyUpdate2" (formula "3") (term "1,1"))
         (rule "simplifyUpdate2" (formula "3") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "1"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1"))
         (rule "simplifyUpdate2" (formula "2") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "0"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "applyOnRigidFormula" (formula "3") (term "1,1"))
         (rule "simplifyUpdate1" (formula "3") (term "1,1,1"))
         (rule "applyOnPV" (formula "3") (term "0,1,1"))
         (rule "replace_known_left" (formula "3") (term "1,1") (ifseqformula "4"))
         (rule "concrete_and_3" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "2") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "1,0"))
         (rule "simplifyUpdate2" (formula "2") (term "0,1,0"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
         (rule "simplifyUpdate2" (formula "2") (term "0,0,0"))
         (rule "simplifyUpdate2" (formula "2") (term "1,0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,1,1"))
         (rule "applyOnPV" (formula "2") (term "0,0,1,1"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0,1,1"))
         (rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "4"))
         (rule "concrete_not_1" (formula "2") (term "1,1"))
         (rule "concrete_and_4" (formula "2") (term "1"))
         (rule "concrete_or_4" (formula "2"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "2,0,0,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "3") (term "0,1"))
         (rule "applyOnPV" (formula "3") (term "0,0,1"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0,1"))
         (rule "replace_known_right" (formula "3") (term "0,1") (ifseqformula "6"))
         (rule "concrete_not_2" (formula "3") (term "1"))
         (rule "concrete_eq_3" (formula "3"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
         (rule "simplifyUpdate1Rigid" (formula "2") (term "1,0,1"))
         (rule "applyOnPV" (formula "2") (term "0,0,1"))
         (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "6"))
         (rule "concrete_and_2" (formula "2") (term "1"))
         (rule "concrete_or_4" (formula "2"))
         (rule "andLeft" (formula "2"))
         (rule "notLeft" (formula "2"))
         (rule "applyOnRigidTerm" (formula "1") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "0,2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "applyOnPV" (formula "2") (term "0"))
         (rule "simplifyUpdate1" (formula "2") (term "1"))
         (rule "applyOnRigidFormula" (formula "5"))
         (rule "applyOnPV" (formula "5") (term "0"))
         (rule "simplifyUpdate1" (formula "5") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,2,0,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,1,2,0,1,0"))
         (rule "applyEqRigid" (formula "8") (term "0,0,0,0,1,1") (ifseqformula "3"))
         (rule "apply_eq_boolean_rigid" (formula "8") (term "0,1,0,0,1,1") (ifseqformula "5"))
         (rule "abstractExecutionNonVoid" (formula "6") (term "1") (inst "#label=_label1") (inst "#v1=v1") (inst "result=result_P_0") (inst "returns=returns_P_0") (inst "exc=exc_P_0") (inst "normal=normal_P_0"))
         (rule "concrete_and_3" (formula "6") (term "0,0,1,1,0,1"))
         (rule "dropEffectlessAbstractUpdate2" (formula "6") (term "0,1"))
         (rule "translateJavaSubInt" (formula "6") (term "2,0,1,0,0,1,1"))
         (rule "translateJavaSubInt" (formula "6") (term "2,0,1,0,0,0,0,0,1,1,0,1"))
         (rule "applySkip2" (formula "6") (term "0,1"))
         (rule "simplifyUpdate2" (formula "6") (term "0,1"))
         (rule "simplifyUpdate2" (formula "6") (term "1,1,1"))
         (rule "impRight" (formula "6"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "notLeft" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1") (term "1"))
         (rule "polySimp_elimSub" (formula "11") (term "2,0,1,0,0,1"))
         (rule "mul_literals" (formula "11") (term "1,2,0,1,0,0,1"))
         (rule "polySimp_elimSub" (formula "1") (term "2,0,1,0,1"))
         (rule "mul_literals" (formula "1") (term "1,2,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "11") (term "2,0,1,0,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "2,0,1,0,1"))
         (rule "applyOnRigidFormula" (formula "4"))
         (rule "applyOnPV" (formula "4") (term "0"))
         (rule "simplifyUpdate1" (formula "4") (term "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "simplifyUpdate2" (formula "3") (term "0"))
         (rule "simplifyUpdate2" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "8"))
         (rule "applyOnPV" (formula "8") (term "0"))
         (rule "simplifyUpdate1" (formula "8") (term "1"))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnRigidFormula" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1,0"))
         (rule "applyOnPV" (formula "3") (term "0,0"))
         (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "5"))
         (rule "concrete_eq_1" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "simplifyUpdate2" (formula "3"))
         (rule "simplifyUpdate2" (formula "4"))
         (rule "notLeft" (formula "3"))
         (rule "applyOnRigidFormula" (formula "2") (term "0"))
         (rule "applyOnRigidFormula" (formula "2") (term "1"))
         (rule "simplifyUpdate2" (formula "2") (term "0,1"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1"))
         (rule "replace_known_left" (formula "2") (term "0,1,1,1") (ifseqformula "3"))
         (rule "concrete_not_1" (formula "2") (term "1,1,1"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1"))
         (rule "concrete_and_4" (formula "2") (term "1"))
         (rule "concrete_or_4" (formula "2"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "applyOnPV" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1"))
         (rule "applyOnRigidFormula" (formula "7"))
         (rule "simplifyUpdate1" (formula "7") (term "1"))
         (rule "applyOnPV" (formula "7") (term "0"))
         (rule "applyOnRigidFormula" (formula "2") (term "1"))
         (rule "simplifyUpdate2" (formula "2") (term "0,1"))
         (rule "simplifyUpdate2" (formula "2") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "2") (term "0"))
         (rule "simplifyUpdate2" (formula "2") (term "1,0"))
         (rule "simplifyUpdate2" (formula "2") (term "0,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "2") (term "0,1"))
         (rule "simplifyUpdate1" (formula "2") (term "1,0,1"))
         (rule "applyOnPV" (formula "2") (term "0,0,1"))
         (rule "replace_known_right" (formula "2") (term "0,1") (ifseqformula "7"))
         (rule "concrete_and_2" (formula "2") (term "1"))
         (rule "concrete_or_4" (formula "2"))
         (rule "andLeft" (formula "2"))
         (rule "notLeft" (formula "2"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,1,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "1,0,0,0"))
         (rule "simplifyUpdate1" (formula "1") (term "2,0,0,0"))
         (rule "applyOnPV" (formula "1") (term "0,0,0,0"))
         (rule "applyOnRigidFormula" (formula "2"))
         (rule "applyOnPV" (formula "2") (term "0"))
         (rule "simplifyUpdate1" (formula "2") (term "1"))
         (rule "applyOnRigidFormula" (formula "6"))
         (rule "applyOnPV" (formula "6") (term "0"))
         (rule "simplifyUpdate1Rigid" (formula "6") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "1") (term "0,2,0,1,0"))
         (rule "applyOnRigidTerm" (formula "1") (term "1,2,0,1,0"))
         (rule "applyOnPV" (formula "1") (term "0,1,2,0,1,0"))
         (rule "applyEqRigid" (formula "6") (term "0,0,0,0,1,1") (ifseqformula "3"))
         (rule "apply_eq_boolean_rigid" (formula "6") (term "0,1,0,0,1,1") (ifseqformula "5"))
         (rule "arrayLengthNotNegative" (formula "4") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
         (rule "leq_literals" (formula "4") (term "0"))
         (rule "concrete_or_1" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
         (rule "inInt" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "arrayLengthIsAnInt" (formula "8") (term "1,2,0,1,0,0,1"))
         (rule "inInt" (formula "1") (term "1"))
         (rule "true_left" (formula "1"))
         (rule "arrayLengthNotNegative" (formula "8") (term "1,2,0,1,0,0,1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "applyOnPV" (formula "1") (term "0,0"))
         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
         (rule "leq_literals" (formula "1") (term "0"))
         (rule "concrete_or_1" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "ifSplit" (formula "8"))
         (branch "if returns true"
            (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applySkip2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if returns false"
            (rule "false_to_not_true" (formula "1") (term "1,1,1"))
            (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applySkip2" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "9") (term "1,1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "5"))
            (rule "simplifyUpdate1" (formula "5") (term "1"))
            (rule "applyOnPV" (formula "5") (term "0"))
            (rule "boolean_not_equal_2" (formula "5"))
            (rule "false_right" (formula "5"))
            (rule "arrayLengthIsAnInt" (formula "6") (term "1,2,0,1,0,0,1"))
            (rule "inInt" (formula "1") (term "1"))
            (rule "true_left" (formula "1"))
            (rule "arrayLengthNotNegative" (formula "6") (term "1,2,0,1,0,0,1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
            (rule "leq_literals" (formula "1") (term "0"))
            (rule "concrete_or_1" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifUnfold" (formula "8") (term "1,1,1") (inst "#boolv=boolv"))
            (rule "variableDeclaration" (formula "8") (term "1,1,1") (newnames "boolv"))
            (rule "inequality_comparison_simple" (formula "8") (term "1,1,1"))
            (rule "sequentialToParallel2" (formula "8") (term "1,1"))
            (rule "applyOnElementary" (formula "8") (term "1,0,1,1"))
            (rule "applyOnRigidTerm" (formula "8") (term "0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "8") (term "2,0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0,1,0,1,1"))
            (rule "applyOnRigidFormula" (formula "8") (term "0,0,1,0,1,1"))
            (rule "simplifyUpdate1" (formula "8") (term "1,0,0,1,0,1,1"))
            (rule "applyOnPV" (formula "8") (term "0,0,0,1,0,1,1"))
            (rule "eqClose" (formula "8") (term "0,0,1,0,1,1"))
            (rule "ifthenelse_true" (formula "8") (term "0,1,0,1,1"))
            (rule "ifSplit" (formula "6"))
            (branch "if returns true"
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "7") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if returns false"
               (rule "false_to_not_true" (formula "1") (term "1,1,1"))
               (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applySkip2" (formula "1"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "7") (term "1,1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "5"))
               (rule "applyOnPV" (formula "5") (term "0"))
               (rule "simplifyUpdate1Rigid" (formula "5") (term "1"))
               (rule "boolean_not_equal_2" (formula "5"))
               (rule "false_right" (formula "5"))
               (rule "ifUnfold" (formula "6") (term "1,1,1") (inst "#boolv=boolv"))
               (rule "variableDeclaration" (formula "6") (term "1,1,1") (newnames "boolv_1"))
               (rule "inequality_comparison_simple" (formula "6") (term "1,1,1"))
               (rule "sequentialToParallel2" (formula "6") (term "1,1"))
               (rule "applyOnElementary" (formula "6") (term "1,0,1,1"))
               (rule "applyOnRigidTerm" (formula "6") (term "0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "6") (term "2,0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "6") (term "1,0,1,0,1,1"))
               (rule "applyOnRigidFormula" (formula "6") (term "0,0,1,0,1,1"))
               (rule "simplifyUpdate1" (formula "6") (term "1,0,0,1,0,1,1"))
               (rule "applyOnPV" (formula "6") (term "0,0,0,1,0,1,1"))
               (rule "eqClose" (formula "6") (term "0,0,1,0,1,1"))
               (rule "ifthenelse_true" (formula "6") (term "0,1,0,1,1"))
               (rule "ifSplit" (formula "8"))
               (branch "if boolv true"
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "9") (term "1,1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if boolv false"
                  (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                  (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applySkip2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "9") (term "1,1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "5"))
                  (rule "applyOnPV" (formula "5") (term "0"))
                  (rule "simplifyUpdate1" (formula "5") (term "1"))
                  (rule "boolean_not_equal_2" (formula "5"))
                  (rule "false_right" (formula "5"))
                  (rule "blockEmpty" (formula "8") (term "1,1"))
                  (rule "returnUnfold" (formula "8") (term "1,1") (inst "#v0=o"))
                  (rule "variableDeclarationAssign" (formula "8") (term "1,1"))
                  (rule "variableDeclaration" (formula "8") (term "1,1") (newnames "o"))
                  (rule "assignment_array2" (formula "8"))
                  (branch "Normal Execution (A != null)"
                     (rule "methodCallReturn" (formula "8") (term "1,1,1"))
                     (rule "assignment" (formula "8") (term "1,1,1"))
                     (rule "sequentialToParallel2" (formula "8") (term "1,1"))
                     (rule "simplifyUpdate2" (formula "8") (term "1,1"))
                     (rule "applyOnElementary" (formula "8") (term "0,1,1"))
                     (rule "applyOnPV" (formula "8") (term "0,0,1,1"))
                     (rule "methodCallEmpty" (formula "8") (term "1,1,1"))
                     (rule "tryEmpty" (formula "8") (term "1,1,1"))
                     (rule "emptyModality" (formula "8") (term "1,1,1"))
                     (rule "applyOnRigidFormula" (formula "8") (term "1,1"))
                     (rule "simplifyUpdate1" (formula "8") (term "1,1,1"))
                     (rule "applyOnPV" (formula "8") (term "0,1,1"))
                     (rule "simplifyUpdate2" (formula "8"))
                     (rule "applyOnRigidFormula" (formula "8") (term "1"))
                     (rule "dropEffectlessAbstractUpdate1" (formula "8") (term "1,1"))
                     (rule "applySkip1" (formula "8") (term "1,1"))
                     (rule "applyOnRigidTerm" (formula "8") (term "0,1"))
                     (rule "dropEffectlessAbstractUpdate1" (formula "8") (term "1,0,1"))
                     (rule "applySkip1" (formula "8") (term "1,0,1"))
                     (rule "simplifyUpdate1Rigid" (formula "8") (term "2,0,1"))
                     (rule "applyOnRigidFormula" (formula "8"))
                     (rule "simplifyUpdate1" (formula "8") (term "0"))
                     (rule "simplifyUpdate1" (formula "8") (term "1"))
                     (rule "applyOnPV" (formula "8") (term "1"))
                     (rule "applyOnRigidTerm" (formula "8") (term "0"))
                     (rule "simplifyUpdate1" (formula "8") (term "1,0"))
                     (rule "simplifyUpdate1" (formula "8") (term "2,0"))
                     (rule "applyOnPV" (formula "8") (term "1,0"))
                     (rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=arr_0"))
                     (rule "ifSplit" (formula "7"))
                     (branch "if boolv_1 true"
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "8") (term "1,1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if boolv_1 false"
                        (rule "false_to_not_true" (formula "1") (term "1,1,1"))
                        (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applySkip2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "simplifyUpdate2" (formula "8") (term "1,1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "6"))
                        (rule "applyOnPV" (formula "6") (term "0"))
                        (rule "simplifyUpdate1" (formula "6") (term "1"))
                        (rule "boolean_not_equal_2" (formula "6"))
                        (rule "false_right" (formula "6"))
                        (rule "blockEmpty" (formula "7") (term "1,1"))
                        (rule "returnUnfold" (formula "7") (term "1,1") (inst "#v0=o"))
                        (rule "variableDeclarationAssign" (formula "7") (term "1,1"))
                        (rule "variableDeclaration" (formula "7") (term "1,1") (newnames "o_1"))
                        (rule "assignment_array2" (formula "7"))
                        (branch "Normal Execution (A != null)"
                           (rule "methodCallReturn" (formula "7") (term "1,1,1"))
                           (rule "assignment" (formula "7") (term "1,1,1"))
                           (rule "sequentialToParallel2" (formula "7") (term "1,1"))
                           (rule "simplifyUpdate2" (formula "7") (term "1,1"))
                           (rule "applyOnElementary" (formula "7") (term "0,1,1"))
                           (rule "applyOnPV" (formula "7") (term "0,0,1,1"))
                           (rule "methodCallEmpty" (formula "7") (term "1,1,1"))
                           (rule "tryEmpty" (formula "7") (term "1,1,1"))
                           (rule "emptyModality" (formula "7") (term "1,1,1"))
                           (rule "notRight" (formula "7"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1,1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,1,1"))
                           (rule "applyOnPV" (formula "1") (term "0,1,1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1") (term "1"))
                           (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,1"))
                           (rule "applySkip1" (formula "1") (term "1,1"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0,1"))
                           (rule "dropEffectlessAbstractUpdate1" (formula "1") (term "1,0,1"))
                           (rule "applySkip1" (formula "1") (term "1,0,1"))
                           (rule "simplifyUpdate1Rigid" (formula "1") (term "2,0,1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "1"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "2,0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                           (rule "applyOnPV" (formula "1") (term "1,0"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_1"))
                           (rule "arrayLengthIsAnInt" (formula "3") (term "1,2,0,1,0,0,1,0,0"))
                           (rule "inInt" (formula "3") (term "1"))
                           (rule "true_left" (formula "3"))
                           (rule "arrayLengthNotNegative" (formula "3") (term "1,2,0,1,0,0,1,0,0"))
                           (rule "simplifyUpdate2" (formula "3"))
                           (rule "applyOnRigidFormula" (formula "3"))
                           (rule "simplifyUpdate1" (formula "3") (term "1"))
                           (rule "applyOnRigidTerm" (formula "3") (term "0"))
                           (rule "applyOnPV" (formula "3") (term "0,0"))
                           (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "8"))
                           (rule "leq_literals" (formula "3") (term "0"))
                           (rule "concrete_or_1" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "arrayLengthIsAnInt" (formula "1") (term "1,2,0,1,0,0,1,0,0"))
                           (rule "inInt" (formula "1") (term "1"))
                           (rule "true_left" (formula "1"))
                           (rule "arrayLengthNotNegative" (formula "1") (term "1,2,0,1,0,0,1,0,0"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0"))
                           (rule "applyOnPV" (formula "1") (term "0,0"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "8"))
                           (rule "leq_literals" (formula "1") (term "0"))
                           (rule "concrete_or_1" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyConcrOnAbstrUpdTerm" (formula "3") (term "0,0"))
                           (rule "elimSelfSingleUpdateTrm" (formula "3") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "3") (term "1,0,0"))
                           (rule "applyOnPV" (formula "3") (term "1,0,0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                           (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "applyConcrOnAbstrUpdTerm" (formula "1") (term "0,0"))
                           (rule "elimSelfSingleUpdateTrm" (formula "1") (term "0,0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
                           (rule "elimSelfSingleUpdateTrm" (formula "1") (term "1,0,0"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "close" (formula "10") (ifseqformula "2"))
                        )
                        (branch "Null Reference (A = null)"
                           (rule "false_right" (formula "8"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applySkip2" (formula "1") (term "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "close" (formula "8") (ifseqformula "1"))
                        )
                        (branch "Index Out of Bounds (A != null, but 14 Out of Bounds!)"
                           (rule "false_right" (formula "8"))
                           (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "less_literals" (formula "1") (term "1,1,1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1,1,1"))
                           (rule "applySkip2" (formula "1") (term "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnRigidFormula" (formula "7"))
                           (rule "simplifyUpdate1Rigid" (formula "7") (term "1"))
                           (rule "applyOnPV" (formula "7") (term "0"))
                           (rule "applyOnRigidTerm" (formula "1") (term "0"))
                           (rule "applyOnPV" (formula "1") (term "0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                           (rule "concrete_and_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (A = null)"
                     (rule "false_right" (formula "9"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applySkip2" (formula "1") (term "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "close" (formula "8") (ifseqformula "1"))
                  )
                  (branch "Index Out of Bounds (A != null, but 14 Out of Bounds!)"
                     (rule "false_right" (formula "9"))
                     (rule "dropEffectlessAbstractUpdate2" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "less_literals" (formula "1") (term "1,1,1,1"))
                     (rule "concrete_or_4" (formula "1") (term "1,1,1"))
                     (rule "applySkip2" (formula "1") (term "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnRigidFormula" (formula "6"))
                     (rule "applyOnPV" (formula "6") (term "0"))
                     (rule "simplifyUpdate1" (formula "6") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0"))
                     (rule "applyOnPV" (formula "1") (term "0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (rule "concrete_and_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
      )
      (branch "Null Reference (A = null)"
         (rule "false_right" (formula "3"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "close" (formula "3") (ifseqformula "1"))
      )
      (branch "Index Out of Bounds (A != null, but 14 Out of Bounds!)"
         (rule "false_right" (formula "3"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "less_literals" (formula "1") (term "1,1,1"))
         (rule "concrete_or_4" (formula "1") (term "1,1"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnRigidFormula" (formula "3"))
         (rule "applyOnPV" (formula "3") (term "0"))
         (rule "simplifyUpdate1" (formula "3") (term "1"))
         (rule "applyOnRigidTerm" (formula "1") (term "0"))
         (rule "applyOnPV" (formula "1") (term "0,0"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (rule "concrete_and_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (A = null)"
      (rule "false_right" (formula "5"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "close" (formula "4") (ifseqformula "1"))
   )
   (branch "Index Out of Bounds (A != null, but 14 Out of Bounds!)"
      (rule "false_right" (formula "5"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "less_literals" (formula "1") (term "1,1,1"))
      (rule "concrete_or_4" (formula "1") (term "1,1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnRigidFormula" (formula "3"))
      (rule "simplifyUpdate1" (formula "3") (term "1"))
      (rule "applyOnPV" (formula "3") (term "0"))
      (rule "applyOnRigidTerm" (formula "1") (term "0"))
      (rule "applyOnPV" (formula "1") (term "0,0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (rule "concrete_and_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
