\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Dec 12 18:15:10 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Dec 12 18:15:10 CET 2016
name=seqDepthSwap
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "f86a0837c850c7283f402fe2ce158a86f40b0434"))

(autoModeTime "4746351483")

(branch "dummy ID"
(rule "cut" (newnames "f_s,f_i,f_j") (inst "cutFormula=seqDepth(f_s) = Z(0(#))"))
(branch "CUT: seqDepth(f_s) = 0 TRUE"
   (rule "seqDepthZero" (inst "s=s") (inst "i=i"))
   (rule "allLeftHide" (formula "1") (inst "t=f_s"))
   (rule "impLeft" (formula "1"))
   (branch "Case 1"
      (rule "close" (formula "2") (ifseqformula "1"))
   )
   (branch "Case 2"
      (rule "cut" (inst "cutFormula=!\\forall int i;
   (   leq(Z(0(#)), i) & lt(i, seqLen(f_s))
    ->   Seq::instance(any::seqGet(seqSwap(f_s,
                                           f_i,
                                           f_j),
                                   i))
       = FALSE)"))
      (branch "CUT: !forall int i; ( 0 <= i & i < f_s.length -> Seq::instance(seqSwap(f_s, f_i, f_j)[i]) = FALSE) TRUE"
         (rule "notLeft" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "impRight" (formula "4"))
         (rule "notRight" (formula "5"))
         (rule "notLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "allRight" (formula "8") (inst "sk=i_0"))
         (rule "impRight" (formula "8"))
         (rule "andLeft" (formula "1"))
         (rule "notRight" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "9"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "seqDepthNonNegative" (formula "9") (term "0"))
         (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
         (rule "qeq_literals" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "seqDepthNonNegative" (formula "10") (term "0"))
         (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "11"))
         (rule "add_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "1"))
         (rule "mul_literals" (formula "11") (term "1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "leq_literals" (formula "11") (term "0"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "false_right" (formula "11"))
         (rule "getOfSwap" (formula "2") (term "0,0"))
         (rule "ifthenelse_negated" (formula "2") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,0,0"))
         (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "6"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,0"))
         (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,0"))
         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "7"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
         (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "seqDepthNonNegative" (formula "1") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
         (rule "leq_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "nnf_imp2or" (formula "9") (term "0"))
         (rule "nnf_notAnd" (formula "9") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
         (rule "ifthenelse_split" (formula "2") (term "0,0"))
         (branch "i_0 = f_i TRUE"
            (rule "applyEqRigid" (formula "5") (term "1,1") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "2"))
            (rule "allLeft" (formula "8") (inst "t=f_j"))
            (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "8") (term "0,0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "7"))
            (rule "andLeft" (formula "8"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "times_zero_1" (formula "8") (term "1,0"))
            (rule "add_zero_right" (formula "8") (term "0"))
            (rule "leq_literals" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
         (branch "i_0 = f_i FALSE"
            (rule "ifthenelse_split" (formula "2") (term "0,0"))
            (branch "i_0 = f_j TRUE"
               (rule "applyEqRigid" (formula "5") (term "1,1") (ifseqformula "2"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
               (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "2"))
               (rule "allLeft" (formula "8") (inst "t=f_i"))
               (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
               (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "8") (term "0,0,1"))
               (rule "leq_literals" (formula "8") (term "0,1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "4"))
               (rule "qeq_literals" (formula "8") (term "0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
            (branch "i_0 = f_j FALSE"
               (rule "allLeft" (formula "9") (inst "t=i_0"))
               (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
               (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
               (rule "add_literals" (formula "9") (term "0,0,1"))
               (rule "leq_literals" (formula "9") (term "0,1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "9"))
               (rule "qeq_literals" (formula "3") (term "0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
         )
      )
      (branch "CUT: !forall int i; ( 0 <= i & i < f_s.length -> Seq::instance(seqSwap(f_s, f_i, f_j)[i]) = FALSE) FALSE"
         (rule "notRight" (formula "3"))
         (rule "defseqDepthZero" (inst "s=s") (inst "i=i"))
         (rule "allLeftHide" (formula "1") (inst "t=seqSwap(f_s, f_i, f_j)"))
         (rule "impLeft" (formula "1"))
         (branch "Case 1"
            (builtin "One Step Simplification" (formula "2"))
            (builtin "One Step Simplification" (formula "1"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "impRight" (formula "5"))
            (rule "notLeft" (formula "1"))
            (rule "notRight" (formula "6"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "allRight" (formula "9") (inst "sk=i_1"))
            (rule "impRight" (formula "9"))
            (rule "andLeft" (formula "1"))
            (rule "notRight" (formula "11"))
            (rule "lenOfSwap" (formula "3") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "applyEqRigid" (formula "11") (term "1") (ifseqformula "10"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "polySimp_elimOne" (formula "7") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "seqDepthNonNegative" (formula "10") (term "0"))
            (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "11"))
            (rule "qeq_literals" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "getOfSwap" (formula "8") (term "0,0,0,1,0"))
            (rule "ifthenelse_negated" (formula "8") (term "0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,0,0,0,0,0,1,0"))
            (rule "replace_known_left" (formula "8") (term "1,0,0,0,0,0,0,1,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,0,1,0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0,0,0,0,1,0") (ifseqformula "4"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,0,0,1,0"))
            (rule "replace_known_left" (formula "8") (term "1,0,0,0,0,1,0") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0,0,1,0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0,0,1,0") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "seqDepthNonNegative" (formula "11") (term "0"))
            (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "12"))
            (rule "add_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "1"))
            (rule "mul_literals" (formula "12") (term "1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "false_right" (formula "12"))
            (rule "getOfSwap" (formula "2") (term "0,0"))
            (rule "ifthenelse_negated" (formula "2") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,0,0"))
            (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,0"))
            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0,0"))
            (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
            (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "8"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "seqDepthNonNegative" (formula "1") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
            (rule "leq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "10") (term "0"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0"))
            (rule "ifthenelse_split" (formula "2") (term "0,0"))
            (branch "i_1 = f_i TRUE"
               (rule "applyEqRigid" (formula "5") (term "1,1") (ifseqformula "2"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
               (rule "allLeft" (formula "9") (inst "t=f_j"))
               (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "9") (term "0,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "9"))
               (rule "andLeft" (formula "7"))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "1,1,0"))
               (rule "times_zero_1" (formula "7") (term "1,0"))
               (rule "add_literals" (formula "7") (term "0"))
               (rule "leq_literals" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
            (branch "i_1 = f_i FALSE"
               (rule "ifthenelse_split" (formula "2") (term "0,0"))
               (branch "i_1 = f_j TRUE"
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "2"))
                  (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "2"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                  (rule "allLeft" (formula "9") (inst "t=f_i"))
                  (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "9") (term "0,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "9"))
                  (rule "andLeft" (formula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "6"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,1,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0"))
                  (rule "add_literals" (formula "6") (term "0"))
                  (rule "leq_literals" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
               (branch "i_1 = f_j FALSE"
                  (rule "allLeft" (formula "10") (inst "t=i_1"))
                  (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                  (rule "add_literals" (formula "10") (term "0,0,1"))
                  (rule "leq_literals" (formula "10") (term "0,1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "10") (term "0"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "closeFalse" (formula "10"))
               )
            )
         )
         (branch "Case 2"
            (builtin "One Step Simplification" (formula "3"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "impRight" (formula "5"))
            (rule "notLeft" (formula "1"))
            (rule "notRight" (formula "6"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "5"))
            (rule "eqSymm" (formula "9"))
            (rule "close" (formula "9") (ifseqformula "8"))
         )
      )
   )
)
(branch "CUT: seqDepth(f_s) = 0 FALSE"
   (rule "defseqDepthSucc" (inst "n=n") (inst "s=s") (inst "j=j") (inst "i=i"))
   (rule "allLeftHide" (formula "1") (inst "t=sub(seqDepth(f_s), Z(1(#)))"))
   (rule "allLeft" (formula "1") (inst "t=f_s"))
   (rule "equiv_Left" (formula "1"))
   (rule "allLeftHide" (formula "3") (inst "t=seqSwap(f_s, f_i, f_j)"))
   (rule "equiv_Left" (formula "3"))
   (rule "hide_left" (formula "1"))
   (rule "hide_left" (formula "3"))
   (rule "impLeft" (formula "1"))
   (branch "Case 1"
      (builtin "One Step Simplification" (formula "1"))
      (rule "impRight" (formula "4"))
      (rule "notLeft" (formula "1"))
      (rule "notRight" (formula "5"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_elimSub" (formula "7") (term "0,1"))
      (rule "mul_literals" (formula "7") (term "1,0,1"))
      (rule "polySimp_addLiterals" (formula "7") (term "1"))
      (rule "add_zero_right" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "closeTrue" (formula "7"))
   )
   (branch "Case 2"
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "impLeft" (formula "4"))
      (branch "Case 1"
         (rule "andRight" (formula "4"))
         (branch "Case 1"
            (rule "andRight" (formula "4"))
            (branch "Case 1"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "impRight" (formula "6"))
               (rule "notRight" (formula "7"))
               (rule "notLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "exLeft" (formula "6") (inst "sk=j_2"))
               (rule "andLeft" (formula "6"))
               (rule "andLeft" (formula "6"))
               (rule "andLeft" (formula "6"))
               (rule "allRight" (formula "12") (inst "sk=i_2"))
               (rule "impRight" (formula "12"))
               (rule "andLeft" (formula "1"))
               (rule "orRight" (formula "14"))
               (rule "notRight" (formula "14"))
               (rule "polySimp_elimSub" (formula "13") (term "0"))
               (rule "mul_literals" (formula "13") (term "1,0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,1,1,0"))
               (rule "mul_literals" (formula "8") (term "1,1,1,1,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1"))
               (rule "mul_literals" (formula "12") (term "1,1"))
               (rule "polySimp_elimSub" (formula "15") (term "1"))
               (rule "mul_literals" (formula "15") (term "1,1"))
               (rule "polySimp_addComm0" (formula "13") (term "0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1,1,0"))
               (rule "polySimp_addComm0" (formula "12") (term "1"))
               (rule "polySimp_addComm0" (formula "15") (term "1"))
               (rule "lenOfSwap" (formula "3") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "10") (term "0"))
               (rule "inEqSimp_leqRight" (formula "15"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "14"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0"))
               (rule "leq_literals" (formula "16") (term "0"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "false_right" (formula "16"))
               (rule "seqDepthNonNegative" (formula "15") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "15"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "seqDepthNonNegative" (formula "15") (term "0"))
               (rule "seqDepthNonNegative" (formula "14") (term "0"))
               (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "15"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1"))
               (rule "getOfSwap" (formula "3") (term "0,0"))
               (rule "ifthenelse_negated" (formula "3") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "seqDepthNonNegative" (formula "10") (term "1,1,1,1,0"))
               (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "16"))
               (rule "leq_literals" (formula "10") (term "0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "seqDepthNonNegative" (formula "14") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "16"))
               (rule "leq_literals" (formula "14") (term "0"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "seqDepthNonNegative" (formula "15") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
               (rule "leq_literals" (formula "15") (term "0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "getOfSwap" (formula "2") (term "0,0"))
               (rule "ifthenelse_negated" (formula "2") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "seqDepthNonNegative" (formula "1") (term "0"))
               (rule "seqDepthNonNegative" (formula "2") (term "0"))
               (rule "seqDepthNonNegative" (formula "3") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "17"))
               (rule "leq_literals" (formula "3") (term "0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "seqDepthNonNegative" (formula "2") (term "0"))
               (rule "nnf_imp2or" (formula "11") (term "0"))
               (rule "seqDepthNonNegative" (formula "11") (term "1,1,1,1,0"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "nnf_notAnd" (formula "11") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0"))
               (rule "commute_or" (formula "11") (term "1,0"))
               (rule "seqDepthNonNegative" (formula "11") (term "1,1,0,1,0"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "shift_paren_or" (formula "11") (term "0"))
               (rule "seqDepthNonNegative" (formula "11") (term "1,1,1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "ifthenelse_split" (formula "4") (term "0,0"))
               (branch "i_2 = f_i TRUE"
                  (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "4"))
                  (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "4"))
                  (rule "seqDepthNonNegative" (formula "3") (term "0"))
                  (rule "seqDepthNonNegative" (formula "3") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "16"))
                  (rule "leq_literals" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "seqDepthNonNegative" (formula "2") (term "0"))
                  (rule "seqGetAlphaCast" (formula "14") (term "0,0"))
                  (rule "castedGetAny" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "seqGetAlphaCast" (formula "13") (term "0,0"))
                  (rule "castDel" (formula "13") (term "0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "lenNonNegative" (formula "9") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "allLeft" (formula "11") (inst "t=f_j"))
                  (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "11") (term "0,0,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1"))
                  (rule "leq_literals" (formula "11") (term "0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "11"))
                  (rule "andLeft" (formula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0"))
                  (rule "add_zero_right" (formula "10") (term "0"))
                  (rule "leq_literals" (formula "10"))
                  (rule "closeFalse" (formula "10"))
               )
               (branch "i_2 = f_i FALSE"
                  (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "17"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "seqDepthNonNegative" (formula "3") (term "0"))
                  (rule "seqDepthNonNegative" (formula "3") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "17"))
                  (rule "leq_literals" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "seqDepthNonNegative" (formula "2") (term "0"))
                  (rule "seqGetAlphaCast" (formula "15") (term "0,0"))
                  (rule "castedGetAny" (formula "15") (term "0"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "seqGetAlphaCast" (formula "14") (term "0,0"))
                  (rule "castDel" (formula "14") (term "0"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "lenNonNegative" (formula "10") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "ifthenelse_split" (formula "4") (term "0,0"))
                  (branch "i_2 = f_j TRUE"
                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqRigid" (formula "7") (term "1,1") (ifseqformula "4"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "4"))
                     (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "4"))
                     (rule "seqDepthNonNegative" (formula "3") (term "0"))
                     (rule "seqDepthNonNegative" (formula "3") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "17"))
                     (rule "leq_literals" (formula "3") (term "0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "seqDepthNonNegative" (formula "2") (term "0"))
                     (rule "allLeft" (formula "11") (inst "t=f_i"))
                     (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "1,0") (ifseqformula "8"))
                     (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1,0"))
                     (rule "add_literals" (formula "11") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "11") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "6"))
                     (rule "qeq_literals" (formula "11") (term "0,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "11"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_literals" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch "i_2 = f_j FALSE"
                     (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "18"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "seqDepthNonNegative" (formula "2") (term "0"))
                     (rule "seqDepthNonNegative" (formula "3") (term "0"))
                     (rule "seqDepthNonNegative" (formula "3") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "18"))
                     (rule "leq_literals" (formula "3") (term "0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "allLeft" (formula "12") (inst "t=i_2"))
                     (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "4"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,1"))
                     (rule "leq_literals" (formula "12") (term "0,1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "12") (term "0,0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "6"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "leq_literals" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
            )
            (branch "Case 2"
               (rule "exLeft" (formula "2") (inst "sk=j_4"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "exRightHide" (formula "7") (inst "t=\\if (j_4 = f_i)
    \\then (f_j)
    \\else (\\if (j_4 = f_j)  \\then (f_i)  \\else (j_4))"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "impRight" (formula "9"))
               (rule "notRight" (formula "10"))
               (rule "notLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_elimSub" (formula "10") (term "0"))
               (rule "mul_literals" (formula "10") (term "1,0"))
               (rule "polySimp_elimSub" (formula "12") (term "1,1"))
               (rule "mul_literals" (formula "12") (term "1,1,1"))
               (rule "polySimp_elimSub" (formula "9") (term "1"))
               (rule "mul_literals" (formula "9") (term "1,1"))
               (rule "polySimp_elimSub" (formula "5") (term "1,1,1,0"))
               (rule "mul_literals" (formula "5") (term "1,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0"))
               (rule "polySimp_addComm0" (formula "12") (term "1,1"))
               (rule "polySimp_addComm0" (formula "9") (term "1"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1,1,0"))
               (rule "lenOfSwap" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "mul_literals" (formula "10") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
               (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "10"))
               (rule "mul_literals" (formula "13") (term "1,0,0"))
               (rule "add_literals" (formula "13") (term "0,0"))
               (rule "leq_literals" (formula "13") (term "0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "false_right" (formula "13"))
               (rule "seqDepthNonNegative" (formula "12") (term "0,1"))
               (rule "getOfSwap" (formula "13") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "ifthenelse_negated" (formula "13") (term "0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0,0,1,0"))
               (rule "replace_known_left" (formula "13") (term "1,0,0,0,0,0,1,0") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,1,0"))
               (rule "replace_known_left" (formula "13") (term "0,0,0,0,0,1,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,1,0"))
               (rule "replace_known_left" (formula "13") (term "1,0,0,0,1,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,1,0"))
               (rule "replace_known_left" (formula "13") (term "0,0,0,1,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "seqDepthNonNegative" (formula "10") (term "0"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10"))
               (rule "mul_literals" (formula "10") (term "1"))
               (rule "seqDepthNonNegative" (formula "12") (term "0"))
               (rule "seqDepthNonNegative" (formula "13") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "13"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "seqDepthNonNegative" (formula "11") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "seqDepthNonNegative" (formula "7") (term "1,1,1,1,0"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "13"))
               (rule "leq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "seqDepthNonNegative" (formula "12") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
               (rule "leq_literals" (formula "12") (term "0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "getOfSwap" (formula "2") (term "0,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "ifthenelse_negated" (formula "2") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "seqDepthNonNegative" (formula "14") (term "1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "13"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "seqDepthNonNegative" (formula "14") (term "0,1"))
               (rule "getOfSwap" (formula "15") (term "0,0,1"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "ifthenelse_negated" (formula "15") (term "0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1"))
               (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,1"))
               (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0,0,1"))
               (rule "replace_known_left" (formula "15") (term "0,0,0,0,0,0,1") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0,1"))
               (rule "replace_known_left" (formula "15") (term "0,0,0,0,0,1") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,0,1"))
               (rule "replace_known_left" (formula "15") (term "0,0,0,0,1") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1"))
               (rule "replace_known_left" (formula "15") (term "0,0,0,1") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "seqDepthNonNegative" (formula "2") (term "0"))
               (rule "seqDepthNonNegative" (formula "3") (term "0"))
               (rule "getOfSwap" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
               (rule "true_left" (formula "1"))
               (rule "seqDepthNonNegative" (formula "14") (term "1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "13"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "seqDepthNonNegative" (formula "14") (term "0,1"))
               (rule "nnf_imp2or" (formula "7") (term "0"))
               (rule "seqDepthNonNegative" (formula "7") (term "1,1,1,1,0"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "13"))
               (rule "leq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "nnf_notAnd" (formula "7") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
               (rule "commute_and_2" (formula "14"))
               (rule "seqDepthNonNegative" (formula "14") (term "0,1,0"))
               (rule "seqDepthNonNegative" (formula "14") (term "1,1,1,0"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "13"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "commute_or" (formula "7") (term "1,0"))
               (rule "seqDepthNonNegative" (formula "7") (term "1,1,0,1,0"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "13"))
               (rule "leq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "shift_paren_or" (formula "7") (term "0"))
               (rule "seqDepthNonNegative" (formula "7") (term "1,1,1,0,0"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "13"))
               (rule "leq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "seqGetAlphaCast" (formula "11") (term "0,0"))
               (rule "castedGetAny" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "seqGetAlphaCast" (formula "10") (term "0,0"))
               (rule "castDel" (formula "10") (term "0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "ifthenelse_split" (formula "2") (term "0,0"))
               (branch " if (j_4 = f_i) then (f_j) else (if (j_4 = f_j) then (f_i) else (j_4)) = f_i TRUE"
                  (rule "replace_known_left" (formula "15") (term "0,0,0,1,0") (ifseqformula "2"))
                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "2")))
                  (rule "applyEqRigid" (formula "15") (term "0,1,0,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0"))
                  (rule "applyEq" (formula "15") (term "0,0,0,0") (ifseqformula "2"))
                  (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                  (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "seqDepthNonNegative" (formula "3") (term "0"))
                  (rule "seqDepthNonNegative" (formula "15") (term "1,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "14"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "seqDepthNonNegative" (formula "15") (term "0,0"))
                  (rule "lenNonNegative" (formula "10") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch "j_4 = f_i TRUE"
                     (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "16") (term "1,0,0,1") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "12") (term "1,0,0") (ifseqformula "2"))
                     (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "applyEqRigid" (formula "13") (term "1,0,0") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "10") (term "1,1") (ifseqformula "2"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
                     (rule "applyEqRigid" (formula "12") (term "2,0,0") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "4") (term "1,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "2,0,0") (ifseqformula "3"))
                     (rule "applyEqRigid" (formula "13") (term "1,0,0") (ifseqformula "3"))
                     (rule "close" (formula "13") (ifseqformula "10"))
                  )
                  (branch "j_4 = f_i FALSE"
                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "15")))
                     (rule "applyEqRigid" (formula "12") (term "1,0,0") (ifseqformula "2"))
                     (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "applyEqRigid" (formula "11") (term "1,1") (ifseqformula "2"))
                     (rule "applyEq" (formula "12") (term "1,0,0") (ifseqformula "2"))
                     (rule "close" (formula "16") (ifseqformula "12"))
                  )
               )
               (branch " if (j_4 = f_i) then (f_j) else (if (j_4 = f_j) then (f_i) else (j_4)) = f_i FALSE"
                  (rule "replace_known_right" (formula "15") (term "0,0,0,1") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
                  (rule "seqDepthNonNegative" (formula "2") (term "0"))
                  (rule "seqDepthNonNegative" (formula "15") (term "1,1,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "13"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "seqDepthNonNegative" (formula "15") (term "0,1,0"))
                  (rule "lenNonNegative" (formula "9") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "ifthenelse_split" (formula "14") (term "0"))
                  (branch "j_4 = f_i TRUE"
                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
                     (rule "replace_known_left" (formula "17") (term "0,1,2,0,0,1,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "5")))
                     (rule "inEqSimp_homoInEq0" (formula "17") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                     (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "1"))
                     (rule "replace_known_left" (formula "17") (term "1,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "10") (term "1,0,0") (ifseqformula "1"))
                     (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_geqRight" (formula "15"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "12"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "j_4 = f_i FALSE"
                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                     (rule "replace_known_right" (formula "2") (term "0,0,1,0,0,0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
                     (rule "replace_known_right" (formula "17") (term "0,0,1,0,0,0,1") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "8")) (ifInst ""  (formula "15")) (ifInst ""  (formula "12")) (ifInst ""  (formula "15")) (ifInst ""  (formula "11")))
                     (rule "inEqSimp_leqRight" (formula "17"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "13"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                     (rule "andLeft" (formula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "10"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "1,1,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0"))
                     (rule "add_literals" (formula "10") (term "0"))
                     (rule "leq_literals" (formula "10"))
                     (rule "closeFalse" (formula "10"))
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "close" (formula "4") (ifseqformula "3"))
         )
      )
      (branch "Case 2"
         (builtin "One Step Simplification" (formula "1"))
         (rule "impRight" (formula "6"))
         (rule "notRight" (formula "7"))
         (rule "notLeft" (formula "2"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "exLeft" (formula "6") (inst "sk=j_3"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "polySimp_elimSub" (formula "11") (term "0,1"))
         (rule "mul_literals" (formula "11") (term "1,0,1"))
         (rule "polySimp_addLiterals" (formula "11") (term "1"))
         (rule "add_zero_right" (formula "11") (term "1"))
         (rule "close" (formula "12") (ifseqformula "11"))
      )
   )
)
)

}
