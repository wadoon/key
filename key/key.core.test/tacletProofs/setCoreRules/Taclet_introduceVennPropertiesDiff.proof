\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Feb 10 14:23:52 CET 2020
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation "#Proof Obligation Settings
#Mon Feb 10 14:23:52 CET 2020
name=introduceVennPropertiesDiff
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "niklas" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "620")

(branch "dummy ID"
(rule "cut" (inst "cutFormula=    SetUnion(f_set, f_set1)
  = SetUnion(SetUnion(SetDifference(f_set, f_set1),
                      SetIntersection(f_set, f_set1)),
             SetDifference(f_set1, f_set))
&   f_set
  = SetUnion(SetDifference(f_set, f_set1),
             SetIntersection(f_set, f_set1))
&   f_set1
  = SetUnion(SetDifference(f_set1, f_set),
             SetIntersection(f_set, f_set1))") (userinteraction))
(branch "CUT: SetUnion(f_set, f_set1) = SetUnion(SetUnion(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)), SetDifference(f_set1, f_set)) & f_set = SetUnion(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)) & f_set1 = SetUnion(SetDifference(f_set1, f_set), SetIntersection(f_set, f_set1)) TRUE"
   (rule "andLeft" (formula "1") (userinteraction))
   (rule "andLeft" (formula "1") (userinteraction))
   (rule "notRight" (formula "4") (userinteraction))
   (rule "impLeft" (formula "1") (userinteraction))
   (branch "Case 1"
      (rule "eq_sides" (formula "4") (userinteraction))
      (rule "i_minus_i_is_zero" (formula "4") (term "0") (userinteraction))
      (rule "equal_literals" (formula "4") (userinteraction))
      (rule "closeTrue" (formula "4") (userinteraction))
   )
   (branch "Case 2"
      (rule "notLeft" (formula "1") (userinteraction))
      (rule "andRight" (formula "4") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "4") (userinteraction))
         (branch "Case 1"
            (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "2") (userinteraction))
            (rule "cardin_union" (formula "4") (term "0") (userinteraction))
            (rule "cardin_of_empty" (inst "set=set") (userinteraction))
            (rule "cut" (inst "cutFormula=  SetIntersection(SetDifference(f_set, f_set1),
                  SetIntersection(f_set, f_set1))
= SetEmpty") (userinteraction))
            (branch "CUT: SetIntersection(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)) = SetEmpty TRUE"
               (rule "applyEqRigid" (formula "6") (term "0,1,0") (ifseqformula "1") (userinteraction))
               (rule "instAll" (formula "6") (term "0,1,0") (ifseqformula "2") (userinteraction))
               (rule "equiv_left" (formula "1") (userinteraction))
               (branch "Case 1"
                  (rule "applyEqRigid" (formula "8") (term "1,0") (ifseqformula "1") (userinteraction))
                  (rule "sub_zero_2" (formula "8") (term "0") (userinteraction))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "closeTrue" (formula "8"))
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "closeTrue" (formula "7"))
               )
            )
            (branch "CUT: SetIntersection(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)) = SetEmpty FALSE"
               (rule "empty_right" (formula "5") (inst "el=el") (userinteraction))
               (rule "exLeft" (formula "1") (inst "sk=el_0") (userinteraction))
               (rule "intersect" (formula "1") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "difference" (formula "1") (userinteraction))
               (rule "andLeft" (formula "1") (userinteraction))
               (rule "intersect" (formula "3") (userinteraction))
               (rule "andLeft" (formula "3") (userinteraction))
               (rule "notLeft" (formula "2") (userinteraction))
               (rule "closeAntec" (formula "2") (ifseqformula "7") (userinteraction))
            )
         )
         (branch "Case 2"
            (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "1") (userinteraction))
            (rule "cardin_union" (formula "4") (term "0") (userinteraction))
            (rule "cardin_union" (formula "4") (term "0,0,0") (userinteraction))
            (rule "cut" (inst "cutFormula=  SetIntersection(SetDifference(f_set, f_set1),
                  SetIntersection(f_set, f_set1))
= SetEmpty") (userinteraction))
            (branch "CUT: SetIntersection(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)) = SetEmpty TRUE"
               (rule "applyEq" (formula "5") (term "0,1,0,0,0") (ifseqformula "1") (userinteraction))
               (rule "cardin_empty" (formula "5") (term "1,0,0,0") (userinteraction))
               (rule "sub_zero_2" (formula "5") (term "0,0,0") (userinteraction))
               (rule "cut" (inst "cutFormula=  SetIntersection(SetUnion(SetDifference(f_set, f_set1),
                           SetIntersection(f_set,
                                           f_set1)),
                  SetDifference(f_set1, f_set))
= SetEmpty") (userinteraction))
               (branch "CUT: SetIntersection(SetUnion(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)), SetDifference(f_set1, f_set)) = SetEmpty TRUE"
                  (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "1") (userinteraction))
                  (rule "cardin_empty" (formula "6") (term "1,0") (userinteraction))
                  (rule "sub_zero_2" (formula "6") (term "0") (userinteraction))
                  (rule "eqClose" (formula "6") (userinteraction))
                  (rule "closeTrue" (formula "6") (userinteraction))
               )
               (branch "CUT: SetIntersection(SetUnion(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)), SetDifference(f_set1, f_set)) = SetEmpty FALSE"
                  (rule "hide_right" (formula "6") (userinteraction))
                  (rule "hide_left" (formula "4") (userinteraction))
                  (rule "hide_left" (formula "3") (userinteraction))
                  (rule "hide_left" (formula "2") (userinteraction))
                  (rule "hide_left" (formula "1") (userinteraction))
                  (rule "empty_right" (formula "1") (inst "el=el") (userinteraction))
                  (rule "exLeft" (formula "1") (inst "sk=el_0"))
                  (rule "union_commutative" (formula "2") (term "0,0"))
                  (rule "union_commutative" (formula "1") (term "0,1"))
                  (rule "distribIntersOverUnionLeft" (formula "2") (term "0"))
                  (rule "intersect_disjoint2" (formula "2") (term "1,0"))
                  (rule "union_commutative" (formula "2") (term "0"))
                  (rule "union_of_empty2" (formula "2") (term "0"))
                  (rule "intersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "equalSetsRight" (formula "3") (inst "el=el"))
                  (rule "element_of_empty" (formula "3") (term "1,0"))
                  (rule "concrete_eq_4" (formula "3") (term "0"))
                  (rule "allRight" (formula "3") (inst "sk=el_1"))
                  (rule "notRight" (formula "3"))
                  (rule "union" (formula "2"))
                  (rule "difference" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "notLeft" (formula "4"))
                  (rule "intersect_simplify" (formula "2") (term "0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "4"))
                  (rule "concrete_or_2" (formula "2"))
                  (rule "intersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "difference" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "close" (formula "6") (ifseqformula "3"))
               )
            )
            (branch "CUT: SetIntersection(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)) = SetEmpty FALSE"
               (rule "hide_right" (formula "5") (userinteraction))
               (rule "hide_left" (formula "3") (userinteraction))
               (rule "hide_left" (formula "2") (userinteraction))
               (rule "hide_left" (formula "1") (userinteraction))
               (rule "empty_right" (formula "1") (inst "el=el") (userinteraction))
               (rule "intersect_disjoint1" (formula "2") (term "0"))
               (rule "eqClose" (formula "2"))
               (rule "closeTrue" (formula "2"))
            )
         )
      )
      (branch "Case 2"
         (rule "hide_left" (formula "1") (userinteraction))
         (rule "hide_left" (formula "1") (userinteraction))
         (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "1") (userinteraction))
         (rule "cardin_union" (formula "2") (term "0") (userinteraction))
         (rule "cut" (inst "cutFormula=  SetIntersection(SetDifference(f_set1, f_set),
                  SetIntersection(f_set, f_set1))
= SetEmpty") (userinteraction))
         (branch "CUT: SetIntersection(SetDifference(f_set1, f_set), SetIntersection(f_set, f_set1)) = SetEmpty TRUE"
            (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "1") (userinteraction))
            (rule "cardin_empty" (formula "3") (term "1,0") (userinteraction))
            (rule "sub_zero_2" (formula "3") (term "0") (userinteraction))
            (rule "eqClose" (formula "3") (userinteraction))
            (rule "closeTrue" (formula "3") (userinteraction))
         )
         (branch "CUT: SetIntersection(SetDifference(f_set1, f_set), SetIntersection(f_set, f_set1)) = SetEmpty FALSE"
            (rule "hide_right" (formula "3") (userinteraction))
            (rule "hide_left" (formula "1") (userinteraction))
            (rule "empty_right" (formula "1") (inst "el=el") (userinteraction))
            (rule "exLeft" (formula "1") (inst "sk=el_0"))
            (rule "intersect_commutative" (formula "2") (term "0"))
            (rule "intersect_commutative" (formula "1") (term "1"))
            (rule "equalSetsRight" (formula "2") (inst "el=el"))
            (rule "element_of_empty" (formula "2") (term "1,0"))
            (rule "concrete_eq_4" (formula "2") (term "0"))
            (rule "allRight" (formula "2") (inst "sk=el_1"))
            (rule "notRight" (formula "2"))
            (rule "intersect" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "intersect" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "intersect" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "difference" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "notLeft" (formula "5"))
            (rule "close" (formula "5") (ifseqformula "3"))
         )
      )
   )
)
(branch "CUT: SetUnion(f_set, f_set1) = SetUnion(SetUnion(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)), SetDifference(f_set1, f_set)) & f_set = SetUnion(SetDifference(f_set, f_set1), SetIntersection(f_set, f_set1)) & f_set1 = SetUnion(SetDifference(f_set1, f_set), SetIntersection(f_set, f_set1)) FALSE"
   (rule "hide_right" (formula "2") (userinteraction))
   (rule "eqSymm" (formula "1") (term "0,0"))
   (rule "union_commutative" (formula "1") (term "1,1,0"))
   (rule "eqSymm" (formula "1") (term "1"))
   (rule "union_commutative" (formula "1") (term "0,0,0,0"))
   (rule "eqSymm" (formula "1") (term "1,0"))
   (rule "union_commutative" (formula "1") (term "0,1"))
   (rule "commute_and" (formula "1") (term "0"))
   (rule "commute_and_2" (formula "1"))
   (rule "cut_direct" (formula "1") (term "1,0"))
   (branch "CUT: SetUnion(SetIntersection(f_set, f_set1), SetDifference(f_set1, f_set)) = f_set1 TRUE"
       (builtin "One Step Simplification" (formula "2"))
      (rule "cut_direct" (formula "2") (term "0"))
      (branch "CUT: SetUnion(SetIntersection(f_set, f_set1), SetDifference(f_set, f_set1)) = f_set TRUE"
          (builtin "One Step Simplification" (formula "3"))
         (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "1"))
         (rule "equalSetsRight" (formula "3") (inst "el=el"))
         (rule "allRight" (formula "3") (inst "sk=el_0"))
         (rule "union" (formula "3") (term "1"))
         (rule "union" (formula "3") (term "0"))
         (rule "difference" (formula "3") (term "1,0"))
         (rule "cnf_rightDist" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "closeTrue" (formula "3"))
      )
      (branch "CUT: SetUnion(SetIntersection(f_set, f_set1), SetDifference(f_set, f_set1)) = f_set FALSE"
          (builtin "One Step Simplification" (formula "3"))
         (rule "false_right" (formula "3"))
         (rule "equalSetsRight" (formula "2") (inst "el=el"))
         (rule "allRight" (formula "2") (inst "sk=el_0"))
         (rule "union" (formula "2") (term "0"))
         (rule "intersect" (formula "2") (term "0,0"))
         (rule "difference" (formula "2") (term "1,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeTrue" (formula "2"))
      )
   )
   (branch "CUT: SetUnion(SetIntersection(f_set, f_set1), SetDifference(f_set1, f_set)) = f_set1 FALSE"
       (builtin "One Step Simplification" (formula "2"))
      (rule "false_right" (formula "2"))
      (rule "equalSetsRight" (formula "1") (inst "el=el"))
      (rule "allRight" (formula "1") (inst "sk=el_0"))
      (rule "union" (formula "1") (term "0"))
      (rule "intersect" (formula "1") (term "0,0"))
      (rule "difference" (formula "1") (term "1,0"))
      (rule "commute_and" (formula "1") (term "1,0"))
      (rule "cnf_rightDist" (formula "1") (term "0"))
      (rule "commute_or" (formula "1") (term "0,0"))
      (rule "cnf_rightDist" (formula "1") (term "1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "commute_or" (formula "1") (term "0,1,0"))
      (rule "commute_and" (formula "1") (term "1,0"))
      (rule "cnf_rightDist" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "commute_or" (formula "1") (term "0,0"))
      (rule "commute_and" (formula "1") (term "0"))
      (rule "equiv_right" (formula "1"))
      (branch "Case 1"
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "close" (formula "4") (ifseqformula "1"))
      )
      (branch "Case 2"
         (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "2"))
      )
   )
)
)
}
