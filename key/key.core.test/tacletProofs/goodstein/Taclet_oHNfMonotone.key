\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Feb 13 11:19:16 CET 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Feb 13 11:19:16 CET 2017
name=oHNfMonotone
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
cut '\forall int v_m2;(
      0<= v_m2 -> 
   \forall int v_m1;
     \forall int v_base; (2 <= v_base & 0 <= v_m1 & v_m1 < v_m2 -> oHNf(v_base, v_m1) < oHNf(v_base, v_m2)))';
tryclose branch;
rule hide_right formula='\forall int v_m2;
   \forall int v_m1;
     \forall int v_base; (2 <= v_base & 0 <= v_m1 & v_m1 < v_m2 -> oHNf(v_base, v_m1) < oHNf(v_base, v_m2))';
rule intValueInduction;
rule allRight;
rule impRight;
rule andLeft;
rule allRight;
rule allRight;
rule impRight;
rule andLeft;
rule andLeft;
cut 'v_m2_0 < v_base_0';
rule oHNfDef1;
tryclose branch;
cut 'v_m1_0 < v_base_0';
rule oHNfDef1;
instantiate hide var=base with='v_base_0';
instantiate hide var=m with='v_m1_0';
rule impLeft;
tryclose branch;
rule oHNfIncreasing;
tryclose branch;
rule powExpansion;
instantiate var=m with='v_m1_0';
instantiate hide var=n with='v_base_0';
rule impLeft;
tryclose branch;
rule exLeft;
rule exLeft;
rule exLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule andLeft;
instantiate hide var=m with='v_m2_0';
instantiate hide var=n with='v_base_0';
rule impLeft;
tryclose branch;
rule exLeft;
rule exLeft;
rule exLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule oHNfDef2;
instantiate var=base  with='v_base_0';
instantiate hide var=m  with='v_m2_0 ';
instantiate hide var=k  with='r_1';
instantiate hide var=a  with='a_1';
instantiate hide var=c  with='c_1';
rule impLeft;
tryclose branch;
instantiate hide var=base  with='v_base_0';
instantiate hide var=m  with='v_m1_0 ';
instantiate hide var=k  with='r_0';
instantiate hide var=a  with='a_0';
instantiate hide var=c  with='c_0';
rule impLeft;
tryclose branch;
cut 'pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
   + oHNf(v_base_0, c_0)
    < 
     pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
   + oHNf(v_base_0, c_1)';
tryclose branch;
rule hide_right formula='oHNf(v_base_0, v_m1_0) < oHNf(v_base_0, v_m2_0)';
rule powExpansionAux2;
instantiate hide var=m1  with='v_m1_0';
instantiate hide var=m2  with='v_m2_0';
instantiate hide var=base  with='v_base_0';
instantiate hide var=r1  with='r_0';
instantiate hide var=a1  with='a_0';
instantiate hide var=c1  with='c_0';
instantiate hide var=r2  with='r_1';
instantiate hide var=a2  with='a_1';
instantiate hide var=c2  with='c_1';
rule impLeft;
tryclose branch;
rule leq_to_gt_alt formula='r_0 <= r_1';
rule orLeft;
rule powExpansionAux3;
instantiate hide var=m with='v_m2_0';
instantiate hide var=r with='pow(v_base_0,r_1)';
instantiate hide var=a with='a_1';
instantiate hide var=c with='c_1';
rule impLeft;
tryclose branch;
rule  powExpMonotone;
instantiate hide var=base with='v_base_0';
instantiate hide var=e1   with='r_0';
instantiate hide var=e2   with='r_1';
rule impLeft;
tryclose branch;
cut '!pow(v_base_0, r_0) < v_m2_0';
rule notLeft;
rule lt_le_trans formula='pow(v_base_0, r_0) < v_m2_0';
tryclose branch;
rule notRight;
rule hide_left formula='pow(v_base_0, r_0) < pow(v_base_0, r_1)';
rule hide_left formula='pow(v_base_0, r_1) <= v_m2_0';
instantiate var=k with='pow(v_base_0, r_0)';
rule impLeft;
rule andRight;
tryclose branch;
tryclose branch;
instantiate hide var=v_m1   with='c_0';
instantiate hide var=v_base with='v_base_0';
rule impLeft;
tryclose branch;
rule oHNfDef2a;
instantiate hide var=base with='v_base_0';
instantiate hide var=m    with='pow(v_base_0, r_0)';
instantiate hide var=k    with='r_0';
rule impLeft;
tryclose branch;
cut '!oHNf(v_base_0, c_0) < pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule notLeft;
tryclose branch;
rule notRight;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
        + oHNf(v_base_0, c_0)
       < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
          + pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule notLeft;
rule hide_right formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
tryclose branch;
rule notRight;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0  + pow(v_base_0 + 1, oHNf(v_base_0, r_0))
       =
     pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)';
rule notLeft;
rule hide_right formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
rule polySimp_rightDist;
tryclose branch;
rule notRight;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)
   < 
   pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
   + pow(v_base_0 + 1, oHNf(v_base_0, r_0))
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)';
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
cut '! a_0 + 1 < v_base_0 + 1';
rule notLeft;
rule hide_right formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
tryclose branch;
rule notRight;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)
     < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (v_base_0  + 1)';
rule notLeft;
rule hide_right formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';#
rule oHNfGreaterZero;
instantiate hide var=base with='v_base_0';
instantiate hide var=m    with='r_0';
rule impLeft;
rule andRight;
tryclose branch;
cut '!0 <= 1';
rule notLeft;
tryclose branch;
rule notRight;
tryclose branch;
rule le_le_trans;
tryclose branch;
rule powGreaterZeroQ;
instantiate hide var=base with='v_base_0 + 1';
instantiate hide var=exp  with='oHNf(v_base_0, r_0)';
rule impLeft;
rule andRight;
cut '!v_base_0 > 0';
rule notLeft;
rule gt_to_lt formula='v_base_0 > 0';
rule hide_left formula='0 < a_1';
rule hide_left formula='r_0 < r_1';
rule lt_lt_trans formula='0 < v_base_0';
tryclose branch;
rule notRight;
rule greater_add_one formula='v_base_0 >  0';
cut '!0 + 1 > 0';
rule notLeft;
tryclose branch;
rule notRight;
rule gt_to_lt formula='v_base_0 + 1 >  0';
rule gt_to_lt formula='0 + 1 >  0';
rule gt_to_lt formula='v_base_0 + 1 >  0 + 1';
rule lt_lt_trans formula='0 < v_base_0 + 1';
tryclose branch;
tryclose branch;
rule  multLessAux;
instantiate hide var=right  with='v_base_0 + 1';
instantiate hide var=left   with='a_0 + 1';
instantiate hide var=factor with='pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule impLeft;
rule gt_to_lt formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) >  0';
tryclose branch;
tryclose branch;
rule notRight;
cut '! pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (v_base_0  + 1)';
rule notLeft;
rule lt_lt_trans formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (v_base_0 + 1)';
tryclose branch;
rule notRight;
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)';
rule oHNfGreaterZero;
instantiate hide var=base with='v_base_0';
instantiate hide var=m    with='r_0';
rule impLeft;
rule andRight;
tryclose branch;
cut '!0<=1';
rule notLeft;
tryclose branch;
rule notRight;
rule le_le_trans;
tryclose branch;
rule powExpAddOneQ;
instantiate hide var=base with='v_base_0 + 1';
instantiate hide var=exp  with='oHNf(v_base_0, r_0)';
rule impLeft;
tryclose branch;
tryclose branch;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
       + oHNf(v_base_0, c_0)
      <
    pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (v_base_0 + 1)';
rule hide_left formula='oHNf(v_base_0, r_0) >= 0';
rule hide_left formula='oHNf(v_base_0, pow(v_base_0, r_0))
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule hide_left formula='oHNf(v_base_0, c_0) < oHNf(v_base_0, pow(v_base_0, r_0))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='oHNf(v_base_0, v_m2_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
rule hide_left formula='oHNf(v_base_0, v_m1_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)';
rule hide_left formula='oHNf(v_base_0, c_0) < pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule eqSymm formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (v_base_0 + 1)';
tryclose branch;
rule notRight;
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (v_base_0 + 1)';
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (v_base_0 + 1)';
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (v_base_0 + 1)';
rule powExpansionAux3;
instantiate hide var=m with='v_m2_0';
instantiate hide var=r with='pow(v_base_0,r_1)';
instantiate hide var=a with='a_1';
instantiate hide var=c with='c_1';
rule impLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)';
rule hide_left formula='oHNf(v_base_0, c_0) < pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule hide_left formula='  oHNf(v_base_0, pow(v_base_0, r_0))
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule hide_left formula='oHNf(v_base_0, c_0) < oHNf(v_base_0, pow(v_base_0, r_0))';
rule andRight;
rule andRight;
rule andRight;
tryclose branch;
rule powGreaterZeroQ;
instantiate hide var=base with='v_base_0';
instantiate hide var=exp  with='r_1';
rule impLeft;
rule andRight;
tryclose branch;
tryclose branch;
tryclose branch;
tryclose branch;
tryclose branch;
rule powRightIncreasing;
instantiate hide var=exp  with='r_1';
instantiate hide var=base with='v_base_0';
rule impLeft;
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)';
rule hide_left formula='oHNf(v_base_0, c_0) < pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule hide_left formula='  oHNf(v_base_0, pow(v_base_0, r_0))
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule hide_left formula='oHNf(v_base_0, c_0) < oHNf(v_base_0, pow(v_base_0, r_0))';
tryclose branch;
cut '!r_1 < v_m2_0';
rule notLeft;
rule lt_le_trans formula='r_1 < v_m2_0';
tryclose branch;
rule notRight;
instantiate var=k with='r_1';
rule impLeft;
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)';
rule hide_left formula='oHNf(v_base_0, c_0) < oHNf(v_base_0, pow(v_base_0, r_0))';
tryclose branch;
instantiate hide var=v_m1 with='r_0';
instantiate hide var=v_base with='v_base_0 ';
rule impLeft;
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)';
rule hide_left formula='oHNf(v_base_0, c_0) < oHNf(v_base_0, pow(v_base_0, r_0))';
tryclose branch;
cut '!oHNf(v_base_0, r_0) + 1 <= oHNf(v_base_0, r_1)';
rule notLeft;
rule hide_right formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)';
rule hide_left formula='oHNf(v_base_0, c_0) < oHNf(v_base_0, pow(v_base_0, r_0))';
tryclose branch;
rule notRight;
rule hide_left formula='oHNf(v_base_0, r_0) < oHNf(v_base_0, r_1)';
rule hide_left formula='oHNf(v_base_0, c_0) < oHNf(v_base_0, pow(v_base_0, r_0))';
rule  powExpWeakMonotone;
instantiate hide var=base with='v_base_0 + 1';
instantiate hide var=e1   with='oHNf(v_base_0, r_0) + 1';
instantiate hide var=e2   with='oHNf(v_base_0, r_1)';
rule impLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)';
rule hide_left formula='oHNf(v_base_0, v_m2_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
rule hide_left formula='  oHNf(v_base_0, v_m1_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)';
rule oHNfGreaterZero;
instantiate hide var=base with='v_base_0 + 1';
instantiate hide var=m    with='r_0';
rule impLeft;
tryclose branch;
tryclose branch;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
       + oHNf(v_base_0, c_0)
       <
       pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
rule  notLeft;
rule hide_right formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule lt_le_trans formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
       + oHNf(v_base_0, c_0)
       <
       pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
tryclose branch;
rule notRight;
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)';
rule powGreaterZeroQ;
instantiate hide var=base with='v_base_0 + 1';
instantiate hide var=exp  with='oHNf(v_base_0, r_1)';
rule impLeft;
rule andRight;
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
rule hide_left formula='   pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)
 <= pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
tryclose branch;
rule oHNfGreaterZero;
instantiate hide var=base with='v_base_0';
instantiate hide var=m    with='r_1';
rule impLeft;
rule andRight;
tryclose branch;
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
rule hide_left formula='   pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)
 <= pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
tryclose branch;
tryclose branch;
cut '!1 <= a_1';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
tryclose branch;
rule notRight;
rule  multWeakLessAux;
instantiate hide var=right  with='a_1';
instantiate hide var=left   with='1';
instantiate hide var=factor with='pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
rule impLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
tryclose branch;
rule andLeft;
rule hide_left formula='(1 <= a_1
    <->    1 * pow(v_base_0 + 1, oHNf(v_base_0, r_1))
        <= a_1 * pow(v_base_0 + 1, oHNf(v_base_0, r_1)))';
rule cnf_eqv;
rule andLeft;
rule hide_left formula='(1 <= a_1
    | !   pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * 1
       <= pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1)';
rule orLeft;
tryclose branch;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_1))
      <=
    pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='   pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * 1
 <= pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1';
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
   < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
rule lt_le_trans formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1';
tryclose branch;
rule notRight;
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
rule hide_left formula='   pow(v_base_0 + 1, oHNf(v_base_0, r_1))
 <= pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1';
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0) + 1)
 <= pow(v_base_0 + 1, oHNf(v_base_0, r_1))';
rule hide_left formula='  oHNf(v_base_0, pow(v_base_0, r_0))
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule hide_left formula='  oHNf(v_base_0, v_m2_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
rule hide_left formula='  oHNf(v_base_0, v_m1_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)';
rule oHNfGreaterZero;
instantiate hide var=base with='v_base_0';
instantiate hide var=m    with='c_1';
rule impLeft;
tryclose branch;
tryclose branch;
cut '  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='  oHNf(v_base_0, v_m2_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
rule hide_left formula='  oHNf(v_base_0, v_m1_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1
 + oHNf(v_base_0, c_1)';
cut '!v_m2_0 = pow(v_base_0, r_0) * a_1 + c_1';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='v_m2_0 = pow(v_base_0, r_1) * a_1 + c_1';
cut '!c_1 < pow(v_base_0, r_0)';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='c_1 < pow(v_base_0, r_1)';
rule powGreaterZeroQ;
instantiate hide var=base with='v_base_0';
instantiate hide var=exp  with='r_0';
rule impLeft;
tryclose branch;
 cut 'a_1 < a_0';
 cut '!a_1+1 <= a_0';
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule notLeft;
tryclose branch;
rule notRight;
rule multWeakLessAux;
instantiate hide var=right  with='a_0';
instantiate hide var=left   with='a_1+1';
instantiate hide var=factor with='pow(v_base_0, r_0)';
rule impLeft;
tryclose branch;
rule andLeft;
rule hide_left formula='    a_1 + 1 <= a_0
 <-> (a_1 + 1) * pow(v_base_0, r_0) <= a_0 * pow(v_base_0, r_0)';
rule cnf_eqv;
rule andLeft;
rule hide_left formula='  a_1 + 1 <= a_0
 | !pow(v_base_0, r_0) * (a_1 + 1) <= pow(v_base_0, r_0) * a_0';
rule orLeft;
tryclose branch;
cut '!pow(v_base_0, r_0) * a_1 + c_1
     <=
     pow(v_base_0, r_0) * a_1 + pow(v_base_0, r_0)';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
cut '!pow(v_base_0, r_0) * a_1  + pow(v_base_0, r_0)
      =
     pow(v_base_0, r_0) * (a_1 + 1)'
rule notLeft;
tryclose branch;
rule notRight;
cut '!pow(v_base_0, r_0) * a_1 + c_1
        <= pow(v_base_0, r_0) * (a_1 + 1)';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='   pow(v_base_0, r_0) * a_1
  + c_1
 <= pow(v_base_0, r_0) * a_1 + pow(v_base_0, r_0)';
tryclose branch;
cut '!v_m2_0 <= pow(v_base_0, r_0) * (a_1 + 1)';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left  formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';	
rule hide_left formula='pow(v_base_0, r_0) * (a_1 + 1) <= pow(v_base_0, r_0) * a_0';
rule hide_left formula='  pow(v_base_0, r_0) * a_1 + pow(v_base_0, r_0)
 = pow(v_base_0, r_0) * (a_1 + 1)';
rule eqSymm formula='v_m2_0 = pow(v_base_0, r_0) * a_1 + c_1';
tryclose branch;
rule notRight;
cut '!v_m2_0 <= pow(v_base_0, r_0) * a_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule le_le_trans;
tryclose branch;
rule notRight;
rule hide_left formula='v_m2_0 <= pow(v_base_0, r_0) * (a_1 + 1)';
rule hide_left formula='pow(v_base_0, r_0) * a_1 + c_1 <= pow(v_base_0, r_0) * (a_1 + 1)';
rule hide_left formula='pow(v_base_0, r_0) * (a_1 + 1) <= pow(v_base_0, r_0) * a_0';
rule hide_left formula='  pow(v_base_0, r_0) * a_1 + pow(v_base_0, r_0)
 = pow(v_base_0, r_0) * (a_1 + 1)';
cut '!pow(v_base_0, r_0) * a_0 <= pow(v_base_0, r_0) * a_0 + c_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
cut '!v_m2_0 <= pow(v_base_0, r_0) * a_0 + c_0';
rule notLeft;
rule le_le_trans;
tryclose branch;
rule notRight;
tryclose branch;
cut '!v_m2_0 <= v_m1_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
cut '!a_0 <= a_1';
rule notLeft;
tryclose branch;
rule notRight;
rule leq_to_gt_alt formula='a_0 <= a_1';
rule orLeft;
 cut '!a_0+1 <= a_1';
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule notLeft;
tryclose branch;
rule notRight;
rule powExpansionAux3;
instantiate hide var=m with='v_m1_0';
instantiate hide var=r with='pow(v_base_0,r_0)';
instantiate hide var=a with='a_0';
instantiate hide var=c with='c_0';
rule impLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
tryclose branch;
cut '!pow(v_base_0, r_0) < v_m2_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
instantiate var=k with='pow(v_base_0, r_0)';
rule impLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
instantiate hide var=v_m1     with='c_0';
instantiate hide var=v_base   with='v_base_0';
rule impLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule oHNfDef2a;
instantiate hide var=base with='v_base_0';
instantiate hide var=m    with='pow(v_base_0, r_0)';
instantiate hide var=k    with='r_0';
rule impLeft;
tryclose branch;
cut '!oHNf(v_base_0, c_0) < pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left  formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
rule hide_left formula='oHNf(v_base_0, c_0) < oHNf(v_base_0, pow(v_base_0, r_0))';
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0) 
      < 
      pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0  + pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
rule hide_left formula='oHNf(v_base_0, c_0) < pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule hide_left formula='  oHNf(v_base_0, pow(v_base_0, r_0))
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1) =
    pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule notLeft;
tryclose branch;
rule notRight;
cut '!  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
tryclose branch;
rule notRight;
rule hide_left formula='pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)
 =   pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
   + pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule  multWeakLessAux;
instantiate hide var=right   with='a_1';
instantiate hide var=left    with='a_0 + 1';
instantiate hide var=factor  with='pow(v_base_0 + 1, oHNf(v_base_0, r_0))';
rule impLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule oHNfGreaterZero;
instantiate hide var=base  with='v_base_0';
instantiate hide var=m     with='r_0';
rule impLeft;
tryclose branch;
rule powGreaterZeroQ;
instantiate hide var=base with='v_base_0 + 1';
instantiate hide var=exp  with='oHNf(v_base_0, r_0)';
rule impLeft;
tryclose branch;
tryclose branch;
rule andLeft;
rule hide_left formula='(    a_0 + 1 <= a_1
    <->    (a_0 + 1) * pow(v_base_0 + 1, oHNf(v_base_0, r_0))
        <= a_1 * pow(v_base_0 + 1, oHNf(v_base_0, r_0)))';
rule equiv_left;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)
      < 
     pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left  formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule lt_le_trans formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1';
tryclose branch;
rule notRight;
tryclose branch;
rule hide_left formula='   pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)
 <= pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1';
rule hide_left formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * (a_0 + 1)';
tryclose branch;
cut '!pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
     <=
     pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule oHNfGreaterZero;
instantiate hide var=base  with='v_base_0';
instantiate hide var=m     with='c_1';
rule impLeft;
tryclose branch;
tryclose branch;
rule notRight;
rule lt_le_trans formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
tryclose branch;
tryclose branch;
cut '!v_m2_0 = pow(v_base_0, r_0) * a_0 + c_1';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='v_m2_0 = pow(v_base_0, r_0) * a_1 + c_1';
cut 'c_1 <= c_0';
cut '!pow(v_base_0, r_0) * a_0 + c_1
      <=
      pow(v_base_0, r_0) * a_0 + c_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
cut '!v_m2_0 <= pow(v_base_0, r_0) * a_0 + c_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='  oHNf(v_base_0, v_m2_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
rule hide_left formula='  oHNf(v_base_0, v_m1_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)';
rule hide_left formula='v_m1_0 = pow(v_base_0, r_0) * a_0 + c_0';
rule hide_left formula='a_0 = a_1';
tryclose branch;
rule notRight;
cut '!v_m2_0 <= v_m1_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='pow(v_base_0, r_0) * a_0 + c_1 <= pow(v_base_0, r_0) * a_0 + c_0';
tryclose branch;
rule notRight;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule hide_left formula='  oHNf(v_base_0, v_m2_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
rule hide_left formula='  oHNf(v_base_0, v_m1_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)';
rule hide_left formula='v_m1_0 = pow(v_base_0, r_0) * a_0 + c_0';
rule hide_left formula='a_0 = a_1';
tryclose branch;
cut '!c_0 < c_1';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
rule hide_left formula='  oHNf(v_base_0, v_m2_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_1)) * a_1 + oHNf(v_base_0, c_1)';
rule hide_left formula='  oHNf(v_base_0, v_m1_0)
 = pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0 + oHNf(v_base_0, c_0)';
cut '!0 < pow(v_base_0, r_0)';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
cut '!0 < pow(v_base_0, r_0)*a_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule multLessAux;
instantiate hide var=right  with='a_0';
instantiate hide var=left   with='0';
instantiate hide var=factor with='pow(v_base_0, r_0)';
rule impLeft;
tryclose branch;
tryclose branch;
rule notRight;
cut '!c_1 < pow(v_base_0, r_0) * a_0 + c_1';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
tryclose branch;
rule notRight;
cut '!c_1 < v_m2_0';
rule notLeft;
rule hide_right formula='  pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_0
 + oHNf(v_base_0, c_0)
 < pow(v_base_0 + 1, oHNf(v_base_0, r_0)) * a_1
 + oHNf(v_base_0, c_1)';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         \forall int v_base;
           (   2 <= v_base & 0 <= v_m1 & v_m1 < k
            -> oHNf(v_base, v_m1) < oHNf(v_base, k)))';
rule eqSymm formula='v_m2_0 = pow(v_base_0, r_0) * a_0 + c_1';
rule hide_right formula='c_1 <= c_0';
rule hide_right formula='a_1 < a_0';
rule hide_right formula='v_m1_0 < v_base_0';
rule hide_right formula='v_m2_0 < v_base_0';
rule hide_left formula='v_m1_0 = pow(v_base_0, r_0) * a_0 + c_0';
tryclose branch;
rule notRight;
instantiate hide var=k with='c_1';
rule impLeft;
tryclose branch;
instantiate hide var=v_m1 with='c_0';
instantiate hide var=v_base with='v_base_0';
rule impLeft;
tryclose branch;
rule hide_right formula='c_1 <= c_0';
rule hide_right formula='a_1 < a_0';
rule hide_right formula='v_m1_0 < v_base_0';
rule hide_right formula='v_m2_0 < v_base_0';
rule hide_left formula='v_m1_0 = pow(v_base_0, r_0) * a_0 + c_0';
rule hide_left formula='v_m2_0 = pow(v_base_0, r_0) * a_0 + c_1';
rule hide_left formula='c_1 < pow(v_base_0, r_0) * a_0 + c_1';
rule hide_left formula='c_0 < pow(v_base_0, r_0)';
tryclose;
"

