\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Sep 25 23:08:55 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[Strategy]MaximumNumberOfAutomaticApplications=2000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation "#Proof Obligation Settings
#Wed Sep 25 23:08:55 CEST 2019
name=oGSstrictMonotone
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
rule allRight;
cut '\forall int v_m2;( 0 <= v_m2 -> 
   \forall int v_m1;(0 <= v_m1 & v_m1 < v_m2 & 2 <= v_n_0 -> olt(oGS(v_n_0,v_m1),oGS(v_n_0,v_m2))))';
tryclose branch;
rule hide_right formula='\forall int v_m1;
   \forall int v_m2;
     (2 <= v_n_0 & 0 <= v_m1 & v_m1 < v_m2 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, v_m2)))';
rule intValueInduction;
rule allRight;
rule impRight;
rule andLeft;
rule allRight;
rule impRight;
rule andLeft;
rule andLeft;
cut 'v_m2_0 < v_n_0';
rule oGSDef1;
instantiate      var=n with='v_n_0';
instantiate hide var=m with='v_m2_0';
rule impLeft;
tryclose branch;
instantiate hide var=n with='v_n_0';
instantiate hide var=m with='v_m1_0';
rule impLeft;
rule hide_right formula='olt(oGS(v_n_0, v_m1_0), oGS(v_n_0, v_m2_0))';
tryclose branch;
rule onatolt;
tryclose branch;
rule powExpansion;
instantiate hide var=m with='v_m2_0';
instantiate hide var=n with='v_n_0';
rule impLeft;
tryclose branch;
rule exLeft;
rule exLeft;
rule exLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule oGSDef2;
instantiate hide var=n with='v_n_0';
instantiate hide var=m with='v_m2_0';
instantiate hide var=k with='r_0';
instantiate hide var=a with='a_0';
instantiate hide var=c with='c_0';
rule impLeft;
tryclose branch;
rule oGSGreaterZeroQ;
instantiate hide var=n with='v_n_0';
instantiate hide var=e with='r_0';
rule impLeft;
tryclose branch;
cut '!oleq(omega,oexp(omega, oGS(v_n_0, r_0)))';
rule notLeft;
tryclose branch;
rule oexpLeftWeakIncreasing;
tryclose branch;
rule notRight;
cut '!oleq(oexp(omega, oGS(v_n_0, r_0)),
           otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule notLeft;
rule otimesWeakMonotoneQ;
instantiate hide var=k with='oexp(omega, oGS(v_n_0, r_0))';
instantiate hide var=i with='o_1';
instantiate hide var=j with='onat(a_0)';
rule impLeft;
rule onatolt;
rule hide_right formula='oleq(oexp(omega, oGS(v_n_0, r_0)), otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule hide_right formula='olt(oGS(v_n_0, v_m1_0), oGS(v_n_0, v_m2_0))';
instantiate hide var=n with='1';
instantiate hide var=m with='a_0';
tryclose branch;
tryclose branch;
rule notRight;
cut '!oleq(omega,otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='oleq(oexp(omega, oGS(v_n_0, r_0)), otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule hide_left formula='oleq(omega, oexp(omega, oGS(v_n_0, r_0)))';
cut '!oleq(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)),
           oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule notLeft;
rule hide_right formula='olt(oGS(v_n_0, v_m1_0), oGS(v_n_0, v_m2_0))';
rule oaddMonotone;
tryclose branch;
rule notRight;
cut '!oleq(omega,
           oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='oleq(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)),
      oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='oleq(omega, otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
cut '!oleq(omega,oGS(v_n_0, v_m2_0))';
rule notLeft;
rule hide_right formula='olt(oGS(v_n_0, v_m1_0), oGS(v_n_0, v_m2_0))';
tryclose branch;
rule notRight;
cut 'v_m1_0 < v_n_0';
rule oGSDef1;
instantiate      var=n with='v_n_0';
instantiate hide var=m with='v_m1_0';
rule impLeft;
tryclose branch;
cut 'olt(onat(v_m1_0),oGS(v_n_0, v_m2_0))';
tryclose branch;
rule hide_right formula='olt(oGS(v_n_0, v_m1_0), oGS(v_n_0, v_m2_0))';
rule onatLessOmega occ=0;
tryclose branch;
rule powExpansion;
instantiate hide var=m with='v_m1_0';
instantiate hide var=n with='v_n_0';
rule impLeft;
tryclose branch;
rule exLeft;
rule exLeft;
rule exLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule andLeft;
rule oGSDef2;
instantiate hide var=n with='v_n_0';
instantiate hide var=m with='v_m1_0';
instantiate hide var=k with='r_1';
instantiate hide var=a with='a_1';
instantiate hide var=c with='c_1';
rule impLeft;
tryclose branch;
rule oGSGreaterZeroQ;
instantiate hide var=n with='v_n_0';
instantiate hide var=e with='r_1';
rule impLeft;
tryclose branch;
cut 'olt(oGS(v_n_0, v_m1_0),oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
tryclose branch;
rule hide_right formula='olt(oGS(v_n_0, v_m1_0), oGS(v_n_0, v_m2_0))';
cut 'olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
         oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
tryclose branch;
rule hide_right formula='olt(oGS(v_n_0, v_m1_0),
                             oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)),oGS(v_n_0, c_0)))';
cut '!0 < pow(v_n_0, r_1)';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule powGreaterZeroQ;
tryclose branch;
rule notRight;
cut '!pow(v_n_0, r_1) <= pow(v_n_0, r_1) * a_1';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule  multWeakLessAux;
instantiate hide var=right  with='1';
instantiate hide var=left   with='a_1';
instantiate hide var=factor with='pow(v_n_0, r_1)';
rule impLeft;
tryclose branch;
tryclose branch;
rule notRight;
cut '! pow(v_n_0, r_1) * a_1 <=  pow(v_n_0, r_1) * a_1 + c_1';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
cut '!pow(v_n_0, r_1) <= v_m1_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
cut '!pow(v_n_0, r_1) < v_m2_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
rule hide_left formula='pow(v_n_0, r_1) * a_1 <= pow(v_n_0, r_1) * a_1 + c_1';
rule hide_left formula='pow(v_n_0, r_1) <= pow(v_n_0, r_1) * a_1';
instantiate var=k with='pow(v_n_0, r_1)';
rule impLeft;
tryclose branch;
instantiate hide var=v_m1 with='c_1';
rule impLeft;
tryclose branch;
rule oGSDef2Spec;
tryclose branch;
cut '!olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
      oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)),oexp(omega, oGS(v_n_0, r_1))))';
rule notLeft;
rule oltAddLessLeft formula='olt(oGS(v_n_0, c_1), oexp(omega, oGS(v_n_0, r_1)))';
tryclose branch;
rule notRight;
cut '!oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)),oexp(omega, oGS(v_n_0, r_1)))
      =
     otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1),o_1))';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule otimes_DefSucc;
tryclose branch;
rule notRight;
cut '!olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
      otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1), o_1)))';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
tryclose branch;
rule notRight;
rule hide_left formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)),
          oexp(omega, oGS(v_n_0, r_1))))';
rule hide_left formula='  oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)),
        oexp(omega, oGS(v_n_0, r_1)))
 = otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1), o_1))';
cut '!olt(onat(a_1),omega)';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule onatLessOmegaQ;
tryclose branch;
rule notRight;
cut '!lim(omega)';
rule notLeft;
rule omegaDef1 occ=0;
tryclose branch;
rule notRight;
cut '!olt(oadd(onat(a_1), o_1),omega)';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule olimDefEquiv;
rule andLeft;
tryclose branch;
rule notRight;
cut '!olt(o_0,oexp(omega, oGS(v_n_0, r_1)))';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule oexpGreaterEqualOne;
tryclose branch;
rule notRight;
cut '!olt(otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1), o_1)),
          otimes(oexp(omega, oGS(v_n_0, r_1)), omega))';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule hide_left formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1), o_1)))';
rule otimesMonotoneQ;
tryclose branch;
rule notRight;
cut '!otimes(oexp(omega, oGS(v_n_0, r_1)), omega) = oexp(omega,oadd(oGS(v_n_0,r_1),o_1))';
rule notLeft;
rule oexp_DefSucc;
tryclose branch;
rule notRight;
cut '!olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
          oexp(omega, oadd(oGS(v_n_0, r_1), o_1)))';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule oexp_DefSucc occ=1;
tryclose branch;
rule notRight;
rule hide_left formula='otimes(oexp(omega, oGS(v_n_0, r_1)), omega)
 = oexp(omega, oadd(oGS(v_n_0, r_1), o_1))';
rule hide_left formula='olt(otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1), o_1)),
     otimes(oexp(omega, oGS(v_n_0, r_1)), omega))';
rule hide_left formula='oleq(omega, oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
cut '!r_0 < pow(v_n_0, r_0)';
rule notLeft;
rule powRightIncreasing;
tryclose branch;
rule notRight;
cut '!pow(v_n_0, r_0) <= pow(v_n_0, r_0)*a_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule  multWeakLessAux; 
instantiate hide var=right with='a_0';
instantiate hide var=left  with='1';
instantiate hide var=factor with='pow(v_n_0, r_0)';
tryclose branch;
rule notRight;
cut '!r_0 <  pow(v_n_0, r_0)*a_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
rule hide_left formula='pow(v_n_0, r_0) <= pow(v_n_0, r_0) * a_0';
rule hide_left formula='r_0 < pow(v_n_0, r_0)';
cut '! pow(v_n_0, r_0) * a_0 <=  pow(v_n_0, r_0) * a_0 + c_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
cut '! r_0 <  pow(v_n_0, r_0) * a_0 + c_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
rule hide_left formula='r_0 < pow(v_n_0, r_0) * a_0';
rule hide_left formula='pow(v_n_0, r_0) * a_0 <= pow(v_n_0, r_0) * a_0 + c_0';
cut '! r_0 <  v_m2_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
rule hide_left formula='r_0 < pow(v_n_0, r_0) * a_0 + c_0';
cut 'r_1 > r_0';
rule powExpansionAux1;
instantiate hide var=m with='v_m2_0';
instantiate hide var=n with='v_n_0';
instantiate hide var=r with='r_0';
instantiate hide var=a with='a_0';
instantiate hide var=c with='c_0';
rule impLeft;
tryclose branch;
cut 'v_m1_0 >= v_m2_0';
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
tryclose branch;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (   0 <= v_m1 & v_m1 < k & 2 <= v_n_0
          -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
cut '!r_1 >= r_0 +1';
rule notLeft;
tryclose branch;
rule notRight;
rule  powExpWeakMonotone;
tryclose branch;
cut '!r_1 <= r_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (   0 <= v_m1 & v_m1 < k & 2 <= v_n_0
          -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
cut 'r_1 < r_0';
instantiate var=k with='r_0';
rule impLeft;
tryclose branch;
instantiate hide var=v_m1 with='r_1';
 rule impLeft;
tryclose branch;
cut 'oleq(oexp(omega, oadd(oGS(v_n_0, r_1), o_1)),
          oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
tryclose branch;  
 rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))'; 
cut '!oleq(oadd(oGS(v_n_0, r_1),o_1), oGS(v_n_0, r_0))';
rule notLeft;
rule hide_right formula='oleq(oexp(omega, oadd(oGS(v_n_0, r_1), o_1)),
      oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (   0 <= v_m1 & v_m1 < k & 2 <= v_n_0
          -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule oLeastSucc;
tryclose branch;
rule notRight;
rule oexpRightWeakMonotoneQ;
instantiate hide var=x  with='omega';
instantiate hide var=y1 with='oadd(oGS(v_n_0, r_1), o_1)';
instantiate hide var=y2 with='oGS(v_n_0, r_0)';
rule impLeft;
tryclose branch;
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (   0 <= v_m1 & v_m1 < k & 2 <= v_n_0
          -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
cut '!oleq(oexp(omega, oGS(v_n_0, r_0)),
           otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule notLeft;
rule hide_right formula='oleq(oexp(omega, oadd(oGS(v_n_0, r_1), o_1)),
      oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule otimesWeakMonotoneQ;
instantiate hide var=k with='oexp(omega, oGS(v_n_0, r_0))';
instantiate hide var=i with='o_1';
instantiate hide var=j with='onat(a_0)';
rule impLeft;
rule hide_right formula='oleq(oexp(omega, oGS(v_n_0, r_0)), otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule onatoleqOne;
tryclose branch;
tryclose branch;
rule notRight;
cut '!oleq(oexp(omega, oadd(oGS(v_n_0, r_1), o_1)),
      otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule notLeft;
rule oleq_trans formula='oleq(oexp(omega, oGS(v_n_0, r_0)), otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
tryclose branch;
rule notRight;
rule hide_left formula='oleq(oexp(omega, oGS(v_n_0, r_0)), otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule hide_left formula='oleq(oexp(omega, oadd(oGS(v_n_0, r_1), o_1)), oexp(omega, oGS(v_n_0, r_0)))';
cut '!oleq(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)),
           oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule notLeft;
rule hide_right formula='oleq(oexp(omega, oadd(oGS(v_n_0, r_1), o_1)),
      oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule oaddMonotone;
tryclose branch;
rule notRight;
tryclose branch;
cut '!r_1 = r_0';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_right formula='r_1 < r_0';
rule hide_right formula='r_1 >  r_0';
rule hide_left formula='r_1 <= r_0';
cut '!v_m2_0 <= pow(v_n_0, r_0) * a_0 + pow(v_n_0, r_0)';
rule notLeft;
tryclose branch;
rule notRight;
cut '!pow(v_n_0, r_0) * a_0 + pow(v_n_0, r_0) = pow(v_n_0, r_0) * (a_0 + 1)';
rule notLeft;
tryclose branch;
rule notRight;
cut '!v_m2_0 <=  pow(v_n_0, r_0) * (a_0 + 1)';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='pow(v_n_0, r_0) * a_0 + pow(v_n_0, r_0) = pow(v_n_0, r_0) * (a_0 + 1)';
rule hide_left formula='v_m2_0 <= pow(v_n_0, r_0) * a_0 + pow(v_n_0, r_0)';
cut 'a_1 > a_0';
cut '!(a_1+1) >= a_0';
rule notLeft;
tryclose branch;
rule notRight;
cut '!pow(v_n_0, r_0) * (a_0 + 1) <= pow(v_n_0, r_1) * a_1';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule  multWeakLessAux;
instantiate hide var=right with='a_1';
instantiate hide var=left with='a_0 + 1';
instantiate hide var=factor with='pow(v_n_0, r_0)';
rule impLeft;
tryclose branch;
tryclose branch;
rule notRight;
cut '!pow(v_n_0, r_1) * a_1 <= v_m1_0';
rule notLeft;
tryclose branch;
rule notRight;
tryclose branch;
cut '!a_1 <= a_0';
rule notLeft;
tryclose branch;
rule notRight;
cut 'a_1 < a_0';
cut '!a_1+1 <= a_0';
rule notLeft;
tryclose branch;
rule notRight;
cut '!onat(a_1 + 1) = oadd(onat(a_1),o_1)';
rule notLeft;
rule onatSuccDef;
tryclose branch;
rule notRight;
cut '!oleq( oadd(onat(a_1),o_1),onat(a_0))';
rule notLeft;
rule onatoleq;
tryclose branch;
rule notRight;
cut '!oleq(otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1), o_1)),
           otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule notLeft;
rule otimesWeakMonotoneQ;
instantiate hide var=k  with='oexp(omega, oGS(v_n_0, r_1))';
instantiate hide var=i  with='oadd(onat(a_1), o_1)';
instantiate hide var=j  with='onat(a_0)';
rule impLeft;
tryclose branch;
tryclose branch;
rule notRight;
cut '!olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
         otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
tryclose branch;
rule notRight;
rule hide_left formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oexp(omega, oadd(oGS(v_n_0, r_1), o_1)))';
rule hide_left formula='oleq(otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1), o_1)),
      otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)))';
rule hide_left formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     otimes(oexp(omega, oGS(v_n_0, r_1)), oadd(onat(a_1), o_1)))';
cut '!oleq(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)),
           oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
rule oaddMonotone;
tryclose branch;
rule notRight;
tryclose branch;
cut '!a_0 = a_1';
rule notLeft;
tryclose branch;
rule notRight;
cut 'c_0 < c_1';
cut '!pow(v_n_0, r_1) * a_1 + c_1  > pow(v_n_0, r_0) * a_0 + c_0';
rule notLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
rule hide_left formula='\forall int k;
   (   0 <= k & k < v_m2_0
    -> \forall int v_m1;
         (0 <= v_m1 & v_m1 < k & 2 <= v_n_0 -> olt(oGS(v_n_0, v_m1), oGS(v_n_0, k))))';
tryclose branch;
rule notRight;
tryclose branch;
rule hide_left  formula='a_1 <= a_0';
rule hide_right formula='a_1 < a_0';
rule hide_right formula='a_1 >  a_0';
cut '!c_1 <= c_0';
rule notLeft;
tryclose branch;
rule notRight;
cut 'olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
tryclose branch;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_1)), onat(a_1)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
cut 'olt(oGS(v_n_0, c_1),oGS(v_n_0, c_0))';
rule oltAddLessLeft formula='olt(oGS(v_n_0, c_1), oGS(v_n_0, c_0))';
tryclose branch;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_1)),
     oadd(otimes(oexp(omega, oGS(v_n_0, r_0)), onat(a_0)), oGS(v_n_0, c_0)))';
cut 'c_1 < c_0';
tryclose branch;
tryclose;
"
