\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jan 03 16:37:27 CET 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Tue Jan 03 16:37:27 CET 2017
name=oGSstrictMonotone
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
cut 
'\forall int b;
  \forall int v_n;
   \forall int v_m1;
     \forall int v_m2;
       (2 <= v_n & 0 <= v_m1 & v_m1 < v_m2 & v_m2 <= b -> olt(oGS(v_n, v_m1), oGS(v_n, v_m2)))';
rule allRight;
rule allRight;
rule allRight;
rule impRight;
instantiate hide  var=b with='v_m2_0';
tryclose branch;
rule hide_right formula='\forall int v_n;
   \forall int v_m1;
     \forall int v_m2;
       (2 <= v_n & 0 <= v_m1 & v_m1 < v_m2 -> olt(oGS(v_n, v_m1), oGS(v_n, v_m2)))';
rule  auto_int_induction_geqZero;
tryclose branch;
rule impRight;
rule andLeft;
rule allRight;
rule allRight;
rule allRight;
rule impRight;
rule andLeft;
rule andLeft;
rule andLeft;
cut 'v_m2_6 <= b_1';
tryclose branch;
cut '!v_m2_6 = b_1 + 1';
tryclose branch;
rule  notRight;
rule hide_left formula='v_m2_6 <= b_1 + 1';
rule hide_right formula='v_m2_6 <= b_1';
cut 'olt(oGS(v_n_6, b_1), oGS(v_n_6,b_1 + 1))';
tryclose branch;
rule hide_right formula='olt(oGS(v_n_6, v_m1_6), oGS(v_n_6, v_m2_6))';
rule hide_left formula='v_m2_6 = b_1 + 1';
rule hide_left formula='0 <= v_m1_6';
rule hide_left formula='v_m1_6 < v_m2_6';
cut 'b_1 + 1 < v_n_6';
rule oGSDef1;
instantiate hide  var=n with='v_n_6';
instantiate       var=m with='b_1';
rule impLeft;
tryclose branch;
instantiate hide  var=m with='b_1+1';
rule impLeft;
tryclose branch;
cut 'olt(onat(b_1),onat(b_1+1))';
tryclose branch;
rule onatoltAut;
tryclose branch;
cut 'b_1 + 1 = v_n_6';
rule oGSDef1;
instantiate hide  var=n with='v_n_6';
instantiate hide  var=m with='b_1';
rule impLeft;
tryclose branch;
rule oGSDef2;
instantiate hide  var=n with='v_n_6';
instantiate hide  var=m with='b_1+1';
instantiate hide  var=k with='1';
instantiate hide  var=a with='1';
instantiate hide  var=c with='0';
rule impLeft;
tryclose branch;
cut '!oGS(v_n_6, 1)=onat(1)';
rule notLeft;
rule oGSDef1;
instantiate hide  var=n with='v_n_6';
instantiate hide  var=m with='1';
rule impLeft;
tryclose branch;
rule notRight;
cut '!oGS(v_n_6, 0) = onat(0)';
tryclose branch;
rule notRight;
cut '!oadd(otimes(oexp(omega, oGS(v_n_6, 1)), onat(1)), oGS(v_n_6, 0)) = omega';
rule notLeft;
tryclose branch;
rule notRight;
cut '!oGS(v_n_6, b_1 + 1) = omega';
tryclose branch;
rule notRight;
rule hide_left formula='oGS(v_n_6, b_1 + 1) = oadd(otimes(oexp(omega, oGS(v_n_6, 1)), onat(1)), oGS(v_n_6, 0))';
rule hide_left formula='oadd(otimes(oexp(omega, oGS(v_n_6, 1)), onat(1)), oGS(v_n_6, 0)) = omega';
rule hide_left formula='\forall int v_n;
   \forall int v_m1;
     \forall int v_m2;
       (2 <= v_n & 0 <= v_m1 & v_m1 < v_m2 & v_m2 <= b_1 -> olt(oGS(v_n, v_m1), oGS(v_n, v_m2)))';
cut 'olt(onat(b_1),omega)';
tryclose branch;
rule geq_to_leq formula='b_1 >= 0';
rule onatLessOmega formula='olt(onat(b_1), omega)';
tryclose branch;
cut '!v_n_6 <= b_1';
tryclose branch;
rule notRight;
rule hide_right formula='b_1 + 1 = v_n_6';
rule hide_right formula='b_1 + 1 < v_n_6';
rule powInfiniteRange;
instantiate hide var='goal' with='b_1';
instantiate hide var='base' with='v_n_6';
rule impLeft;
tryclose branch;
rule intLeastNumberPrinciple;
rule exLeft;
rule andLeft;
rule andLeft;
cut 'exp_1 = 0';
tryclose branch;
instantiate var=k with='exp_1 - 1';
rule impLeft;
tryclose branch;
cut '!pow(v_n_6, exp_1 - 1) <= b_1';
tryclose branch;
rule notRight;
rule hide_left formula='!b_1 < pow(v_n_6, exp_1 - 1)';
cut 'exp_1 = 1';
tryclose branch;
cut '!exp_1 - 1 > 0';
tryclose branch;
rule notRight;
rule intdivmodEx;
instantiate hide var=n with='b_1';
instantiate hide var=d with='pow(v_n_6, exp_1 - 1)';
rule impLeft;
tryclose branch;
rule andRight;
cut '!v_n_6 > 1';
tryclose branch;
rule notRight;
rule powGreaterOne occ=0;
tryclose branch;
rule exLeft;
rule exLeft;
rule andLeft;
rule andLeft;
rule andLeft;
cut 'm_3 >= v_n_6';
cut 'mul(pow(v_n_6, exp_1 - 1),m_3) >= pow(v_n_6, exp_1)';
tryclose branch;
cut '!pow(v_n_6, exp_1) = pow(v_n_6, (exp_1-1) + 1)';
tryclose branch;
rule notRight;
cut '!exp_1 - 1 >= 0';
tryclose branch;
rule notRight;
rule powExpSucc;
cut '!pow(v_n_6, exp_1 - 1) * m_3 >= pow(v_n_6, exp_1 - 1) * v_n_6';
rule notLeft;
cut 'm_3 = v_n_6';
tryclose branch;
rule multLessAux;
instantiate hide var='right'  with='m_3';
instantiate hide var='left'   with='v_n_6';
instantiate hide var='factor' with='pow(v_n_6, exp_1 - 1)';
rule impLeft;
tryclose branch;
tryclose branch;
cut '!m_3 < v_n_6';
tryclose branch;
rule notRight;
rule hide_right formula='m_3 >= v_n_6';
cut 'm_3 = 0';
tryclose branch;
rule oGSDef2;
instantiate var=n with='v_n_6';
instantiate hide var=m with='b_1';
instantiate hide var=k with='exp_1 - 1';
instantiate hide var=a with='m_3';
instantiate hide var=c with='r_3';
rule impLeft;
tryclose branch;
cut 'r_3 + 1 < pow(v_n_6, exp_1 - 1)';
instantiate var=n with='v_n_6';
instantiate hide var=m with='b_1+1';
instantiate hide var=k with='exp_1 - 1';
instantiate hide var=a with='m_3';
instantiate hide var=c with='r_3+1';
rule impLeft;
tryclose branch;
instantiate      var='v_n'  with='v_n_6';
instantiate hide var='v_m1' with='r_3';
instantiate hide var='v_m2' with='r_3+1';
rule impLeft;
tryclose branch;
cut '!olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)),
         oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3 + 1)))';
rule notLeft;
rule hide_left formula='\forall int n;
   \forall int m;
     \forall int k;
       \forall int a;
         \forall int c;
           (   m = pow(n, k) * a + c & 2 <= n & 1 <= k & 0 < a & a < n & c < pow(n, k)
            -> oGS(n, m) = oadd(otimes(oexp(omega, oGS(n, k)), onat(a)), oGS(n, c)))';
rule hide_left formula='\forall int k; (0 <= k & k < exp_1 -> !b_1 < pow(v_n_6, k))';
rule hide_left formula='\forall int v_n;
   \forall int v_m1;
     \forall int v_m2;
       (   2 <= v_n & 0 <= v_m1 & v_m1 < v_m2 & v_m2 <= b_1
        -> olt(oGS(v_n, v_m1), oGS(v_n, v_m2)))';
rule hide_right formula='olt(oGS(v_n_6, b_1), oGS(v_n_6, b_1 + 1))';
rule oltAddLessLeft;
tryclose branch;
cut '!r_3 + 1 = pow(v_n_6, exp_1 - 1)'
rule notLeft;
tryclose branch;
rule notRight;
tryclose branch;
cut '!b_1 + 1 = pow(v_n_6, exp_1 - 1) * (m_3 + 1)';
tryclose branch;
rule notRight;
cut 'm_3 + 1 < v_n_6';
instantiate var=n with='v_n_6';
instantiate hide var=m with='b_1+1';
instantiate hide var=k with='exp_1 - 1';
instantiate hide var=a with='(m_3+1)';
instantiate hide var=c with='0';
rule impLeft;
#rule andRight;
#rule andRight;
tryclose branch;
rule oGSDef1;
instantiate hide var=n with='v_n_6' occ=1;
instantiate hide var=m with='0';
rule impLeft;
tryclose branch;
cut '!oGS(v_n_6, b_1 + 1)
 = otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3 + 1))';
tryclose branch;
rule notRight;
rule hide_left formula='  oGS(v_n_6, b_1 + 1)
 = oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3 + 1)), oGS(v_n_6, 0))';
instantiate hide var='v_n' with='v_n_6';
instantiate hide var='v_m1' with='r_3';
instantiate hide var='v_m2' with='r_3+1';
rule impLeft;
tryclose branch;
instantiate var=n with='v_n_6';
instantiate hide var=m with='r_3 + 1 ';
instantiate hide var=k with='exp_1 - 1';
instantiate hide var=a with='1';
instantiate hide var=c with='0';
rule impLeft;
tryclose branch;
cut '!oGS(v_n_6, r_3 + 1)
 = otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)),o_1)';
tryclose branch;
rule notRight;
rule hide_left formula='  oGS(v_n_6, r_3 + 1)
 = oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(1)), oGS(v_n_6, 0))';
cut '!olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)),
         oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3+1)))';
rule hide_left formula='\forall int n;
   \forall int m;
     \forall int k;
       \forall int a;
         \forall int c;
           (   m = pow(n, k) * a + c & 2 <= n & 1 <= k & 0 < a & a < n & c < pow(n, k)
            -> oGS(n, m) = oadd(otimes(oexp(omega, oGS(n, k)), onat(a)), oGS(n, c)))';
rule notLeft;
rule hide_right formula='r_3 + 1 < pow(v_n_6, exp_1 - 1)';
rule hide_right formula='olt(oGS(v_n_6, b_1), oGS(v_n_6, b_1 + 1))';
rule oltAddLessLeft;
tryclose branch;
rule notRight;
tryclose branch;
cut '!olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)),
     oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oexp(omega, oGS(v_n_6, exp_1 - 1))))';
tryclose branch;
rule notRight;
rule hide_left formula='olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)),
     oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3 + 1)))';
cut '!oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oexp(omega, oGS(v_n_6, exp_1 - 1))) =
          otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3+1))';
rule notLeft;
rule onatoadd;
instantiate hide var=n with='m_3';
instantiate hide var=m with='1';
rule impLeft;
tryclose branch;
cut '!oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oexp(omega, oGS(v_n_6, exp_1 - 1)))
     = 
     otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3 ),o_1))';
rule notLeft;
rule hide_right formula='  oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oexp(omega, oGS(v_n_6, exp_1 - 1)))
 = otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3 + 1))';
rule otimes_DefSucc;
tryclose branch;
cut '!m_3+1 = v_n_6';
tryclose branch;
rule notRight;
rule hide_right formula='m_3 + 1 < v_n_6';
rule hide_right formula='r_3 + 1 < pow(v_n_6, exp_1 - 1)';
cut '!b_1 + 1 = pow(v_n_6, exp_1 - 1) * m_3 + pow(v_n_6, exp_1 - 1)';
tryclose branch;
rule  notRight;
cut '!b_1 + 1 = pow(v_n_6, exp_1 - 1) * (m_3 + 1)';
tryclose branch;
rule  notRight;
cut '!b_1 + 1 = pow(v_n_6, exp_1 - 1) * v_n_6';
tryclose branch;
rule  notRight;
cut '!b_1 + 1 = pow(v_n_6, exp_1)';
rule notLeft;
rule hide_left formula='b_1 + 1 = pow(v_n_6, exp_1 - 1) * (m_3 + 1)';
rule hide_left formula='b_1 + 1 = pow(v_n_6, exp_1 - 1) * m_3 + pow(v_n_6, exp_1 - 1)';
cut '!(exp_1 - 1) >= 0';
tryclose branch;
rule  notRight;
cut '!b_1 + 1 = pow(v_n_6, (exp_1- 1) + 1)';
rule notLeft;
rule powExpSucc;
tryclose branch;
rule  notRight;
rule hide_left formula='b_1 + 1 = pow(v_n_6, exp_1 - 1) * v_n_6';
rule hide_left formula='b_1 + 1 = pow(v_n_6, exp_1 - 1) * m_3 + pow(v_n_6, exp_1 - 1)';
rule hide_left formula='b_1 + 1 = pow(v_n_6, exp_1 - 1) * (m_3 + 1)';
instantiate       var=n with='v_n_6';
instantiate hide  var=m with='b_1+1 ';
instantiate hide  var=k with='exp_1 ';
instantiate hide  var=a with='1';
instantiate hide  var=c with='0';
rule impLeft;
tryclose branch;
cut '!oGS(v_n_6, b_1 + 1) = oexp(omega, oGS(v_n_6, exp_1))';
rule notLeft;
rule oGSZero;
tryclose branch;
rule notRight;
rule hide_left formula='oGS(v_n_6, b_1 + 1) = oadd(otimes(oexp(omega, oGS(v_n_6, exp_1)), onat(1)), oGS(v_n_6, 0))';
cut 'olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)),
         oexp(omega, oGS(v_n_6, exp_1)))';
tryclose branch;
rule hide_right formula='olt(oGS(v_n_6, b_1), oGS(v_n_6, b_1 + 1))';
rule hide_left formula='oGS(v_n_6, b_1 + 1) = oexp(omega, oGS(v_n_6, exp_1))';
rule hide_left formula='oGS(v_n_6, b_1) = oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3))';
instantiate var='v_n'  with='v_n_6';
instantiate hide var='v_m1' with='exp_1 - 1';
instantiate hide var='v_m2' with='exp_1';
rule impLeft;
rule andRight;
tryclose branch;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)), oexp(omega, oGS(v_n_6, exp_1)))';
rule powRightIncreasing;
instantiate hide var='exp'  with='exp_1 - 1';
instantiate hide var='base' with='v_n_6';
rule impLeft;
tryclose branch;
instantiate hide var='v_n'  with='v_n_6';
instantiate hide var='v_m1' with='r_3';
instantiate hide var='v_m2' with='pow(v_n_6, exp_1 - 1)';
rule impLeft;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)), oexp(omega, oGS(v_n_6, exp_1)))';
rule andRight;
rule andRight;
tryclose branch;
instantiate hide var=n with='v_n_6';
instantiate hide var=m with='pow(v_n_6, exp_1 - 1)';
instantiate hide var=k with='exp_1 - 1';
instantiate hide var=a with='1';
instantiate hide var=c with='0';
rule impLeft;
tryclose branch;
cut '!oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(1)), oGS(v_n_6, 0))
     =
     oexp(omega, oGS(v_n_6, exp_1 - 1))';
rule notLeft;
rule oGSZero occ=0;
rule oGSZero;
tryclose branch;
rule notRight;
cut '!oGS(v_n_6, pow(v_n_6, exp_1 - 1)) = oexp(omega, oGS(v_n_6, exp_1 - 1))';
tryclose branch;
rule notRight;
rule hide_left formula='oGS(v_n_6, pow(v_n_6, exp_1 - 1)) = oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(1)), oGS(v_n_6, 0))';
rule hide_left formula='oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(1)), oGS(v_n_6, 0)) = oexp(omega, oGS(v_n_6, exp_1 - 1))';
rule hide_left formula='\forall int k; (0 <= k & k < exp_1 -> !b_1 < pow(v_n_6, k))';
cut '!olt(oGS(v_n_6, r_3), oexp(omega, oGS(v_n_6, exp_1 - 1)))';
tryclose branch;
rule notRight;
rule oltAddLessLeft formula='olt(oGS(v_n_6, r_3), oexp(omega, oGS(v_n_6, exp_1 - 1)))';
instantiate hide var=k with='otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3))';
rule hide_left formula='olt(oGS(v_n_6, r_3), oGS(v_n_6, pow(v_n_6, exp_1 - 1)))';
rule hide_left formula='oGS(v_n_6, pow(v_n_6, exp_1 - 1)) = oexp(omega, oGS(v_n_6, exp_1 - 1))';
rule hide_left formula='olt(oGS(v_n_6, r_3), oexp(omega, oGS(v_n_6, exp_1 - 1)))';
cut '!otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3),o_1))
     =
      oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oexp(omega, oGS(v_n_6, exp_1 - 1)))';
rule notLeft;
rule otimes_DefSucc;
tryclose branch;
rule notRight;
cut 'olt(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3), o_1)),
         oexp(omega, oGS(v_n_6, exp_1)))';
tryclose branch;
rule hide_right formula='olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)), oexp(omega, oGS(v_n_6, exp_1)))';
rule hide_left formula='olt(oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oGS(v_n_6, r_3)),
     oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oexp(omega, oGS(v_n_6, exp_1 - 1))))';
rule hide_left formula='  otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3), o_1))
 = oadd(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), onat(m_3)), oexp(omega, oGS(v_n_6, exp_1 - 1)))';
cut '!olt(oadd(onat(m_3), o_1),omega)';
rule notLeft;
rule hide_right formula='olt(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3), o_1)), oexp(omega, oGS(v_n_6, exp_1)))';
rule oaddLessOmegaAxiom;
instantiate hide var=i with='onat(m_3)';
instantiate hide var=j with='o_1';
rule impLeft;
rule hide_right formula='olt(oadd(onat(m_3), o_1), omega)';
rule andRight;
rule onatLessOmega;
tryclose branch;
rule notRight;
cut '!olt(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3), o_1)),
         otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), omega))';
rule notLeft;
rule hide_right formula='olt(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3), o_1)), oexp(omega, oGS(v_n_6, exp_1)))'
;
rule otimesMonotoneQ;
instantiate hide var=k with='oexp(omega, oGS(v_n_6, exp_1 - 1))';
instantiate hide var=i with='oadd(onat(m_3), o_1)';
instantiate hide var=j with='omega';
rule impLeft;
rule andRight;
rule hide_right formula='olt(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3), o_1)),
     otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), omega))';
cut '!olt(o_0,oGS(v_n_6, exp_1 - 1))';
rule notLeft;
rule oGSGreaterZeroQ;
instantiate hide var=n with='v_n_6';
instantiate hide var=e with='exp_1 - 1';
rule impLeft;
tryclose branch;
rule notRight;
rule oexpGreaterOne;
instantiate hide var=x with='omega';
instantiate hide var=y with='oGS(v_n_6, exp_1 - 1)';
rule impLeft;
tryclose branch;
rule notRight;
cut '!otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), omega)
     =
     oexp(omega, oadd(oGS(v_n_6, exp_1 - 1), o_1))';
rule notLeft;
rule oexp_DefSucc;
tryclose branch;
rule notRight;
cut 'oleq(oexp(omega, oadd(oGS(v_n_6, exp_1 - 1), o_1)),
     oexp(omega, oGS(v_n_6, exp_1)))';
tryclose branch;
rule hide_right formula='olt(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3), o_1)), oexp(omega, oGS(v_n_6, exp_1)))';
rule hide_left formula='otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), omega) = oexp(omega, oadd(oGS(v_n_6, exp_1 - 1), o_1))';
rule hide_left formula='olt(otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), oadd(onat(m_3), o_1)),
     otimes(oexp(omega, oGS(v_n_6, exp_1 - 1)), omega))';
cut 'oleq(oadd(oGS(v_n_6, exp_1 - 1),o_1) , oGS(v_n_6, exp_1))';
rule oexpRightWeakMonotoneQ;
instantiate var=x  with='omega';
instantiate var=y1 with='oadd(oGS(v_n_6, exp_1 - 1), o_1)';
instantiate var=y2  with='oGS(v_n_6, exp_1)';
rule impLeft;
tryclose branch;
rule hide_right formula='oleq(oexp(omega, oadd(oGS(v_n_6, exp_1 - 1), o_1)), oexp(omega, oGS(v_n_6, exp_1)))';
rule oLeastSucc;
tryclose;
"
