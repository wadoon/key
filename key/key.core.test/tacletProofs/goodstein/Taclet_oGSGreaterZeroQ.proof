\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Jun 22 23:27:53 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[Strategy]MaximumNumberOfAutomaticApplications=500
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\proofObligation "#Proof Obligation Settings
#Sat Jun 22 23:27:53 CEST 2019
name=oGSGreaterZeroQ
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "4d8fd78a15d07dcb09a9135482f5b8bd93041fb9"))

(autoModeTime "1175")

(branch "dummy ID"
(rule "cut" (newnames "v_n,v_e") (inst "cutFormula=\\forall int v_e;
  (   leq(Z(0(#)), v_e)
   -> \\forall int v_n;
        (   lt(Z(1(#)), v_n) & lt(Z(0(#)), v_e)
         -> olt(o_0, oGS(v_n, v_e))))") (proofscript))
(branch "CUT: forall int v_e; ( 0 <= v_e -> forall int v_n; (1 < v_n & 0 < v_e -> olt(o_0, oGS(v_n, v_e)))) TRUE"
   (rule "allRight" (formula "2") (inst "sk=v_n_0") (proofscript))
   (rule "allRight" (formula "2") (inst "sk=v_e_0"))
   (rule "impRight" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
   (rule "add_zero_right" (formula "3") (term "0,1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0,1,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "olt_discret" (formula "3") (term "1,0,1,0"))
   (rule "oleq_replace" (formula "3") (term "1,0,1,0"))
   (rule "eqSymm" (formula "3") (term "1,1,0,1,0"))
   (rule "olt_discret" (formula "4"))
   (rule "oleq_replace" (formula "4"))
   (rule "orRight" (formula "4"))
   (rule "eqSymm" (formula "5"))
   (rule "nnf_imp2or" (formula "3") (term "0"))
   (rule "inEqSimp_notGeq" (formula "3") (term "0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0"))
   (rule "mul_literals" (formula "3") (term "1,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "3") (term "1,0,0,1,0"))
   (rule "mul_literals" (formula "3") (term "1,0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "3") (term "0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "3") (term "0,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,1,0"))
   (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "3") (term "1,0,0,0,1,0"))
   (rule "commute_or_2" (formula "3") (term "0,1,0"))
   (rule "commute_or" (formula "3") (term "0,0,1,0"))
   (rule "commute_or_2" (formula "3") (term "0,1,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,1,0"))
   (rule "all_pull_out3" (formula "3") (term "0"))
   (rule "shift_paren_or" (formula "3") (term "0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "inEqSimp_or_subsumption1" (formula "3") (term "0,0,0"))
   (rule "qeq_literals" (formula "3") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "allLeft" (formula "3") (inst "t=v_e_0"))
   (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0,0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "allLeft" (formula "3") (inst "t=v_n_0"))
   (rule "replace_known_right" (formula "3") (term "1,0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "7")))
   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
   (rule "qeq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
(branch "CUT: forall int v_e; ( 0 <= v_e -> forall int v_n; (1 < v_n & 0 < v_e -> olt(o_0, oGS(v_n, v_e)))) FALSE"
   (rule "hide_right" (formula "2") (proofscript))
   (rule "intValueInduction" (formula "1") (inst "k=k") (proofscript))
   (rule "allRight" (formula "1") (inst "sk=v_e_0") (proofscript))
   (rule "impRight" (formula "1") (proofscript))
   (rule "andLeft" (formula "1") (proofscript))
   (rule "allRight" (formula "3") (inst "sk=v_n_0") (proofscript))
   (rule "impRight" (formula "3") (proofscript))
   (rule "andLeft" (formula "1") (proofscript))
   (rule "powInfiniteRange" (inst "goal=goal") (inst "base=base") (inst "exp=exp") (proofscript))
   (rule "allLeftHide" (formula "1") (inst "t=v_e_0") (proofscript))
   (rule "allLeftHide" (formula "1") (inst "t=v_n_0") (proofscript))
   (rule "impLeft" (formula "1") (proofscript))
   (branch "Case 1"
      (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "1") (proofscript))
       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
      (rule "closeTrue" (formula "5"))
   )
   (branch "Case 2"
      (rule "intLeastNumberPrinciple" (formula "1") (inst "k=k") (proofscript))
      (rule "exLeft" (formula "1") (inst "sk=exp_0") (proofscript))
      (rule "andLeft" (formula "1") (proofscript))
      (rule "andLeft" (formula "1") (proofscript))
      (rule "cut" (inst "cutFormula=exp_0 = Z(1(#))") (proofscript))
      (branch "CUT: exp_0 = 1 TRUE"
         (rule "cut" (inst "cutFormula=!pow(v_n_0, exp_0) = v_n_0") (proofscript))
         (branch "CUT: !pow(v_n_0, exp_0) = v_n_0 TRUE"
            (rule "notLeft" (formula "1") (proofscript))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "8") (term "0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "6"))
            (rule "add_zero_right" (formula "6") (term "0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,1,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
            (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEqRigid" (formula "2") (term "1,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "closeTrue" (formula "8"))
         )
         (branch "CUT: !pow(v_n_0, exp_0) = v_n_0 FALSE"
            (rule "notRight" (formula "9") (proofscript))
            (rule "oGSDef1" (inst "n=n") (inst "m=m") (proofscript))
            (rule "allLeftHide" (formula "1") (inst "t=v_n_0") (proofscript))
            (rule "allLeftHide" (formula "1") (inst "t=v_e_0") (proofscript))
            (rule "impLeft" (formula "1") (proofscript))
            (branch "Case 1"
               (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "8") (proofscript))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "add_literals" (formula "6") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,1,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "9") (term "0,1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "add_zero_right" (formula "7") (term "0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "10") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0"))
               (rule "applyEqRigid" (formula "4") (term "1,0,1,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_geqRight" (formula "10"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "applyEqRigid" (formula "2") (term "1,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "4") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
               (rule "mul_literals" (formula "4") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
               (rule "add_zero_left" (formula "4") (term "0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0"))
               (rule "polySimp_elimOne" (formula "6") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,0"))
               (rule "polySimp_elimOne" (formula "4") (term "0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
               (rule "qeq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
            (branch "Case 2"
               (rule "cut" (inst "cutFormula=olt(o_0, onat(v_e_0))") (proofscript))
               (branch "CUT: olt(o_0, onat(v_e_0)) TRUE"
                  (rule "inEqSimp_ltToLeq" (formula "9") (proofscript))
                  (rule "add_zero_right" (formula "9") (term "0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,1,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "11") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "3"))
                  (rule "applyEqRigid" (formula "3") (term "1,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEq" (formula "10") (term "1") (ifseqformula "2"))
                  (rule "close" (formula "10") (ifseqformula "1"))
               )
               (branch "CUT: olt(o_0, onat(v_e_0)) FALSE"
                  (rule "hide_right" (formula "12") (proofscript))
                  (rule "onatolt" (inst "n=n") (inst "m=m") (proofscript))
                  (rule "allLeftHide" (formula "1") (inst "t=Z(0(#))") (proofscript))
                  (rule "allLeftHide" (formula "1") (inst "t=v_e_0") (proofscript))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "9")) (ifInst ""  (formula "12")) (proofscript))
                  (rule "leq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
      (branch "CUT: exp_0 = 1 FALSE"
         (rule "cut" (inst "cutFormula=!lt(Z(0(#)), sub(exp_0, Z(1(#))))") (proofscript))
         (branch "CUT: !0 < exp_0 - 1 TRUE"
            (rule "notLeft" (formula "1") (proofscript))
            (rule "polySimp_elimSub" (formula "8") (term "1"))
            (rule "mul_literals" (formula "8") (term "1,1"))
            (rule "polySimp_addComm0" (formula "8") (term "1"))
            (rule "inEqSimp_ltRight" (formula "8"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_rightDist" (formula "1") (term "0"))
            (rule "mul_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "8") (term "0,1,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,1,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "6"))
            (rule "add_zero_right" (formula "6") (term "0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,0"))
            (rule "polySimp_elimOne" (formula "4") (term "0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "polySimp_elimOne" (formula "6") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "9"))
            (rule "add_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "9") (ifseqformula "1"))
            (rule "add_zero_left" (formula "9") (term "0,0"))
            (rule "mul_literals" (formula "9") (term "0,0"))
            (rule "qeq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "false_right" (formula "9"))
            (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
            (rule "leq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "olt_discret" (formula "8"))
            (rule "oleq_replace" (formula "8"))
            (rule "orRight" (formula "8"))
            (rule "eqSymm" (formula "9"))
            (rule "olt_discret" (formula "7") (term "1,0,1,0"))
            (rule "oleq_replace" (formula "7") (term "1,0,1,0"))
            (rule "eqSymm" (formula "7") (term "1,1,0,1,0"))
            (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "4") (term "1,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "0,0"))
            (rule "add_zero_left" (formula "4") (term "0"))
            (rule "applyEqRigid" (formula "5") (term "1,1,1,0,0") (ifseqformula "2"))
            (rule "add_zero_right" (formula "5") (term "1,1,0,0"))
            (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
            (rule "qeq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "closeFalse" (formula "5"))
         )
         (branch "CUT: !0 < exp_0 - 1 FALSE"
            (rule "notRight" (formula "8") (proofscript))
            (rule "hide_left" (formula "2") (proofscript))
            (rule "intdivmodEx" (inst "n=n") (inst "d=d") (inst "m=m") (inst "r=r") (proofscript))
            (rule "allLeftHide" (formula "1") (inst "t=v_e_0") (proofscript))
            (rule "allLeftHide" (formula "1") (inst "t=pow(v_n_0, sub(exp_0, Z(1(#))))") (proofscript))
            (rule "impLeft" (formula "1") (proofscript))
            (branch "Case 1"
               (rule "andRight" (formula "8") (proofscript))
               (branch "Case 1"
                  (rule "lt_to_gt" (formula "1") (proofscript))
                  (rule "lt_to_gt" (formula "4") (proofscript))
                  (rule "powGreaterOne" (formula "8") (term "1") (ifseqformula "1") (ifseqformula "4") (proofscript))
                  (rule "polySimp_elimSub" (formula "9") (term "1,1") (proofscript))
                  (rule "mul_literals" (formula "9") (term "1,1,1"))
                  (rule "polySimp_elimSub" (formula "2") (term "0"))
                  (rule "mul_literals" (formula "2") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "1,1,0"))
                  (rule "polySimp_addComm0" (formula "9") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "2") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_ltRight" (formula "9"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,0,1,0"))
                  (rule "inEqSimp_gtToGeq" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,1,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7"))
                  (rule "add_zero_right" (formula "7") (term "0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "9") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "3"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_invertInEq1" (formula "1"))
                  (rule "times_zero_2" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                  (rule "mul_literals" (formula "6") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "3"))
                  (rule "mul_literals" (formula "10") (term "1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "close" (formula "8") (ifseqformula "6") (proofscript))
               )
            )
            (branch "Case 2"
               (rule "exLeft" (formula "1") (inst "sk=m_0") (proofscript))
               (rule "exLeft" (formula "1") (inst "sk=r_0") (proofscript))
               (rule "andLeft" (formula "1") (proofscript))
               (rule "andLeft" (formula "1") (proofscript))
               (rule "andLeft" (formula "1") (proofscript))
               (rule "allLeftHide" (formula "7") (inst "t=sub(exp_0, Z(1(#)))") (proofscript))
               (rule "impLeft" (formula "7") (proofscript))
               (branch "Case 1"
                  (rule "polySimp_elimSub" (formula "2") (term "1,1") (proofscript))
                  (rule "mul_literals" (formula "2") (term "1,1,1"))
                  (rule "polySimp_elimSub" (formula "11") (term "0,1"))
                  (rule "mul_literals" (formula "11") (term "1,0,1"))
                  (rule "polySimp_elimSub" (formula "5") (term "1"))
                  (rule "mul_literals" (formula "5") (term "1,1"))
                  (rule "polySimp_homoEq" (formula "1"))
                  (rule "polySimp_elimSub" (formula "11") (term "1,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,0"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,1,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "5") (term "1"))
                  (rule "polySimp_addComm0" (formula "11") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0,1,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "10") (term "0,1,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "8"))
                  (rule "add_zero_right" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1"))
                  (rule "polySimp_pullOutFactor2" (formula "11") (term "0,1"))
                  (rule "add_literals" (formula "11") (term "1,0,1"))
                  (rule "times_zero_1" (formula "11") (term "0,1"))
                  (rule "leq_literals" (formula "11") (term "1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "inEqSimp_leqRight" (formula "11"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "polySimp_sepPosMonomial" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_invertInEq1" (formula "1"))
                  (rule "times_zero_2" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradEq3" (formula "12") (ifseqformula "1"))
                  (rule "add_zero_left" (formula "12") (term "0,0"))
                  (rule "mul_literals" (formula "12") (term "0,0"))
                  (rule "qeq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "9"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "notLeft" (formula "7") (proofscript))
                  (rule "cut" (inst "cutFormula=geq(m_0, v_n_0)") (proofscript))
                  (branch "CUT: m_0 >= v_n_0 TRUE"
                     (rule "cut" (inst "cutFormula=!lt(v_e_0,
    pow(v_n_0, add(sub(exp_0, Z(1(#))), Z(1(#)))))") (proofscript))
                     (branch "CUT: !v_e_0 < pow(v_n_0, exp_0 - 1 + 1) TRUE"
                        (rule "notLeft" (formula "1") (proofscript))
                        (rule "polySimp_elimSub" (formula "12") (term "0,1,1") (proofscript))
                        (rule "mul_literals" (formula "12") (term "1,0,1,1"))
                        (rule "polySimp_addLiterals" (formula "12") (term "1,1"))
                        (rule "add_zero_right" (formula "12") (term "1,1"))
                        (rule "close" (formula "12") (ifseqformula "7"))
                     )
                     (branch "CUT: !v_e_0 < pow(v_n_0, exp_0 - 1 + 1) FALSE"
                        (rule "notRight" (formula "12") (proofscript))
                        (rule "hide_left" (formula "8") (proofscript))
                        (rule "cut" (inst "cutFormula=!geq(sub(exp_0, Z(1(#))), Z(0(#)))") (proofscript))
                        (branch "CUT: !exp_0 - 1 >= 0 TRUE"
                           (rule "notLeft" (formula "1") (proofscript))
                           (rule "polySimp_elimSub" (formula "7") (term "1") (proofscript))
                           (rule "mul_literals" (formula "7") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "0,1,1"))
                           (rule "mul_literals" (formula "1") (term "1,0,1,1"))
                           (rule "polySimp_addLiterals" (formula "1") (term "1,1"))
                           (rule "add_zero_right" (formula "1") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "12") (term "0"))
                           (rule "mul_literals" (formula "12") (term "1,0"))
                           (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "1,1,1"))
                           (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                           (rule "mul_literals" (formula "4") (term "1,1,1"))
                           (rule "polySimp_homoEq" (formula "3"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "1,1,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "7") (term "1"))
                           (rule "polySimp_addComm0" (formula "12") (term "0"))
                           (rule "polySimp_addComm0" (formula "13") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,1,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "add_zero_right" (formula "9") (term "0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "11") (term "0,1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "12"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltRight" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "add_zero_right" (formula "9") (term "0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0"))
                           (rule "add_literals" (formula "9") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12"))
                           (rule "inEqSimp_commuteGeq" (formula "4"))
                           (rule "inEqSimp_commuteLeq" (formula "8"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "polySimp_sepPosMonomial" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                           (rule "polySimp_elimOne" (formula "10") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_contradEq3" (formula "14") (ifseqformula "2"))
                           (rule "add_zero_left" (formula "14") (term "0,0"))
                           (rule "mul_literals" (formula "14") (term "0,0"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "false_right" (formula "14"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: !exp_0 - 1 >= 0 FALSE"
                           (rule "notRight" (formula "12") (proofscript))
                           (rule "powExpSucc" (formula "2") (term "1") (ifseqformula "1") (proofscript))
                           (rule "geq_to_leq" (formula "3") (proofscript))
                           (rule "cut" (inst "cutFormula=!lt(Z(0(#)), pow(v_n_0, sub(exp_0, Z(1(#)))))") (proofscript))
                           (branch "CUT: !0 < pow(v_n_0, exp_0 - 1) TRUE"
                              (rule "notLeft" (formula "1") (proofscript))
                              (rule "polySimp_elimSub" (formula "14") (term "1,1") (proofscript))
                              (rule "mul_literals" (formula "14") (term "1,1,1"))
                              (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                              (rule "mul_literals" (formula "5") (term "1,1,1"))
                              (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                              (rule "mul_literals" (formula "13") (term "1,1,1"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "polySimp_elimSub" (formula "8") (term "1"))
                              (rule "mul_literals" (formula "8") (term "1,1"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,0,1"))
                              (rule "mul_literals" (formula "2") (term "1,1,0,1"))
                              (rule "polySimp_elimSub" (formula "1") (term "0"))
                              (rule "mul_literals" (formula "1") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "4") (term "1,0,0,0,0"))
                              (rule "mul_literals" (formula "4") (term "1,1,0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "5") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "13") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "8") (term "1"))
                              (rule "polySimp_addComm0" (formula "2") (term "1,0,1"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "polySimp_addComm0" (formula "4") (term "1,0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,1,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "9") (term "0"))
                              (rule "add_literals" (formula "9") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "12") (term "0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltRight" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "14"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "10"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8"))
                              (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9"))
                              (rule "inEqSimp_commuteLeq" (formula "13"))
                              (rule "polySimp_sepPosMonomial" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "6") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                              (rule "polySimp_elimOne" (formula "11") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                              (rule "polySimp_elimOne" (formula "12") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "times_zero_2" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0"))
                              (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "10"))
                              (rule "mul_literals" (formula "15") (term "1,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0"))
                              (rule "leq_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "false_right" (formula "15"))
                              (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "10"))
                              (rule "leq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "11"))
                              (rule "leq_literals" (formula "12") (term "0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "olt_discret" (formula "13"))
                              (rule "oleq_replace" (formula "13"))
                              (rule "orRight" (formula "13"))
                              (rule "eqSymm" (formula "14"))
                              (rule "olt_discret" (formula "12") (term "1,0,1,0"))
                              (rule "oleq_replace" (formula "12") (term "1,0,1,0"))
                              (rule "eqSymm" (formula "12") (term "1,1,0,1,0"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
                              (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                              (rule "mul_literals" (formula "6") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "polySimp_mulComm0" (formula "6") (term "1"))
                              (rule "polySimp_rightDist" (formula "6") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                              (rule "mul_literals" (formula "6") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                              (rule "add_zero_right" (formula "7") (term "0"))
                              (rule "polySimp_rightDist" (formula "7") (term "0"))
                              (rule "mul_literals" (formula "7") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                              (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                              (rule "polySimp_elimOne" (formula "7") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "7") (term "0"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "closeFalse" (formula "7"))
                           )
                           (branch "CUT: !0 < pow(v_n_0, exp_0 - 1) FALSE"
                              (rule "notRight" (formula "13") (proofscript))
                              (rule "multWeakLessAux" (inst "right=right") (inst "left=left") (inst "factor=factor") (proofscript))
                              (rule "allLeftHide" (formula "1") (inst "t=m_0") (proofscript))
                              (rule "allLeftHide" (formula "1") (inst "t=v_n_0") (proofscript))
                              (rule "allLeftHide" (formula "1") (inst "t=pow(v_n_0, sub(exp_0, Z(1(#))))") (proofscript))
                              (rule "impLeft" (formula "1") (proofscript))
                              (branch "Case 1"
                                 (rule "close" (formula "14") (ifseqformula "1") (proofscript))
                              )
                              (branch "Case 2"
                                 (rule "andLeft" (formula "1") (proofscript))
                                 (rule "hide_left" (formula "1") (proofscript))
                                 (rule "cut" (inst "cutFormula=!leq(mul(pow(v_n_0, sub(exp_0, Z(1(#)))), v_n_0),
     mul(pow(v_n_0, sub(exp_0, Z(1(#)))), m_0))") (proofscript))
                                 (branch "CUT: ! pow(v_n_0, exp_0 - 1) * v_n_0 <= pow(v_n_0, exp_0 - 1) * m_0 TRUE"
                                    (rule "notLeft" (formula "1") (proofscript))
                                    (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5") (proofscript))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: ! pow(v_n_0, exp_0 - 1) * v_n_0 <= pow(v_n_0, exp_0 - 1) * m_0 FALSE"
                                    (rule "notRight" (formula "15") (proofscript))
                                    (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "6") (proofscript))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                    (rule "true_left" (formula "2"))
                                    (rule "polySimp_homoEq" (formula "6"))
                                    (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                                    (rule "mul_literals" (formula "15") (term "1,1,1"))
                                    (rule "polySimp_elimSub" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
                                    (rule "mul_literals" (formula "1") (term "1,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                                    (rule "mul_literals" (formula "2") (term "1,1,1"))
                                    (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                                    (rule "mul_literals" (formula "7") (term "1,1,1"))
                                    (rule "polySimp_elimSub" (formula "10") (term "1"))
                                    (rule "mul_literals" (formula "10") (term "1,1"))
                                    (rule "polySimp_elimSub" (formula "4") (term "1,0,1"))
                                    (rule "mul_literals" (formula "4") (term "1,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "3") (term "0"))
                                    (rule "mul_literals" (formula "3") (term "1,0"))
                                    (rule "polySimp_elimSub" (formula "6") (term "1,0,0,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,1,0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "15") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
                                    (rule "polySimp_addComm0" (formula "2") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "7") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "10") (term "1"))
                                    (rule "polySimp_addComm0" (formula "4") (term "1,0,1"))
                                    (rule "polySimp_addComm0" (formula "3") (term "0"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "6") (term "0"))
                                    (rule "polySimp_addComm0" (formula "6") (term "1,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0"))
                                    (rule "add_literals" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                                    (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,1,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "14") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12"))
                                    (rule "add_zero_right" (formula "12") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                    (rule "inEqSimp_ltRight" (formula "15"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "3"))
                                    (rule "add_zero_right" (formula "3") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "8"))
                                    (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "8") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11"))
                                    (rule "add_zero_right" (formula "11") (term "0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0"))
                                    (rule "add_literals" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14"))
                                    (rule "inEqSimp_commuteLeq" (formula "10"))
                                    (rule "inEqSimp_commuteLeq" (formula "9"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                    (rule "polySimp_sepPosMonomial" (formula "7"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "1"))
                                    (rule "polySimp_rightDist" (formula "7") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "7") (term "0,1"))
                                    (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "7"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                    (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                    (rule "polySimp_elimOne" (formula "8") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0"))
                                    (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "11"))
                                    (rule "mul_literals" (formula "16") (term "1,0,0"))
                                    (rule "add_literals" (formula "16") (term "0,0"))
                                    (rule "leq_literals" (formula "16") (term "0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "false_right" (formula "16"))
                                    (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "13"))
                                    (rule "leq_literals" (formula "14") (term "0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "11"))
                                    (rule "leq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "olt_discret" (formula "13") (term "1,0,1,0"))
                                    (rule "oleq_replace" (formula "13") (term "1,0,1,0"))
                                    (rule "eqSymm" (formula "13") (term "1,1,0,1,0"))
                                    (rule "olt_discret" (formula "14"))
                                    (rule "oleq_replace" (formula "14"))
                                    (rule "orRight" (formula "14"))
                                    (rule "eqSymm" (formula "15"))
                                    (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                                    (rule "mul_literals" (formula "3") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                    (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                    (rule "mul_literals" (formula "4") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "4") (term "0"))
                                    (rule "add_literals" (formula "4") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "4") (term "1,0"))
                                    (rule "add_zero_right" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "10") (term "0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "closeFalse" (formula "10"))
                                 )
                              )
                           )
                        )
                     )
                  )
                  (branch "CUT: m_0 >= v_n_0 FALSE"
                     (rule "oGSDef2" (inst "n=n") (inst "m=m") (inst "k=k") (inst "a=a") (inst "c=c") (proofscript))
                     (rule "allLeftHide" (formula "1") (inst "t=v_n_0") (proofscript))
                     (rule "allLeftHide" (formula "1") (inst "t=v_e_0") (proofscript))
                     (rule "allLeftHide" (formula "1") (inst "t=sub(exp_0, Z(1(#)))") (proofscript))
                     (rule "allLeftHide" (formula "1") (inst "t=m_0") (proofscript))
                     (rule "allLeftHide" (formula "1") (inst "t=r_0") (proofscript))
                     (rule "impLeft" (formula "1") (proofscript))
                     (branch "Case 1"
                        (rule "replace_known_left" (formula "11") (term "0,0,0,0,0") (ifseqformula "1") (proofscript))
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")))
                        (rule "polySimp_homoEq" (formula "1"))
                        (rule "polySimp_elimSub" (formula "13") (term "1,1"))
                        (rule "mul_literals" (formula "13") (term "1,1,1"))
                        (rule "polySimp_elimSub" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "1,1,1"))
                        (rule "polySimp_elimSub" (formula "11") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
                        (rule "polySimp_elimSub" (formula "1") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "1") (term "1,1,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "5") (term "1"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "11") (term "1,1,0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0,1,0"))
                        (rule "inEqSimp_geqRight" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "add_literals" (formula "8") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "9"))
                        (rule "add_zero_right" (formula "9") (term "0"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0,0,1,0"))
                        (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "11") (term "0,1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0"))
                        (rule "add_zero_right" (formula "12") (term "0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "12") (term "0,1"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_ltRight" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "7"))
                        (rule "add_zero_right" (formula "7") (term "0"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "4") (term "0"))
                        (rule "polySimp_addAssoc" (formula "7") (term "0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "6"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "13") (term "1,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,1,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0"))
                        (rule "polySimp_sepPosMonomial" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0"))
                        (rule "mul_literals" (formula "13") (term "1,0"))
                        (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "7"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_leqRight" (formula "13"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_invertInEq1" (formula "1"))
                        (rule "times_zero_2" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "14") (ifseqformula "8"))
                        (rule "mul_literals" (formula "14") (term "1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "false_right" (formula "14"))
                        (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "11"))
                        (rule "leq_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "olt_discret" (formula "13"))
                        (rule "oleq_replace" (formula "13"))
                        (rule "orRight" (formula "13"))
                        (rule "eqSymm" (formula "14"))
                        (rule "olt_discret" (formula "12") (term "1,0,1,0"))
                        (rule "oleq_replace" (formula "12") (term "1,0,1,0"))
                        (rule "eqSymm" (formula "12") (term "1,1,0,1,0"))
                        (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                        (rule "leq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "applyEqRigid" (formula "3") (term "1,0") (ifseqformula "5"))
                        (rule "times_zero_1" (formula "3") (term "0"))
                        (rule "polySimp_homoEq" (formula "3"))
                        (rule "times_zero_2" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "5"))
                        (rule "add_zero_right" (formula "2") (term "1"))
                        (rule "polySimp_sepPosMonomial" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1"))
                        (rule "applyEq" (formula "1") (term "1") (ifseqformula "3"))
                        (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "3"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "3"))
                        (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "13") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "11") (term "1,1,1,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "10"))
                        (rule "leq_literals" (formula "6") (term "0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                        (rule "andLeft" (formula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                        (rule "add_literals" (formula "4") (term "1,1,0"))
                        (rule "times_zero_1" (formula "4") (term "1,0"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "leq_literals" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                     (branch "Case 2"
                        (rule "cut" (inst "cutFormula=!lt(r_0, v_e_0)") (proofscript))
                        (branch "CUT: !r_0 < v_e_0 TRUE"
                           (rule "notLeft" (formula "1") (proofscript))
                           (rule "eqSymm" (formula "1") (proofscript))
                           (rule "polySimp_elimSub" (formula "14") (term "1,1"))
                           (rule "mul_literals" (formula "14") (term "1,1,1"))
                           (rule "polySimp_elimSub" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "1,1,1"))
                           (rule "polySimp_homoEq" (formula "2"))
                           (rule "polySimp_elimSub" (formula "6") (term "1"))
                           (rule "mul_literals" (formula "6") (term "1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimSub" (formula "2") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,1,0,0,0,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "3") (term "1,1"))
                           (rule "polySimp_addComm0" (formula "6") (term "1"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_ltRight" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11"))
                           (rule "add_zero_right" (formula "11") (term "0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "9") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "13") (term "0,1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,0,0,1,0"))
                           (rule "inEqSimp_ltRight" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "add_zero_right" (formula "9") (term "0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0"))
                           (rule "add_literals" (formula "9") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "7"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "8"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "polySimp_sepPosMonomial" (formula "5"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                           (rule "polySimp_elimOne" (formula "10") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "9"))
                           (rule "mul_literals" (formula "15") (term "1,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0"))
                           (rule "leq_literals" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "false_right" (formula "15"))
                           (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "12"))
                           (rule "leq_literals" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "olt_discret" (formula "13") (term "1,0,1,0"))
                           (rule "oleq_replace" (formula "13") (term "1,0,1,0"))
                           (rule "eqSymm" (formula "13") (term "1,1,0,1,0"))
                           (rule "olt_discret" (formula "14"))
                           (rule "oleq_replace" (formula "14"))
                           (rule "orRight" (formula "14"))
                           (rule "eqSymm" (formula "15"))
                           (rule "omegaDef1" (formula "4") (term "0,0,0,0"))
                           (rule "omegaDef1" (formula "4") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "2"))
                           (rule "mul_literals" (formula "13") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                           (rule "mul_literals" (formula "13") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "13"))
                           (rule "leq_literals" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                           (rule "mul_literals" (formula "7") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "polySimp_mulComm0" (formula "7") (term "1"))
                           (rule "polySimp_rightDist" (formula "7") (term "1"))
                           (rule "mul_literals" (formula "7") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "2"))
                           (rule "andLeft" (formula "7"))
                           (rule "inEqSimp_homoInEq1" (formula "7"))
                           (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                           (rule "add_literals" (formula "7") (term "1,1,0"))
                           (rule "times_zero_1" (formula "7") (term "1,0"))
                           (rule "add_zero_right" (formula "7") (term "0"))
                           (rule "leq_literals" (formula "7"))
                           (rule "closeFalse" (formula "7"))
                        )
                        (branch "CUT: !r_0 < v_e_0 FALSE"
                           (rule "notRight" (formula "12") (proofscript))
                           (rule "cut" (inst "cutFormula=m_0 = Z(0(#))") (proofscript))
                           (branch "CUT: m_0 = 0 TRUE"
                              (rule "eqSymm" (formula "3") (proofscript))
                              (rule "polySimp_elimSub" (formula "4") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "4") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "8") (term "1"))
                              (rule "mul_literals" (formula "8") (term "1,1"))
                              (rule "polySimp_elimSub" (formula "15") (term "1,1"))
                              (rule "mul_literals" (formula "15") (term "1,1,1"))
                              (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                              (rule "mul_literals" (formula "5") (term "1,1,1"))
                              (rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "3") (term "1,1,1,0,0,0"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "polySimp_addComm0" (formula "8") (term "1"))
                              (rule "polySimp_addComm0" (formula "15") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "5") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "3") (term "1,1,0,0,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "1,0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "11"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "11") (term "0"))
                              (rule "add_literals" (formula "11") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "10") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,1,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "14") (term "0,1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12"))
                              (rule "add_zero_right" (formula "12") (term "0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                              (rule "inEqSimp_ltRight" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "10"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                              (rule "mul_literals" (formula "10") (term "0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "7"))
                              (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "7") (term "0"))
                              (rule "polySimp_addAssoc" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "9"))
                              (rule "inEqSimp_commuteLeq" (formula "14"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "8"))
                              (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "applyEqRigid" (formula "6") (term "1,1,0") (ifseqformula "3"))
                              (rule "times_zero_1" (formula "6") (term "1,0"))
                              (rule "add_zero_right" (formula "6") (term "0"))
                              (rule "applyEqRigid" (formula "5") (term "0,1,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "eqSymm" (formula "5"))
                              (rule "applyEqRigid" (formula "2") (term "1,0,0") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "2") (term "0,0"))
                              (rule "applyEqRigid" (formula "16") (term "1") (ifseqformula "5"))
                              (rule "polySimp_sepNegMonomial" (formula "6"))
                              (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                              (rule "polySimp_elimOne" (formula "6") (term "0"))
                              (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "6"))
                              (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "5"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "leq_literals" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "CUT: m_0 = 0 FALSE"
                              (rule "cut" (inst "cutFormula=!lt(Z(0(#)), m_0)") (proofscript))
                              (branch "CUT: !0 < m_0 TRUE"
                                 (rule "notLeft" (formula "1") (proofscript))
                                 (rule "eqSymm" (formula "2") (proofscript))
                                 (rule "polySimp_elimSub" (formula "7") (term "1"))
                                 (rule "mul_literals" (formula "7") (term "1,1"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "3") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "16") (term "1,1"))
                                 (rule "mul_literals" (formula "16") (term "1,1,1"))
                                 (rule "polySimp_elimSub" (formula "4") (term "1,1"))
                                 (rule "mul_literals" (formula "4") (term "1,1,1"))
                                 (rule "polySimp_elimSub" (formula "2") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "2") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_homoEq" (formula "3"))
                                 (rule "polySimp_addComm0" (formula "7") (term "1"))
                                 (rule "polySimp_addComm0" (formula "16") (term "1,1"))
                                 (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                                 (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "3") (term "1,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "inEqSimp_ltRight" (formula "13"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "15"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "10") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12"))
                                 (rule "add_zero_right" (formula "12") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0"))
                                 (rule "add_literals" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0,1,0"))
                                 (rule "inEqSimp_ltRight" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "10"))
                                 (rule "add_zero_right" (formula "10") (term "0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "7"))
                                 (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "7") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0"))
                                 (rule "add_literals" (formula "10") (term "0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14"))
                                 (rule "inEqSimp_commuteLeq" (formula "9"))
                                 (rule "inEqSimp_commuteLeq" (formula "8"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "6"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "0,1"))
                                 (rule "inEqSimp_invertInEq1" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "times_zero_2" (formula "3") (term "1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "1,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "0,1,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                 (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                 (rule "polySimp_elimOne" (formula "7") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "17") (ifseqformula "10"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0"))
                                 (rule "leq_literals" (formula "17") (term "0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "false_right" (formula "17"))
                                 (rule "inEqSimp_strengthen0" (formula "3") (ifseqformula "16"))
                                 (rule "add_zero_right" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradEq3" (formula "16") (ifseqformula "3"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0"))
                                 (rule "qeq_literals" (formula "16") (term "0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "false_right" (formula "16"))
                                 (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "14") (term "0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "8") (term "0"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "closeFalse" (formula "8"))
                              )
                              (branch "CUT: !0 < m_0 FALSE"
                                 (rule "notRight" (formula "13") (proofscript))
                                 (rule "cut" (inst "cutFormula=!olt(o_0, onat(m_0))") (proofscript))
                                 (branch "CUT: !olt(o_0, onat(m_0)) TRUE"
                                    (rule "notLeft" (formula "1") (proofscript))
                                    (rule "onatolt" (inst "n=n") (inst "m=m") (proofscript))
                                    (rule "allLeftHide" (formula "1") (inst "t=Z(0(#))") (proofscript))
                                    (rule "allLeftHide" (formula "1") (inst "t=m_0") (proofscript))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "2")) (ifInst ""  (formula "15")) (proofscript))
                                    (rule "leq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "CUT: !olt(o_0, onat(m_0)) FALSE"
                                    (rule "notRight" (formula "14") (proofscript))
                                    (rule "oexpGreaterEqualOne" (inst "x=x") (inst "y=y") (proofscript))
                                    (rule "allLeftHide" (formula "1") (inst "t=omega") (proofscript))
                                    (rule "allLeftHide" (formula "1") (inst "t=oGS(v_n_0, sub(exp_0, Z(1(#))))") (proofscript))
                                    (rule "impLeft" (formula "1") (proofscript))
                                    (branch "Case 1"
                                        (builtin "One Step Simplification" (formula "15") (proofscript))
                                       (rule "closeTrue" (formula "15"))
                                    )
                                    (branch "Case 2"
                                       (rule "cut" (inst "cutFormula=!olt(o_0, oexp(omega, oGS(v_n_0, sub(exp_0, Z(1(#))))))") (proofscript))
                                       (branch "CUT: !olt(o_0, oexp(omega, oGS(v_n_0, exp_0 - 1))) TRUE"
                                          (rule "notLeft" (formula "1") (proofscript))
                                          (rule "eqSymm" (formula "5") (proofscript))
                                          (rule "polySimp_elimSub" (formula "16") (term "1,1,1"))
                                          (rule "mul_literals" (formula "16") (term "1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "1") (term "1,1,1"))
                                          (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                                          (rule "polySimp_elimSub" (formula "6") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "6") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                                          (rule "mul_literals" (formula "7") (term "1,1,1"))
                                          (rule "polySimp_elimSub" (formula "10") (term "1"))
                                          (rule "mul_literals" (formula "10") (term "1,1"))
                                          (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                          (rule "mul_literals" (formula "19") (term "1,1,1"))
                                          (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "5") (term "1,1,1,0,0,0"))
                                          (rule "polySimp_homoEq" (formula "6"))
                                          (rule "polySimp_addComm0" (formula "16") (term "1,1,1"))
                                          (rule "polySimp_addComm0" (formula "1") (term "1,1,1"))
                                          (rule "polySimp_addComm0" (formula "7") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "10") (term "1"))
                                          (rule "polySimp_addComm0" (formula "19") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "1,0,0,0,0"))
                                          (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "18"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "oleq_replace" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "inEqSimp_ltToLeq" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,1,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "13") (term "0"))
                                          (rule "add_literals" (formula "13") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "12") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "4"))
                                          (rule "add_zero_right" (formula "4") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "14"))
                                          (rule "add_zero_right" (formula "14") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,0"))
                                          (rule "add_zero_right" (formula "16") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,0,1,0"))
                                          (rule "inEqSimp_ltRight" (formula "19"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "9"))
                                          (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "9") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12"))
                                          (rule "add_zero_right" (formula "12") (term "0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                          (rule "add_literals" (formula "12") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "11"))
                                          (rule "inEqSimp_commuteLeq" (formula "10"))
                                          (rule "inEqSimp_commuteLeq" (formula "16"))
                                          (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "8"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                          (rule "polySimp_rightDist" (formula "8") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                          (rule "polySimp_elimOne" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                          (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                          (rule "polySimp_elimOne" (formula "9") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "0"))
                                          (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "12"))
                                          (rule "mul_literals" (formula "20") (term "1,0,0"))
                                          (rule "add_literals" (formula "20") (term "0,0"))
                                          (rule "leq_literals" (formula "20") (term "0"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "false_right" (formula "20"))
                                          (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "5"))
                                          (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "19") (term "0,0"))
                                          (rule "leq_literals" (formula "19") (term "0"))
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "false_right" (formula "19"))
                                          (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
                                          (rule "leq_literals" (formula "16") (term "0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "5"))
                                          (rule "leq_literals" (formula "10") (term "0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "olt_discret" (formula "4"))
                                          (rule "oleq_replace" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1"))
                                          (rule "olt_discret" (formula "15") (term "1,0,1,0"))
                                          (rule "oleq_replace" (formula "15") (term "1,0,1,0"))
                                          (rule "eqSymm" (formula "15") (term "1,1,0,1,0"))
                                          (rule "omegaDef1" (formula "16") (term "0,1"))
                                          (rule "olt_discret" (formula "18"))
                                          (rule "oleq_replace" (formula "18"))
                                          (rule "orRight" (formula "18"))
                                          (rule "eqSymm" (formula "19"))
                                          (rule "omegaDef1" (formula "8") (term "0,0,0,0"))
                                          (rule "olt_discret" (formula "17"))
                                          (rule "oleq_replace" (formula "17"))
                                          (rule "orRight" (formula "17"))
                                          (rule "eqSymm" (formula "18"))
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "orRight" (formula "18"))
                                          (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "17"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "18")) (ifInst ""  (formula "19")))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                       (branch "CUT: !olt(o_0, oexp(omega, oGS(v_n_0, exp_0 - 1))) FALSE"
                                          (rule "notRight" (formula "16") (proofscript))
                                          (rule "hide_left" (formula "2") (proofscript))
                                          (rule "hide_left" (formula "15") (proofscript))
                                          (rule "cut" (inst "cutFormula=!oleq(oexp(omega, oGS(v_n_0, sub(exp_0, Z(1(#))))),
      otimes(oexp(omega,
                  oGS(v_n_0, sub(exp_0, Z(1(#))))),
             onat(m_0)))") (proofscript))
                                          (branch "CUT: !oleq(oexp(omega, oGS(v_n_0, exp_0 - 1)), otimes(oexp(omega, oGS(v_n_0, exp_0 - 1)), onat(m_0))) TRUE"
                                             (rule "notLeft" (formula "1") (proofscript))
                                             (rule "otimesWeakMonotoneQ" (inst "k=k") (inst "i=i") (inst "j=j") (proofscript))
                                             (rule "allLeftHide" (formula "1") (inst "t=oexp(omega, oGS(v_n_0, sub(exp_0, Z(1(#)))))") (proofscript))
                                             (rule "allLeftHide" (formula "1") (inst "t=o_1") (proofscript))
                                             (rule "allLeftHide" (formula "1") (inst "t=onat(m_0)") (proofscript))
                                             (rule "impLeft" (formula "1") (proofscript))
                                             (branch "Case 1"
                                                (rule "eqSymm" (formula "5") (proofscript))
                                                (rule "polySimp_elimSub" (formula "1") (term "1,1,1"))
                                                (rule "mul_literals" (formula "1") (term "1,1,1,1"))
                                                (rule "polySimp_elimSub" (formula "10") (term "1"))
                                                (rule "mul_literals" (formula "10") (term "1,1"))
                                                (rule "polySimp_homoEq" (formula "6"))
                                                (rule "polySimp_elimSub" (formula "7") (term "1,1"))
                                                (rule "mul_literals" (formula "7") (term "1,1,1"))
                                                (rule "polySimp_elimSub" (formula "16") (term "1,1,0"))
                                                (rule "mul_literals" (formula "16") (term "1,1,1,0"))
                                                (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "16") (term "1,1,1,0,1"))
                                                (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                                (rule "mul_literals" (formula "19") (term "1,1,1"))
                                                (rule "polySimp_elimSub" (formula "5") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "5") (term "1,1,1,0,0,0"))
                                                (rule "polySimp_elimSub" (formula "6") (term "1,0,0,0,0"))
                                                (rule "mul_literals" (formula "6") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "1,1,1"))
                                                (rule "polySimp_addComm0" (formula "10") (term "1"))
                                                (rule "polySimp_addComm0" (formula "7") (term "1,1"))
                                                (rule "polySimp_addComm0" (formula "16") (term "1,1,0"))
                                                (rule "polySimp_addComm0" (formula "16") (term "1,1,0,1"))
                                                (rule "polySimp_addComm0" (formula "19") (term "1,1"))
                                                (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "6") (term "1,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                (rule "oleq_replace" (formula "15"))
                                                (rule "orRight" (formula "15"))
                                                (rule "eqSymm" (formula "16"))
                                                (rule "inEqSimp_geqRight" (formula "19"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "14"))
                                                (rule "add_zero_right" (formula "14") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "4"))
                                                (rule "add_zero_right" (formula "4") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "12") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "13"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "13") (term "0"))
                                                (rule "add_literals" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "5"))
                                                (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                (rule "oleq_replace" (formula "18"))
                                                (rule "orRight" (formula "18"))
                                                (rule "eqSymm" (formula "19"))
                                                (rule "inEqSimp_ltRight" (formula "21"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12"))
                                                (rule "add_zero_right" (formula "12") (term "0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "9"))
                                                (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0"))
                                                (rule "add_literals" (formula "12") (term "0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "11"))
                                                (rule "inEqSimp_commuteLeq" (formula "16"))
                                                (rule "inEqSimp_commuteLeq" (formula "10"))
                                                (rule "polySimp_sepPosMonomial" (formula "8"))
                                                (rule "polySimp_mulComm0" (formula "8") (term "1"))
                                                (rule "polySimp_rightDist" (formula "8") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                                                (rule "polySimp_mulComm0" (formula "8") (term "0,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                                (rule "polySimp_elimOne" (formula "5") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "0"))
                                                (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "5"))
                                                (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "21") (term "0,0"))
                                                (rule "leq_literals" (formula "21") (term "0"))
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "false_right" (formula "21"))
                                                (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "12"))
                                                (rule "mul_literals" (formula "21") (term "1,0,0"))
                                                (rule "add_literals" (formula "21") (term "0,0"))
                                                (rule "leq_literals" (formula "21") (term "0"))
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "false_right" (formula "21"))
                                                (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
                                                (rule "leq_literals" (formula "16") (term "0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "5"))
                                                (rule "leq_literals" (formula "10") (term "0"))
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "omegaDef1" (formula "3") (term "0,1"))
                                                (rule "olt_discret" (formula "5"))
                                                (rule "oleq_replace" (formula "5"))
                                                (rule "eqSymm" (formula "5") (term "1"))
                                                (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "17"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "16")))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                             (branch "Case 2"
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (proofscript))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "CUT: !oleq(oexp(omega, oGS(v_n_0, exp_0 - 1)), otimes(oexp(omega, oGS(v_n_0, exp_0 - 1)), onat(m_0))) FALSE"
                                             (rule "notRight" (formula "15") (proofscript))
                                             (rule "cut" (inst "cutFormula=!olt(o_0,
     otimes(oexp(omega,
                 oGS(v_n_0, sub(exp_0, Z(1(#))))),
            onat(m_0)))") (proofscript))
                                             (branch "CUT: !olt(o_0, otimes(oexp(omega, oGS(v_n_0, exp_0 - 1)), onat(m_0))) TRUE"
                                                (rule "notLeft" (formula "1") (proofscript))
                                                (rule "eqSymm" (formula "6") (proofscript))
                                                (rule "polySimp_elimSub" (formula "16") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "16") (term "1,1,1,0,1"))
                                                (rule "polySimp_elimSub" (formula "1") (term "1,1,0"))
                                                (rule "mul_literals" (formula "1") (term "1,1,1,0"))
                                                (rule "polySimp_elimSub" (formula "1") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "1") (term "1,1,1,0,1"))
                                                (rule "polySimp_homoEq" (formula "7"))
                                                (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                                (rule "mul_literals" (formula "19") (term "1,1,1"))
                                                (rule "polySimp_elimSub" (formula "2") (term "1,1,1"))
                                                (rule "mul_literals" (formula "2") (term "1,1,1,1"))
                                                (rule "polySimp_elimSub" (formula "11") (term "1"))
                                                (rule "mul_literals" (formula "11") (term "1,1"))
                                                (rule "polySimp_elimSub" (formula "8") (term "1,1"))
                                                (rule "mul_literals" (formula "8") (term "1,1,1"))
                                                (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "6") (term "1,1,1,0,0,0"))
                                                (rule "polySimp_elimSub" (formula "7") (term "1,0,0,0,0"))
                                                (rule "mul_literals" (formula "7") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "16") (term "1,1,0,1"))
                                                (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "1,1,0,1"))
                                                (rule "polySimp_addComm0" (formula "19") (term "1,1"))
                                                (rule "polySimp_addComm0" (formula "2") (term "1,1,1"))
                                                (rule "polySimp_addComm0" (formula "11") (term "1"))
                                                (rule "polySimp_addComm0" (formula "8") (term "1,1"))
                                                (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "7") (term "1,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "7") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                (rule "inEqSimp_geqRight" (formula "18"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "5"))
                                                (rule "add_zero_right" (formula "5") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "15"))
                                                (rule "add_zero_right" (formula "15") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "6"))
                                                (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "13"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "13") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "14"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "14") (term "0"))
                                                (rule "add_literals" (formula "14") (term "0,0"))
                                                (rule "oleq_replace" (formula "2"))
                                                (rule "eqSymm" (formula "2") (term "1"))
                                                (rule "inEqSimp_ltRight" (formula "19"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "13"))
                                                (rule "add_zero_right" (formula "13") (term "0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "10"))
                                                (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                                (rule "add_literals" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "12"))
                                                (rule "inEqSimp_commuteLeq" (formula "17"))
                                                (rule "inEqSimp_commuteLeq" (formula "11"))
                                                (rule "polySimp_sepPosMonomial" (formula "9"))
                                                (rule "polySimp_mulComm0" (formula "9") (term "1"))
                                                (rule "polySimp_rightDist" (formula "9") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                                                (rule "polySimp_mulComm0" (formula "9") (term "0,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                                (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                                (rule "polySimp_elimOne" (formula "6") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                                (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "0"))
                                                (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "13"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0"))
                                                (rule "leq_literals" (formula "20") (term "0"))
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "false_right" (formula "20"))
                                                (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "6"))
                                                (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "19") (term "0,0"))
                                                (rule "leq_literals" (formula "19") (term "0"))
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "false_right" (formula "19"))
                                                (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "6"))
                                                (rule "leq_literals" (formula "11") (term "0"))
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "15"))
                                                (rule "leq_literals" (formula "16") (term "0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "omegaDef1" (formula "16") (term "0,0,1"))
                                                (rule "olt_discret" (formula "6"))
                                                (rule "oleq_replace" (formula "6"))
                                                (rule "eqSymm" (formula "6") (term "1"))
                                                (rule "olt_discret" (formula "18"))
                                                (rule "oleq_replace" (formula "18"))
                                                (rule "orRight" (formula "18"))
                                                (rule "eqSymm" (formula "19"))
                                                (rule "omegaDef1" (formula "5") (term "0,1"))
                                                (rule "omegaDef1" (formula "9") (term "0,0,0,0"))
                                                (rule "olt_discret" (formula "17"))
                                                (rule "oleq_replace" (formula "17"))
                                                (rule "orRight" (formula "17"))
                                                (rule "eqSymm" (formula "18"))
                                                (rule "otimesOne" (formula "18"))
                                                 (builtin "One Step Simplification" (formula "18"))
                                                (rule "olt_discret" (formula "5"))
                                                (rule "oleq_replace" (formula "5"))
                                                (rule "eqSymm" (formula "5") (term "1"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "omegaDef1" (formula "4") (term "0,0,1,0"))
                                                (rule "omegaDef1" (formula "4") (term "0,0,0"))
                                                (rule "omegaDef1" (formula "4") (term "0,0,0,1"))
                                                (rule "omegaDef1" (formula "4") (term "0,1,1"))
                                                (rule "omegaDef1" (formula "1") (term "0"))
                                                (rule "omegaDef1" (formula "17") (term "0,0,1"))
                                                (rule "omegaDef1" (formula "18") (term "0,1,0"))
                                                (rule "omegaDef1" (formula "5") (term "0,1,1"))
                                                (rule "omegaDef1" (formula "5") (term "0,1,0"))
                                                (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "2"))
                                                (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                                                (rule "mul_literals" (formula "11") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                                                (rule "commute_or" (formula "4"))
                                                (rule "omegaDef1" (formula "4") (term "0,0,0,0"))
                                                (rule "omegaDef1" (formula "4") (term "0,1,0"))
                                                (rule "omegaDef1" (formula "4") (term "0,0,1"))
                                                (rule "omegaDef1" (formula "4") (term "0,0,1,1"))
                                                (rule "commute_or" (formula "6"))
                                                (rule "commute_or" (formula "5"))
                                                (rule "omegaDef1" (formula "5") (term "0,1,0"))
                                                (rule "omegaDef1" (formula "5") (term "0,1,1"))
                                                (rule "commute_or" (formula "18") (term "0"))
                                                (rule "omegaDef1" (formula "18") (term "0,0,0"))
                                                (rule "commute_or" (formula "5") (term "0"))
                                                (rule "omegaDef1" (formula "5") (term "0,0,0"))
                                                (rule "commute_and" (formula "18"))
                                                (rule "omegaDef1" (formula "18") (term "0,0,1"))
                                                (rule "cut_direct" (formula "6") (term "0"))
                                                (branch "CUT: onat(m_0) = o_1 TRUE"
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "18"))
                                                   (rule "orRight" (formula "18"))
                                                   (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "18"))
                                                    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "19")))
                                                   (rule "applyEqRigid" (formula "4") (term "1,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "applyEqRigid" (formula "16") (term "1,1") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "4")))
                                                   (rule "closeTrue" (formula "16"))
                                                )
                                                (branch "CUT: onat(m_0) = o_1 FALSE"
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "17"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "false_right" (formula "19"))
                                                   (rule "cut_direct" (formula "4") (term "0"))
                                                   (branch "CUT: otimes(oexp(omega, oGS(v_n_0, -1 + exp_0)), onat(m_0)) = oexp(omega, oGS(v_n_0, -1 + exp_0)) TRUE"
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "applyEq" (formula "18") (term "1") (ifseqformula "4"))
                                                      (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "18"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "4"))
                                                      (rule "omegaDef1" (formula "4") (term "0,1"))
                                                      (rule "omegaDef1" (formula "4") (term "0,0,0"))
                                                      (rule "omegaDef1" (formula "18") (term "0,1"))
                                                      (rule "omegaDef1" (formula "5") (term "0,0"))
                                                      (rule "omegaDef1" (formula "9") (term "0,0,0"))
                                                      (rule "cut_direct" (formula "5") (term "0"))
                                                      (branch "CUT: omega = o_1 TRUE"
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "true_left" (formula "6"))
                                                         (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "otimesOne" (formula "4"))
                                                          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "17")))
                                                         (rule "closeFalse" (formula "4"))
                                                      )
                                                      (branch "CUT: omega = o_1 FALSE"
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "applyEq" (formula "19") (term "1,1") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "19"))
                                                         (rule "applyEq" (formula "9") (term "1,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "eqSymm" (formula "4"))
                                                         (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "eqSymm" (formula "4"))
                                                         (rule "close" (formula "18") (ifseqformula "4"))
                                                      )
                                                   )
                                                   (branch "CUT: otimes(oexp(omega, oGS(v_n_0, -1 + exp_0)), onat(m_0)) = oexp(omega, oGS(v_n_0, -1 + exp_0)) FALSE"
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "omegaDef1" (formula "17") (term "0,1"))
                                                      (rule "omegaDef1" (formula "17") (term "0,0,0"))
                                                      (rule "omegaDef1" (formula "4") (term "0,0"))
                                                      (rule "omegaDef1" (formula "4") (term "0,0,1"))
                                                      (rule "cut_direct" (formula "5") (term "0,0"))
                                                      (branch "CUT: omega = o_1 TRUE"
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "true_left" (formula "6"))
                                                         (rule "applyEqRigid" (formula "17") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "17"))
                                                         (rule "eqSymm" (formula "17"))
                                                         (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqRigid" (formula "9") (term "0,0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "applyEqRigid" (formula "19") (term "0,0,1") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
                                                         (rule "closeTrue" (formula "19"))
                                                      )
                                                      (branch "CUT: omega = o_1 FALSE"
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "omegaDef1" (formula "17") (term "0"))
                                                         (rule "omegaDef1" (formula "5") (term "0,1,1"))
                                                         (rule "cut_direct" (formula "5") (term "0"))
                                                         (branch "CUT: oGS(v_n_0, -1 + exp_0) = o_0 TRUE"
                                                             (builtin "One Step Simplification" (formula "6"))
                                                            (rule "true_left" (formula "6"))
                                                            (rule "applyEqRigid" (formula "20") (term "1,0,1") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")))
                                                            (rule "closeTrue" (formula "20"))
                                                         )
                                                         (branch "CUT: oGS(v_n_0, -1 + exp_0) = o_0 FALSE"
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "olt_transAut" (formula "21") (ifseqformula "5") (ifseqformula "4"))
                                                            (rule "closeTrue" (formula "21"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: !olt(o_0, otimes(oexp(omega, oGS(v_n_0, exp_0 - 1)), onat(m_0))) FALSE"
                                                (rule "notRight" (formula "16") (proofscript))
                                                (rule "hide_left" (formula "2") (proofscript))
                                                (rule "oaddMonotone" (inst "x=x") (inst "y=y") (proofscript))
                                                (rule "eqSymm" (formula "7") (proofscript))
                                                (rule "polySimp_elimSub" (formula "9") (term "1,1"))
                                                (rule "mul_literals" (formula "9") (term "1,1,1"))
                                                (rule "polySimp_homoEq" (formula "8"))
                                                (rule "polySimp_elimSub" (formula "2") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "2") (term "1,1,1,0,1"))
                                                (rule "polySimp_elimSub" (formula "19") (term "1,1"))
                                                (rule "mul_literals" (formula "19") (term "1,1,1"))
                                                (rule "polySimp_elimSub" (formula "3") (term "1,1,1"))
                                                (rule "mul_literals" (formula "3") (term "1,1,1,1"))
                                                (rule "polySimp_elimSub" (formula "12") (term "1"))
                                                (rule "mul_literals" (formula "12") (term "1,1"))
                                                (rule "polySimp_elimSub" (formula "7") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "7") (term "1,1,1,0,0,0"))
                                                (rule "polySimp_elimSub" (formula "8") (term "1,0,0,0,0"))
                                                (rule "mul_literals" (formula "8") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "9") (term "1,1"))
                                                (rule "polySimp_addComm0" (formula "2") (term "1,1,0,1"))
                                                (rule "polySimp_addComm0" (formula "19") (term "1,1"))
                                                (rule "polySimp_addComm0" (formula "3") (term "1,1,1"))
                                                (rule "polySimp_addComm0" (formula "12") (term "1"))
                                                (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "8") (term "1,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "8") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "8") (term "0"))
                                                (rule "oleq_replace" (formula "1") (term "0,0"))
                                                (rule "eqSymm" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_geqRight" (formula "18"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "7"))
                                                (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "15"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "15") (term "0"))
                                                (rule "add_literals" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "16"))
                                                (rule "add_zero_right" (formula "16") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "14"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "14") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "6"))
                                                (rule "add_zero_right" (formula "6") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                                (rule "inEqSimp_ltRight" (formula "19"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "11") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "14"))
                                                (rule "add_zero_right" (formula "14") (term "0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                                (rule "add_literals" (formula "14") (term "0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "12"))
                                                (rule "inEqSimp_commuteLeq" (formula "18"))
                                                (rule "inEqSimp_commuteLeq" (formula "13"))
                                                (rule "polySimp_sepPosMonomial" (formula "10"))
                                                (rule "polySimp_mulComm0" (formula "10") (term "1"))
                                                (rule "polySimp_rightDist" (formula "10") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                                                (rule "polySimp_mulComm0" (formula "10") (term "0,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                                                (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                                (rule "polySimp_elimOne" (formula "8") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                                                (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                                                (rule "polySimp_elimOne" (formula "16") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                                                (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                                (rule "polySimp_elimOne" (formula "17") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                                                (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                                (rule "polySimp_elimOne" (formula "7") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "0"))
                                                (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "14"))
                                                (rule "mul_literals" (formula "20") (term "1,0,0"))
                                                (rule "add_literals" (formula "20") (term "0,0"))
                                                (rule "leq_literals" (formula "20") (term "0"))
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "false_right" (formula "20"))
                                                (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "7"))
                                                (rule "times_zero_1" (formula "19") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "19") (term "0,0"))
                                                (rule "leq_literals" (formula "19") (term "0"))
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "false_right" (formula "19"))
                                                (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "17"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                 (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "12") (term "0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "omegaDef1" (formula "4") (term "0,0,1"))
                                                (rule "omegaDef1" (formula "6") (term "0,1"))
                                                (rule "olt_discret" (formula "18"))
                                                (rule "oleq_replace" (formula "18"))
                                                (rule "orRight" (formula "18"))
                                                (rule "eqSymm" (formula "19"))
                                                (rule "olt_discret" (formula "7"))
                                                (rule "oleq_replace" (formula "7"))
                                                (rule "eqSymm" (formula "7") (term "1"))
                                                (rule "omegaDef1" (formula "10") (term "0,0,0,0"))
                                                (rule "olt_discret" (formula "5"))
                                                (rule "oleq_replace" (formula "5"))
                                                (rule "eqSymm" (formula "5") (term "1"))
                                                (rule "otimesOne" (formula "5") (term "1"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "olt_discret" (formula "6"))
                                                (rule "oleq_replace" (formula "6"))
                                                (rule "eqSymm" (formula "6") (term "1"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "omegaDef1" (formula "4") (term "0"))
                                                (rule "omegaDef1" (formula "5") (term "0,1,0,1"))
                                                (rule "omegaDef1" (formula "5") (term "0,0,1,0"))
                                                (rule "omegaDef1" (formula "6") (term "0,1,1"))
                                                (rule "omegaDef1" (formula "6") (term "0,1,0"))
                                                (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                                                (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                                (rule "mul_literals" (formula "12") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                                (rule "commute_or" (formula "3") (term "0,0"))
                                                (rule "commute_or" (formula "7"))
                                                (rule "commute_or" (formula "6"))
                                                (rule "omegaDef1" (formula "6") (term "0,1,1"))
                                                (rule "omegaDef1" (formula "6") (term "0,1,0"))
                                                (rule "commute_or" (formula "5") (term "0,1"))
                                                (rule "omegaDef1" (formula "5") (term "0,0,0,1"))
                                                (rule "commute_or" (formula "6") (term "0"))
                                                (rule "omegaDef1" (formula "6") (term "0,0,0"))
                                                (rule "cnf_rightDist" (formula "5"))
                                                (rule "andLeft" (formula "5"))
                                                (rule "omegaDef1" (formula "5") (term "0,0,1,0"))
                                                (rule "omegaDef1" (formula "6") (term "0,0,1,1"))
                                                (rule "omegaDef1" (formula "5") (term "0,0,1"))
                                                (rule "commute_or" (formula "5"))
                                                (rule "omegaDef1" (formula "5") (term "0,0,1,1"))
                                                (rule "omegaDef1" (formula "5") (term "0,0,0"))
                                                (rule "cut_direct" (formula "8") (term "0"))
                                                (branch "CUT: onat(m_0) = o_1 TRUE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "8"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "true_left" (formula "6"))
                                                   (rule "applyEqRigid" (formula "5") (term "1,1,1") (ifseqformula "7"))
                                                    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "6")))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "applyEqRigid" (formula "9") (term "1,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "omegaDef1" (formula "9") (term "0,0,0"))
                                                   (rule "cut_direct" (formula "5") (term "0,0"))
                                                   (branch "CUT: omega = o_1 TRUE"
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "true_left" (formula "6"))
                                                      (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "5"))
                                                      (rule "applyEqRigid" (formula "9") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "omegaDef1" (formula "5") (term "0"))
                                                      (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
                                                      (rule "allLeft" (formula "3") (inst "t=o_1"))
                                                      (rule "allLeft" (formula "3") (inst "t=oGS(v_n_0, r_0)"))
                                                      (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "11"))
                                                      (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "19"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEq" (formula "11") (term "0") (ifseqformula "3"))
                                                      (rule "eqSymm" (formula "11"))
                                                      (rule "close" (formula "20") (ifseqformula "11"))
                                                   )
                                                   (branch "CUT: omega = o_1 FALSE"
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "omegaDef1" (formula "17") (term "0"))
                                                      (rule "omegaDef1" (formula "5") (term "0,1,1"))
                                                      (rule "cut_direct" (formula "5") (term "0"))
                                                      (branch "CUT: oGS(v_n_0, -1 + exp_0) = o_0 TRUE"
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "true_left" (formula "6"))
                                                         (rule "applyEq" (formula "9") (term "1,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "allLeft" (formula "3") (inst "t=o_1"))
                                                         (rule "allLeft" (formula "3") (inst "t=oGS(v_n_0, r_0)"))
                                                         (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "11"))
                                                         (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "21"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEq" (formula "3") (term "1") (ifseqformula "11"))
                                                         (rule "close" (formula "20") (ifseqformula "3"))
                                                      )
                                                      (branch "CUT: oGS(v_n_0, -1 + exp_0) = o_0 FALSE"
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "omegaDef1" (formula "5") (term "0,1"))
                                                         (rule "allLeft" (formula "3") (inst "t=oexp(omega, oGS(v_n_0, add(Z(neglit(1(#))), exp_0)))"))
                                                         (rule "omegaDef1" (formula "3") (term "0,1,0,0"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,1,1,0"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,1,0"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,0,0,0"))
                                                         (rule "allLeft" (formula "3") (inst "t=oGS(v_n_0, r_0)"))
                                                         (rule "applyEqRigid" (formula "3") (term "1,1") (ifseqformula "11"))
                                                         (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "11"))
                                                         (rule "eqSymm" (formula "3") (term "0"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,1"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,0"))
                                                         (rule "cut_direct" (formula "3") (term "0"))
                                                         (branch "CUT: oexp(omega, oGS(v_n_0, -1 + exp_0)) = oGS(v_n_0, v_e_0) TRUE"
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                            (rule "applyEqRigid" (formula "4") (term "0,1,1,0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "7") (term "1") (ifseqformula "3"))
                                                            (rule "close" (formula "21") (ifseqformula "7"))
                                                         )
                                                         (branch "CUT: oexp(omega, oGS(v_n_0, -1 + exp_0)) = oGS(v_n_0, v_e_0) FALSE"
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "olt_transAut" (formula "22") (ifseqformula "7") (ifseqformula "3"))
                                                            (rule "closeTrue" (formula "22"))
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: onat(m_0) = o_1 FALSE"
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "19"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "omegaDef1" (formula "5") (term "0,0,1"))
                                                   (rule "cut_direct" (formula "6") (term "0,0"))
                                                   (branch "CUT: omega = o_1 TRUE"
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "true_left" (formula "7"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "6"))
                                                      (rule "applyEqRigid" (formula "10") (term "0,0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "10"))
                                                      (rule "applyEq" (formula "5") (term "0,0,1") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "7")))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "omegaDef1" (formula "5") (term "0"))
                                                      (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "6"))
                                                      (rule "allLeft" (formula "3") (inst "t=onat(m_0)"))
                                                      (rule "allLeft" (formula "3") (inst "t=oGS(v_n_0, r_0)"))
                                                      (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "11"))
                                                      (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "11"))
                                                      (rule "cut_direct" (formula "3") (term "0"))
                                                      (branch "CUT: oGS(v_n_0, v_e_0) = onat(m_0) TRUE"
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "true_left" (formula "4"))
                                                         (rule "applyEqRigid" (formula "11") (term "1") (ifseqformula "3"))
                                                         (rule "applyEqRigid" (formula "20") (term "1") (ifseqformula "3"))
                                                         (rule "close" (formula "20") (ifseqformula "8"))
                                                      )
                                                      (branch "CUT: oGS(v_n_0, v_e_0) = onat(m_0) FALSE"
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "olt_transAut" (formula "21") (ifseqformula "8") (ifseqformula "3"))
                                                         (rule "closeTrue" (formula "21"))
                                                      )
                                                   )
                                                   (branch "CUT: omega = o_1 FALSE"
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "omegaDef1" (formula "18") (term "0"))
                                                      (rule "omegaDef1" (formula "6") (term "0,1,1"))
                                                      (rule "cut_direct" (formula "6") (term "0"))
                                                      (branch "CUT: oGS(v_n_0, -1 + exp_0) = o_0 TRUE"
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "true_left" (formula "7"))
                                                         (rule "applyEqRigid" (formula "10") (term "1,0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "10"))
                                                         (rule "applyEqRigid" (formula "5") (term "1,0,1") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "7")))
                                                         (rule "true_left" (formula "5"))
                                                         (rule "allLeft" (formula "3") (inst "t=onat(m_0)"))
                                                         (rule "allLeft" (formula "3") (inst "t=oGS(v_n_0, r_0)"))
                                                         (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "11"))
                                                         (rule "applyEqRigid" (formula "3") (term "1,1") (ifseqformula "11"))
                                                         (rule "cut_direct" (formula "3") (term "0"))
                                                         (branch "CUT: oGS(v_n_0, v_e_0) = onat(m_0) TRUE"
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "applyEqRigid" (formula "21") (term "1") (ifseqformula "3"))
                                                            (rule "close" (formula "21") (ifseqformula "8"))
                                                         )
                                                         (branch "CUT: oGS(v_n_0, v_e_0) = onat(m_0) FALSE"
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "olt_transAut" (formula "22") (ifseqformula "8") (ifseqformula "3"))
                                                            (rule "closeTrue" (formula "22"))
                                                         )
                                                      )
                                                      (branch "CUT: oGS(v_n_0, -1 + exp_0) = o_0 FALSE"
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "omegaDef1" (formula "6") (term "0,1"))
                                                         (rule "allLeft" (formula "3") (inst "t=otimes(oexp(omega,
            oGS(v_n_0, add(Z(neglit(1(#))), exp_0))),
       onat(m_0))"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,0,1,0"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,0,0,0,0"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,1,0,0"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,0,1,1,0"))
                                                         (rule "allLeft" (formula "3") (inst "t=oGS(v_n_0, r_0)"))
                                                         (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "12"))
                                                         (rule "eqSymm" (formula "3") (term "0"))
                                                         (rule "applyEqRigid" (formula "3") (term "1,1") (ifseqformula "12"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,0,1"))
                                                         (rule "omegaDef1" (formula "3") (term "0,0,0,0"))
                                                         (rule "cut_direct" (formula "3") (term "0"))
                                                         (branch "CUT: otimes(oexp(omega, oGS(v_n_0, -1 + exp_0)), onat(m_0)) = oGS(v_n_0, v_e_0) TRUE"
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "3"))
                                                            (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "3"))
                                                            (rule "close" (formula "23") (ifseqformula "7"))
                                                         )
                                                         (branch "CUT: otimes(oexp(omega, oGS(v_n_0, -1 + exp_0)), onat(m_0)) = oGS(v_n_0, v_e_0) FALSE"
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "olt_transAut" (formula "24") (ifseqformula "7") (ifseqformula "3"))
                                                            (rule "closeTrue" (formula "24"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
)
}
