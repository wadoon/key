\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Dec 12 11:52:05 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Dec 12 11:52:05 CET 2016
name=seqDepthConcat
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
cut 'seqDepth(seqConcat(f_s1, f_s2)) = 0';
rule seqDepthZero;
instantiate hide var=s with='seqConcat(f_s1, f_s2)';
rule impLeft
tryclose branch;
tryclose branch;
cut '!\forall int i;(0 <= i & i < f_s1.length
    -> Seq::instance(f_s1[i]) = FALSE)';
rule notLeft;
tryclose branch;
rule notRight;
cut '!\forall int i;(0 <= i & i < f_s2.length
    -> Seq::instance(f_s2[i]) = FALSE)';
rule notLeft;
rule allRight;
rule impRight;
rule andLeft;
instantiate hide var=i with='f_s1.length+i_1' occ=2;
rule impLeft;
tryclose branch;
rule notRight;
rule hide_left formula='\forall int i;(0 <= i & i < seqConcat(f_s1, f_s2).length
  -> Seq::instance(seqConcat(f_s1, f_s2)[i]) = FALSE)';
rule defseqDepthZero;
tryclose branch;
cut '!seqDepth(seqConcat(f_s1, f_s2)) > 0';
rule notLeft;
tryclose branch;
rule notRight;
rule defseqDepthSucc;
instantiate      var='n' with='seqDepth(seqConcat(f_s1, f_s2)) - 1';
instantiate hide var='s' with='seqConcat(f_s1, f_s2)';
rule equiv_Left;
rule impLeft occ=1;
tryclose branch;
rule andLeft;
rule andLeft;
cut '!\forall int i;
   (   0 <= i & i < f_s1.length
    ->   Seq::instance(f_s1[i]) = FALSE
       | seqDepth((Seq)f_s1[i]) <= seqDepth(seqConcat(f_s1, f_s2)) - 1)';
rule notLeft;
rule allRight;
rule impRight;
rule andLeft;
instantiate var=i with='i_5';
rule impLeft occ=1;
rule andRight;
tryclose branch;
rule lenOfSeqConcat formula='i_5 < seqConcat(f_s1, f_s2).length';
rule hide_right formula='  Seq::instance(f_s1[i_5]) = FALSE
 | seqDepth((Seq)(f_s1[i_5])) <= seqDepth(seqConcat(f_s1, f_s2)) - 1';
rule hide_right formula='  seqDepth(seqConcat(f_s1, f_s2))
 = \if (seqDepth(f_s1) < seqDepth(f_s2))  \then (seqDepth(f_s2))  \else (seqDepth(f_s1))';
tryclose branch;
rule notRight;
rule hide_left occ=1;
cut '!\forall int i;
   (   0 <= i & i < f_s2.length
    ->   Seq::instance(f_s2[i]) = FALSE
       | seqDepth((Seq)f_s2[i]) <= seqDepth(seqConcat(f_s1, f_s2)) - 1)';
rule notLeft;
rule hide_left occ=4;
rule allRight;
rule impRight;
rule andLeft;
instantiate hide var=i with='f_s1.length + i_6' occ=2;
rule impLeft;
rule andRight;
rule hide_left occ=2;
rule hide_left occ=2;
tryclose branch;
rule notRight;
rule hide_left occ=5;
rule seqDepthUpperBound occ=0;
rule impLeft;
tryclose branch;
rule hide_left occ=1;
rule seqDepthUpperBound occ=0;
rule impLeft;
tryclose branch;
rule hide_left occ=2;
rule hide_left occ=2;
rule exLeft;
rule andLeft;
rule andLeft;
rule andLeft;
cut 'j_14 < f_s1.length';
rule seqDepthLowerBoundAxiom;
tryclose branch;
rule seqDepthLowerBoundAxiom;
tryclose;
"