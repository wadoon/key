\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Dec 11 18:50:27 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=3000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Sun Dec 11 18:50:27 CET 2016
name=seqDepthZero
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "e47dfd30ecfe9379139a8af06931b936d8e8cf76"))

(autoModeTime "37238582")

(branch "dummy ID"
(rule "allRight" (formula "1") (newnames "v_s,v_i") (inst "sk=v_s_0"))
(rule "impRight" (formula "1"))
(rule "allRight" (formula "2") (inst "sk=v_i_0"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "cut" (inst "cutFormula=!Seq::instance(any::seqGet(v_s_0, v_i_0)) = TRUE"))
(branch "CUT: !Seq::instance(v_s_0[v_i_0]) = TRUE TRUE"
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "5"))
)
(branch "CUT: !Seq::instance(v_s_0[v_i_0]) = TRUE FALSE"
   (rule "notRight" (formula "4"))
   (rule "hide_right" (formula "5"))
   (rule "defseqDepthGreaterZero" (inst "s=s"))
   (rule "allLeftHide" (formula "1") (inst "t=(Seq)(any::seqGet(v_s_0, v_i_0))"))
   (rule "defseqDepthSucc" (inst "n=n") (inst "s=s") (inst "j=j") (inst "i=i"))
   (rule "swapQuantifiersAll" (formula "1"))
   (rule "allLeftHide" (formula "1") (inst "t=v_s_0"))
   (rule "allLeftHide" (formula "1") (inst "t=sub(seqDepth(v_s_0), Z(1(#)))"))
   (rule "equiv_Left" (formula "1"))
   (rule "impLeft" (formula "2"))
   (branch "Case 1"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
      (rule "notLeft" (formula "1"))
      (rule "polySimp_homoEq" (formula "7"))
      (rule "polySimp_elimSub" (formula "6") (term "0,1"))
      (rule "mul_literals" (formula "6") (term "1,0,1"))
      (rule "polySimp_elimSub" (formula "6") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "6") (term "1,1,1,1,0,0,0"))
      (rule "polySimp_elimSub" (formula "6") (term "1,1,1,0,1,0"))
      (rule "mul_literals" (formula "6") (term "1,1,1,1,0,1,0"))
      (rule "polySimp_elimSub" (formula "7") (term "0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,0"))
      (rule "polySimp_addLiterals" (formula "7") (term "0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0"))
      (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,0"))
      (rule "times_zero_1" (formula "7") (term "0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "closeTrue" (formula "7"))
   )
   (branch "Case 2"
      (builtin "One Step Simplification" (formula "2"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "exLeft" (formula "3") (inst "sk=j_0"))
      (rule "polySimp_elimSub" (formula "1") (term "0,1"))
      (rule "mul_literals" (formula "1") (term "1,0,1"))
      (rule "polySimp_addLiterals" (formula "1") (term "1"))
      (rule "add_zero_right" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "polySimp_elimSub" (formula "3") (term "0"))
      (rule "mul_literals" (formula "3") (term "1,0"))
      (rule "polySimp_elimSub" (formula "1") (term "1,1,1,0"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "2") (term "1,1,1"))
      (rule "mul_literals" (formula "2") (term "1,1,1,1"))
      (rule "polySimp_addComm0" (formula "3") (term "0"))
      (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0"))
      (rule "polySimp_addComm0" (formula "2") (term "1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0"))
      (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "8"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "qeq_literals" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
)
)

}
