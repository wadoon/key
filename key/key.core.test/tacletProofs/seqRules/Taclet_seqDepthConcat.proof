\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Dec 12 15:43:43 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Dec 12 15:43:43 CET 2016
name=seqDepthConcat
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "2187c8e06d83984db41da9f2fb7dde9f68c20224"))

(autoModeTime "5598567102")

(branch "dummy ID"
(rule "cut" (newnames "f_s1,f_s2") (inst "cutFormula=seqDepth(seqConcat(f_s1, f_s2)) = Z(0(#))"))
(branch "CUT: seqDepth(seqConcat(f_s1, f_s2)) = 0 TRUE"
   (rule "seqDepthZero" (inst "s=s") (inst "i=i"))
   (rule "allLeftHide" (formula "1") (inst "t=seqConcat(f_s1, f_s2)"))
   (rule "impLeft" (formula "1"))
   (branch "Case 1"
      (rule "close" (formula "2") (ifseqformula "1"))
   )
   (branch "Case 2"
      (rule "cut" (inst "cutFormula=!\\forall int i;
   (   leq(Z(0(#)), i) & lt(i, seqLen(f_s1))
    -> Seq::instance(any::seqGet(f_s1, i)) = FALSE)"))
      (branch "CUT: !forall int i; ( 0 <= i & i < f_s1.length -> Seq::instance(f_s1[i]) = FALSE) TRUE"
         (rule "notLeft" (formula "1"))
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "allRight" (formula "3") (inst "sk=i_0"))
         (rule "impRight" (formula "3"))
         (rule "andLeft" (formula "1"))
         (rule "notRight" (formula "5"))
         (rule "eqSymm" (formula "6"))
         (rule "lenOfSeqConcat" (formula "4") (term "1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "applyEqRigid" (formula "6") (term "1") (ifseqformula "5"))
         (rule "ifEqualsInteger" (formula "6"))
         (rule "orRight" (formula "6"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,0,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,0"))
         (rule "seqDepthNonNegative" (formula "5") (term "0"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "6"))
         (rule "qeq_literals" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "getOfSeqConcat" (formula "4") (term "0,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,2,0,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "4") (term "1,2,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,1,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0,1,0"))
         (rule "seqDepthNonNegative" (formula "7") (term "0,1"))
         (rule "seqDepthNonNegative" (formula "7") (term "0,1"))
         (rule "seqDepthNonNegative" (formula "8") (term "1,1,0"))
         (rule "seqDepthNonNegative" (formula "8") (term "0,0"))
         (rule "seqDepthNonNegative" (formula "9") (term "1,1,0,0"))
         (rule "seqDepthNonNegative" (formula "9") (term "0,0,0"))
         (rule "seqDepthNonNegative" (formula "2") (term "0"))
         (rule "seqDepthNonNegative" (formula "1") (term "0"))
         (rule "inEqSimp_notGeq" (formula "9") (term "0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,0"))
         (rule "seqDepthNonNegative" (formula "9") (term "0,0"))
         (rule "seqDepthNonNegative" (formula "9") (term "1,0"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "0,1,0,0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "0,0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
         (rule "polySimp_mulAssoc" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,1,1,0,0"))
         (rule "commute_and" (formula "8"))
         (rule "seqDepthNonNegative" (formula "8") (term "0,0"))
         (rule "seqDepthNonNegative" (formula "8") (term "0,1"))
         (rule "seqDepthNonNegative" (formula "8") (term "1,1,1"))
         (rule "commute_and" (formula "9"))
         (rule "seqDepthNonNegative" (formula "9") (term "0,0"))
         (rule "seqDepthNonNegative" (formula "9") (term "0,1"))
         (rule "seqDepthNonNegative" (formula "9") (term "1,1"))
         (rule "applyEq_and_int4" (formula "8"))
         (rule "inEqSimp_homoInEq1" (formula "8") (term "1"))
         (rule "mul_literals" (formula "8") (term "1,0,1"))
         (rule "add_zero_right" (formula "8") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1"))
         (rule "mul_literals" (formula "8") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "8") (term "0,1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "false_right" (formula "8"))
         (rule "seqGetAlphaCast" (formula "3") (term "0,0"))
         (rule "castDel" (formula "3") (term "0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "lenNonNegative" (formula "5") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "5"))
         (rule "cut_direct" (formula "9") (term "1"))
         (branch "CUT: seqDepth(f_s2) <= seqDepth(f_s1) TRUE"
            (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "10"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "3"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0"))
            (rule "leq_literals" (formula "10") (term "0"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "seqDepthNonNegative" (formula "1") (term "0"))
            (rule "seqDepthNonNegative" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
            (rule "leq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "seqDepthNonNegative" (formula "3") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
            (rule "leq_literals" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
            (rule "mul_literals" (formula "2") (term "0,0"))
            (rule "add_zero_left" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
            (rule "leq_literals" (formula "2") (term "0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "lenNonNegative" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "allLeft" (formula "9") (inst "t=i_0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,2,0,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,1"))
            (rule "replace_known_left" (formula "9") (term "0,0,0,0,1") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1"))
            (rule "polySimp_mulAssoc" (formula "9") (term "0,1,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "9") (term "0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
            (rule "mul_literals" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
            (rule "andLeft" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "1,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "leq_literals" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
         (branch "CUT: seqDepth(f_s2) <= seqDepth(f_s1) FALSE"
            (builtin "One Step Simplification" (formula "10"))
            (rule "false_right" (formula "10"))
            (rule "inEqSimp_leqRight" (formula "9"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "seqDepthNonNegative" (formula "1") (term "0"))
            (rule "seqDepthNonNegative" (formula "1") (term "1,1"))
            (rule "lenNonNegative" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "allLeft" (formula "9") (inst "t=i_0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,2,0,0,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "1,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "0,0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "9") (term "0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0"))
            (rule "polySimp_mulAssoc" (formula "9") (term "0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "9") (term "0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,1"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,1"))
            (rule "replace_known_left" (formula "9") (term "0,0,0,0,1") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "9") (term "0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
            (rule "mul_literals" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "polySimp_elimOne" (formula "8") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "8"))
            (rule "andLeft" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "1,1,0"))
            (rule "times_zero_1" (formula "7") (term "1,0"))
            (rule "add_zero_right" (formula "7") (term "0"))
            (rule "leq_literals" (formula "7"))
            (rule "closeFalse" (formula "7"))
         )
      )
      (branch "CUT: !forall int i; ( 0 <= i & i < f_s1.length -> Seq::instance(f_s1[i]) = FALSE) FALSE"
         (rule "notRight" (formula "3"))
         (rule "cut" (inst "cutFormula=!\\forall int i;
   (   leq(Z(0(#)), i) & lt(i, seqLen(f_s2))
    -> Seq::instance(any::seqGet(f_s2, i)) = FALSE)"))
         (branch "CUT: !forall int i; ( 0 <= i & i < f_s2.length -> Seq::instance(f_s2[i]) = FALSE) TRUE"
            (rule "notLeft" (formula "1"))
            (rule "allRight" (formula "4") (inst "sk=i_1"))
            (rule "impRight" (formula "4"))
            (rule "andLeft" (formula "1"))
            (rule "allLeftHide" (formula "4") (inst "t=add(seqLen(f_s1), i_1)"))
            (rule "impLeft" (formula "4"))
            (branch "Case 1"
               (builtin "One Step Simplification" (formula "3"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "notRight" (formula "6"))
               (rule "eqSymm" (formula "7"))
               (rule "polySimp_addComm0" (formula "6") (term "1,0"))
               (rule "polySimp_addComm0" (formula "6") (term "0,1"))
               (rule "lenOfSeqConcat" (formula "6") (term "1,1"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "6") (term "0,1"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1"))
               (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,1"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "6") (term "0,0,1"))
               (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_leqRight" (formula "6"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
               (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "6"))
               (rule "ifEqualsInteger" (formula "7"))
               (rule "orRight" (formula "7"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
               (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
               (rule "seqDepthNonNegative" (formula "6") (term "0"))
               (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "7"))
               (rule "qeq_literals" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "seqDepthNonNegative" (formula "7") (term "0,1"))
               (rule "seqDepthNonNegative" (formula "9") (term "0,1"))
               (rule "seqDepthNonNegative" (formula "9") (term "1,1,0"))
               (rule "seqDepthNonNegative" (formula "9") (term "0,0"))
               (rule "seqDepthNonNegative" (formula "10") (term "1,1,0,0"))
               (rule "seqDepthNonNegative" (formula "10") (term "0,0,0"))
               (rule "seqDepthNonNegative" (formula "2") (term "0"))
               (rule "seqDepthNonNegative" (formula "1") (term "0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,0"))
               (rule "seqDepthNonNegative" (formula "10") (term "0,0"))
               (rule "seqDepthNonNegative" (formula "10") (term "1,0"))
               (rule "nnf_imp2or" (formula "7") (term "0"))
               (rule "nnf_notAnd" (formula "7") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
               (rule "commute_and" (formula "9"))
               (rule "seqDepthNonNegative" (formula "9") (term "0,1"))
               (rule "seqDepthNonNegative" (formula "9") (term "0,0"))
               (rule "seqDepthNonNegative" (formula "9") (term "1,1,1"))
               (rule "commute_and" (formula "10"))
               (rule "seqDepthNonNegative" (formula "10") (term "1,1"))
               (rule "seqDepthNonNegative" (formula "10") (term "0,1"))
               (rule "seqDepthNonNegative" (formula "10") (term "0,0"))
               (rule "applyEq_and_int4" (formula "9"))
               (rule "inEqSimp_homoInEq1" (formula "9") (term "1"))
               (rule "mul_literals" (formula "9") (term "1,0,1"))
               (rule "add_zero_right" (formula "9") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1"))
               (rule "mul_literals" (formula "9") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "9") (term "0,1"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "false_right" (formula "9"))
               (rule "seqGetAlphaCast" (formula "4") (term "0,0"))
               (rule "castDel" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "lenNonNegative" (formula "6") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "lenNonNegative" (formula "3") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
               (rule "mul_literals" (formula "3") (term "0,0"))
               (rule "add_zero_left" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "3"))
               (rule "qeq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "closeFalse" (formula "7"))
            )
            (branch "Case 2"
               (builtin "One Step Simplification" (formula "4"))
               (builtin "One Step Simplification" (formula "3"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "notLeft" (formula "4"))
               (rule "notRight" (formula "6"))
               (rule "eqSymm" (formula "7"))
               (rule "polySimp_addComm0" (formula "6") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
               (rule "applyEq" (formula "7") (term "1") (ifseqformula "5"))
               (rule "ifEqualsInteger" (formula "7"))
               (rule "orRight" (formula "7"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
               (rule "mul_literals" (formula "4") (term "0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
               (rule "seqDepthNonNegative" (formula "5") (term "0"))
               (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "getOfSeqConcat" (formula "6") (term "0,0"))
               (rule "polySimp_elimSub" (formula "6") (term "1,2,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "1,2,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,1,2,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,1,2,0,0"))
               (rule "add_zero_right" (formula "6") (term "1,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0,0"))
               (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,0,0"))
               (rule "add_literals" (formula "6") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "6") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "6") (term "0,0,0,0"))
               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "6"))
            )
         )
         (branch "CUT: !forall int i; ( 0 <= i & i < f_s2.length -> Seq::instance(f_s2[i]) = FALSE) FALSE"
            (rule "notRight" (formula "4"))
            (rule "hide_left" (formula "3"))
            (rule "defseqDepthZero" (inst "s=s") (inst "i=i"))
            (builtin "One Step Simplification" (formula "3"))
            (builtin "One Step Simplification" (formula "2"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "5"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0"))
            (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "4"))
            (rule "ifEqualsInteger" (formula "5"))
            (rule "orRight" (formula "5"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "0,0,0"))
            (rule "seqDepthNonNegative" (formula "4") (term "0"))
            (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "seqDepthNonNegative" (formula "6") (term "0,1"))
            (rule "seqDepthNonNegative" (formula "6") (term "0,1"))
            (rule "seqDepthNonNegative" (formula "7") (term "1,1,0"))
            (rule "seqDepthNonNegative" (formula "7") (term "0,0"))
            (rule "seqDepthNonNegative" (formula "8") (term "1,1,0,0"))
            (rule "seqDepthNonNegative" (formula "8") (term "0,0,0"))
            (rule "seqDepthNonNegative" (formula "2") (term "0"))
            (rule "seqDepthNonNegative" (formula "1") (term "0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,0"))
            (rule "seqDepthNonNegative" (formula "8") (term "0,0"))
            (rule "seqDepthNonNegative" (formula "8") (term "1,0"))
            (rule "nnf_imp2or" (formula "5") (term "0"))
            (rule "nnf_imp2or" (formula "4") (term "0"))
            (rule "nnf_imp2or" (formula "3") (term "0"))
            (rule "nnf_notAnd" (formula "5") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
            (rule "mul_literals" (formula "5") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "4") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
            (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
            (rule "mul_literals" (formula "4") (term "1,0,0,0"))
            (rule "nnf_notAll" (formula "3") (term "0,0"))
            (rule "nnf_imp2or" (formula "3") (term "0,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "commute_and" (formula "7"))
            (rule "seqDepthNonNegative" (formula "7") (term "0,1"))
            (rule "seqDepthNonNegative" (formula "7") (term "0,0"))
            (rule "seqDepthNonNegative" (formula "7") (term "1,1,1"))
            (rule "commute_and" (formula "8"))
            (rule "seqDepthNonNegative" (formula "8") (term "0,0"))
            (rule "seqDepthNonNegative" (formula "8") (term "1,1"))
            (rule "seqDepthNonNegative" (formula "8") (term "0,1"))
            (rule "applyEq_and_int4" (formula "7"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "1"))
            (rule "times_zero_2" (formula "7") (term "1,0,1"))
            (rule "add_zero_right" (formula "7") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1"))
            (rule "mul_literals" (formula "7") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "7") (term "0,1"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "false_right" (formula "7"))
            (rule "ex_pull_out2" (formula "3") (term "0"))
            (rule "commute_or" (formula "3") (term "0,0"))
            (rule "cnf_rightDist" (formula "3") (term "0,0"))
            (rule "commute_or" (formula "3") (term "1,0,0"))
            (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
            (rule "commute_or" (formula "3") (term "0,0,0,0"))
            (rule "commute_or" (formula "3") (term "1,0,0,0"))
            (rule "commute_and_2" (formula "3") (term "0,0"))
            (rule "lenNonNegative" (formula "5") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "lenNonNegative" (formula "4") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "cut_direct" (formula "9") (term "1"))
            (branch "CUT: seqDepth(f_s2) <= seqDepth(f_s1) TRUE"
               (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "10"))
               (rule "add_literals" (formula "3") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "3"))
               (rule "mul_literals" (formula "10") (term "1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0"))
               (rule "leq_literals" (formula "10") (term "0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "false_right" (formula "10"))
               (rule "seqDepthNonNegative" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "seqDepthNonNegative" (formula "1") (term "0"))
               (rule "seqDepthNonNegative" (formula "3") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
               (rule "leq_literals" (formula "3") (term "0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
               (rule "times_zero_1" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
               (rule "leq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "allLeft" (formula "4") (inst "t=f_s1"))
               (rule "exLeft" (formula "4") (inst "sk=i_4"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "4"))
               (rule "inEqSimp_contradEq7" (formula "4") (term "1") (ifseqformula "3"))
               (rule "mul_literals" (formula "4") (term "1,0,0,1"))
               (rule "add_literals" (formula "4") (term "0,0,1"))
               (rule "leq_literals" (formula "4") (term "0,1"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_contradEq7" (formula "6") (term "0") (ifseqformula "3"))
               (rule "mul_literals" (formula "6") (term "1,0,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0"))
               (rule "leq_literals" (formula "6") (term "0,0"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "3"))
               (rule "mul_literals" (formula "5") (term "1,0,0,0"))
               (rule "add_literals" (formula "5") (term "0,0,0"))
               (rule "leq_literals" (formula "5") (term "0,0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "allLeft" (formula "11") (inst "t=i_4"))
               (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "5"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
               (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "11") (term "0,0,1"))
               (rule "leq_literals" (formula "11") (term "0,1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "4"))
               (rule "qeq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "closeFalse" (formula "11"))
            )
            (branch "CUT: seqDepth(f_s2) <= seqDepth(f_s1) FALSE"
               (builtin "One Step Simplification" (formula "10"))
               (rule "false_right" (formula "10"))
               (rule "inEqSimp_leqRight" (formula "9"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "seqDepthNonNegative" (formula "1") (term "0"))
               (rule "seqDepthNonNegative" (formula "1") (term "1,1"))
               (rule "allLeft" (formula "4") (inst "t=f_s1"))
               (rule "exLeft" (formula "4") (inst "sk=i_2"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "4"))
               (rule "seqDepthNonNegative" (formula "6") (term "0,0"))
               (rule "seqDepthNonNegative" (formula "4") (term "0,1"))
               (rule "seqDepthNonNegative" (formula "5") (term "0,0"))
               (rule "cut_direct" (formula "5") (term "0"))
               (branch "CUT: seqDepth(f_s1) = 0 TRUE"
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "3"))
                  (rule "add_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                  (rule "leq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "seqDepthNonNegative" (formula "2") (term "0"))
                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "allLeft" (formula "3") (inst "t=f_s2"))
                  (rule "exLeft" (formula "3") (inst "sk=i_3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_contradEq7" (formula "4") (term "0") (ifseqformula "1"))
                  (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0"))
                  (rule "leq_literals" (formula "4") (term "0,0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "inEqSimp_contradEq7" (formula "5") (term "0") (ifseqformula "1"))
                  (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "5") (term "0,0,0"))
                  (rule "leq_literals" (formula "5") (term "0,0"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "inEqSimp_contradEq7" (formula "3") (term "1") (ifseqformula "1"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "3") (term "0,0,1"))
                  (rule "leq_literals" (formula "3") (term "0,1"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "allLeft" (formula "8") (inst "t=i_3"))
                  (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "8") (term "0,0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "5"))
                  (rule "andLeft" (formula "8"))
                  (rule "inEqSimp_homoInEq1" (formula "8"))
                  (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "1,1,0"))
                  (rule "times_zero_1" (formula "8") (term "1,0"))
                  (rule "add_literals" (formula "8") (term "0"))
                  (rule "leq_literals" (formula "8"))
                  (rule "closeFalse" (formula "8"))
               )
               (branch "CUT: seqDepth(f_s1) = 0 FALSE"
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "replace_known_right" (formula "4") (term "1") (ifseqformula "13"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "13"))
                  (rule "add_literals" (formula "3") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "3"))
                  (rule "mul_literals" (formula "13") (term "1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0"))
                  (rule "leq_literals" (formula "13") (term "0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "false_right" (formula "13"))
                  (rule "seqDepthNonNegative" (formula "3") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                  (rule "leq_literals" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "allLeft" (formula "11") (inst "t=i_2"))
                  (rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "5"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "6"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1"))
                  (rule "leq_literals" (formula "11") (term "0,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "11"))
                  (rule "qeq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
         )
      )
   )
)
(branch "CUT: seqDepth(seqConcat(f_s1, f_s2)) = 0 FALSE"
   (rule "cut" (inst "cutFormula=!gt(seqDepth(seqConcat(f_s1, f_s2)), Z(0(#)))"))
   (branch "CUT: !seqDepth(seqConcat(f_s1, f_s2)) > 0 TRUE"
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "3"))
      (rule "inEqSimp_gtRight" (formula "1"))
      (rule "mul_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "0,0,0"))
      (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "2"))
      (rule "add_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradEq3" (formula "2") (ifseqformula "1"))
      (rule "mul_literals" (formula "2") (term "1,0,0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "false_right" (formula "2"))
      (rule "seqDepthNonNegative" (formula "2") (term "2,0"))
      (rule "seqDepthNonNegative" (formula "3") (term "1,0"))
      (rule "seqDepthNonNegative" (formula "4") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "CUT: !seqDepth(seqConcat(f_s1, f_s2)) > 0 FALSE"
      (rule "notRight" (formula "1"))
      (rule "defseqDepthSucc" (inst "n=n") (inst "s=s") (inst "j=j") (inst "i=i"))
      (rule "allLeft" (formula "1") (inst "t=sub(seqDepth(seqConcat(f_s1, f_s2)), Z(1(#)))"))
      (rule "allLeftHide" (formula "1") (inst "t=seqConcat(f_s1, f_s2)"))
      (rule "equiv_Left" (formula "1"))
      (rule "impLeft" (formula "2"))
      (branch "Case 1"
         (builtin "One Step Simplification" (formula "2"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
         (rule "notLeft" (formula "1"))
         (rule "eqSymm" (formula "6"))
         (rule "polySimp_elimSub" (formula "4") (term "0,1"))
         (rule "mul_literals" (formula "4") (term "1,0,1"))
         (rule "polySimp_addLiterals" (formula "4") (term "1"))
         (rule "add_zero_right" (formula "4") (term "1"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
      (branch "Case 2"
         (rule "andLeft" (formula "2"))
         (rule "andLeft" (formula "2"))
         (rule "cut" (inst "cutFormula=!\\forall int i;
   (   leq(Z(0(#)), i) & lt(i, seqLen(f_s1))
    ->   Seq::instance(any::seqGet(f_s1, i)) = FALSE
       | leq(seqDepth((Seq)(any::seqGet(f_s1, i))),
             sub(seqDepth(seqConcat(f_s1, f_s2)),
                 Z(1(#)))))"))
         (branch "CUT: !forall int i; ( 0 <= i & i < f_s1.length -> Seq::instance(f_s1[i]) = FALSE | seqDepth((Seq)(f_s1[i])) <= seqDepth(seqConcat(f_s1, f_s2)) - 1) TRUE"
            (rule "notLeft" (formula "1"))
            (rule "allRight" (formula "7") (inst "sk=i_5"))
            (rule "impRight" (formula "7"))
            (rule "andLeft" (formula "1"))
            (rule "allLeft" (formula "4") (inst "t=i_5"))
            (rule "impLeft" (formula "4"))
            (branch "Case 1"
               (rule "andRight" (formula "9"))
               (branch "Case 1"
                  (rule "close" (formula "9") (ifseqformula "1"))
               )
               (branch "Case 2"
                  (rule "lenOfSeqConcat" (formula "9") (term "1"))
                  (rule "hide_right" (formula "10"))
                  (rule "hide_right" (formula "11"))
                  (builtin "One Step Simplification" (formula "7"))
                  (builtin "One Step Simplification" (formula "4"))
                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")))
                  (rule "exLeft" (formula "5") (inst "sk=j_5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "polySimp_elimSub" (formula "9") (term "0"))
                  (rule "mul_literals" (formula "9") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "4") (term "1,1,1,1,0"))
                  (rule "polySimp_homoEq" (formula "3"))
                  (rule "polySimp_elimSub" (formula "8") (term "1"))
                  (rule "mul_literals" (formula "8") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "3") (term "0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "3") (term "0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,0"))
                  (rule "times_zero_1" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "polySimp_addComm0" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "8") (term "0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,1,0,0"))
                  (rule "lenOfSeqConcat" (formula "5") (term "1"))
                  (rule "inEqSimp_ltRight" (formula "11"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "11"))
                  (rule "mul_literals" (formula "11") (term "1,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,1,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,0,1,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,1,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0,1,0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,0,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "11") (ifseqformula "9"))
                  (rule "mul_literals" (formula "11") (term "1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0"))
                  (rule "leq_literals" (formula "11") (term "0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "false_right" (formula "11"))
                  (rule "getOfSeqConcat" (formula "4") (term "0,0,0,0,1,0"))
                  (rule "polySimp_elimSub" (formula "4") (term "1,2,0,0,0,0,1,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "1,2,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,0,0,1,0"))
                  (rule "getOfSeqConcat" (formula "4") (term "0,0,1,1,0"))
                  (rule "polySimp_elimSub" (formula "4") (term "1,2,0,0,1,1,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "1,2,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,1,1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,1,1,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,1,1,0"))
                  (rule "getOfSeqConcat" (formula "8") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "8") (term "1,2,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0"))
                  (rule "getOfSeqConcat" (formula "7") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "7") (term "1,2,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
                  (rule "seqDepthNonNegative" (formula "4") (term "1,1,1,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "seqDepthNonNegative" (formula "8") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                  (rule "leq_literals" (formula "8") (term "0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "seqDepthNonNegative" (formula "9") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                  (rule "leq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "seqDepthNonNegative" (formula "8") (term "0"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,0,0"))
                  (rule "mul_literals" (formula "6") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                  (rule "add_literals" (formula "6") (term "1,1,0"))
                  (rule "times_zero_1" (formula "6") (term "1,0"))
                  (rule "add_zero_right" (formula "6") (term "0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                  (rule "mul_literals" (formula "5") (term "0,0"))
                  (rule "add_zero_left" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "5"))
                  (rule "leq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "nnf_imp2or" (formula "3") (term "0"))
                  (rule "seqDepthNonNegative" (formula "3") (term "1,1,1,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "11"))
                  (rule "leq_literals" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "nnf_imp2or" (formula "11") (term "0,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "3") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,1,0,0"))
                  (rule "commute_or" (formula "3") (term "1,0"))
                  (rule "seqDepthNonNegative" (formula "3") (term "1,1,0,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "11"))
                  (rule "leq_literals" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "commute_and_2" (formula "11") (term "0,1,0,1,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0"))
                  (rule "seqDepthNonNegative" (formula "3") (term "1,1,1,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "11"))
                  (rule "leq_literals" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "commute_or" (formula "11") (term "1,0,0,0,1,0,0"))
                  (rule "ifthenelse_split" (formula "9") (term "0,0"))
                  (branch "f_s1.length >= 1 + j_5 TRUE"
                     (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "9"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "polySimp_homoEq" (formula "10"))
                     (rule "polySimp_addComm1" (formula "10") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1"))
                     (rule "polySimp_rightDist" (formula "10") (term "1"))
                     (rule "mul_literals" (formula "10") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                     (rule "applyEqRigid" (formula "3") (term "1,1,1,0,0") (ifseqformula "10"))
                     (rule "polySimp_addAssoc" (formula "3") (term "1,1,0,0"))
                     (rule "add_literals" (formula "3") (term "0,1,1,0,0"))
                     (rule "add_zero_left" (formula "3") (term "1,1,0,0"))
                     (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "add_zero_left" (formula "11") (term "0"))
                     (rule "inEqSimp_invertInEq0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "mul_literals" (formula "11") (term "1"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "seqDepthNonNegative" (formula "10") (term "0"))
                     (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "11"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "seqDepthNonNegative" (formula "10") (term "1,1"))
                     (rule "seqDepthNonNegative" (formula "3") (term "1,1,0,0"))
                     (rule "seqDepthNonNegative" (formula "11") (term "0"))
                     (rule "shift_paren_or" (formula "12") (term "0,0,0,1,0,0"))
                     (rule "cnf_eqv" (formula "12") (term "0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,1,0,0,0"))
                     (rule "nnf_notAll" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "nnf_notEx" (formula "12") (term "1,0,1,0,0,0"))
                     (rule "nnf_notOr" (formula "12") (term "0,0,0,1,0,0,0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "nnf_notAnd" (formula "12") (term "0,1,0,1,0,0,0"))
                     (rule "nnf_notOr" (formula "12") (term "0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,1,0,1,0,0,0"))
                     (rule "nnf_notOr" (formula "12") (term "0,0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,0,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,1,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,1,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,1,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0,1,0,0,0"))
                     (rule "distr_forallAnd" (formula "12") (term "0"))
                     (rule "distr_forallAnd" (formula "12"))
                     (rule "andLeft" (formula "12"))
                     (rule "lenNonNegative" (formula "1") (term "0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1"))
                     (rule "lenNonNegative" (formula "2") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
                     (rule "times_zero_1" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
                     (rule "andLeft" (formula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "5"))
                     (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                     (rule "add_literals" (formula "5") (term "1,1,0"))
                     (rule "times_zero_1" (formula "5") (term "1,0"))
                     (rule "add_literals" (formula "5") (term "0"))
                     (rule "leq_literals" (formula "5"))
                     (rule "closeFalse" (formula "5"))
                  )
                  (branch "f_s1.length >= 1 + j_5 FALSE"
                     (rule "replace_known_right" (formula "8") (term "0,0,0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "polySimp_homoEq" (formula "9"))
                     (rule "polySimp_addComm1" (formula "9") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "12"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1"))
                     (rule "polySimp_rightDist" (formula "10") (term "1"))
                     (rule "mul_literals" (formula "10") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "add_zero_left" (formula "11") (term "0"))
                     (rule "applyEq" (formula "4") (term "1,1,1,0,0") (ifseqformula "10"))
                     (rule "polySimp_addAssoc" (formula "4") (term "1,1,0,0"))
                     (rule "add_literals" (formula "4") (term "0,1,1,0,0"))
                     (rule "add_zero_left" (formula "4") (term "1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_invertInEq0" (formula "11"))
                     (rule "times_zero_2" (formula "11") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "seqDepthNonNegative" (formula "10") (term "0"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "seqDepthNonNegative" (formula "10") (term "1,1"))
                     (rule "seqDepthNonNegative" (formula "4") (term "1,1,0,0"))
                     (rule "seqDepthNonNegative" (formula "11") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "3"))
                     (rule "andLeft" (formula "8"))
                     (rule "inEqSimp_homoInEq1" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "1,1,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0"))
                     (rule "add_literals" (formula "8") (term "0"))
                     (rule "leq_literals" (formula "8"))
                     (rule "closeFalse" (formula "8"))
                  )
               )
            )
            (branch "Case 2"
               (builtin "One Step Simplification" (formula "8"))
               (builtin "One Step Simplification" (formula "5"))
               (builtin "One Step Simplification" (formula "4"))
               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "5")))
               (builtin "One Step Simplification" (formula "10"))
               (rule "orRight" (formula "10"))
               (rule "notRight" (formula "10"))
               (rule "exLeft" (formula "7") (inst "sk=j_3"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "eqSymm" (formula "16"))
               (rule "polySimp_elimSub" (formula "11") (term "0"))
               (rule "mul_literals" (formula "11") (term "1,0"))
               (rule "polySimp_elimSub" (formula "6") (term "1,1,1,0"))
               (rule "mul_literals" (formula "6") (term "1,1,1,1,0"))
               (rule "polySimp_elimSub" (formula "5") (term "1,1"))
               (rule "mul_literals" (formula "5") (term "1,1,1"))
               (rule "polySimp_homoEq" (formula "4"))
               (rule "polySimp_elimSub" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "1,1"))
               (rule "polySimp_elimSub" (formula "10") (term "1"))
               (rule "mul_literals" (formula "10") (term "1,1"))
               (rule "polySimp_elimSub" (formula "4") (term "0,0,0"))
               (rule "mul_literals" (formula "4") (term "1,0,0,0"))
               (rule "polySimp_addLiterals" (formula "4") (term "0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0"))
               (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,0"))
               (rule "times_zero_1" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "polySimp_addComm0" (formula "11") (term "1,0,0,0"))
               (rule "polySimp_addComm0" (formula "10") (term "0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1,1,0"))
               (rule "polySimp_addComm0" (formula "4") (term "1,1"))
               (rule "polySimp_addComm0" (formula "13") (term "1"))
               (rule "polySimp_addComm0" (formula "9") (term "1"))
               (rule "lenOfSeqConcat" (formula "5") (term "1,1,0,0"))
               (rule "castedGetAny" (formula "13") (term "0,0"))
               (rule "lenOfSeqConcat" (formula "7") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,1,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,1,0,0,0,1,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
               (rule "inEqSimp_leqRight" (formula "12"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_ltToLeq" (formula "8"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "7"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,0,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0,1,0,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,1,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,1,0,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,0,1,1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0"))
               (rule "polySimp_elimOne" (formula "8") (term "0"))
               (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "11"))
               (rule "mul_literals" (formula "13") (term "1,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0"))
               (rule "leq_literals" (formula "13") (term "0"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "false_right" (formula "13"))
               (rule "getOfSeqConcat" (formula "6") (term "0,0,1,1,0"))
               (rule "polySimp_elimSub" (formula "6") (term "1,2,0,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "6") (term "1,2,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,1,1,0"))
               (rule "getOfSeqConcat" (formula "6") (term "0,0,0,0,1,0"))
               (rule "polySimp_elimSub" (formula "6") (term "1,2,0,0,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "6") (term "1,2,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0,0,1,0"))
               (rule "getOfSeqConcat" (formula "5") (term "0,0,1"))
               (rule "polySimp_elimSub" (formula "5") (term "1,2,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "0,0,0,0,1"))
               (rule "replace_known_left" (formula "5") (term "0,0,0,1") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_homoInEq0" (formula "5") (term "1"))
               (rule "polySimp_addComm1" (formula "5") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1"))
               (rule "mul_literals" (formula "5") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,1"))
               (rule "inEqSimp_contradInEq0" (formula "5") (term "1") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
               (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "5") (term "0,0,1"))
               (rule "leq_literals" (formula "5") (term "0,1"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "notLeft" (formula "5"))
               (rule "getOfSeqConcat" (formula "9") (term "0,0"))
               (rule "polySimp_elimSub" (formula "9") (term "1,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0"))
               (rule "getOfSeqConcat" (formula "8") (term "0,0"))
               (rule "polySimp_elimSub" (formula "8") (term "1,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0"))
               (rule "seqDepthNonNegative" (formula "13") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "11"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "seqDepthNonNegative" (formula "13") (term "1,0"))
               (rule "seqDepthNonNegative" (formula "14") (term "2,0"))
               (rule "seqDepthNonNegative" (formula "7") (term "1,1,1,1,0"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "13"))
               (rule "leq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "seqDepthNonNegative" (formula "11") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
               (rule "leq_literals" (formula "11") (term "0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "seqDepthNonNegative" (formula "12") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
               (rule "leq_literals" (formula "12") (term "0"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "seqDepthNonNegative" (formula "15") (term "1,1,0,0"))
               (rule "seqDepthNonNegative" (formula "15") (term "0,0,0"))
               (rule "seqDepthNonNegative" (formula "3") (term "1"))
               (rule "seqDepthNonNegative" (formula "4") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "14"))
               (rule "leq_literals" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "getOfSeqConcat" (formula "15") (term "0,0"))
               (rule "polySimp_elimSub" (formula "15") (term "1,2,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "5")))
               (rule "closeTrue" (formula "15"))
            )
         )
         (branch "CUT: !forall int i; ( 0 <= i & i < f_s1.length -> Seq::instance(f_s1[i]) = FALSE | seqDepth((Seq)(f_s1[i])) <= seqDepth(seqConcat(f_s1, f_s2)) - 1) FALSE"
            (rule "notRight" (formula "7"))
            (rule "hide_left" (formula "2"))
            (rule "cut" (inst "cutFormula=!\\forall int i;
   (   leq(Z(0(#)), i) & lt(i, seqLen(f_s2))
    ->   Seq::instance(any::seqGet(f_s2, i)) = FALSE
       | leq(seqDepth((Seq)(any::seqGet(f_s2, i))),
             sub(seqDepth(seqConcat(f_s1, f_s2)),
                 Z(1(#)))))"))
            (branch "CUT: !forall int i; ( 0 <= i & i < f_s2.length -> Seq::instance(f_s2[i]) = FALSE | seqDepth((Seq)(f_s2[i])) <= seqDepth(seqConcat(f_s1, f_s2)) - 1) TRUE"
               (rule "notLeft" (formula "1"))
               (rule "hide_left" (formula "5"))
               (rule "allRight" (formula "6") (inst "sk=i_6"))
               (rule "impRight" (formula "6"))
               (rule "andLeft" (formula "1"))
               (rule "allLeftHide" (formula "4") (inst "t=add(seqLen(f_s1), i_6)"))
               (rule "impLeft" (formula "4"))
               (branch "Case 1"
                  (rule "andRight" (formula "7"))
                  (branch "Case 1"
                     (rule "hide_left" (formula "3"))
                     (rule "hide_left" (formula "3"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "orRight" (formula "6"))
                     (rule "notRight" (formula "6"))
                     (rule "eqSymm" (formula "9"))
                     (rule "polySimp_elimSub" (formula "4") (term "0"))
                     (rule "mul_literals" (formula "4") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "7") (term "1"))
                     (rule "mul_literals" (formula "7") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "6") (term "1"))
                     (rule "polySimp_addComm0" (formula "4") (term "0"))
                     (rule "polySimp_addComm0" (formula "7") (term "1"))
                     (rule "castedGetAny" (formula "7") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "6"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "6"))
                     (rule "mul_literals" (formula "6") (term "1,0,0"))
                     (rule "add_zero_right" (formula "6") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "6"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                     (rule "mul_literals" (formula "6") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
                     (rule "inEqSimp_contradEq7" (formula "7") (ifseqformula "6"))
                     (rule "mul_literals" (formula "7") (term "1,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0"))
                     (rule "leq_literals" (formula "7") (term "0"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "false_right" (formula "7"))
                     (rule "seqDepthNonNegative" (formula "7") (term "2,0"))
                     (rule "seqDepthNonNegative" (formula "8") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "8"))
                     (rule "leq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "seqDepthNonNegative" (formula "8") (term "1,0"))
                     (rule "seqDepthNonNegative" (formula "8") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "seqDepthNonNegative" (formula "3") (term "1"))
                     (rule "seqDepthNonNegative" (formula "4") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "10"))
                     (rule "leq_literals" (formula "4") (term "0"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "seqDepthNonNegative" (formula "10") (term "1,1,0,0"))
                     (rule "seqDepthNonNegative" (formula "10") (term "0,0,0"))
                     (rule "seqDepthNonNegative" (formula "2") (term "0"))
                     (rule "seqDepthNonNegative" (formula "1") (term "0"))
                     (rule "seqDepthNonNegative" (formula "3") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "4"))
                     (rule "mul_literals" (formula "9") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "9"))
                     (rule "leq_literals" (formula "3") (term "0"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "seqDepthNonNegative" (formula "8") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "ifthenelse_split" (formula "10") (term "0"))
                     (branch "seqDepth(f_s2) >= 1 + seqDepth(f_s1) TRUE"
                        (rule "eqSymm" (formula "11"))
                        (rule "seqDepthNonNegative" (formula "1") (term "0"))
                        (rule "seqDepthNonNegative" (formula "1") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "11"))
                        (rule "leq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "seqDepthNonNegative" (formula "11") (term "1"))
                        (rule "seqGetAlphaCast" (formula "6") (term "0,0"))
                        (rule "castDel" (formula "6") (term "0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "lenNonNegative" (formula "5") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                        (rule "times_zero_1" (formula "5") (term "0,0"))
                        (rule "add_zero_left" (formula "5") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                     (branch "seqDepth(f_s2) >= 1 + seqDepth(f_s1) FALSE"
                        (rule "eqSymm" (formula "11"))
                        (rule "inEqSimp_geqRight" (formula "10"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "add_zero_left" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "seqDepthNonNegative" (formula "11") (term "1"))
                        (rule "seqDepthNonNegative" (formula "11") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "11"))
                        (rule "leq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "seqDepthNonNegative" (formula "1") (term "0"))
                        (rule "seqDepthNonNegative" (formula "1") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "seqGetAlphaCast" (formula "6") (term "0,0"))
                        (rule "castDel" (formula "6") (term "0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "lenNonNegative" (formula "5") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
                        (rule "mul_literals" (formula "5") (term "0,0"))
                        (rule "add_zero_left" (formula "5") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "9") (term "0"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "closeFalse" (formula "9"))
                     )
                  )
                  (branch "Case 2"
                     (builtin "One Step Simplification" (formula "3"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "orRight" (formula "8"))
                     (rule "notRight" (formula "8"))
                     (rule "exLeft" (formula "5") (inst "sk=j_7"))
                     (rule "andLeft" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "eqSymm" (formula "14"))
                     (rule "polySimp_elimSub" (formula "9") (term "0"))
                     (rule "mul_literals" (formula "9") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "4") (term "1,1,1,1,0"))
                     (rule "polySimp_elimSub" (formula "12") (term "1"))
                     (rule "mul_literals" (formula "12") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "8") (term "1"))
                     (rule "mul_literals" (formula "8") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "11") (term "0"))
                     (rule "polySimp_addComm0" (formula "9") (term "0"))
                     (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "1"))
                     (rule "polySimp_addComm0" (formula "8") (term "1"))
                     (rule "lenOfSeqConcat" (formula "11") (term "1"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,1,0"))
                     (rule "castedGetAny" (formula "12") (term "0,0"))
                     (rule "lenOfSeqConcat" (formula "6") (term "1"))
                     (rule "inEqSimp_gtToGeq" (formula "10"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_ltRight" (formula "10"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "11"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4"))
                     (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "7"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                     (rule "mul_literals" (formula "11") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "11"))
                     (rule "mul_literals" (formula "12") (term "1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0"))
                     (rule "leq_literals" (formula "12") (term "0"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "false_right" (formula "12"))
                     (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
                     (rule "andLeft" (formula "5"))
                     (rule "inEqSimp_homoInEq1" (formula "5"))
                     (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                     (rule "add_literals" (formula "5") (term "1,1,0"))
                     (rule "times_zero_1" (formula "5") (term "1,0"))
                     (rule "add_literals" (formula "5") (term "0"))
                     (rule "leq_literals" (formula "5"))
                     (rule "closeFalse" (formula "5"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "4"))
                  (builtin "One Step Simplification" (formula "3"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "orRight" (formula "8"))
                  (rule "notRight" (formula "8"))
                  (rule "exLeft" (formula "6") (inst "sk=j_8"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "eqSymm" (formula "14"))
                  (rule "polySimp_elimSub" (formula "10") (term "0"))
                  (rule "mul_literals" (formula "10") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "5") (term "1,1"))
                  (rule "mul_literals" (formula "5") (term "1,1,1"))
                  (rule "polySimp_elimSub" (formula "4") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "4") (term "1,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "12") (term "1"))
                  (rule "mul_literals" (formula "12") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "9") (term "1"))
                  (rule "mul_literals" (formula "9") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "5") (term "1,0,0,1"))
                  (rule "polySimp_addComm0" (formula "5") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0"))
                  (rule "polySimp_addComm0" (formula "5") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "4") (term "1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "1"))
                  (rule "polySimp_addComm0" (formula "9") (term "1"))
                  (rule "castedGetAny" (formula "4") (term "0,0,1,1,0"))
                  (rule "castedGetAny" (formula "12") (term "0,0"))
                  (rule "lenOfSeqConcat" (formula "7") (term "1"))
                  (rule "inEqSimp_gtToGeq" (formula "11"))
                  (rule "mul_literals" (formula "11") (term "1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_leqRight" (formula "11"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "8"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                  (rule "mul_literals" (formula "11") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "11"))
                  (rule "mul_literals" (formula "12") (term "1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0"))
                  (rule "leq_literals" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "false_right" (formula "12"))
                  (rule "seqDepthNonNegative" (formula "10") (term "0"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1"))
                  (rule "getOfSeqConcat" (formula "10") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "10") (term "1,2,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0"))
                  (rule "getOfSeqConcat" (formula "9") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "9") (term "1,2,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0"))
                  (rule "seqDepthNonNegative" (formula "12") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "12"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "seqDepthNonNegative" (formula "12") (term "2,0"))
                  (rule "seqDepthNonNegative" (formula "13") (term "1,0"))
                  (rule "seqDepthNonNegative" (formula "8") (term "0,1"))
                  (rule "getOfSeqConcat" (formula "9") (term "0,0,1"))
                  (rule "polySimp_elimSub" (formula "9") (term "1,2,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "1,2,0,0,1"))
                  (rule "add_literals" (formula "9") (term "1,1,1,2,0,0,1"))
                  (rule "times_zero_1" (formula "9") (term "1,1,2,0,0,1"))
                  (rule "add_zero_right" (formula "9") (term "1,2,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,1"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,0,1"))
                  (rule "polySimp_pullOutFactor2b" (formula "9") (term "0,0,0,0,1"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,0,0,1"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0,1") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "9") (term "0,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_homoInEq0" (formula "9") (term "1"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                  (rule "add_literals" (formula "9") (term "0,0,1"))
                  (rule "leq_literals" (formula "9") (term "0,1"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "notLeft" (formula "9"))
                  (rule "seqDepthNonNegative" (formula "7") (term "1,1,1,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "14"))
                  (rule "leq_literals" (formula "7") (term "0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "seqDepthNonNegative" (formula "12") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "14"))
                  (rule "leq_literals" (formula "12") (term "0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "seqDepthNonNegative" (formula "13") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "14"))
                  (rule "leq_literals" (formula "13") (term "0"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "seqDepthNonNegative" (formula "15") (term "1,1,0,0"))
                  (rule "seqDepthNonNegative" (formula "15") (term "0,0,0"))
                  (rule "seqDepthNonNegative" (formula "3") (term "1"))
                  (rule "seqDepthNonNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "15"))
                  (rule "leq_literals" (formula "4") (term "0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "seqDepthNonNegative" (formula "13") (term "0"))
                  (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                  (rule "mul_literals" (formula "13") (term "1"))
                  (rule "seqDepthNonNegative" (formula "2") (term "0"))
                  (rule "seqDepthNonNegative" (formula "1") (term "0"))
                  (rule "getOfSeqConcat" (formula "9") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "9") (term "1,2,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "9") (term "1,2,0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,1,2,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,1,2,0,0"))
                  (rule "add_zero_right" (formula "9") (term "1,2,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "9") (term "0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "9") (term "0,0,0,0"))
                  (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "3")))
                  (rule "true_left" (formula "9"))
                  (rule "getOfSeqConcat" (formula "14") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "14") (term "1,2,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "14") (term "1,2,0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,1,2,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,1,2,0,0"))
                  (rule "add_zero_right" (formula "14") (term "1,2,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,0,0,0"))
                  (rule "add_literals" (formula "14") (term "1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "14") (term "0,0,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "14") (term "0,0,0,0"))
                  (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "5")))
                  (rule "closeTrue" (formula "14"))
               )
            )
            (branch "CUT: !forall int i; ( 0 <= i & i < f_s2.length -> Seq::instance(f_s2[i]) = FALSE | seqDepth((Seq)(f_s2[i])) <= seqDepth(seqConcat(f_s1, f_s2)) - 1) FALSE"
               (rule "notRight" (formula "7"))
               (rule "hide_left" (formula "6"))
               (rule "seqDepthUpperBound" (formula "1"))
               (rule "impLeft" (formula "1"))
               (branch "Case 1"
                  (builtin "One Step Simplification" (formula "3"))
                  (builtin "One Step Simplification" (formula "2"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "exLeft" (formula "4") (inst "sk=j_11"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "eqSymm" (formula "12"))
                  (rule "polySimp_elimSub" (formula "10") (term "1"))
                  (rule "mul_literals" (formula "10") (term "1,1"))
                  (rule "polySimp_elimSub" (formula "8") (term "0"))
                  (rule "mul_literals" (formula "8") (term "1,0"))
                  (rule "polySimp_elimSub" (formula "3") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "3") (term "1,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "2") (term "1,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,1,1,0"))
                  (rule "mul_literals" (formula "1") (term "1,1,1,1,0"))
                  (rule "polySimp_elimSub" (formula "7") (term "1"))
                  (rule "mul_literals" (formula "7") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "10") (term "1"))
                  (rule "polySimp_addComm0" (formula "8") (term "0"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0"))
                  (rule "polySimp_addComm0" (formula "7") (term "1"))
                  (rule "lenOfSeqConcat" (formula "3") (term "1,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,1,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0"))
                  (rule "lenOfSeqConcat" (formula "5") (term "1"))
                  (rule "inEqSimp_gtToGeq" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_leqRight" (formula "9"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_invertInEq1" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,0,1,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "9"))
                  (rule "mul_literals" (formula "10") (term "1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "leq_literals" (formula "10") (term "0"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "false_right" (formula "10"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "closeFalse" (formula "9"))
               )
               (branch "Case 2"
                  (rule "hide_left" (formula "2"))
                  (rule "seqDepthUpperBound" (formula "2"))
                  (rule "impLeft" (formula "2"))
                  (branch "Case 1"
                     (builtin "One Step Simplification" (formula "3"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "exLeft" (formula "4") (inst "sk=j_13"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "eqSymm" (formula "12"))
                     (rule "polySimp_elimSub" (formula "1") (term "0,1"))
                     (rule "mul_literals" (formula "1") (term "1,0,1"))
                     (rule "polySimp_addLiterals" (formula "1") (term "1"))
                     (rule "add_zero_right" (formula "1") (term "1"))
                     (rule "polySimp_elimSub" (formula "8") (term "0"))
                     (rule "mul_literals" (formula "8") (term "1,0"))
                     (rule "polySimp_elimSub" (formula "10") (term "1"))
                     (rule "mul_literals" (formula "10") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "3") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "3") (term "1,1,1,1,0"))
                     (rule "polySimp_elimSub" (formula "2") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "2") (term "1,1,1,1,0"))
                     (rule "polySimp_elimSub" (formula "7") (term "1"))
                     (rule "mul_literals" (formula "7") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "8") (term "0"))
                     (rule "polySimp_addComm0" (formula "10") (term "1"))
                     (rule "polySimp_addComm0" (formula "3") (term "1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,1,1,0"))
                     (rule "polySimp_addComm0" (formula "7") (term "1"))
                     (rule "lenOfSeqConcat" (formula "3") (term "1,1,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,1,0"))
                     (rule "lenOfSeqConcat" (formula "5") (term "1"))
                     (rule "inEqSimp_gtToGeq" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_leqRight" (formula "9"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                     (rule "mul_literals" (formula "9") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_invertInEq1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "times_zero_2" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,1,1,0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,0,1,1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "9"))
                     (rule "mul_literals" (formula "10") (term "1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0"))
                     (rule "leq_literals" (formula "10") (term "0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "false_right" (formula "10"))
                     (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "9") (term "0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "closeFalse" (formula "9"))
                  )
                  (branch "Case 2"
                     (rule "hide_left" (formula "3"))
                     (rule "hide_left" (formula "3"))
                     (rule "exLeft" (formula "3") (inst "sk=j_14"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cut" (inst "cutFormula=lt(j_14, seqLen(f_s1))"))
                     (branch "CUT: j_14 < f_s1.length TRUE"
                        (rule "seqDepthLowerBoundAxiom" (inst "n=n") (inst "s=s") (inst "k=k"))
                        (rule "eqSymm" (formula "12"))
                        (rule "polySimp_elimSub" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "1,1"))
                        (rule "polySimp_elimSub" (formula "3") (term "0,1"))
                        (rule "mul_literals" (formula "3") (term "1,0,1"))
                        (rule "polySimp_addLiterals" (formula "3") (term "1"))
                        (rule "add_zero_right" (formula "3") (term "1"))
                        (rule "polySimp_elimSub" (formula "4") (term "0,1"))
                        (rule "mul_literals" (formula "4") (term "1,0,1"))
                        (rule "polySimp_addLiterals" (formula "4") (term "1"))
                        (rule "add_zero_right" (formula "4") (term "1"))
                        (rule "polySimp_elimSub" (formula "9") (term "0"))
                        (rule "mul_literals" (formula "9") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "8") (term "1"))
                        (rule "polySimp_addComm0" (formula "9") (term "0"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,1,0,0,0"))
                        (rule "lenOfSeqConcat" (formula "6") (term "1"))
                        (rule "inEqSimp_gtToGeq" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                        (rule "mul_literals" (formula "9") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "9"))
                        (rule "mul_literals" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "false_right" (formula "10"))
                        (rule "seqDepthNonNegative" (formula "8") (term "0"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                        (rule "mul_literals" (formula "8") (term "1"))
                        (rule "getOfSeqConcat" (formula "7") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "7") (term "1,2,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "getOfSeqConcat" (formula "8") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "8") (term "1,2,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0"))
                        (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "2"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "polySimp_homoEq" (formula "8"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "0,0"))
                        (rule "add_zero_left" (formula "9") (term "0"))
                        (rule "applyEq" (formula "10") (term "1") (ifseqformula "8"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_invertInEq0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "mul_literals" (formula "9") (term "1"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "seqDepthNonNegative" (formula "10") (term "2,0"))
                        (rule "seqDepthNonNegative" (formula "11") (term "1,0"))
                        (rule "seqDepthNonNegative" (formula "12") (term "1,1,0,0"))
                        (rule "seqDepthNonNegative" (formula "12") (term "0,0,0"))
                        (rule "seqDepthNonNegative" (formula "10") (term "0"))
                        (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "11"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "seqDepthNonNegative" (formula "10") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "12") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "6") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "6") (term "0"))
                        (rule "seqDepthNonNegative" (formula "5") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "5") (term "0"))
                        (rule "seqDepthNonNegative" (formula "11") (term "0"))
                        (rule "seqDepthNonNegative" (formula "2") (term "0"))
                        (rule "seqDepthNonNegative" (formula "1") (term "0"))
                        (rule "nnf_imp2or" (formula "3") (term "0,0"))
                        (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0"))
                        (rule "nnf_notEx" (formula "3") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "3") (term "0,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "3") (term "0,0,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "3") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "3") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0,0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0,0,1,0,0,0"))
                        (rule "commute_or_2" (formula "3") (term "0,1,0,0,0"))
                        (rule "ifthenelse_split" (formula "12") (term "0"))
                        (branch "seqDepth(f_s2) >= 1 + seqDepth(f_s1) TRUE"
                           (rule "polySimp_homoEq" (formula "13"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                           (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "13"))
                           (rule "polySimp_addAssoc" (formula "6") (term "1"))
                           (rule "add_literals" (formula "6") (term "0,1"))
                           (rule "add_zero_left" (formula "6") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "6"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0"))
                           (rule "leq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "false_right" (formula "13"))
                           (rule "seqDepthNonNegative" (formula "1") (term "0"))
                           (rule "seqDepthNonNegative" (formula "1") (term "1,1"))
                           (rule "seqDepthNonNegative" (formula "6") (term "0"))
                           (rule "seqDepthNonNegative" (formula "6") (term "1"))
                           (rule "lenNonNegative" (formula "5") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "all_pull_out3" (formula "4") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0,0"))
                           (rule "commute_or" (formula "4") (term "0,0,0,0,0,0,0"))
                           (rule "lenNonNegative" (formula "10") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "seqGetAlphaCast" (formula "12") (term "0,0"))
                           (rule "castDel" (formula "12") (term "0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "all_pull_out2" (formula "4") (term "0,0"))
                           (rule "swapQuantifiersAll" (formula "4"))
                           (rule "swapQuantifiersAll" (formula "4") (term "0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                           (rule "seqGetAlphaCast" (formula "13") (term "0,1,1"))
                           (rule "castedGetAny" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "allLeft" (formula "4") (inst "t=f_s1"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,0,0"))
                           (rule "seqDepthNonNegative" (formula "4") (term "1,1,1,0,0"))
                           (rule "allLeft" (formula "4") (inst "t=j_14"))
                           (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "4") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "4") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "4") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0"))
                           (rule "leq_literals" (formula "4") (term "0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "seqDepthNonNegative" (formula "4") (term "1,1"))
                           (rule "seqDepthNonNegative" (formula "4") (term "0"))
                           (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "4"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "times_zero_1" (formula "4") (term "0"))
                           (rule "qeq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_commuteGeq" (formula "8"))
                           (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "9"))
                           (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "1,0"))
                           (rule "times_zero_1" (formula "10") (term "0"))
                           (rule "leq_literals" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "9"))
                           (rule "polySimp_addAssoc" (formula "14") (term "1"))
                           (rule "add_literals" (formula "14") (term "0,1"))
                           (rule "add_zero_left" (formula "14") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                           (rule "mul_literals" (formula "15") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "8"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "seqDepth(f_s2) >= 1 + seqDepth(f_s1) FALSE"
                           (rule "polySimp_homoEq" (formula "13"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "12"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "13"))
                           (rule "polySimp_addAssoc" (formula "7") (term "1"))
                           (rule "add_literals" (formula "7") (term "0,1"))
                           (rule "add_zero_left" (formula "7") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "7"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0"))
                           (rule "leq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "false_right" (formula "13"))
                           (rule "seqDepthNonNegative" (formula "1") (term "0"))
                           (rule "seqDepthNonNegative" (formula "1") (term "1"))
                           (rule "seqDepthNonNegative" (formula "7") (term "0"))
                           (rule "seqDepthNonNegative" (formula "7") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                           (rule "mul_literals" (formula "2") (term "0,0"))
                           (rule "add_zero_left" (formula "2") (term "0"))
                           (rule "lenNonNegative" (formula "5") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "5"))
                           (rule "all_pull_out3" (formula "4") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0,0"))
                           (rule "commute_or" (formula "4") (term "0,0,0,0,0,0,0"))
                           (rule "lenNonNegative" (formula "10") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "seqGetAlphaCast" (formula "12") (term "0,0"))
                           (rule "castDel" (formula "12") (term "0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "seqGetAlphaCast" (formula "13") (term "0,1,1"))
                           (rule "castedGetAny" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "all_pull_out2" (formula "4") (term "0,0"))
                           (rule "swapQuantifiersAll" (formula "4"))
                           (rule "swapQuantifiersAll" (formula "4") (term "0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
                           (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
                           (rule "allLeft" (formula "4") (inst "t=f_s1"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0,0,0"))
                           (rule "seqDepthNonNegative" (formula "4") (term "1,1,1,0,0"))
                           (rule "allLeft" (formula "4") (inst "t=j_14"))
                           (rule "replace_known_left" (formula "4") (term "0,1") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq1" (formula "4") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,1"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0,1"))
                           (rule "add_literals" (formula "4") (term "0,0,1"))
                           (rule "leq_literals" (formula "4") (term "0,1"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "4") (term "0,1"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "11"))
                           (rule "qeq_literals" (formula "4") (term "0,0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "8"))
                           (rule "andLeft" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_literals" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                     (branch "CUT: j_14 < f_s1.length FALSE"
                        (rule "seqDepthLowerBoundAxiom" (inst "n=n") (inst "s=s") (inst "k=k"))
                        (rule "eqSymm" (formula "12"))
                        (rule "polySimp_elimSub" (formula "8") (term "0"))
                        (rule "mul_literals" (formula "8") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "0,1"))
                        (rule "mul_literals" (formula "3") (term "1,0,1"))
                        (rule "polySimp_addLiterals" (formula "3") (term "1"))
                        (rule "add_zero_right" (formula "3") (term "1"))
                        (rule "polySimp_elimSub" (formula "2") (term "0,1"))
                        (rule "mul_literals" (formula "2") (term "1,0,1"))
                        (rule "polySimp_addLiterals" (formula "2") (term "1"))
                        (rule "add_zero_right" (formula "2") (term "1"))
                        (rule "polySimp_elimSub" (formula "7") (term "1"))
                        (rule "mul_literals" (formula "7") (term "1,1"))
                        (rule "polySimp_addComm0" (formula "8") (term "0"))
                        (rule "polySimp_addComm0" (formula "7") (term "1"))
                        (rule "castedGetAny" (formula "1") (term "0,0,1,0,1,0,0,0"))
                        (rule "lenOfSeqConcat" (formula "5") (term "1"))
                        (rule "inEqSimp_ltRight" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1,0,0"))
                        (rule "add_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                        (rule "mul_literals" (formula "9") (term "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "9"))
                        (rule "mul_literals" (formula "10") (term "1,0,0"))
                        (rule "add_zero_right" (formula "10") (term "0,0"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "false_right" (formula "10"))
                        (rule "getOfSeqConcat" (formula "7") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "7") (term "1,2,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0,0,0,0"))
                        (rule "inEqSimp_contradInEq0" (formula "7") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "7") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "7") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "getOfSeqConcat" (formula "8") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "8") (term "1,2,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "8") (term "0,0,0,0"))
                        (rule "inEqSimp_contradInEq0" (formula "8") (term "0,0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "1,1,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0,0"))
                        (rule "leq_literals" (formula "8") (term "0,0,0,0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "polySimp_homoEq" (formula "8"))
                        (rule "polySimp_addComm1" (formula "8") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                        (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                        (rule "mul_literals" (formula "9") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "9") (term "0"))
                        (rule "add_literals" (formula "9") (term "0,0"))
                        (rule "add_zero_left" (formula "9") (term "0"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "4"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0"))
                        (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                        (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "8"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                        (rule "applyEq" (formula "10") (term "1") (ifseqformula "8"))
                        (rule "inEqSimp_invertInEq0" (formula "9"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                        (rule "mul_literals" (formula "9") (term "1"))
                        (rule "polySimp_elimOne" (formula "9") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "seqDepthNonNegative" (formula "10") (term "1,0"))
                        (rule "seqDepthNonNegative" (formula "11") (term "2,0"))
                        (rule "seqDepthNonNegative" (formula "12") (term "1,1,0,0"))
                        (rule "seqDepthNonNegative" (formula "12") (term "0,0,0"))
                        (rule "seqDepthNonNegative" (formula "10") (term "0"))
                        (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "11"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "seqDepthNonNegative" (formula "10") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "12") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "11") (term "0"))
                        (rule "seqDepthNonNegative" (formula "6") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "6") (term "0"))
                        (rule "seqDepthNonNegative" (formula "5") (term "1,1"))
                        (rule "seqDepthNonNegative" (formula "5") (term "0"))
                        (rule "seqDepthNonNegative" (formula "2") (term "0"))
                        (rule "seqDepthNonNegative" (formula "1") (term "0"))
                        (rule "nnf_imp2or" (formula "4") (term "0,0"))
                        (rule "nnf_notAnd" (formula "4") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "4") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,0,0,0,0"))
                        (rule "nnf_notEx" (formula "4") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "4") (term "0,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "4") (term "0,0,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "4") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,1,0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "4") (term "0,0,1,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "4") (term "0,0,0,0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "4") (term "1,0,0,0,0,1,0,0,0"))
                        (rule "commute_or_2" (formula "4") (term "0,1,0,0,0"))
                        (rule "ifthenelse_split" (formula "12") (term "0"))
                        (branch "seqDepth(f_s2) >= 1 + seqDepth(f_s1) TRUE"
                           (rule "polySimp_homoEq" (formula "13"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                           (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "13"))
                           (rule "polySimp_addAssoc" (formula "6") (term "1"))
                           (rule "add_literals" (formula "6") (term "0,1"))
                           (rule "add_zero_left" (formula "6") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "6"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0"))
                           (rule "leq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "false_right" (formula "13"))
                           (rule "seqDepthNonNegative" (formula "1") (term "0"))
                           (rule "seqDepthNonNegative" (formula "1") (term "1,1"))
                           (rule "seqDepthNonNegative" (formula "6") (term "0"))
                           (rule "seqDepthNonNegative" (formula "6") (term "1"))
                           (rule "lenNonNegative" (formula "4") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                           (rule "mul_literals" (formula "4") (term "0,0"))
                           (rule "add_zero_left" (formula "4") (term "0"))
                           (rule "lenNonNegative" (formula "10") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "all_pull_out3" (formula "6") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0,0"))
                           (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
                           (rule "seqGetAlphaCast" (formula "12") (term "0,0"))
                           (rule "castDel" (formula "12") (term "0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "seqGetAlphaCast" (formula "13") (term "0,1,1"))
                           (rule "castedGetAny" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "all_pull_out2" (formula "6") (term "0,0"))
                           (rule "swapQuantifiersAll" (formula "6"))
                           (rule "swapQuantifiersAll" (formula "6") (term "0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                           (rule "allLeft" (formula "6") (inst "t=f_s2"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,0,0"))
                           (rule "seqDepthNonNegative" (formula "6") (term "1,1,1,0,0"))
                           (rule "allLeft" (formula "6") (inst "t=add(j_14, mul(seqLen(f_s1), Z(neglit(1(#)))))"))
                           (rule "replace_known_left" (formula "6") (term "0,1") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "6") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "13"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,1,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                           (rule "add_literals" (formula "6") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "6") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1"))
                           (rule "leq_literals" (formula "6") (term "0,1"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "5"))
                           (rule "andLeft" (formula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "1,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0"))
                           (rule "add_literals" (formula "6") (term "0"))
                           (rule "leq_literals" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                        (branch "seqDepth(f_s2) >= 1 + seqDepth(f_s1) FALSE"
                           (rule "polySimp_homoEq" (formula "13"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "12"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "13"))
                           (rule "polySimp_addAssoc" (formula "7") (term "1"))
                           (rule "add_literals" (formula "7") (term "0,1"))
                           (rule "add_zero_left" (formula "7") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "13") (ifseqformula "7"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0"))
                           (rule "leq_literals" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "false_right" (formula "13"))
                           (rule "seqDepthNonNegative" (formula "1") (term "0"))
                           (rule "seqDepthNonNegative" (formula "1") (term "1"))
                           (rule "seqDepthNonNegative" (formula "7") (term "0"))
                           (rule "seqDepthNonNegative" (formula "7") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                           (rule "mul_literals" (formula "3") (term "0,0"))
                           (rule "add_zero_left" (formula "3") (term "0"))
                           (rule "lenNonNegative" (formula "4") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                           (rule "mul_literals" (formula "4") (term "0,0"))
                           (rule "add_zero_left" (formula "4") (term "0"))
                           (rule "lenNonNegative" (formula "10") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "10"))
                           (rule "all_pull_out3" (formula "6") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0,0"))
                           (rule "commute_or" (formula "6") (term "0,0,0,0,0,0,0"))
                           (rule "seqGetAlphaCast" (formula "12") (term "0,0"))
                           (rule "castDel" (formula "12") (term "0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "seqGetAlphaCast" (formula "13") (term "0,1,1"))
                           (rule "castedGetAny" (formula "13") (term "0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "all_pull_out2" (formula "6") (term "0,0"))
                           (rule "swapQuantifiersAll" (formula "6"))
                           (rule "swapQuantifiersAll" (formula "6") (term "0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,0"))
                           (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
                           (rule "allLeft" (formula "6") (inst "t=f_s2"))
                           (rule "inEqSimp_commuteLeq" (formula "6") (term "1,0,0,0,0"))
                           (rule "seqDepthNonNegative" (formula "6") (term "1,1,1,0,0"))
                           (rule "allLeft" (formula "6") (inst "t=add(j_14, mul(seqLen(f_s1), Z(neglit(1(#)))))"))
                           (rule "replace_known_left" (formula "6") (term "0,1") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "6") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0") (ifseqformula "13"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "6") (term "0,0,1,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,1,0"))
                           (rule "add_literals" (formula "6") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "6") (term "0,1,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (term "0") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
                           (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "6") (term "0,0,0"))
                           (rule "leq_literals" (formula "6") (term "0,0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "seqDepthNonNegative" (formula "6") (term "0"))
                           (rule "seqDepthNonNegative" (formula "6") (term "1,1"))
                           (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "6"))
                           (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "9"))
                           (rule "inEqSimp_homoInEq0" (formula "6"))
                           (rule "polySimp_pullOutFactor1" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "1,0"))
                           (rule "times_zero_1" (formula "6") (term "0"))
                           (rule "qeq_literals" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "applyEq" (formula "16") (term "0") (ifseqformula "8"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                           (rule "inEqSimp_homoInEq1" (formula "9"))
                           (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
                           (rule "add_literals" (formula "9") (term "1,0"))
                           (rule "times_zero_1" (formula "9") (term "0"))
                           (rule "leq_literals" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "8"))
                           (rule "polySimp_addAssoc" (formula "14") (term "1"))
                           (rule "add_literals" (formula "14") (term "0,1"))
                           (rule "add_zero_left" (formula "14") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                           (rule "mul_literals" (formula "15") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
)

}
