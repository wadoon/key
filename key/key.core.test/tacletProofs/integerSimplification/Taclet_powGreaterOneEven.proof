\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 30 18:03:35 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Wed Nov 30 18:03:35 CET 2016
name=powGreaterOneEven
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "0357e76b474a38b2f77baa6c24249f2b673bc53b"))

(autoModeTime "322653442")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "f_base,f_exp"))
(rule "notRight" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "impLeft" (formula "2"))
(branch "Case 1"
   (builtin "One Step Simplification" (formula "2"))
   (rule "closeTrue" (formula "2"))
)
(branch "Case 2"
   (rule "notLeft" (formula "2"))
   (rule "cut" (inst "cutFormula=\\forall int e;
  (   gt(e, Z(0(#)))
   -> geq(pow(f_base, mul(Z(2(#)), e)), Z(1(#))))"))
   (branch "CUT: forall int e; (e > 0 -> pow(f_base, 2 * e) >= 1) TRUE"
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
      (rule "inEqSimp_geqRight" (formula "3"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_gtToGeq" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1,0,0"))
      (rule "add_literals" (formula "3") (term "0,0"))
      (rule "inEqSimp_gtToGeq" (formula "2") (term "0,0"))
      (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0"))
      (rule "mul_literals" (formula "2") (term "1,0,0"))
      (rule "nnf_imp2or" (formula "2") (term "0"))
      (rule "inEqSimp_notGeq" (formula "2") (term "0,0"))
      (rule "mul_literals" (formula "2") (term "1,0,0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,0"))
      (rule "allLeft" (formula "2") (inst "t=f_exp"))
      (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "2") (term "0,0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "CUT: forall int e; (e > 0 -> pow(f_base, 2 * e) >= 1) FALSE"
      (rule "hide_right" (formula "3"))
      (rule "hide_left" (formula "1"))
      (rule "auto_int_induction_geqZero" (formula "1") (inst "sk=e_1"))
      (branch "Base Case"
         (rule "greater_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeTrue" (formula "1"))
      )
      (branch "Step Case (positive)"
         (rule "impRight" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "impRight" (formula "3"))
         (rule "cut" (inst "cutFormula=e_1 = Z(0(#))"))
         (branch "CUT: e_1 = 0 TRUE"
            (rule "hide_left" (formula "2"))
            (rule "hide_left" (formula "2"))
            (rule "hide_left" (formula "2"))
            (rule "cut" (inst "cutFormula=mul(Z(2(#)), add(e_1, Z(1(#)))) = add(Z(1(#)), Z(1(#)))"))
            (branch "CUT: 2 * (e_1 + 1) = 1 + 1 TRUE"
               (rule "cut" (inst "cutFormula=  pow(f_base, mul(Z(2(#)), add(e_1, Z(1(#)))))
= pow(f_base, add(Z(1(#)), Z(1(#))))"))
               (branch "CUT: pow(f_base, 2 * (e_1 + 1)) = pow(f_base, 1 + 1) TRUE"
                  (rule "cut" (inst "cutFormula=geq(Z(1(#)), Z(0(#)))"))
                  (branch "CUT: 1 >= 0 TRUE"
                     (rule "powExpSucc" (formula "2") (term "1") (ifseqformula "1"))
                     (rule "cut" (inst "cutFormula=mul(pow(f_base, Z(1(#))), f_base) = mul(f_base, f_base)"))
                     (branch "CUT: pow(f_base, 1) * f_base = f_base * f_base TRUE"
                        (rule "cut" (inst "cutFormula=geq(mul(f_base, f_base), Z(1(#)))"))
                        (branch "CUT: f_base * f_base >= 1 TRUE"
                           (builtin "One Step Simplification" (formula "4"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "add_literals" (formula "4") (term "1"))
                           (rule "qeq_literals" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "eqSymm" (formula "2"))
                           (rule "polySimp_addComm0" (formula "5") (term "1,1,0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,1,1"))
                           (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                           (rule "mul_literals" (formula "5") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0"))
                           (rule "mul_literals" (formula "3") (term "0,0"))
                           (rule "polySimp_homoEq" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "add_zero_left" (formula "3") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "5"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "1") (term "0,1,1,0") (ifseqformula "5"))
                           (rule "mul_literals" (formula "1") (term "1,1,0"))
                           (rule "add_literals" (formula "1") (term "1,0"))
                           (rule "applyEqRigid" (formula "4") (term "0,0") (ifseqformula "5"))
                           (rule "mul_literals" (formula "4") (term "0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEq" (formula "2") (term "0,1,1,0") (ifseqformula "4"))
                           (rule "mul_literals" (formula "2") (term "1,1,0"))
                           (rule "add_literals" (formula "2") (term "1,0"))
                           (rule "applyEq" (formula "3") (term "0,1,1,1") (ifseqformula "4"))
                           (rule "mul_literals" (formula "3") (term "1,1,1"))
                           (rule "add_literals" (formula "3") (term "1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: f_base * f_base >= 1 FALSE"
                           (rule "hide_left" (formula "1"))
                           (rule "hide_left" (formula "2"))
                           (rule "hide_left" (formula "2"))
                           (rule "hide_right" (formula "4"))
                           (rule "cut" (inst "cutFormula=geq(f_base, Z(1(#)))"))
                           (branch "CUT: f_base >= 1 TRUE"
                              (rule "qeq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "inEqSimp_geqRight" (formula "3"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_contradEq7" (formula "4") (ifseqformula "2"))
                              (rule "mul_literals" (formula "4") (term "1,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0"))
                              (rule "leq_literals" (formula "4") (term "0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "false_right" (formula "4"))
                              (rule "add_non_neg_square" (inst "squareFac=f_base"))
                              (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "leq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "divide_eq2" (formula "1") (inst "divY=f_base") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "add_literals" (formula "1") (term "0,0,1,1"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "sub_literals" (formula "1") (term "0,1"))
                              (rule "div_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "3"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "divide_eq0" (formula "1") (inst "divY=f_base") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "div_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: f_base >= 1 FALSE"
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "2"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "3"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "4"))
                              (rule "add_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_contradEq3" (formula "4") (ifseqformula "2"))
                              (rule "mul_literals" (formula "4") (term "1,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0"))
                              (rule "qeq_literals" (formula "4") (term "0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "false_right" (formula "4"))
                              (rule "add_non_neg_square" (inst "squareFac=f_base"))
                              (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                              (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "leq_literals" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "divide_eq4" (formula "1") (inst "divY=f_base") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "div_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "3"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "divide_eq6" (formula "1") (inst "divY=f_base") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "div_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "CUT: pow(f_base, 1) * f_base = f_base * f_base FALSE"
                        (builtin "One Step Simplification" (formula "2"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "closeTrue" (formula "5"))
                     )
                  )
                  (branch "CUT: 1 >= 0 FALSE"
                     (rule "add_literals" (formula "2") (term "1"))
                     (rule "add_literals" (formula "1") (term "1,1"))
                     (rule "qeq_literals" (formula "4"))
                     (rule "closeTrue" (formula "4"))
                  )
               )
               (branch "CUT: pow(f_base, 2 * (e_1 + 1)) = pow(f_base, 1 + 1) FALSE"
                  (rule "add_literals" (formula "3") (term "1,1"))
                  (rule "add_literals" (formula "1") (term "1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "1,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "0"))
                  (rule "mul_literals" (formula "1") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "4"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
                  (rule "mul_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "applyEqRigid" (formula "1") (term "0,1,1,0") (ifseqformula "2"))
                  (rule "mul_literals" (formula "1") (term "1,1,0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "applyEqRigid" (formula "3") (term "0,1,1,0") (ifseqformula "2"))
                  (rule "mul_literals" (formula "3") (term "1,1,0"))
                  (rule "add_literals" (formula "3") (term "1,0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "closeTrue" (formula "3"))
               )
            )
            (branch "CUT: 2 * (e_1 + 1) = 1 + 1 FALSE"
               (rule "add_literals" (formula "2") (term "1"))
               (rule "polySimp_addComm0" (formula "2") (term "1,0"))
               (rule "polySimp_addComm0" (formula "3") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "0"))
               (rule "mul_literals" (formula "2") (term "0,0"))
               (rule "polySimp_homoEq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "add_zero_left" (formula "2") (term "0"))
               (rule "inEqSimp_geqRight" (formula "3"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "applyEqRigid" (formula "1") (term "0,1,1,0") (ifseqformula "2"))
               (rule "mul_literals" (formula "1") (term "1,1,0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "2"))
               (rule "mul_literals" (formula "3") (term "0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "closeTrue" (formula "3"))
            )
         )
         (branch "CUT: e_1 = 0 FALSE"
            (rule "impLeft" (formula "3"))
            (branch "Case 1"
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0"))
               (rule "mul_literals" (formula "5") (term "0,1,0"))
               (rule "inEqSimp_gtRight" (formula "3"))
               (rule "mul_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "5"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "add_zero_left" (formula "3") (term "0"))
               (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "4"))
               (rule "add_literals" (formula "2") (term "1"))
               (rule "inEqSimp_contradEq3" (formula "4") (ifseqformula "2"))
               (rule "mul_literals" (formula "4") (term "1,0,0"))
               (rule "add_literals" (formula "4") (term "0,0"))
               (rule "qeq_literals" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "false_right" (formula "4"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "3"))
               (rule "qeq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch "Case 2"
               (rule "cut" (inst "cutFormula=!  mul(Z(2(#)), add(e_1, Z(1(#))))
 = add(add(mul(Z(2(#)), e_1), Z(1(#))), Z(1(#)))"))
               (branch "CUT: !2 * (e_1 + 1) = 2 * e_1 + 1 + 1 TRUE"
                  (rule "polySimp_addLiterals" (formula "1") (term "1,0"))
                  (rule "notLeft" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "6") (term "1,1,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                  (rule "mul_literals" (formula "6") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0"))
                  (rule "mul_literals" (formula "4") (term "0,0"))
                  (builtin "One Step Simplification" (formula "4"))
                  (rule "closeTrue" (formula "4"))
               )
               (branch "CUT: !2 * (e_1 + 1) = 2 * e_1 + 1 + 1 FALSE"
                  (rule "notRight" (formula "4"))
                  (rule "cut" (inst "cutFormula=!  pow(f_base, mul(Z(2(#)), add(e_1, Z(1(#)))))
 = pow(f_base,
       add(add(mul(Z(2(#)), e_1), Z(1(#))), Z(1(#))))"))
                  (branch "CUT: ! pow(f_base, 2 * (e_1 + 1)) = pow(f_base, 2 * e_1 + 1 + 1) TRUE"
                     (rule "polySimp_addLiterals" (formula "2") (term "1"))
                     (rule "polySimp_addLiterals" (formula "1") (term "1,1,0"))
                     (rule "notLeft" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "5") (term "0,1,1"))
                     (rule "eqSymm" (formula "5"))
                     (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "1"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,1,1"))
                     (rule "polySimp_addComm0" (formula "5") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0"))
                     (rule "mul_literals" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1,1"))
                     (rule "mul_literals" (formula "4") (term "0,1,1"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "closeTrue" (formula "4"))
                  )
                  (branch "CUT: ! pow(f_base, 2 * (e_1 + 1)) = pow(f_base, 2 * e_1 + 1 + 1) FALSE"
                     (rule "notRight" (formula "5"))
                     (rule "cut" (inst "cutFormula=!geq(add(mul(Z(2(#)), e_1), Z(1(#))), Z(0(#)))"))
                     (branch "CUT: !2 * e_1 + 1 >= 0 TRUE"
                        (rule "polySimp_addLiterals" (formula "3") (term "1"))
                        (rule "polySimp_addLiterals" (formula "2") (term "1,1"))
                        (rule "notLeft" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "8") (term "1,1,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,1,1"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0"))
                        (rule "mul_literals" (formula "2") (term "0,0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                        (rule "mul_literals" (formula "7") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1,1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "inEqSimp_geqRight" (formula "4"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "6"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "5"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "5") (ifseqformula "3"))
                        (rule "mul_literals" (formula "5") (term "1,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0"))
                        (rule "leq_literals" (formula "5") (term "0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "false_right" (formula "5"))
                        (rule "inEqSimp_contradInEq5" (formula "2") (ifseqformula "3"))
                        (rule "greater_literals" (formula "2") (term "0,0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "CUT: !2 * e_1 + 1 >= 0 FALSE"
                        (rule "notRight" (formula "6"))
                        (rule "powExpSucc" (formula "2") (term "1") (ifseqformula "1"))
                        (rule "cut" (inst "cutFormula=!geq(mul(Z(2(#)), e_1), Z(0(#)))"))
                        (branch "CUT: !2 * e_1 >= 0 TRUE"
                           (rule "polySimp_addLiterals" (formula "4") (term "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "eqSymm" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "7") (term "0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,1,1"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "3") (term "1"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0"))
                           (rule "mul_literals" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1,1"))
                           (rule "inEqSimp_geqRight" (formula "6"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "8"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_gtToGeq" (formula "5"))
                           (rule "mul_literals" (formula "5") (term "1,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "5") (term "0"))
                           (rule "add_literals" (formula "5") (term "0,0"))
                           (rule "add_zero_left" (formula "5") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_strengthen1" (formula "5") (ifseqformula "7"))
                           (rule "add_literals" (formula "5") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "7") (ifseqformula "5"))
                           (rule "mul_literals" (formula "7") (term "1,0,0"))
                           (rule "add_literals" (formula "7") (term "0,0"))
                           (rule "leq_literals" (formula "7") (term "0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "false_right" (formula "7"))
                           (rule "inEqSimp_subsumption6" (formula "3") (ifseqformula "5"))
                           (rule "greater_literals" (formula "3") (term "0,0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1,0"))
                           (rule "leq_literals" (formula "3") (term "0"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "inEqSimp_contradInEq5" (formula "2") (ifseqformula "4"))
                           (rule "mul_literals" (formula "2") (term "1,1,0"))
                           (rule "greater_literals" (formula "2") (term "0,0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: !2 * e_1 >= 0 FALSE"
                           (rule "notRight" (formula "7"))
                           (rule "powExpSucc" (formula "3") (term "0,1") (ifseqformula "1"))
                           (rule "cut" (inst "cutFormula=geq(mul(mul(pow(f_base, mul(Z(2(#)), e_1)), f_base),
        f_base),
    Z(1(#)))"))
                           (branch "CUT: pow(f_base, 2 * e_1) * f_base * f_base >= 1 TRUE"
                              (rule "polySimp_addLiterals" (formula "5") (term "1"))
                              (rule "eqSymm" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                              (rule "polySimp_addComm0" (formula "5") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "10") (term "1,1,0"))
                              (rule "polySimp_addComm0" (formula "6") (term "0"))
                              (rule "polySimp_addComm0" (formula "4") (term "1,1,1"))
                              (rule "polySimp_addComm0" (formula "3") (term "0"))
                              (rule "polySimp_addComm0" (formula "5") (term "1"))
                              (rule "polySimp_rightDist" (formula "5") (term "0"))
                              (rule "mul_literals" (formula "5") (term "0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,1"))
                              (rule "mul_literals" (formula "4") (term "0,1,1"))
                              (rule "inEqSimp_geqRight" (formula "9"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_gtToGeq" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1,0,0"))
                              (rule "add_literals" (formula "6") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "6") (term "0"))
                              (rule "add_literals" (formula "6") (term "0,0"))
                              (rule "add_zero_left" (formula "6") (term "0"))
                              (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "5"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_strengthen1" (formula "6") (ifseqformula "8"))
                              (rule "add_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "8") (ifseqformula "6"))
                              (rule "mul_literals" (formula "8") (term "1,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0"))
                              (rule "leq_literals" (formula "8") (term "0"))
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "false_right" (formula "8"))
                              (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "3"))
                              (rule "leq_literals" (formula "4") (term "0"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: pow(f_base, 2 * e_1) * f_base * f_base >= 1 FALSE"
                              (rule "hide_left" (formula "3"))
                              (rule "hide_left" (formula "3"))
                              (rule "hide_left" (formula "1"))
                              (rule "hide_left" (formula "1"))
                              (rule "hide_left" (formula "1"))
                              (rule "hide_right" (formula "5"))
                              (rule "cut" (inst "cutFormula=gt(f_base, Z(0(#)))"))
                              (branch "CUT: f_base > 0 TRUE"
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                 (rule "inEqSimp_geqRight" (formula "4"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_gtToGeq" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1,0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "6") (ifseqformula "2"))
                                 (rule "mul_literals" (formula "6") (term "1,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "false_right" (formula "6"))
                                 (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "5"))
                                 (rule "add_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "5") (ifseqformula "3"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "false_right" (formula "5"))
                                 (rule "add_non_neg_square" (inst "squareFac=f_base"))
                                 (rule "divide_inEq0" (formula "2") (inst "divY=mul(f_base, pow(f_base, mul(e_1, Z(2(#)))))") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "2") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "qeq_literals" (formula "2") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "div_literals" (formula "2") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulAssoc" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "divide_inEq0" (formula "3") (inst "divY=mul(f_base, f_base)") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "3") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "qeq_literals" (formula "3") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "div_literals" (formula "3") (term "1,1"))
                                 (rule "polySimp_mulAssoc" (formula "3") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "apply_eq_monomials" (formula "3") (term "0") (ifseqformula "1"))
                                 (rule "add_zero_left" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                                 (rule "polySimp_mulAssoc" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "divide_eq0" (formula "1") (inst "divY=f_base") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "div_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "CUT: f_base > 0 FALSE"
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                                 (rule "inEqSimp_gtRight" (formula "3"))
                                 (rule "mul_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "4"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "6"))
                                 (rule "add_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_contradEq3" (formula "6") (ifseqformula "2"))
                                 (rule "mul_literals" (formula "6") (term "1,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "qeq_literals" (formula "6") (term "0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "false_right" (formula "6"))
                                 (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "5"))
                                 (rule "add_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "5") (ifseqformula "3"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "false_right" (formula "5"))
                                 (rule "add_non_neg_square" (inst "squareFac=f_base"))
                                 (rule "divide_inEq6" (formula "2") (inst "divY=mul(f_base, pow(f_base, mul(e_1, Z(2(#)))))") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "2") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "qeq_literals" (formula "2") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "div_literals" (formula "2") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulAssoc" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "divide_inEq0" (formula "3") (inst "divY=mul(f_base, f_base)") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "3") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "qeq_literals" (formula "3") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "div_literals" (formula "3") (term "1,1"))
                                 (rule "polySimp_mulAssoc" (formula "3") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "apply_eq_monomials" (formula "3") (term "0") (ifseqformula "1"))
                                 (rule "add_zero_left" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
                                 (rule "polySimp_mulAssoc" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "divide_eq6" (formula "1") (inst "divY=f_base") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "div_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "Step Case (negative)"
         (rule "impRight" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "impRight" (formula "3"))
         (rule "polySimp_elimSub" (formula "4") (term "1,1,0"))
         (rule "mul_literals" (formula "4") (term "1,1,1,0"))
         (rule "polySimp_elimSub" (formula "1") (term "0"))
         (rule "mul_literals" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,1"))
         (rule "polySimp_addComm0" (formula "4") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0"))
         (rule "inEqSimp_geqRight" (formula "4"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_gtToGeq" (formula "4") (term "0"))
         (rule "mul_literals" (formula "4") (term "1,0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1,0,0"))
         (rule "add_literals" (formula "2") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0"))
         (rule "mul_literals" (formula "4") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
)
)

}
