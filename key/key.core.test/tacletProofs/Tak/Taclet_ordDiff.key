\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 11 14:37:34 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Wed Nov 11 14:37:34 CET 2015
name=ordDiff
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
macro split-prop;
cut 'oleq(f_j,oadd(f_i,f_j))';
# first branch of top level cut
cut '\exists Ord ov;(oleq(f_j,oadd(f_i,ov)))';
# first branch of second level cut
rule least_number_principle
  formula='\exists Ord ov; oleq(f_j, oadd(f_i, ov))';
rule exLeft;
rule andLeft;
cut 'ov_0=o_0';
# case ov_0 = o_0
cut 'f_i=f_j';
instantiate hide var=v_k  with=o_0 ;
tryclose branch;
tryclose branch;
# case ov_0 is successor
cut '\exists Ord gamma;(ov_0=oadd(gamma,o_1))';
rule exLeft;
rule oSucc;
instantiate hide var=nv with=gamma_0;
instantiate hide var=k with=gamma_0;
rule impLeft;
tryclose branch;
rule notLeft;
instantiate hide var=v_k with='oadd(gamma_0, o_1)';
cut  '!olt(oadd(f_i, gamma_0),f_j )';
rule notLeft;
rule olt_total_Axiom;
tryclose branch;
rule notRight;
rule hide_right formula='oleq(f_j, oadd(f_i, gamma_0))';
rule hide_right formula='ov_0 = o_0';
rule hide_left formula='olt(gamma_0, oadd(gamma_0, o_1))';
rule hide_left formula='oleq(f_j, oadd(f_i, f_j))';
rule hide_left formula='oleq(f_i, f_j)';
cut '!oleq(f_j, oadd(f_i, oadd(gamma_0, o_1)))';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='ov_0 = oadd(gamma_0, o_1)';
rule hide_left formula='oleq(f_j, oadd(f_i, ov_0))';
rule oadd_DefSucc occ=0;
rule oadd_DefSucc;
tryclose branch;
# case ov_0 is limit ordinal
cut '!lim(ov_0)';
rule notLeft;
rule olimDef;
tryclose branch;
rule notRight;
rule hide_right formula='\exists Ord gamma; ov_0 = oadd(gamma, o_1)';
rule hide_left formula='oleq(f_j, oadd(f_i, f_j))';
rule hide_left formula='oleq(f_i, f_j)';
instantiate hide var=v_k with='ov_0';
rule oadd_DefLim formula='oadd(f_i, ov_0) = f_j';
rule osupDef;
rule hide_left formula='\forall Ord nv1;
   (   olt(nv1, ov_0)
    -> oleq(oadd(f_i, nv1), osup{Ord nv;}(ov_0, oadd(f_i, nv))))';
instantiate hide var=nv2 with=f_j ;
rule impLeft;
rule hide_right formula='osup{Ord nv;}(ov_0, oadd(f_i, nv)) = f_j';
rule allRight;
rule impRight;
instantiate hide var=k with=nv1_0;
rule impLeft;
tryclose branch;
rule notLeft;
rule oleq_replace
 formula='oleq(f_j, oadd(f_i, nv1_0))';
rule orRight;
rule olt_total_Axiom;
instantiate hide var=nv   with= f_j;
instantiate hide var=nv1  with='oadd(f_i, nv1_0)' ;
tryclose branch;
rule hide_left formula='\forall Ord k; (olt(k, ov_0) -> !oleq(f_j, oadd(f_i, k)))';
rule oadd_DefLim;
tryclose branch;
instantiate hide var=ov with='f_j';
tryclose branch;
rule hide_right formula='\exists Ord v_k; oadd(f_i, v_k) = f_j';
rule oaddLeftMonotone;

tryclose;
"
