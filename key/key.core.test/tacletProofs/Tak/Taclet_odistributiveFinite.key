\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 21 17:27:42 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Thu Jan 21 17:27:42 CET 2016
name=odistributiveFinite
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
macro split-prop;
cut '\forall Ord k;(olt(k,omega) ->   
  otimes(oadd(f_i, f_j), k) = oadd(otimes(f_i, k), otimes(f_j, k)))';
tryclose branch;
rule hide_right
  formula='  otimes(oadd(f_i, f_j), f_k)
 = oadd(otimes(f_i, f_k), otimes(f_j, f_k))';
rule oInd;
#Base case closes automatically
tryclose branch;
# Successor case 
rule hide_right
  formula='\forall Ord k;
   (   olt(k, omega)
    ->   otimes(oadd(f_i, f_j), k)
       = oadd(otimes(f_i, k), otimes(f_j, k)))';
rule allRight;
rule impRight;
rule impRight;
rule impLeft;
rule oSucc;
instantiate hide var=nv with=k_0 ;
rule olt_trans
  formula='olt(oadd(k_0, o_1), omega)';
tryclose branch;
rule otimes_DefSucc occ=0;
cut 'oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), oadd(f_i, f_j))
       = 
       oadd(otimes(f_i, oadd(k_0, o_1)),otimes(f_j, oadd(k_0, o_1)))';
tryclose branch;
rule hide_right
  formula='  oadd(otimes(oadd(f_i, f_j), k_0), oadd(f_i, f_j))
 = oadd(otimes(f_i, oadd(k_0, o_1)),
        otimes(f_j, oadd(k_0, o_1)))';
rule otimes_DefSucc occ=0;
rule otimes_DefSucc;
rule oaddAssoc occ=0;
rule oaddAssoc;
cut 'oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)),f_i)
     =
     oadd(oadd(otimes(f_i, k_0), f_i),otimes(f_j, k_0))';
tryclose branch;
rule hide_right
 formula='  oadd(oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)),
             f_i),
        f_j)
 = oadd(oadd(oadd(otimes(f_i, k_0), f_i),
             otimes(f_j, k_0)),
        f_j)';
#tryclose branch;
cut '  oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(f_i, otimes(f_j, k_0)))';
rule oaddAssoc;
tryclose branch;
rule hide_right
 formula='  oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(oadd(otimes(f_i, k_0), f_i), otimes(f_j, k_0))';
cut ' oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(otimes(f_j, k_0),f_i))';
cut '!(olt(otimes(f_j, k_0),omega))';
rule notLeft;
rule hide_left
  formula='olt(f_i, omega)';
rule hide_right
  formula='  oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(f_i, otimes(f_j, k_0)))';
rule hide_left
  formula='oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(otimes(f_j, k_0), f_i))';
rule hide_left
  formula='  otimes(oadd(f_i, f_j), k_0)
 = oadd(otimes(f_i, k_0), otimes(f_j, k_0))';
rule hide_left
  formula='olt(f_k, omega)';
rule oSucc;
instantiate hide var=nv with=k_0;
rule olt_trans
  formula='olt(oadd(k_0, o_1), omega)';
rule otimesFiniteAxiom;
instantiate hide var=x with=f_j;
instantiate hide var=y with=k_0;
tryclose branch;
rule notRight;
rule hide_left
  formula='otimes(oadd(f_i, f_j), k_0)
 = oadd(otimes(f_i, k_0), otimes(f_j, k_0))';
rule hide_left
  formula='olt(oadd(k_0, o_1), omega)';
rule hide_left
  formula='olt(f_k, omega)';
rule hide_left
  formula='olt(f_j, omega)';
cut '!(oadd(f_i, otimes(f_j, k_0))
     =
     oadd(otimes(f_j, k_0), f_i))';
rule notLeft;
rule hide_right
  formula='  oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(f_i, otimes(f_j, k_0)))';
rule hide_left
  formula='  oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(otimes(f_j, k_0), f_i))';
rule oaddFiniteCom occ=0;
tryclose branch;
rule notRight;
cut '  oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(otimes(f_j, k_0), f_i))'
rule applyEq occ=1;
tryclose branch;
rule hide_right
  formula='  oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(f_i, otimes(f_j, k_0)))';
rule eqSymm formula='oadd(f_i, otimes(f_j, k_0)) = oadd(otimes(f_j, k_0), f_i)';
cut 'oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(f_i, otimes(f_j, k_0)))';
tryclose branch;
tryclose branch;
rule hide_right  formula='  oadd(oadd(otimes(f_i, k_0), otimes(f_j, k_0)), f_i)
 = oadd(otimes(f_i, k_0), oadd(f_i, otimes(f_j, k_0)))';
 rule oaddAssoc;
# Limit case is trivial, closes automatically
tryclose;
"
