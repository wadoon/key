\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Jan 15 15:25:47 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Fri Jan 15 15:25:47 CET 2016
name=osupTimesStaticTerm
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
macro split-prop;
cut 'f_i=o_0';
cut '!otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))=o_0';
rule notLeft;
tryclose branch;
rule notRight;
cut '!osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda)))=o_0';
rule notLeft;
rule hide_right formula='  osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda)))
 = otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule osupEQDef;
tryclose branch;
rule notRight;
rule hide_left
  formula='f_i=o_0';
tryclose branch;
# from now on !f_i=o_0 can be assumed
cut 'f_b=o_0';
cut  '!osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda)))=o_0';
rule notLeft;
rule hide_right formula='  osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda)))
 = otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule osupEQDef;
rule andRight;
rule allRight;
rule impRight;
rule hide_right formula='oleq(otimes(f_i, f_j(nv1_0)), o_0)';
rule hide_right formula='f_i = o_0';
rule applyEq occ=1;
tryclose branch;
tryclose branch;
rule notRight;
cut '!osup{Ord v_lambda;}(f_b, f_j(v_lambda))=o_0';
rule notLeft;
rule hide_right formula='  osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda)))
 = otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='
osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))) = o_0';
rule hide_right
  formula='f_i = o_0';
rule osupEQDef;
rule andRight;
rule allRight;
rule impRight;
rule hide_right formula='oleq(f_j(nv1_0), o_0)';
rule applyEq occ=1;
tryclose branch;
tryclose branch;
rule notRight;
tryclose branch;
#  from now on also !f_b=o_0 can be assumed
cut 'oleq(osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))),
         otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))))
     & 
    oleq(otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
     osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))))';
tryclose branch;
rule hide_right
  formula='  osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda)))
 = otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule andRight;
# now equality has been replaced by two inequalities
rule osupDef occ=0;
rule hide_left
 formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(otimes(f_i, f_j(nv1)),
            osup{Ord v_lambda;}(f_b,
                                otimes(f_i, f_j(v_lambda)))))';
instantiate hide var=nv2 with='otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule impLeft;  
rule hide_right formula='oleq(osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))),
      otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
rule allRight;
rule impRight;
tryclose branch;
rule osupDef;
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1;
         (olt(nv1, f_b) -> oleq(f_j(nv1), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, f_j(v_lambda)), nv2))';
instantiate hide var=nv1 with=nv1_0;
rule impLeft;
tryclose branch;
rule  otimesWeakMonotoneQ;
instantiate hide var=k with=f_i ;
instantiate hide var=i with='f_j(nv1_0)' ;
instantiate hide var=j with='osup{Ord v_lambda;}(f_b, f_j(v_lambda))' ;
rule impLeft;
tryclose branch;
tryclose branch;
tryclose branch;
# the first and easy inequaltity has been proved
cut '!lim(osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
# we first consider the case that 
# osup{Ord v_lambda;}(f_b, f_j(v_lambda)) is not a limit ordinal
rule notLeft;
rule olimDef;
rule andRight;
# subcase osup{Ord v_lambda;}(f_b, f_j(v_lambda)) is 0
rule notRight;
rule hide_right formula='f_b = o_0';
rule hide_right formula='f_i = o_0';
rule eqSymm;
rule applyEq occ=5;
tryclose branch;
# subcase osup{Ord v_lambda;}(f_b, f_j(v_lambda)) is a successor ordinal
rule notRight;
rule exLeft;
rule oSucc;
instantiate hide var=nv with=nv_0 ;
cut '!(olt(nv_0,osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
rule notLeft;
rule hide_right formula='oleq(otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
      osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))))';
rule hide_right formula='f_b = o_0';
rule hide_right formula='f_i = o_0';
tryclose branch;
rule notRight;
rule hide_left formula='olt(nv_0, oadd(nv_0, o_1))';
rule hide_left formula='olt(nv_0, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule osupDef occ=1;
rule hide_left
 formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(f_j(nv1),
            osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
instantiate hide var=nv2 with=nv_0 ;
rule impLeft;
rule allRight;
rule impRight;
cut '!olt(nv_0,f_j(nv1_0))';
rule notLeft;
rule hide_right
   formula='oleq(otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
      osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))))';
rule olt_total_Axiom;
tryclose branch;
rule notRight;
rule oLeastSucc;
instantiate hide var=nv  with=nv_0 ;
instantiate hide var=nv1 with='f_j(nv1_0)';
rule impLeft;
tryclose branch;
rule osupDef occ=0;
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1; (olt(nv1, f_b) -> oleq(f_j(nv1), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, f_j(v_lambda)), nv2))';
instantiate hide var=nv1 with=nv1_0 ;
rule impLeft;
tryclose branch;
cut '!oleq(f_j(nv1_0), oadd(nv_0, o_1))';
rule notLeft;
tryclose branch;
rule notRight;
cut '!f_j(nv1_0) = oadd(nv_0, o_1)';
rule notLeft;
tryclose branch;
rule notRight;
cut '!f_j(nv1_0) = osup{Ord v_lambda;}(f_b, f_j(v_lambda))';
rule notLeft;
tryclose branch;
rule notRight;
rule osupDef occ=4;
rule hide_left formula='\forall Ord nv2;
   (   \forall Ord nv1;
         (olt(nv1, f_b) -> oleq(otimes(f_i, f_j(nv1)), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))),
            nv2))';
instantiate hide var=nv1 with='nv1_0';
rule impLeft;
tryclose branch;
rule otimesWeakMonotoneQ;
tryclose branch;
rule hide_right formula='f_b = o_0';
rule hide_right formula='f_i = o_0';
rule hide_right formula='oleq(otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
      osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))))';
rule applyEq occ=0;
rule oSucc;
instantiate hide var=nv with='nv_0';
tryclose branch;
rule notRight;
# now we consider the really difficult case that 
# osup{Ord v_lambda;}(f_b, f_j(v_lambda)) is a limit ordinal
cut '!(olt(
     osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))),
     otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))
        ))';
rule notLeft;
rule olt_total_Axiom;
tryclose branch;
rule notRight;
rule hide_right
  formula='oleq(otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
      osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))))';
# proof by contradiction starts here
rule otimes_DefLim;
#   formula='olt(osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))),
#     otimes(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
rule osupDef occ=1;
#  formula='olt(osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))),
#   osup{Ord nv;}(osup{Ord v_lambda;}(f_b, f_j(v_lambda)),
#                  otimes(f_i, nv)))' occ=1;
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))
    -> oleq(otimes(f_i, nv1),
            osup{Ord nv;}(osup{Ord v_lambda;}(f_b, f_j(v_lambda)),
                          otimes(f_i, nv))))';
instantiate hide var=nv2 with='osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda)))';
rule impLeft;
rule allRight;
rule impRight;
## checked upto here
rule osupDef
  formula='olt(nv1_0, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(f_j(nv1),
            osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
instantiate hide var=nv2 with=nv1_0  ;
rule impLeft;
rule allRight;
rule impRight;
cut '!(olt(nv1_0,f_j(nv1_1)))';
rule notLeft;
rule olt_total_Axiom;
tryclose branch;
rule notRight;
rule otimesMonotoneQ;
instantiate hide var=k with=f_i ;
instantiate hide var=i with=nv1_0 ;
instantiate hide var=j with='f_j(nv1_1)' ;
rule impLeft;
rule andRight;
tryclose branch;
rule oleq_zeroAxiom;
instantiate hide var=nv with=f_i;
rule oleq_replace
  formula='oleq(o_0, f_i)';
rule orLeft;
tryclose branch;
tryclose branch;
tryclose branch;
rule hide_right
  formula='oleq(f_j(nv1_1), nv1_0)';
rule hide_left
  formula='olt(nv1_0, f_j(nv1_1))';
rule hide_left
  formula='olt(osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))),
     osup{Ord nv;}(osup{Ord v_lambda;}(f_b, f_j(v_lambda)),
                   otimes(f_i, nv)))';
rule hide_left
  formula='lim(osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='olt(nv1_0, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule osupDef
  formula='oleq(otimes(f_i, nv1_0),
      osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))))';
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1;
         (   olt(nv1, f_b)
          -> oleq(otimes(f_i, f_j(nv1)), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b,
                                otimes(f_i, f_j(v_lambda))),
            nv2))';
instantiate hide var=nv1 with=nv1_1 ;
rule impLeft
auto steps=2;
tryclose branch;
rule oleqolt_trans
  formula='oleq(otimes(f_i, f_j(nv1_1)),
      osup{Ord v_lambda;}(f_b, otimes(f_i, f_j(v_lambda))))' ;
tryclose;
"

