\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 15 17:32:14 CEST 2017
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\proofObligation "#Proof Obligation Settings
#Tue Aug 15 17:32:14 CEST 2017
name=encodeTwo
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
rule encodeRec;
instantiate hide var=v1 with='o_0';
instantiate hide var=v2 with='o_1';
rule impLeft;
rule orRight;
rule notRight formula='!o_1 = o_0';
rule eqSymm formula='o_1 = o_0';
tryclose branch;
cut 'osup{Ord w1;}(oadd(omax(o_0, o_1), o_1),
                      osup{Ord w2;}(oadd(omax(o_0, o_1), o_1),
                                    \if (oltp(w1, w2, o_0, o_1))
                                        \then (encode(w1, w2))
                                        \else (o_0)))
      = o_1';
tryclose branch;
rule hide_left formula='  encode(o_0, o_1)
 = oadd(osup{Ord w1;}(oadd(omax(o_0, o_1), o_1),
                      osup{Ord w2;}(oadd(omax(o_0, o_1), o_1),
                                    \if (oltp(w1, w2, o_0, o_1))
                                        \then (encode(w1, w2))
                                        \else (o_0))),
        o_1)';
rule hide_right formula='encode(o_0, o_1) = onat(2)';
rule osupEQDef;
cut '!oadd(omax(o_0, o_1), o_1)=onat(2)';
rule notLeft;
tryclose branch;
rule notRight;
rule andRight;
rule allRight;
rule impRight;
rule applyEq occ=1;
rule applyEq occ=15;
rule hide_left formula='oadd(omax(o_0, o_1), o_1) = onat(2)';
cut '!(nv1_0 = o_0 | nv1_0 = o_1)'; 
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='olt(nv1_0, onat(2))';
rule orLeft;
rule applyEq occ=7;
rule applyEq occ=10;
rule hide_left formula='nv1_0 = o_0';
cut 'osup{Ord w2;}(onat(2),
                    \if (oltp(o_0, w2, o_0, o_1))  \then (encode(o_0, w2))  \else (o_0)) = o_0';

tryclose branch;
rule hide_right formula='oleq(osup{Ord w2;}(onat(2),
                    \if (oltp(o_0, w2, o_0, o_1))  \then (encode(o_0, w2))  \else (o_0)),
      o_1)';
rule osupEQDef;
rule andRight;
rule allRight;
rule impRight;
#cut '!(nv1_0 = o_0 | nv1_0 = o_1)'; 
#rule notLeft;
#rule hide_right formula='oleq(\if (oltp(o_0, nv1_1, o_0, o_1))  \then (encode(o_0, nv1_1))  \else (o_0), o_0)';
#rule orRight;
#tryclose branch;
#rule notRight;
rule ifthenelse_split;
cut '!nv1_1 = o_0';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='oltp(o_0, nv1_1, o_0, o_1)';
rule hide_left formula='olt(nv1_1, onat(2))';
rule applyEq occ=4;
tryclose branch;
tryclose branch;
rule allRight;
rule impRight;
tryclose branch;
rule applyEq occ=7;
rule applyEq occ=10;
rule hide_left formula='nv1_0 = o_1';
cut 'osup{Ord w2;}(onat(2),
                    \if (oltp(o_1, w2, o_0, o_1))  \then (encode(o_1, w2))  \else (o_0))= o_1';
tryclose branch;
rule hide_right formula='oleq(osup{Ord w2;}(onat(2),
                    \if (oltp(o_1, w2, o_0, o_1))  \then (encode(o_1, w2))  \else (o_0)),
      o_1)';
rule osupEQDef;
rule andRight;
rule allRight;
rule impRight;
rule ifthenelse_split;
rule hide_left formula='olt(nv1_1, onat(2))';
rule oleq_replace;
rule orRight;
rule hide_right formula='olt(encode(o_1, nv1_1), o_1)';
auto steps=12;
rule eqSymm formula='o_0 = nv1_1';
rule applyEq occ=4;
tryclose branch;
tryclose branch;
rule allRight;
rule impRight;
tryclose branch;
rule allRight;
rule impRight;
rule applyEq occ=5;
instantiate hide var=nv1 with='o_1';
rule impLeft;
tryclose branch;
rule hide_left formula='oadd(omax(o_0, o_1), o_1) = onat(2)';
cut 'osup{Ord w2;}(onat(2),
                    \if (oltp(o_1, w2, o_0, o_1))  \then (encode(o_1, w2))  \else (o_0)) = o_1';
tryclose branch;
rule hide_left formula='oleq(osup{Ord w2;}(onat(2),
                    \if (oltp(o_1, w2, o_0, o_1))  \then (encode(o_1, w2))  \else (o_0)),
      nv2_0)';
rule hide_right formula='oleq(o_1, nv2_0)';
rule osupEQDef;
rule andRight;
rule allRight;
rule impRight;
cut '!(nv1_0 = o_0 | nv1_0 = o_1)';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='olt(nv1_0, onat(2))';
rule oleq_replace;
rule orLeft;
rule orRight;
rule hide_right formula='olt(\if (oltp(o_1, nv1_0, o_0, o_1))  \then (encode(o_1, nv1_0))  \else (o_0), o_1)';
rule applyEq occ=4;
rule applyEq occ=9;
tryclose branch;
rule orRight;
rule hide_right formula='\if (oltp(o_1, nv1_0, o_0, o_1))  \then (encode(o_1, nv1_0))  \else (o_0) = o_1';
rule ifthenelse_split;
rule hide_right formula='olt(encode(o_1, nv1_0), o_1)';
rule applyEq occ=1;
rule hide_left formula='nv1_0 = o_1';
auto steps;
rule eqSymm;
tryclose;
"

