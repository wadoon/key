\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 29 16:11:54 CEST 2017
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\proofObligation "#Proof Obligation Settings
#Fri Sep 29 16:11:54 CEST 2017
name=limpConseq
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
rule allRight;
rule allRight;
rule impRight;
rule orRight;
rule orRight;
rule orRight;
rule orRight;
rule orRight;
cut 'v_nv1_0 = o_0';
cut 'v_nv2_0 = o_0';
tryclose branch;
rule hide_right formula='v_nv1_0 = o_0 & v_nv2_0 = o_0';
cut 'lim(v_nv2_0)';
tryclose branch;
rule hide_right formula='v_nv1_0 = o_0 & lim(v_nv2_0)';
rule olimDef formula='lim(v_nv2_0)';
rule andRight formula='!o_0 = v_nv2_0 & !\exists Ord nv; v_nv2_0 = oadd(nv, o_1)';
tryclose branch;
rule notRight;
cut 'lim(v_nv1_0)';
rule andRight formula='lim(v_nv1_0) & v_nv2_0 = o_0';
tryclose branch;
rule andRight formula='  lim(v_nv1_0)
 & \exists Ord v_nv3; v_nv2_0 = oadd(v_nv3, o_1)
 & olt(v_nv1_0, v_nv2_0)';
tryclose branch;
cut 'olt(o_0, v_nv2_0)';
tryclose branch;
rule hide_right formula='olt(v_nv1_0, v_nv2_0)';
rule oleq_zeroAxiom;
rule hide_left formula='\exists Ord nv; v_nv2_0 = oadd(nv, o_1)';
instantiate hide var=nv with='v_nv2_0';
rule oleq_replace formula='oleq(o_0, v_nv2_0)';
tryclose branch;
tryclose branch;
rule hide_right formula='  lim(v_nv1_0)
 & \exists Ord v_nv3; v_nv2_0 = oadd(v_nv3, o_1)
 & olt(v_nv1_0, v_nv2_0)';
rule olimDef formula='lim(v_nv1_0)';
cut '!\exists Ord nv; v_nv1_0 = oadd(nv, o_1) & !o_0 = v_nv1_0';
tryclose branch;
rule hide_right formula='!o_0 = v_nv1_0 & !\exists Ord nv; v_nv1_0 = oadd(nv, o_1)';
rule andRight formula='!\exists Ord nv; v_nv1_0 = oadd(nv, o_1) & !o_0 = v_nv1_0';
tryclose branch;
rule exLeft;
cut '!limp(o_0, oadd(nv_0, o_1))';
rule notLeft;
tryclose branch;
rule notRight occ=0;
rule hide_left formula='limp(v_nv1_0, v_nv2_0)';
cut '!succp(oadd(nv_0, o_1),nv_0 ,o_0, oadd(nv_0, o_1))';
rule notLeft;
rule oltpSuccMaxFirst2A;
tryclose branch;
rule notRight occ=0;
rule limp_Def;
instantiate hide var=nv3 with='oadd(nv_0, o_1)';
instantiate hide var=nv4 with='nv_0';
rule succpDef;
rule andLeft;
rule impLeft;
tryclose branch;
rule exLeft;
rule exLeft;
rule andLeft;
instantiate hide var=nv2 with='nv5_0';
instantiate hide var=nv3 with='nv6_0';
rule impLeft;
tryclose branch;
tryclose branch;
tryclose branch;
rule hide_right formula='v_nv1_0 = o_0 & v_nv2_0 = o_0';
rule hide_right formula='v_nv1_0 = o_0 & lim(v_nv2_0)';
cut 'v_nv2_0 = o_0';
cut 'lim(v_nv1_0)';
tryclose branch;
rule hide_right formula='lim(v_nv1_0) & v_nv2_0 = o_0';
rule hide_right formula='lim(v_nv1_0) & lim(v_nv2_0)';
rule olimDef formula='lim(v_nv1_0)';
rule andRight formula='!o_0 = v_nv1_0 & !\exists Ord nv; v_nv1_0 = oadd(nv, o_1)';
tryclose branch;
rule notRight;
rule exLeft;
rule oltpSuccEq2;
tryclose branch;
tryclose branch;
rule hide_right formula='lim(v_nv1_0) & v_nv2_0 = o_0';
cut 'lim(v_nv1_0)';
cut 'lim(v_nv2_0)';
tryclose branch;
rule hide_right formula='lim(v_nv1_0) & lim(v_nv2_0)';
rule olimDef formula='lim(v_nv2_0)';
rule andRight occ=0;
tryclose branch;
rule notRight;
rule exLeft;
cut 'oleq(v_nv1_0,nv_0)';
rule andRight formula='  lim(v_nv1_0)
 & \exists Ord v_nv3; v_nv2_0 = oadd(v_nv3, o_1)
 & olt(v_nv1_0, v_nv2_0)';
tryclose branch;
tryclose branch;
rule hide_right formula='oleq(v_nv2_0, v_nv1_0) & lim(v_nv2_0)';
rule oSucc;
instantiate hide var=nv with='nv_0';
tryclose branch;
rule hide_right formula='  lim(v_nv1_0)
 & \exists Ord v_nv3; v_nv2_0 = oadd(v_nv3, o_1)
 & olt(v_nv1_0, v_nv2_0)';
cut '!olt(nv_0,v_nv1_0)';
rule notLeft;
rule olt_total_Axiom;
tryclose branch;
rule notRight;
cut '!succp(v_nv1_0, nv_0, v_nv1_0, oadd(nv_0, o_1))';
rule notLeft;
cut '!oleq(oadd(nv_0,o_1), v_nv1_0)';
rule notLeft;
rule oLeastSucc;
tryclose branch;
rule notRight;
rule oleq_replace formula='oleq(oadd(nv_0, o_1), v_nv1_0)';
rule orLeft;
rule oltpSuccMaxFirstA;
instantiate hide var=nv1 with='v_nv1_0';
instantiate hide var=nv2 with='nv_0';
tryclose branch;
tryclose branch;
rule notRight;
tryclose branch;
rule olimDef formula='lim(v_nv1_0)';
rule andRight formula='!o_0 = v_nv1_0 & !\exists Ord nv; v_nv1_0 = oadd(nv, o_1)';
tryclose branch;
rule notRight;
rule exLeft;
rule hide_right formula='  lim(v_nv1_0)
 & \exists Ord v_nv3; v_nv2_0 = oadd(v_nv3, o_1)
 & olt(v_nv1_0, v_nv2_0)';
cut 'oleq(v_nv2_0, v_nv1_0)';
cut 'lim(v_nv2_0)';
tryclose branch;
rule hide_right formula='lim(v_nv1_0) & lim(v_nv2_0)';
rule olimDef occ=0;
rule andRight formula='!o_0 = v_nv2_0 & !\exists Ord nv; v_nv2_0 = oadd(nv, o_1)';
tryclose branch;
rule notRight;
rule exLeft;
cut '!succp(v_nv1_0,nv_1 ,v_nv1_0, oadd(nv_1, o_1))';
rule notLeft;
rule hide_right formula='oleq(v_nv2_0, v_nv1_0) & lim(v_nv2_0)';
rule oleq_replace;
rule orLeft;
rule oltpSuccMaxFirstA;
instantiate hide var=nv1 with='v_nv1_0';
instantiate hide var=nv2 with='nv_1';
tryclose branch;
rule hide_right formula='succp(v_nv1_0, nv_1, v_nv1_0, oadd(nv_1, o_1))';
rule oltpSuccMaxSecond2;
instantiate hide var=nv1 with='nv_0';
instantiate hide var=nv2 with='v_nv2_0';
rule impLeft;
cut 'olt(nv_0, v_nv1_0)';
tryclose branch;
rule hide_right formula='olt(nv_0, v_nv2_0)';
rule oSucc;
instantiate hide var=nv with='nv_0';
cut '!succp(nv_0, v_nv2_0, v_nv1_0, v_nv2_0)';
rule notLeft;
tryclose branch;
rule notRight;
tryclose branch;
cut '!succp(nv_0, v_nv2_0, v_nv1_0, v_nv2_0)';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='succp(nv_0, v_nv2_0, oadd(nv_0, o_1), v_nv2_0)';
tryclose branch;
rule notRight;
tryclose branch;
rule hide_right formula='lim(v_nv1_0) & lim(v_nv2_0)';
rule hide_right formula='oleq(v_nv2_0, v_nv1_0) & lim(v_nv2_0)';
cut '!olt(v_nv1_0, v_nv2_0)';
rule notLeft;
rule oleq_replace;
rule orRight;
rule olt_total_Axiom;
tryclose branch;
rule notRight;
rule oltpSuccMaxSecond2;
instantiate hide var=nv1 with='nv_0';
instantiate hide var=nv2 with='v_nv2_0';
rule impLeft;
rule oSucc;
instantiate hide var=nv with='nv_0';
tryclose branch;
tryclose;
"