\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Aug 11 18:48:45 CEST 2017
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\proofObligation "#Proof Obligation Settings
#Fri Aug 11 18:48:45 CEST 2017
name=oltpLeastPair2
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
rule impRight;
rule notLeft;
rule notRight;
cut '!(\exists Ord v_v1; \exists Ord v_v2;(f_phi(v_v2, v_v1) &
        \forall Ord w1;\forall Ord w2;(olt(omax(w1,w2),omax(v_v1,v_v2)) ->
            ! {\subst Ord v_v1;w1}{\subst Ord v_v2;w2}f_phi(v_v2,v_v1))))';
rule hide_right;
rule notLeft;
cut '!\exists Ord v0;\exists Ord v_v1; \exists Ord v_v2; (v0 = omax(v_v2, v_v1) & f_phi(v_v2, v_v1))';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left formula='\exists Ord v_v1; \exists Ord v_v2; f_phi(v_v2, v_v1)';
rule least_number_principle occ=0;
rule exLeft;
rule andLeft;
rule exLeft occ=0;
rule exLeft occ=0;
rule andLeft;
instantiate hide var='v_v1'  with='v_v1_0';
instantiate hide var='v_v2'  with='v_v2_0';
rule andRight;
tryclose branch;
rule allRight;
rule allRight;
rule impRight;
instantiate hide var=k with='omax(w1_0, w2_0)';
rule impLeft;
rule hide_right formula='!{\subst Ord v_v1;w1_0}{\subst Ord v_v2;w2_0}f_phi(v_v2, v_v1)';
rule hide_left formula='f_phi(v_v2_0, v_v1_0)';
#workaround begin
rule eqSymm;
rule WRolteq;
instantiate hide var='i0' with='omax(w1_0, w2_0)';
instantiate hide var='i1' with='omax(v_v1_0, v_v2_0)';
instantiate hide var='i2' with='v0_0';
rule impLeft;
rule andRight;
tryclose branch;
tryclose branch;
#rule hide_right formula='olt(omax(v_v2_0, v_v1_0), v0_0)';
#rule hide_left formula='olt(omax(w1_0, w2_0), omax(v_v1_0, v_v2_0))';
rule omaxSymQ;
tryclose branch;
rule omaxSymQ;
tryclose branch;
rule notLeft; 
rule notRight;
rule apply_subst_for occ=0;
rule apply_subst_for occ=0;
instantiate hide var='v_v1' with='w1_0';
instantiate hide var='v_v2' with='w2_0';
rule andRight;
rule omaxSymQ;
tryclose branch;
tryclose branch;
rule notRight;
rule hide_left formula='\exists Ord v_v1; \exists Ord v_v2; f_phi(v_v2, v_v1)';
rule exLeft;
rule exLeft;
rule andLeft;
cut '!\exists Ord x1;\exists Ord x2;(omax(x2,x1) = omax(v_v2_0, v_v1_0) & 
          {\subst Ord v_v1;x1}{\subst Ord v_v2;x2}f_phi(v_v2, v_v1))';
rule hide_right;
rule notLeft;
instantiate hide var='x1' with='v_v1_0';
instantiate hide var='x2' with='v_v2_0';
tryclose branch;
rule notRight;
cut '!\exists Ord x2;
   \exists Ord x1;
     (  omax(x2, x1) = omax(v_v2_0, v_v1_0)
      & {\subst Ord v_v1;x1}{\subst Ord v_v2;x2}f_phi(v_v2, v_v1))';
rule notLeft;
rule exLeft occ=0;
rule exLeft occ=0;
instantiate hide var='x2' with='x2_0';
instantiate hide var='x1' with='x1_0';
tryclose branch;
rule hide_left formula='\exists Ord x1;
   \exists Ord x2;
     (  omax(x2, x1) = omax(v_v2_0, v_v1_0)
      & {\subst Ord v_v1;x1}{\subst Ord v_v2;x2}f_phi(v_v2, v_v1))';
rule notRight;
rule least_number_principle occ=0;
rule exLeft;
rule andLeft;
# cut II
cut '!\exists Ord v_v2;
   \exists Ord v_v1;
     (  f_phi(v_v2, v_v1)
      & \forall Ord v_w1;
          \forall Ord v_w2;(
            (   olt(omax(v_w1, v_w2), omax(v_v1, v_v2)) |
                (omax(v_w1, v_w2) = omax(v_v1, v_v2) & olt(v_w2, v_v2)))
             -> !{\subst Ord v_v1;v_w1}
                   {\subst Ord v_v2;v_w2}f_phi(v_v2, v_v1)))';
rule hide_right;
rule notLeft;
instantiate hide var='v_v2'  with='x2_0';
rule exLeft;
rule andLeft;
rule apply_subst_for occ=0;
rule apply_subst_for occ=0;
instantiate hide var='v_v1'  with='x1_0';
rule andRight;
tryclose branch;
rule allRight;
rule allRight;
rule impRight;
rule orLeft;
tryclose branch;
instantiate hide var='w1' with='v_w1_0';
instantiate hide var='w2' with='v_w2_0'; 
rule impLeft;
rule hide_right formula='!{\subst Ord v_v1;v_w1_0}{\subst Ord v_v2;v_w2_0}f_phi(v_v2, v_v1)';
rule hide_left  formula='\forall Ord k;
   (   olt(k, x2_0)
    -> !\exists Ord x1;
          (  omax(k, x1) = omax(v_v2_0, v_v1_0)
           & {\subst Ord v_v1;x1}{\subst Ord v_v2;k}f_phi(v_v2, v_v1)))';
cut '!omax(x2_0, x1_0) = omax(v_v1_0, v_v2_0)';
rule notLeft;
rule omaxSymQ;
tryclose branch;

rule notRight;
rule hide_left formula='omax(x2_0, x1_0) = omax(v_v2_0, v_v1_0)';
rule WRolteq;
instantiate hide var='i0' with='omax(v_w1_0, v_w2_0)';
instantiate hide var='i1' with='omax(x1_0, x2_0)';
instantiate hide var='i2' with='omax(v_v1_0, v_v2_0)';
rule impLeft;
rule andRight;
tryclose branch;
rule omaxSymQ;
tryclose branch;
tryclose branch;
tryclose branch;
rule andLeft;
rule hide_left formula='\forall Ord w1;
   \forall Ord w2;
     (   olt(omax(w1, w2), omax(v_v1_0, v_v2_0))
      -> !{\subst Ord v_v1;w1}{\subst Ord v_v2;w2}f_phi(v_v2, v_v1))';
instantiate hide var=k with='v_w2_0';
rule impLeft;
tryclose branch;
rule notLeft;
rule notRight;
rule apply_subst_for occ=0;
rule apply_subst_for occ=0;
instantiate hide var='x1'  with='v_w1_0';
rule andRight;
tryclose branch;
rule omaxSymQ;
tryclose branch;
tryclose branch;
rule  notRight;
# first part of cut II closed
rule hide_left formula='\exists Ord x1;
   (  omax(x2_0, x1) = omax(v_v2_0, v_v1_0)
    & {\subst Ord v_v1;x1}{\subst Ord v_v2;x2_0}f_phi(v_v2, v_v1))';
rule hide_left formula='\forall Ord k;
   (   olt(k, x2_0)
    -> !\exists Ord x1;
          (  omax(k, x1) = omax(v_v2_0, v_v1_0)
           & {\subst Ord v_v1;x1}{\subst Ord v_v2;k}f_phi(v_v2, v_v1)))';
rule hide_left formula='f_phi(v_v2_0, v_v1_0)';
rule hide_left formula='\forall Ord w1;
   \forall Ord w2;
     (   olt(omax(w1, w2), omax(v_v1_0, v_v2_0))
      -> !{\subst Ord v_v1;w1}{\subst Ord v_v2;w2}f_phi(v_v2, v_v1))';
rule exLeft;
rule exLeft;
rule andLeft;
cut '!\exists Ord u1;( {\subst Ord v_v1;u1} {\subst Ord v_v2;v_v2_1}f_phi(v_v2, v_v1) &
    omax(u1, v_v2_1) = omax(v_v2_1, v_v1_1))';
# \exists Ord u2 is made superfluous by u2 = v_v2_1
rule notLeft;
instantiate hide var='u1' with='v_v1_1';
rule andRight;
rule apply_subst_for occ=2;
rule apply_subst_for occ=2;
tryclose branch;
rule omaxSymQ;
tryclose branch;
### last cut closed
rule notRight;
rule least_number_principle occ=0;
rule exLeft;
rule andLeft;
rule andLeft;
rule apply_subst_for occ=0;
rule apply_subst_for occ=0;
instantiate hide var='v_v1' with='u1_0';
instantiate hide var='v_v2' with='v_v2_1';
rule andRight;
tryclose branch;
rule allRight;
rule allRight;
rule impRight;
rule oltp_Def;
rule orLeft;
rule orLeft;
instantiate hide var='v_w1' with='v_w1_0'; 
instantiate hide var='v_w2' with='v_w2_0';
rule impLeft;
rule orRight;
rule hide_left formula='f_phi(v_v2_1, u1_0)';
rule hide_left formula='\forall Ord k;
   (   olt(k, u1_0)
    -> !(  {\subst Ord v_v1;k}{\subst Ord v_v2;v_v2_1}f_phi(v_v2, v_v1)
         & omax(k, v_v2_1) = omax(v_v2_1, v_v1_1)))';
rule hide_left formula='f_phi(v_v2_1, v_v1_1)';
rule hide_right formula='omax(v_w1_0, v_w2_0) = omax(v_v1_1, v_v2_1) & olt(v_w2_0, v_v2_1)';
rule hide_right formula='!{\subst Ord v_v1;v_w1_0}{\subst Ord v_v2;v_w2_0}f_phi(v_v2, v_v1)';
rule WRolteq;
instantiate hide var='i0'  with='omax(v_w1_0, v_w2_0)';
instantiate hide var='i1'  with='omax(u1_0, v_v2_1)';
instantiate hide var='i2'  with='omax(v_v1_1, v_v2_1)';
rule impLeft;
rule andRight;
tryclose branch;
rule hide_left formula='olt(omax(v_w1_0, v_w2_0), omax(u1_0, v_v2_1))';
rule hide_right  formula='olt(omax(v_w1_0, v_w2_0), omax(v_v1_1, v_v2_1))';
rule omaxSymQ;
tryclose branch;
tryclose branch;
tryclose branch;
rule andLeft;
instantiate hide var='v_w1' with='v_w1_0';
instantiate hide var='v_w2' with='v_w2_0';
rule impLeft;
rule hide_right formula='!{\subst Ord v_v1;v_w1_0}{\subst Ord v_v2;v_w2_0}f_phi(v_v2, v_v1)';
rule hide_left  formula='\forall Ord k;
   (   olt(k, u1_0)
    -> !(  {\subst Ord v_v1;k}{\subst Ord v_v2;v_v2_1}f_phi(v_v2, v_v1)
         & omax(k, v_v2_1) = omax(v_v2_1, v_v1_1)))';
rule orRight;
rule andRight;
rule omaxSymQ;
tryclose branch;

tryclose;
"



