\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Feb 23 15:03:10 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=50
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Tue Feb 23 15:03:10 CET 2016
name=oexpDistr
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
rule allRight;
rule allRight;
rule oInd;
# Base case closes automatically
rule hide_right
  formula='\forall Ord v_k;
     oexp(v_i_0, oadd(v_j_0, v_k))
   = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, v_k))';
tryclose branch;
# start of successro case
rule hide_right
  formula='\forall Ord v_k;
     oexp(v_i_0, oadd(v_j_0, v_k))
   = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, v_k))';
rule allRight;
rule impRight;
rule oadd_DefSucc;
rule oexp_DefSucc
  formula='  oexp(v_i_0, oadd(oadd(v_j_0, v_k_3), o_1))
 = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, oadd(v_k_3, o_1)))' occ=0;
rule oexp_DefSucc;
rule otimesAssoc;
tryclose branch;
# limit case starts here
rule hide_right
  formula='\forall Ord v_k;
     oexp(v_i_0, oadd(v_j_0, v_k))
   = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, v_k))';
rule allRight;
rule impRight;
rule andLeft;
cut '!lim(oadd(v_j_0, nv1_2))';
rule notLeft;
rule olimAddolim
  formula='lim(nv1_2)';
tryclose branch;
rule notRight;
cut 'olt(o_0,v_i_0)';
rule oexp_DefLim occ=1;
rule oexp_DefLim
  formula='  osup{Ord nv;}(oadd(v_j_0, nv1_2), oexp(v_i_0, nv))
 = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, nv1_2))' occ=1;
cut 'osup{Ord nv;}(oadd(v_j_0, nv1_2), oexp(v_i_0, nv))
     =
     osup{Ord nv;}(nv1_2,otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, nv)))';
rule osupTimesStaticTerm;
tryclose branch;
rule hide_right
  formula='  osup{Ord nv;}(oadd(v_j_0, nv1_2), oexp(v_i_0, nv))
 = otimes(oexp(v_i_0, v_j_0), osup{Ord nv;}(nv1_2, oexp(v_i_0, nv)))';
rule osupMutualCofinal;
rule andRight;
rule allRight;
rule impRight;
#cut 'oleq(i_0,v_j_0)';
cut 'olt(i_0,v_j_0)';
cut  '!oleq(i_0,v_j_0)';
rule notLeft;
tryclose branch;
rule notRight;
rule oexpRightWeakMonotoneQ;
instantiate hide var=x  with=v_i_0;
instantiate hide var=y1 with=i_0 ;
instantiate hide var=y2 with=v_j_0 ;
rule impLeft;
tryclose branch;
rule hide_left
  formula='\forall Ord v_k;
   (   olt(v_k, nv1_2)
    ->   oexp(v_i_0, oadd(v_j_0, v_k))
       = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, v_k)))';
instantiate hide var=j with='o_1';
rule andRight;
tryclose branch;
cut '!oleq(oexp(v_i_0, v_j_0),otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, o_1)))';
rule notLeft;
rule hide_right
  formula='oleq(oexp(v_i_0, i_0), otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, o_1)))';
rule otimesMonotoneQ;
instantiate hide var=k with='oexp(v_i_0, v_j_0)';
instantiate hide var=i with=o_1;
instantiate hide var=j with= 'oexp(v_i_0, o_1)';
rule impLeft;
rule andRight;
rule hide_right
  formula='oleq(oexp(v_i_0, v_j_0), otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, o_1)))';
rule oexpGreaterEqualOne;
tryclose branch;
cut '!oleq(v_j_0,i_0)'
rule notLeft;
rule olt_total_Axiom;
tryclose branch;
rule notRight;
rule hide_right
  formula='olt(i_0, v_j_0)';
rule ordDiff;
rule exLeft;
cut '!olt(oadd(v_j_0, k_0),oadd(v_j_0, nv1_2))';
rule notLeft;
tryclose branch;
rule notRight;
rule oAddOltPreserv;
tryclose branch;
rule allRight;
rule impRight;
instantiate hide var=v_k with=j_7;
rule impLeft;
tryclose branch;
instantiate hide var=i   with='oadd(v_j_0,j_7)';
rule andRight;
rule hide_left
  formula='  oexp(v_i_0, oadd(v_j_0, j_7))
 = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, j_7))';
rule oltAddLessLeft formula='olt(j_7, nv1_2)';
tryclose branch;
rule hide_left
  formula='\forall Ord v_k;
   (   olt(v_k, nv1_2)
    ->   oexp(v_i_0, oadd(v_j_0, v_k))
       = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, v_k)))';
cut '!v_i_0=o_0';
rule notLeft;
rule hide_right
  formula='  oexp(v_i_0, oadd(v_j_0, nv1_2))
 = otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, nv1_2))';

rule olt_total_Axiom;
tryclose branch;
rule notRight;
rule hide_right formula='olt(o_0, v_i_0)';
rule olimDef
  formula='lim(oadd(v_j_0, nv1_2))';
rule andLeft;
rule hide_left
  formula='!\exists Ord nv; oadd(v_j_0, nv1_2) = oadd(nv, o_1)';
rule olimDef;
rule andLeft;
rule hide_left
  formula='!\exists Ord nv; nv1_2 = oadd(nv, o_1)';
cut '!oexp(v_i_0, oadd(v_j_0, nv1_2))=o_0';
rule notLeft formula='!oexp(v_i_0, oadd(v_j_0, nv1_2)) = o_0';
tryclose branch;
rule notRight;
cut '!oexp(v_i_0, nv1_2)=o_0';
rule notLeft formula='!oexp(v_i_0, nv1_2) = o_0';
tryclose branch;
rule notRight;
rule hide_left
  formula='!o_0 = oadd(v_j_0, nv1_2)';
rule hide_left
  formula='!o_0 = nv1_2';
cut '!otimes(oexp(v_i_0, v_j_0), oexp(v_i_0, nv1_2))=o_0';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left
  formula='oexp(v_i_0, nv1_2)=o_0';
rule hide_left
  formula='v_i_0 = o_0';
# proof script is not able to continue form here
# Manually apply the two equations
# this wil lead the trivial proof goal o_0=o_0
tryclose;
"
