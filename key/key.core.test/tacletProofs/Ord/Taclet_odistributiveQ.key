\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Jan 16 13:18:30 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Sat Jan 16 13:18:30 CET 2016
name=odistributiveQ
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
rule allRight;
rule allRight;
rule oInd;
# Base case closes automaticall
tryclose branch;
# Successor case
rule hide_right
  formula='\forall Ord v_k;
     otimes(v_i_0, oadd(v_j_0, v_k))
   = oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, v_k))';
rule allRight;
rule impRight;
rule oadd_DefSucc
  formula='  otimes(v_i_0, oadd(v_j_0, oadd(v_k_3, o_1)))
 = oadd(otimes(v_i_0, v_j_0),
        otimes(v_i_0, oadd(v_k_3, o_1)))';
rule otimes_DefSucc
  formula='  otimes(v_i_0, oadd(oadd(v_j_0, v_k_3), o_1))
 = oadd(otimes(v_i_0, v_j_0),
        otimes(v_i_0, oadd(v_k_3, o_1)))' occ=0; 
rule otimes_DefSucc;
cut '!(oadd(otimes(v_i_0, oadd(v_j_0, v_k_3)), v_i_0)
     =
    oadd(oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, v_k_3)), v_i_0))';
tryclose branch;
rule notRight;
rule hide_left
 formula='  otimes(v_i_0, oadd(v_j_0, v_k_3))
 = oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, v_k_3))';
rule oaddAssoc
  formula='  oadd(otimes(v_i_0, oadd(v_j_0, v_k_3)), v_i_0)
 = oadd(otimes(v_i_0, v_j_0),
        oadd(otimes(v_i_0, v_k_3), v_i_0))';
tryclose branch;
# Limit case
rule hide_right
  formula='\forall Ord v_k;
     otimes(v_i_0, oadd(v_j_0, v_k))
   = oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, v_k))';
rule allRight;
rule impRight;
rule andLeft;
rule oadd_DefLim occ=0;
cut '!(osup{Ord nv;}(nv1_3, otimes(v_i_0, oadd(v_j_0,nv)))
    =
     otimes(v_i_0, osup{Ord nv;}(nv1_3, oadd(v_j_0, nv))))';
rule notLeft;
rule hide_left
  formula='\forall Ord v_k;
   (   olt(v_k, nv1_3)
    ->   otimes(v_i_0, oadd(v_j_0, v_k))
       = oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, v_k)))';
rule hide_right
  formula='  otimes(v_i_0, osup{Ord nv;}(nv1_3, oadd(v_j_0, nv)))
 = oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, nv1_3))';
rule osupTimesStaticTerm;
tryclose branch;
rule notRight;
rule otimes_DefLimQ;
instantiate hide var=i with=v_i_0 ;
instantiate hide var=j with=nv1_3 ;
rule impLeft;
tryclose branch;
cut '!(oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, nv1_3))
    =
    osup{Ord nv;}(nv1_3, oadd(otimes(v_i_0, v_j_0),otimes(v_i_0, nv))))';
rule notLeft;
rule hide_left
  formula='\forall Ord v_k;
   (   olt(v_k, nv1_3)
    ->   otimes(v_i_0, oadd(v_j_0, v_k))
       = oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, v_k)))';
rule hide_left
  formula='  osup{Ord nv;}(nv1_3, otimes(v_i_0, oadd(v_j_0, nv)))
 = otimes(v_i_0, osup{Ord nv;}(nv1_3, oadd(v_j_0, nv)))';
rule hide_right
  formula='  otimes(v_i_0, osup{Ord nv;}(nv1_3, oadd(v_j_0, nv)))
 = oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, nv1_3))';
cut '!(oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, nv1_3))
     =
    oadd(otimes(v_i_0, v_j_0), osup{Ord nv;}(nv1_3, otimes(v_i_0, nv))))';
tryclose branch;
rule notRight;
rule hide_left
  formula='  otimes(v_i_0, nv1_3)
 = osup{Ord nv;}(nv1_3, otimes(v_i_0, nv))';
tryclose branch;
rule olimDef;
rule andLeft;
rule hide_left
  formula='!\exists Ord nv; nv1_3 = oadd(nv, o_1)';
cut '!(oadd(otimes(v_i_0, v_j_0),
        osup{Ord nv;}(nv1_3, otimes(v_i_0, nv)))
     =
    osup{Ord nv;}(nv1_3, oadd(otimes(v_i_0, v_j_0),  otimes(v_i_0, nv))))';
rule notLeft
  formula='!  oadd(otimes(v_i_0, v_j_0),
         osup{Ord nv;}(nv1_3, otimes(v_i_0, nv)))
  = osup{Ord nv;}(nv1_3,
                  oadd(otimes(v_i_0, v_j_0),
                       otimes(v_i_0, nv)))';
cut '!(!nv1_3=o_0)';
tryclose branch;
rule hide_left
  formula='!o_0 = nv1_3';
rule notRight;
rule osupAddStaticTerm
  formula='  oadd(otimes(v_i_0, v_j_0), otimes(v_i_0, nv1_3))
 = osup{Ord nv;}(nv1_3,
                 oadd(otimes(v_i_0, v_j_0),
                      otimes(v_i_0, nv)))';
tryclose branch;
rule notRight;
cut '!(osup{Ord nv;}(nv1_3, otimes(v_i_0, oadd(v_j_0, nv)))
     =
     osup{Ord nv;}(nv1_3,
                 oadd(otimes(v_i_0, v_j_0),
                      otimes(v_i_0, nv))))';
rule notLeft;
rule osupEqualTerms;
tryclose branch;
tryclose;
"
