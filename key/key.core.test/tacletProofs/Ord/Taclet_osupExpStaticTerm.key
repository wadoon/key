\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Feb 29 17:41:33 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NONE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=50
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Feb 29 17:41:33 CET 2016
name=osupExpStaticTerm
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
rule notRight;
rule impLeft;
tryclose branch;
rule notLeft;
rule impRight;
rule andLeft;
cut 'osup{Ord v_lambda;}(f_b, f_j(v_lambda))=o_0';
rule osupDef occ=2;
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1; (olt(nv1, f_b) -> oleq(f_j(nv1), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, f_j(v_lambda)), nv2))';
cut '\forall Ord v_lambda;(olt(v_lambda,f_b) -> oleq(f_j(v_lambda),o_0))';
rule commute_or;
rule orLeft;
instantiate hide var=v_lambda with=o_0 occ=1;
instantiate hide var=v_lambda with=o_0;
tryclose branch;
cut '!osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))=o_1';
rule notLeft;
rule hide_right
  formula='  osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule osupEQDef;
rule andRight;
rule allRight;
rule impRight;
instantiate hide var=v_lambda with=nv1_0;
rule impLeft;
tryclose branch;
rule allRight;
rule impRight;
instantiate hide var=nv1 with=o_0;
rule impLeft;
tryclose branch;
instantiate hide var=v_lambda with=o_0;
tryclose branch;
rule hide_right
  formula='osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
 formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(f_j(nv1), osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
rule hide_left
  formula='  olt(o_0, f_i)
 | \forall Ord v_lambda;
     (olt(v_lambda, f_b) -> olt(o_0, f_j(v_lambda)))';
rule osupDef;
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1; (olt(nv1, f_b) -> oleq(f_j(nv1), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, f_j(v_lambda)), nv2))';
rule allRight;
rule impRight;
tryclose branch;
instantiate hide var=nv1 with=v_lambda_4;
rule impLeft;
tryclose branch;
cut '!olt(o_0, f_i)';
rule notLeft;
rule orLeft;
tryclose branch;
cut '!f_i=o_0';
rule notLeft;
rule hide_right
  formula='osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_right
  formula='osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = o_0';
rule hide_left
  formula='\forall Ord v_lambda;
   (olt(v_lambda, f_b) -> olt(o_0, f_j(v_lambda)))';
rule olt_total_Axiom;
instantiate hide var= nv  with=o_0 ;
instantiate hide var= nv1 with=f_i ;
tryclose branch;
rule notRight;
rule hide_right formula='olt(o_0, f_i)';
cut '!olt(o_0,osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule notLeft;
rule hide_right
  formula='  osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='\forall Ord v_lambda;
   (olt(v_lambda, f_b) -> olt(o_0, f_j(v_lambda)))';
rule olt_total_Axiom;
instantiate hide var=nv   with=o_0 ;
instantiate hide var=nv1  with='osup{Ord v_lambda;}(f_b, f_j(v_lambda))' ;
tryclose branch;
rule notRight;
rule hide_right
 formula='osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = o_0';
cut '!oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))=o_0';
rule notLeft;
tryclose branch;
rule notRight;
cut '!osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))=o_0';
rule notLeft;
rule hide_right
  formula='  osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule osupEQDef;
rule andRight;
rule allRight;
rule impRight;
instantiate hide var=v_lambda with=nv1_1;
rule impLeft;
tryclose branch;
rule notRight;
rule hide_left
  formula='\forall Ord v_lambda;
   (olt(v_lambda, f_b) -> olt(o_0, f_j(v_lambda)))';
tryclose branch;
rule notRight;
rule hide_left
 formula='  olt(o_0, f_i)
 | \forall Ord v_lambda;
     (olt(v_lambda, f_b) -> olt(o_0, f_j(v_lambda)))';
cut 'f_i=o_1';
cut '!oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))=o_1';
tryclose branch;
rule notRight;
cut 'osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = o_1';
rule hide_right
 formula='osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = o_0';
tryclose branch;
rule hide_right
 formula='osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_right
 formula='osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = o_0';
rule hide_left
  formula='  oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))
 = o_1';
rule osupEQDef;
rule andRight;
tryclose branch;
rule allRight;
rule impRight;
instantiate hide var=nv1 with=o_0;
rule impLeft;
tryclose branch;
cut 'oexp(f_i, f_j(o_0))=o_1';
rule hide_left
  formula='f_i = o_1';
#rule oapplyEq2;
rule applyEq
  formula='oleq(oexp(f_i, f_j(o_0)), nv2_3)' occ=0;
tryclose branch;
cut '!olt(o_1,f_i)';
tryclose branch;
rule notRight;
rule osupDef occ=0;
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1; (olt(nv1, f_b) -> oleq(f_j(nv1), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, f_j(v_lambda)), nv2))';
cut '!\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(oexp(f_i,f_j(nv1)), oexp(f_i,osup{Ord v_lambda;}(f_b, f_j(v_lambda)))))';
rule notLeft;
rule hide_right
  formula='  osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule allRight;
rule impRight;
instantiate hide var=nv1 with=nv1_3;
rule impLeft;
tryclose branch;
rule oexpRightWeakMonotoneQ;
tryclose branch;
instantiate hide var=x  with=f_i ;
instantiate hide var=y1 with='f_j(nv1_3)' ;
instantiate hide var=y2 with='osup{Ord v_lambda;}(f_b, f_j(v_lambda))' ;
rule impLeft;
tryclose branch;
rule notRight;
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(f_j(nv1), osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
cut '!oleq(osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))),oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
rule notLeft;
rule osupDef occ=4;
rule hide_right
 formula='  osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(oexp(f_i, f_j(nv1)),
            osup{Ord v_lambda;}(f_b,
                                oexp(f_i, f_j(v_lambda))))) ';
instantiate hide var=nv2 with='oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))' ;
rule impLeft;
rule allRight;
rule impRight;
instantiate hide var=nv1 with='nv1_4';
rule impLeft;
tryclose branch;
rule notRight;
cut 'oleq(oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
          osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))';
tryclose branch;
rule hide_right
  formula='  osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='oleq(osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))),
      oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(oexp(f_i, f_j(nv1)),
            oexp(f_i,
                 osup{Ord v_lambda;}(f_b, f_j(v_lambda)))))';
# new attempt starts here
cut '\exists Ord k;(olt(k,f_b) & osup{Ord v_lambda;}(f_b, f_j(v_lambda))= f_j(k))';
rule exLeft;
rule andLeft;
cut '!osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))) = oexp(f_i,f_j(k_0))';
rule notLeft;
rule osupEQDef
 formula='  osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))
 = oexp(f_i,f_j( k_0))';
rule osupDef
  formula='osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = f_j(k_0)';
rule andRight;
rule allRight;
rule impRight;
rule hide_right
  formula='oleq(oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
      osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))';
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1; (olt(nv1, f_b) -> oleq(f_j(nv1), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, f_j(v_lambda)), nv2))';
instantiate hide var=nv1 with=nv1_5;
rule impLeft;
tryclose branch;
rule oexpRightWeakMonotoneQ;
instantiate hide var=x  with=f_i ;
instantiate hide var=y1 with='f_j(nv1_5)' ;
instantiate hide var=y2 with='osup{Ord v_lambda;}(f_b, f_j(v_lambda))' ;
rule impLeft;
tryclose branch;
rule allRight;
rule impRight;
rule hide_right
   formula='oleq(oexp(f_i,
           osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
      osup{Ord v_lambda;}(f_b,
                          oexp(f_i, f_j(v_lambda))))';
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(f_j(nv1),
            osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
instantiate hide var=nv2 with=nv2_6;
rule impLeft;
rule allRight;
rule impRight;
instantiate hide var=nv1 with=nv1_6;
rule impLeft;
tryclose branch;
rule oexpRightNondecreasing;
instantiate hide var=x with=f_i ;
instantiate hide var=y with='f_j(nv1_6)' ;
rule impLeft;
tryclose branch;
instantiate hide var=nv1 with=k_0;
rule impLeft;
tryclose branch;
cut '!lim(osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule notLeft;
rule olimDefEquiv
  formula='lim(osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule andRight;
tryclose branch;
rule allRight;
rule impRight;
rule osupDef
  formula='olt(ov_1, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
instantiate hide var=nv2 with=ov_1 ;
rule impLeft;
rule allRight;
rule impRight;
cut '!olt(ov_1,f_j(nv1_7))';
rule notLeft;
rule hide_right
  formula='\exists Ord k;
   (  olt(k, f_b)
    & osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = f_j(k))';
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(f_j(nv1),
            osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
rule olt_total_Axiom;
instantiate hide var=nv  with=ov_1 ;
instantiate hide var=nv1 with='f_j(nv1_7)' ;
tryclose branch;
rule notRight;
rule hide_right
  formula='oleq(f_j(nv1_7), ov_1)';
instantiate hide var=nv1 with=nv1_7;
rule impLeft;
tryclose branch;
instantiate hide var=k with=nv1_7;
rule andRight;
tryclose branch;
cut '!olt(f_j(nv1_7), osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule notLeft;
tryclose branch;
rule notRight;
rule hide_left
  formula='oleq(f_j(nv1_7), osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_right
  formula='oleq(oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
      osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))';
rule hide_right
  formula='osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = f_j(nv1_7)';
rule oLeastSucc;
instantiate hide var=nv  with=ov_1 ;
instantiate hide var=nv1 with='f_j(nv1_7)' ;
rule impLeft;
tryclose branch;
rule notRight;
rule hide_right
  formula='\exists Ord k;
   (  olt(k, f_b)
    & osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = f_j(k))';
rule oexp_DefLim
  formula='oleq(oexp(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),
      osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))';
rule osupDef
  formula='oleq(osup{Ord nv;}(osup{Ord v_lambda;}(f_b, f_j(v_lambda)),
                    oexp(f_i, nv)),
      osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))' occ=0;
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))
    -> oleq(oexp(f_i, nv1),
            osup{Ord nv;}(osup{Ord v_lambda;}(f_b,
                                              f_j(v_lambda)),
                          oexp(f_i, nv))))';
instantiate hide var=nv2 
  with='osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda)))';
rule impLeft;
tryclose branch;
rule allRight;
rule impRight;
rule osupDef
  formula='olt(nv1_9, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> oleq(f_j(nv1),
            osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
instantiate hide var=nv2  with='nv1_9' ;
rule impLeft;
rule allRight;
rule impRight;
cut '!olt(nv1_9,f_j(nv1_10))';
rule notLeft;
rule hide_right
 formula='oleq(oexp(f_i, nv1_9),
      osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))';
rule hide_right
 formula='oleq(osup{Ord nv;}(osup{Ord v_lambda;}(f_b, f_j(v_lambda)),
                    oexp(f_i, nv)),
      osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))';
rule hide_right
 formula='osup{Ord v_lambda;}(f_b, f_j(v_lambda)) = o_0';
rule hide_left
  formula='lim(osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='olt(nv1_9, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule olt_total_Axiom;
instantiate hide var=nv  with=nv1_9 ;
instantiate hide var=nv1 with='f_j(nv1_10)' ;
tryclose branch;
rule notRight;
rule hide_right
  formula='oleq(f_j(nv1_10), nv1_9)';
rule oexpRightMonotoneQ;
instantiate hide var=x   with=f_i ;
instantiate hide var=y1  with=nv1_9 ;
instantiate hide var=y2  with='f_j(nv1_10)';
rule impLeft;
tryclose branch;
rule hide_right
  formula='oleq(osup{Ord nv;}(osup{Ord v_lambda;}(f_b, f_j(v_lambda)),
                    oexp(f_i, nv)),
      osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))';
rule hide_left
  formula='lim(osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule osupDef
  formula='oleq(oexp(f_i, nv1_9),
      osup{Ord v_lambda;}(f_b, oexp(f_i, f_j(v_lambda))))';
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1;
         (olt(nv1, f_b) -> oleq(oexp(f_i, f_j(nv1)), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b,
                                oexp(f_i, f_j(v_lambda))),
            nv2))';
instantiate hide var=nv1 with=nv1_10;
rule impLeft;
tryclose branch;
tryclose;
"

