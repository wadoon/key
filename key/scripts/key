#!/bin/sh

###############################################################################
## Part 1: - Ensure a proper installation of KeY.
##         - Checks for `key.ui` script generated by gradle installDist
##         - Runs gradle on demand

# Going into key/key/scripts folder, rely on BASH
# see http://mywiki.wooledge.org/BashFAQ/028
cd "${BASH_SOURCE%/*}/" || exit

UNAME=$(uname -s 2>/dev/null | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -pm 2>/dev/null | tr '[:upper:]' '[:lower:]' | tr ' ' '-')

if [ -z "$JAVA_HOME" ] ; then
    JAVA=`which java`
    if [ -z "$JAVA" ] ; then
	echo "Cannot find java executable. Please set your \$PATH or \$JAVA_HOME."
	exit 1
    fi
else
    echo "Using JDK installation from:      $JAVA_HOME"
    if [ "$UNAME" = "darwin" ] ; then
	JRE=$JAVA_HOME/Home
	JAVA=$JRE/bin/java
        # other OS
    else
	JRE=$JAVA_HOME
	JAVA=$JRE/bin/java
    fi
fi

[ ! -x  $JAVA ] && \
    (echo "The determined java executable '$JAVA' is not executable or exists"; exit 1)

#
# $KEY_HOME
#
KEY_HOME=${KEY_HOME:-$(readlink -f $(pwd)/..)}
echo "Using KeY installation from: $KEY_HOME"

START_SCRIPT=$KEY_HOME/key.ui/build/install/key.ui/bin/key.ui

if [ ! -f $START_SCRIPT ]; then
    GRADLE=$(which gradle)
    GRADLE=${GRADLE:-"./gradlew"}

    echo "$START_SCRIPT does not exists."
    read -r -p "Should I create it with '$GRADLE :key.ui:installDist'? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            cd $KEY_HOME
            $GRADLE --parallel :key.ui:installDist || exit
            ;;
        *)
            false
            ;;
    esac
fi

if [ ! -f $START_SCRIPT ]; then
    echo -e "\027[2mFor the second time, $START_SCRIPT does not exists!\027[0m"
    exit 1
fi

###############################################################################
## Part 2: Parses KeY-specific parameters
##
##

# We use `JAVA_OPTS' to set JVM options to the generated `key.ui` script
# also `ARGS' to pass program arguments.

KEY_OPTS="-Dsun.awt.exception.handler=de.uka.ilkd.key.gui.ExceptionalHandler"

function add_jvm_option() {
	    JAVA_OPTS="${JAVA_OPTS} $@"
}

list_help(){
    echo "Runscript for the KeY system\n"
    echo "Usage: ./key [technical options] [options for KeY prover] [filename]\n"
    echo "\nOptions for using this script"
    echo "  --J-option: pass option to the JVM following the -J option convention of javac\n"
    echo "Debugging:\n"
    echo "  --K-keydebug: turn debugging on"
    echo "  --K-headless: use awt headless mode"
    echo "  --K-debugclassloader: switch the Debugclassloadflag on to load classes for debugging"
    echo "  --K-debugprefix <debugclass>: send debug output of debugclass to stadard out"
    echo "  --K-remotedebug [wait] <port>: turn remote debugging on;"
    echo "                parameter for listening port, wait for connection if 'wait' specified"
    echo "  --K-assertionflag: switch assertionflag on, s.t. debug assertions are used\n"
    echo "Other:\n"
    echo "  --K-server:  switches Java -server on "
    echo "  --K-help, -Kh	: prints this help message"
    echo "  --help	: prints help message of the KeY prover"
}

while [ \$# -ne 0 ]; do
    case \$1 in
        #     -K options for configuration options of KeY, such as debugmode, flags,
        # remote debugging
	--Kh)
	    list_help
	    exit;;

	--K-help)
	    list_help
	    exit;;

	--K-headless)
	    echo "Warning: --K-headless option is deprecated"
	    shift
	    continue;;

	--K-keydebug)
	    add_jvm_option -DKeyDebugFlag=on
	    shift
	    continue;;

	--K-debugclassloader)
	    add_jvm_option -DKeyDebugClassLoader=on
	    shift
	    continue;;

	--K-debugprefix)
      add_jvm_option -Dkey.debug.prefix=$2
	    shift
	    shift
	    continue;;

	--K-assertionflag)
      add_jvm_option -DKeyAssertionFlag=true
	    shift
	    continue;;

	--K-remotedebug)
            if [ ${2} = "wait" ]
            then
                wait="y"
                shift
            else
                wait="n"
            fi
            add_jvm_option -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=${wait},address=$2
	    shift
	    shift
	    continue;;

	--K-server)
      add_jvm_option -server
	    shift
	    continue;;

        # -J options following conventions of Java for -J options
        #special treatment of the options which are also set by default
        #values: xms and Xmx
	--J-Xms*)
	    option=\${1#--J}
	    add_jvm_option -Xms=${option}
	    shift
	    continue;;

	--J-Xmx*)
	    option=\${1#--J}
      add_jvm_option -Xmx=${option}
	    shift
	    continue;;

	--J*)
	    option=\${1#--J}
	    add_jvm_option ${option}
	    shift
	    continue;;

        # key options beginning with a minus or filenames
        # set headless mode for all of them
	--auto)
      add_jvm_option -Djava.awt.headless=true
	    break;;
	--auto-loadonly)
      add_jvm_option -Djava.awt.headless=true
	    break;;
	--help)
      add_jvm_option -Djava.awt.headless=true
	    break;;
	--show-properties)
      add_jvm_option -Djava.awt.headless=true
	    break;;
        *)
            break;;
    esac
done

$START_SCRIPT $@