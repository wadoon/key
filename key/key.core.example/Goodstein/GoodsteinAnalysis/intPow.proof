\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Jan 17 08:56:32 CET 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=2000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "\.";

\proofObligation "#Proof Obligation Settings
#Tue Jan 17 08:56:32 CET 2017
name=Goodstein[Goodstein\\:\\:intPow(int,int)].JML normal_behavior operation contract.0
contract=Goodstein[Goodstein\\:\\:intPow(int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "7f6e941f75af2a784306433b7f217c99f6fb84c7"))
(keyLog "1" (keyUser "pschmitt" ) (keyVersion "7f6e941f75af2a784306433b7f217c99f6fb84c7"))
(keyLog "2" (keyUser "pschmitt" ) (keyVersion "7f6e941f75af2a784306433b7f217c99f6fb84c7"))

(autoModeTime "868365621")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "base,exp,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(builtin "One Step Simplification" (formula "2"))
(builtin "One Step Simplification" (formula "3"))
(rule "true_left" (formula "2"))
(rule "eqSymm" (formula "5") (term "0,0,0,1"))
(rule "eqSymm" (formula "5") (term "0,0,1,0,1"))
(rule "assignment" (formula "5") (term "1") (userinteraction))
(builtin "One Step Simplification" (formula "5"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_intPow,savedHeapBefore_intPow,_baseBefore_intPow,_expBefore_intPow") (userinteraction))
(rule "variableDeclarationAssign" (formula "5") (term "1,1") (userinteraction))
(rule "variableDeclaration" (formula "5") (term "1,1") (newnames "r") (userinteraction))
(rule "assignment" (formula "5") (term "1,1") (userinteraction))
(builtin "One Step Simplification" (formula "5"))
(builtin "Loop Invariant" (formula "5") (newnames "variant,b,heapBefore_LOOP,_expBefore_LOOP,rBefore_LOOP,_exp_0,r_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
   (rule "translateJavaSubInt" (formula "5") (term "1,1,0"))
   (rule "eqSymm" (formula "5") (term "0"))
   (rule "polySimp_elimSub" (formula "5") (term "1,0,0"))
   (rule "polySimp_pullOutFactor1" (formula "5") (term "1,0,0"))
   (rule "add_literals" (formula "5") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_geqRight" (formula "5"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "impRight" (formula "9") (userinteraction))
   (rule "variableDeclarationAssign" (formula "1") (term "1") (userinteraction))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2") (userinteraction))
   (rule "inequality_comparison_simple" (formula "1") (term "1") (userinteraction))
   (rule "methodCallEmpty" (formula "1") (term "1,1") (userinteraction))
   (rule "emptyModality" (formula "1") (term "1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1") (userinteraction))
   (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,0,0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "10") (term "0,1,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "10") (term "0,1,1,1,0"))
   (rule "translateJavaSubInt" (formula "6") (term "1,1"))
   (rule "eqSymm" (formula "10") (term "0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "10") (term "0,0,0,0,1,1,0,1"))
   (rule "eqSymm" (formula "6"))
   (rule "polySimp_elimSub" (formula "10") (term "1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "6") (term "1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "10") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "10") (term "1,0,0,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "6") (term "1,0"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "10") (term "1"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "thrownExc"))
   (rule "blockThrow" (formula "10") (term "1,0,0,1"))
   (rule "inEqSimp_strengthen1" (formula "8") (ifseqformula "9"))
   (rule "add_zero_right" (formula "8") (term "1"))
   (rule "inEqSimp_contradEq7" (formula "9") (ifseqformula "8"))
   (rule "times_zero_1" (formula "9") (term "1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0"))
   (rule "leq_literals" (formula "9") (term "0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "false_right" (formula "9"))
   (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x"))
   (rule "inequality_comparison_simple" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_contradEq7" (formula "9") (term "0,0,1,0") (ifseqformula "8"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,1,0"))
   (rule "leq_literals" (formula "9") (term "0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "ifSplit" (formula "9"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "assignmentMultiplicationInt" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaMulInt" (formula "9") (term "0,1,0"))
      (rule "postdecrement" (formula "9") (term "1"))
      (rule "compound_subtraction_1" (formula "9") (term "1") (inst "#v=x"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
      (rule "widening_identity_cast_5" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "assignmentSubtractionInt" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaSubInt" (formula "9") (term "0,1,0"))
      (rule "polySimp_elimSub" (formula "9") (term "0,1,0"))
      (rule "mul_literals" (formula "9") (term "1,0,1,0"))
      (rule "polySimp_addComm0" (formula "9") (term "0,1,0"))
      (rule "tryEmpty" (formula "9") (term "1"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "andRight" (formula "9") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "9") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "9") (userinteraction))
            (branch "Case 1"
               (rule "times_minus_one_1" (formula "9") (term "0,1,0") (userinteraction))
               (rule "minus_distribute_1" (formula "9") (term "0,1,0") (userinteraction))
               (rule "polySimp_elimNeg" (formula "9") (term "0,0,1,0") (userinteraction))
               (rule "mul_literals" (formula "9") (term "0,0,1,0") (userinteraction))
               (rule "switch_params" (formula "9") (term "1,0") (userinteraction))
               (rule "rotate_params" (formula "9") (term "1,0") (userinteraction))
               (rule "rotate_params" (formula "9") (term "1,0") (userinteraction))
               (rule "rotate_params" (formula "9") (term "1,0") (userinteraction))
               (rule "polySimp_addComm0" (formula "9") (term "1,0") (userinteraction))
               (rule "cut" (inst "cutFormula=geq(add(exp, neg(_exp_0)), Z(0(#)))") (userinteraction))
               (branch "CUT: exp + -_exp_0 >= 0 TRUE"
                  (rule "powExpSucc" (formula "10") (term "0") (ifseqformula "1") (userinteraction))
                  (rule "times_minus_one_1" (formula "7") (term "0,1,0") (userinteraction))
                  (rule "polySimp_addComm0" (formula "7") (term "1,0") (userinteraction))
                  (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "7") (userinteraction))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "closeTrue" (formula "10") (userinteraction))
               )
               (branch "CUT: exp + -_exp_0 >= 0 FALSE"
                  (rule "eqSymm" (formula "10"))
                  (rule "polySimp_elimNeg" (formula "9") (term "1,0"))
                  (rule "polySimp_elimNeg" (formula "10") (term "1,0,1,1"))
                  (rule "polySimp_addComm0" (formula "9") (term "0"))
                  (rule "polySimp_addComm1" (formula "10") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "10") (term "1,1"))
                  (rule "inEqSimp_geqRight" (formula "9"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Case 2"
               (rule "inEqSimp_geqRight" (formula "9"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Case 2"
            (rule "inEqSimp_geqRight" (formula "9"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Case 2"
         (rule "precOfInt" (formula "9") (userinteraction))
         (rule "andRight" (formula "9") (userinteraction))
         (branch "Case 1"
            (rule "polySimp_addAssoc" (formula "9") (term "1"))
            (rule "add_literals" (formula "9") (term "0,1"))
            (rule "add_zero_left" (formula "9") (term "1"))
            (rule "inEqSimp_leqRight" (formula "9"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
            (rule "qeq_literals" (formula "1") (term "0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Case 2"
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "add_literals" (formula "9") (term "0,0"))
            (rule "add_zero_left" (formula "9") (term "0"))
            (rule "inEqSimp_ltRight" (formula "9"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "7"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "1,1,0,0"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "eqSymm" (formula "6"))
   (rule "polySimp_elimSub" (formula "6") (term "1,0"))
   (rule "polySimp_addComm0" (formula "6") (term "1,0"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "b_1"))
   (rule "inequality_comparison_simple" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "emptyModality" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "impRight" (formula "9"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
   (rule "qeq_literals" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "applyEqRigid" (formula "8") (term "1") (ifseqformula "1"))
   (rule "applyEqRigid" (formula "7") (term "0,0,1,0") (ifseqformula "1"))
   (rule "times_zero_2" (formula "7") (term "0,1,0"))
   (rule "add_zero_left" (formula "7") (term "1,0"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "tryEmpty" (formula "8") (term "1"))
   (rule "emptyModality" (formula "8") (term "1"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
   (rule "closeTrue" (formula "8"))
)
)

}
