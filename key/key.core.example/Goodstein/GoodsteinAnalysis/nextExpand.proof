\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Feb 22 10:05:37 CET 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=2000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Wed Feb 22 10:05:37 CET 2017
name=Goodstein[Goodstein\\:\\:nextExpand(int,int)].JML normal_behavior operation contract.0
contract=Goodstein[Goodstein\\:\\:nextExpand(int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "1" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "2" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "3" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "4" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "5" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "6" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "7" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "8" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "9" (keyUser "pschmitt" ) (keyVersion "a47860a8fad85ab0b96f7945aa2a29e5f5e96a27"))
(keyLog "10" (keyUser "pschmitt" ) (keyVersion "2213512086b39944479860efb4824c68fb25be0c"))
(keyLog "11" (keyUser "pschmitt" ) (keyVersion "2213512086b39944479860efb4824c68fb25be0c"))
(keyLog "12" (keyUser "pschmitt" ) (keyVersion "2213512086b39944479860efb4824c68fb25be0c"))

(autoModeTime "199785444796")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "m,oldBase,self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "11") (term "1") (userinteraction))
(builtin "One Step Simplification" (formula "11"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_nextExpand,savedHeapBefore_nextExpand,_mBefore_nextExpand,_oldBaseBefore_nextExpand") (userinteraction))
(builtin "One Step Simplification" (formula "11"))
(rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x") (userinteraction))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x") (userinteraction))
(rule "greater_than_comparison_simple" (formula "11") (term "1") (userinteraction))
(rule "ifElse" (formula "11") (term "1,1") (userinteraction))
(builtin "One Step Simplification" (formula "11"))
(rule "blockReturn" (formula "11") (term "1,1") (userinteraction))
(rule "methodCallReturn" (formula "11") (term "1,1") (userinteraction))
(rule "assignment" (formula "11") (term "1,1") (userinteraction))
(rule "methodCallEmpty" (formula "11") (term "1,1,1") (userinteraction))
(rule "tryEmpty" (formula "11") (term "1,1,1") (userinteraction))
(rule "emptyModality" (formula "11") (term "1,1,1") (userinteraction))
(rule "ifthenelse_split_for" (formula "11") (userinteraction))
(branch "oldBase > m TRUE"
   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "8")) (ifInst ""  (formula "10")))
   (rule "andRight" (formula "12") (userinteraction))
   (branch "Case 1"
      (rule "oHNfDef1" (inst "base=base_10") (inst "m=m_1") (userinteraction))
      (rule "instAll" (formula "13") (term "0,1") (ifseqformula "1") (userinteraction))
      (rule "hide_left" (formula "2") (userinteraction))
      (rule "instAll" (formula "13") (term "1,1") (ifseqformula "1") (userinteraction))
      (rule "hide_left" (formula "2") (userinteraction))
      (rule "leq_to_geq" (formula "1") (term "0,0,0") (userinteraction))
      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "10") (userinteraction))
      (rule "leq_to_geq" (formula "1") (term "1,0,0") (userinteraction))
      (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "9") (userinteraction))
      (rule "lt_to_gt" (formula "1") (term "1,0") (userinteraction))
      (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "2") (userinteraction))
      (builtin "One Step Simplification" (formula "1"))
      (rule "eqSymm" (formula "1") (userinteraction))
      (rule "close" (formula "13") (ifseqformula "1") (userinteraction))
   )
   (branch "Case 2"
      (rule "translateJavaAddInt" (formula "12") (term "0,1") (userinteraction))
      (rule "oGSDef1" (inst "n=n") (inst "m=m_1") (userinteraction))
      (rule "instAll" (formula "13") (term "0,0") (ifseqformula "1") (userinteraction))
      (rule "instAll" (formula "14") (term "0,1") (ifseqformula "2") (userinteraction))
      (rule "hide_left" (formula "3") (userinteraction))
      (rule "instAll" (formula "14") (term "1,0") (ifseqformula "1") (userinteraction))
      (rule "hide_left" (formula "2") (userinteraction))
      (rule "instAll" (formula "14") (term "1,1") (ifseqformula "2") (userinteraction))
      (rule "hide_left" (formula "3") (userinteraction))
      (builtin "One Step Simplification" (formula "8"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
      (rule "polySimp_addComm0" (formula "2") (term "0,0,1"))
      (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,0"))
      (rule "inEqSimp_gtToGeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,1,0"))
      (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
      (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
      (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
      (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
      (rule "mul_literals" (formula "2") (term "1,0,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0"))
      (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "applyEq" (formula "12") (term "1") (ifseqformula "1"))
      (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "notLeft" (formula "2"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0"))
      (rule "mul_literals" (formula "10") (term "1,0"))
      (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "8"))
      (rule "leq_literals" (formula "10") (term "0,0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_geqRight" (formula "10"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
      (rule "andLeft" (formula "3"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0"))
      (rule "polySimp_addComm1" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "1,1,0"))
      (rule "times_zero_1" (formula "3") (term "1,0"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
)
(branch "oldBase > m FALSE"
   (rule "variableDeclarationAssign" (formula "12") (term "1") (userinteraction))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "exp") (userinteraction))
   (rule "assignment" (formula "12") (term "1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "12") (term "1,1") (userinteraction))
   (rule "variableDeclaration" (formula "12") (term "1,1") (newnames "factor") (userinteraction))
   (rule "assignment" (formula "12") (term "1,1") (userinteraction))
   (rule "variableDeclarationAssign" (formula "12") (term "1,1,1") (userinteraction))
   (rule "variableDeclaration" (formula "12") (term "1,1,1") (newnames "base") (userinteraction))
   (rule "assignment" (formula "12") (term "1,1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "12"))
   (builtin "Block Contract" (formula "12") (newnames "result_0,exc_0,heap_Before_BLOCK,savedHeap_Before_BLOCK,factor_Before_BLOCK,exp_Before_BLOCK,o,f,anon_factor,anon_exp"))
   (branch "Validity"
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
      (rule "true_left" (formula "10") (userinteraction))
      (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclarationAssign" (formula "12") (term "1") (userinteraction))
      (rule "variableDeclaration" (formula "12") (term "1") (userinteraction))
      (rule "assignment" (formula "12") (term "1") (userinteraction))
      (builtin "One Step Simplification" (formula "12"))
      (builtin "Loop Invariant" (formula "12") (newnames "variant,b,heapBefore_LOOP,factorBefore_LOOP,expBefore_LOOP,factor_0,exp_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
      (branch "Invariant Initially Valid"
         (builtin "One Step Simplification" (formula "5"))
         (builtin "One Step Simplification" (formula "4"))
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
         (rule "true_left" (formula "4"))
         (rule "qeq_literals" (formula "10") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "greater_literals" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "eqSymm" (formula "10") (term "0"))
         (rule "inEqSimp_gtRight" (formula "9"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "10") (term "0,0") (inst "intPow_sk=intPow_sk_0") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1"))
         (rule "polySimp_elimOne" (formula "2") (term "1"))
         (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "2"))
         (rule "mul_literals" (formula "8") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8"))
         (rule "mul_literals" (formula "8") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
         (rule "leq_literals" (formula "7") (term "0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "inEqSimp_subsumption1" (formula "11") (term "1") (ifseqformula "7"))
         (rule "leq_literals" (formula "11") (term "0,1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "boxToDiamond" (formula "1") (term "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "Class_invariant_axiom_for_Goodstein" (formula "8") (inst "sk=sk_1") (ifseqformula "4"))
         (branch "Use Axiom"
            (rule "true_left" (formula "8"))
            (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_intPow,savedHeapBefore_intPow,x_1Before_intPow,x_2Before_intPow"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "variableDeclarationAssign" (formula "8") (term "1"))
            (rule "variableDeclaration" (formula "8") (term "1") (newnames "r"))
            (rule "assignment" (formula "8") (term "1"))
            (builtin "One Step Simplification" (formula "8"))
            (builtin "Loop Invariant" (formula "8") (newnames "variant_0,b_0,heapBefore_LOOP_0,x_2Before_LOOP,rBefore_LOOP,x_2,r_0,heap_After_LOOP_0,anon_heap_LOOP_0,o,f"))
            (branch "Invariant Initially Valid"
               (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")))
               (rule "translateJavaSubInt" (formula "8") (term "1,1,0"))
               (rule "qeq_literals" (formula "8") (term "1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "sub_literals" (formula "8") (term "1,1"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "closeTrue" (formula "8"))
            )
            (branch "Body Preserves Invariant"
               (builtin "One Step Simplification" (formula "10"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaAddInt" (formula "10") (term "0,1,1,1,0,1"))
               (rule "translateJavaAddInt" (formula "10") (term "0,1,1,1,0,1,1"))
               (rule "translateJavaSubInt" (formula "10") (term "1,1,0,0,0,0,1,1,0,1,1"))
               (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0"))
               (rule "impRight" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "eqSymm" (formula "13") (term "0,0,1,0,1,1,0,1"))
               (rule "eqSymm" (formula "13") (term "0,0,0,0,1,1,0,1"))
               (rule "eqSymm" (formula "10"))
               (rule "polySimp_elimSub" (formula "13") (term "1,0,0,0,0,0,1,1,0,1"))
               (rule "polySimp_elimSub" (formula "10") (term "1,0"))
               (rule "add_zero_left" (formula "10") (term "1,0"))
               (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1,0,1"))
               (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1,0"))
               (rule "polySimp_addComm0" (formula "13") (term "1,0,0,0,0,0,1,1,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "11"))
               (rule "variableDeclarationAssign" (formula "1") (term "1"))
               (rule "variableDeclarationAssign" (formula "13") (term "1"))
               (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_0_2"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "exc_1"))
               (rule "assignment" (formula "13") (term "1"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "thrownExc"))
               (rule "blockThrow" (formula "13") (term "1,0,0,1"))
               (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "11"))
               (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "12"))
               (rule "applyEq" (formula "14") (term "0,0,0,1,1,0,0") (ifseqformula "12"))
               (rule "applyEq" (formula "14") (term "1,0,1,1,1,0,0") (ifseqformula "12"))
               (rule "add_zero_right" (formula "14") (term "0,1,1,1,0,0"))
               (rule "applyEqRigid" (formula "10") (term "0,1,0") (ifseqformula "12"))
               (rule "times_zero_2" (formula "10") (term "1,0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "eqSymm" (formula "10"))
               (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "12"))
               (rule "leq_literals" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "11"))
               (rule "qeq_literals" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "applyEq" (formula "12") (term "0,1,0,1,1,0,0") (ifseqformula "10"))
               (rule "boxToDiamond" (formula "1") (term "1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inequality_comparison_simple" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "methodCallEmpty" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "emptyModality" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "closeTrue" (formula "11"))
            )
            (branch "Use Case"
               (builtin "One Step Simplification" (formula "10"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "translateJavaSubInt" (formula "9") (term "1,1,0,0"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "eqSymm" (formula "9"))
               (rule "polySimp_elimSub" (formula "9") (term "1,0"))
               (rule "add_zero_left" (formula "9") (term "1,0"))
               (rule "inEqSimp_commuteGeq" (formula "10"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_0_1"))
               (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "10"))
               (rule "applyEqRigid" (formula "13") (term "0,0,1,0") (ifseqformula "11"))
               (rule "applyEqRigid" (formula "9") (term "0,1,0") (ifseqformula "11"))
               (rule "times_zero_2" (formula "9") (term "1,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "eqSymm" (formula "9"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
               (rule "leq_literals" (formula "10"))
               (rule "true_left" (formula "10"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
               (rule "qeq_literals" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "applyEqRigid" (formula "11") (term "0,1,1,0") (ifseqformula "9"))
               (rule "inequality_comparison_simple" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "methodCallEmpty" (formula "11") (term "1"))
               (rule "emptyModality" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "methodCallReturn" (formula "11") (term "1"))
               (rule "assignment" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "methodCallEmpty" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "emptyModality" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "notRight" (formula "11"))
               (rule "eqSymm" (formula "1"))
               (rule "close" (formula "13") (ifseqformula "1"))
            )
         )
         (branch "Show Axiom Satisfiability"
            (builtin "One Step Simplification" (formula "9"))
            (rule "closeTrue" (formula "9"))
         )
      )
      (branch "Body Preserves Invariant"
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "variableDeclarationAssign" (formula "17") (term "1,0") (userinteraction))
         (rule "variableDeclaration" (formula "17") (term "1,0") (newnames "b_2") (userinteraction))
         (rule "compound_greater_equal_than_comparison_2" (formula "17") (term "1,0") (inst "#v1=x_1") (inst "#v0=x") (userinteraction))
         (rule "variableDeclarationAssign" (formula "17") (term "1,0") (userinteraction))
         (rule "variableDeclaration" (formula "17") (term "1,0") (newnames "x_4") (userinteraction))
         (rule "assignment" (formula "17") (term "1,0") (userinteraction))
         (rule "variableDeclarationAssign" (formula "17") (term "1,1,0") (userinteraction))
         (rule "variableDeclaration" (formula "17") (term "1,1,0") (newnames "x_5") (userinteraction))
         (rule "assignmentMultiplicationInt" (formula "17") (term "1,1,0") (userinteraction))
         (rule "greater_equal_than_comparison_simple" (formula "17") (term "1,1,1,0") (userinteraction))
         (rule "methodCallEmpty" (formula "17") (term "1,1,1,1,0") (userinteraction))
         (rule "emptyModality" (formula "17") (term "1,1,1,1,0") (userinteraction))
         (builtin "One Step Simplification" (formula "17"))
         (rule "impRight" (formula "17") (userinteraction))
         (rule "translateJavaMulInt" (formula "1") (term "1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "18") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "exc_2") (userinteraction))
         (rule "assignment" (formula "18") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "18"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "thrownExc_1") (userinteraction))
         (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x") (userinteraction))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_6") (userinteraction))
         (rule "compound_greater_equal_than_comparison_2" (formula "18") (term "1") (inst "#v1=x_8") (inst "#v0=x_7") (userinteraction))
         (rule "variableDeclarationAssign" (formula "18") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_7") (userinteraction))
         (rule "assignment" (formula "18") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "18"))
         (rule "variableDeclarationAssign" (formula "18") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_8") (userinteraction))
         (rule "assignmentMultiplicationInt" (formula "18") (term "1") (userinteraction))
         (rule "greater_equal_than_comparison_simple" (formula "18") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "18"))
         (rule "if" (formula "18") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "18"))
         (rule "translateJavaMulInt" (formula "18") (term "1,0") (userinteraction))
         (rule "ifthenelse_split_for" (formula "18") (userinteraction))
         (branch "m >= factor_0 * oldBase TRUE"
            (rule "assignmentAdditionInt" (formula "18") (term "1") (userinteraction))
            (builtin "One Step Simplification" (formula "18"))
            (rule "assignmentMultiplicationInt" (formula "18") (term "1") (userinteraction))
            (rule "tryEmpty" (formula "18") (term "1,1") (userinteraction))
            (rule "methodCallEmpty" (formula "18") (term "1,1") (userinteraction))
            (rule "emptyModality" (formula "18") (term "1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "18"))
            (rule "andRight" (formula "18") (userinteraction))
            (branch "Case 1"
               (rule "translateJavaMulInt" (formula "18") (term "0,1") (userinteraction))
               (rule "andRight" (formula "18") (userinteraction))
               (branch "Case 1"
                  (rule "andRight" (formula "18") (userinteraction))
                  (branch "Case 1"
                     (rule "andRight" (formula "18") (userinteraction))
                     (branch "Case 1"
                        (rule "translateJavaMulInt" (formula "18") (term "0") (userinteraction))
                        (rule "translateJavaAddInt" (formula "18") (term "2,1") (userinteraction))
                        (builtin "Evaluate Query" (formula "12") (term "1") (newnames "base_0,exp_1,callee,queryResult,res_intPow"))
                        (rule "notLeft" (formula "1") (userinteraction))
                        (rule "variableDeclaration" (formula "16") (term "1") (newnames "queryResult") (userinteraction))
                        (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_intPow_6,result_1,exc_10") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
                        (branch "Post (intPow)"
                           (rule "assignment" (formula "17") (term "1") (userinteraction))
                           (rule "methodCallEmpty" (formula "17") (term "1,1") (userinteraction))
                           (rule "emptyModality" (formula "17") (term "1,1") (userinteraction))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "notRight" (formula "17") (userinteraction))
                           (rule "eqSymm" (formula "1") (userinteraction))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_00000101_0" (formula "13") (term "1") (userinteraction))
                           (rule "applyEq" (formula "13") (term "1") (ifseqformula "1") (userinteraction))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "18"))
                           (rule "applyEq" (formula "13") (term "1") (ifseqformula "18") (userinteraction))
                           (builtin "Evaluate Query" (formula "21") (term "1") (newnames "base_1,exp_2,callee,queryResult_0,res_intPow_0"))
                           (rule "notLeft" (formula "1") (userinteraction))
                           (rule "variableDeclaration" (formula "19") (term "1") (newnames "queryResult_0") (userinteraction))
                           (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_intPow_7,result_2,exc_11") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
                           (branch "Post (intPow)"
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "andLeft" (formula "19") (userinteraction))
                              (rule "andLeft" (formula "20") (userinteraction))
                              (rule "assignment" (formula "21") (term "1") (userinteraction))
                              (rule "methodCallEmpty" (formula "21") (term "1,1") (userinteraction))
                              (rule "emptyModality" (formula "21") (term "1,1") (userinteraction))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "notRight" (formula "21") (userinteraction))
                              (rule "eqSymm" (formula "1") (userinteraction))
                              (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(exp_0,Z(1(#))))_000000101_1" (formula "24") (term "1") (userinteraction))
                              (rule "applyEq" (formula "24") (term "1") (ifseqformula "1") (userinteraction))
                              (rule "applyEq" (formula "24") (term "1") (ifseqformula "21") (userinteraction))
                              (rule "powExpSucc" (formula "24") (term "1") (ifseqformula "15") (userinteraction))
                              (builtin "One Step Simplification" (formula "8"))
                              (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "eqSymm" (formula "2"))
                              (rule "eqSymm" (formula "19"))
                              (rule "eqSymm" (formula "12"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "22"))
                              (rule "eqSymm" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1"))
                              (rule "polySimp_addComm0" (formula "19") (term "1,0"))
                              (rule "inEqSimp_gtRight" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "16"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "4"))
                              (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "13"))
                              (rule "eqSymm" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "closeTrue" (formula "22"))
                           )
                           (branch "Exceptional Post (intPow)"
                              (builtin "One Step Simplification" (formula "19"))
                              (builtin "One Step Simplification" (formula "7"))
                              (builtin "One Step Simplification" (formula "6"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "6"))
                              (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(exp_0,Z(1(#))))_000000101_1" (formula "21") (term "1"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "17"))
                              (rule "notLeft" (formula "17"))
                              (rule "close" (formula "20") (ifseqformula "19"))
                           )
                           (branch "Pre (intPow)"
                              (builtin "One Step Simplification" (formula "7"))
                              (builtin "One Step Simplification" (formula "6"))
                              (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")))
                              (rule "true_left" (formula "6"))
                              (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(exp_0,Z(1(#))))_000000101_1" (formula "20") (term "1"))
                              (rule "eqSymm" (formula "11"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,1"))
                              (rule "inEqSimp_gtRight" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "15"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "3"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "17"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
                              (rule "eqSymm" (formula "2"))
                              (rule "applyEq" (formula "17") (term "1") (ifseqformula "12"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1"))
                              (rule "mul_literals" (formula "18") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "18") (term "1") (ifseqformula "13"))
                              (rule "leq_literals" (formula "18") (term "0,1"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_geqRight" (formula "18"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                        )
                        (branch "Exceptional Post (intPow)"
                           (builtin "One Step Simplification" (formula "16"))
                           (builtin "One Step Simplification" (formula "6"))
                           (builtin "One Step Simplification" (formula "5"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "5"))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_00000101_0" (formula "10") (term "1"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "16"))
                           (rule "notLeft" (formula "14"))
                           (rule "close" (formula "17") (ifseqformula "16"))
                        )
                        (branch "Pre (intPow)"
                           (builtin "One Step Simplification" (formula "6"))
                           (builtin "One Step Simplification" (formula "5"))
                           (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")) (ifInst ""  (formula "2")))
                           (rule "true_left" (formula "5"))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_00000101_0" (formula "10") (term "1"))
                           (rule "eqSymm" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "17") (term "0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_addComm0" (formula "17") (term "2,1"))
                           (rule "inEqSimp_gtRight" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "15"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "15"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0"))
                           (rule "inEqSimp_commuteGeq" (formula "3"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "17") (term "1") (inst "intPow_sk=intPow_sk_12") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "eqSymm" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "10"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "Case 2"
                        (builtin "One Step Simplification" (formula "6"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "translateJavaAddInt" (formula "16") (term "0"))
                        (rule "eqSymm" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_addComm0" (formula "16") (term "0"))
                        (rule "inEqSimp_gtRight" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "16"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "15"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "3"))
                        (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0") (inst "intPow_sk=intPow_sk_11") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "eqSymm" (formula "12") (term "0,1"))
                        (rule "applyEqRigid" (formula "12") (term "1,0,1") (ifseqformula "13"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                        (rule "mul_literals" (formula "16") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "translateJavaMulInt" (formula "18") (term "1") (userinteraction))
                     (rule "close" (formula "18") (ifseqformula "1"))
                  )
               )
               (branch "Case 2"
                  (builtin "One Step Simplification" (formula "6"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "eqSymm" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0"))
                  (rule "inEqSimp_gtRight" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_gtRight" (formula "16"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "15"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "3"))
                  (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0") (inst "intPow_sk=intPow_sk_10") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "eqSymm" (formula "12") (term "0,1"))
                  (rule "applyEqRigid" (formula "12") (term "1,0,1") (ifseqformula "13"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "2"))
                  (rule "mul_literals" (formula "9") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                  (rule "leq_literals" (formula "8") (term "0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "divide_inEq0" (formula "1") (inst "divY=factor_0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "div_literals" (formula "1") (term "1,1"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Case 2"
               (rule "translateJavaSubInt" (formula "18") (term "0") (userinteraction))
               (rule "translateJavaMulInt" (formula "18") (term "1,0") (userinteraction))
               (rule "translateJavaSubInt" (formula "18") (term "1") (userinteraction))
               (rule "sub" (formula "18") (term "1") (userinteraction))
               (rule "sub" (formula "18") (term "0") (userinteraction))
               (rule "precOfInt" (formula "18") (userinteraction))
               (rule "andRight" (formula "18") (userinteraction))
               (branch "Case 1"
                  (builtin "One Step Simplification" (formula "6"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "eqSymm" (formula "10"))
                  (rule "polySimp_elimNeg" (formula "16") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,1,1"))
                  (rule "inEqSimp_gtRight" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "15"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "3"))
                  (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0") (inst "intPow_sk=intPow_sk_4") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "eqSymm" (formula "12") (term "0,1"))
                  (rule "applyEqRigid" (formula "12") (term "1,0,1") (ifseqformula "13"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "add_less_back" (formula "18") (userinteraction))
                  (rule "less_sub" (formula "18") (userinteraction))
                  (rule "sub_sub_elim" (formula "18") (term "0") (userinteraction))
                  (rule "sub_sub_elim" (formula "18") (term "1") (userinteraction))
                  (rule "multLessAux" (inst "right=right") (inst "left=left") (inst "factor=factor_1") (userinteraction))
                  (rule "instAll" (formula "19") (term "1,1") (ifseqformula "1") (userinteraction))
                  (rule "hide_left" (formula "2") (userinteraction))
                  (rule "allLeftHide" (formula "1") (inst "t=Z(1(#))") (userinteraction))
                  (rule "instAll" (formula "19") (term "0") (ifseqformula "1") (userinteraction))
                  (rule "hide_left" (formula "2") (userinteraction))
                  (rule "impLeft" (formula "1") (userinteraction))
                  (branch "Case 1"
                     (builtin "One Step Simplification" (formula "6"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "eqSymm" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "inEqSimp_gtRight" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltRight" (formula "15"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltRight" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "16"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "4"))
                     (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "13") (term "0") (inst "intPow_sk=intPow_sk_8") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "eqSymm" (formula "13") (term "0,1"))
                     (rule "applyEqRigid" (formula "13") (term "1,0,1") (ifseqformula "14"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1"))
                     (rule "inEqSimp_invertInEq1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "times_zero_2" (formula "2") (term "1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                     (rule "mul_literals" (formula "17") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "17"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "Case 2"
                     (rule "andLeft" (formula "1") (userinteraction))
                     (rule "polySimp_elimOneLeft0" (formula "1") (term "0,1") (userinteraction))
                     (rule "polySimp_elimOne" (formula "2") (term "0,1") (userinteraction))
                     (rule "hide_left" (formula "1") (userinteraction))
                     (rule "cut_direct" (formula "1") (term "0") (userinteraction))
                     (branch "CUT: 1 < oldBase TRUE"
                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")))
                        (rule "closeFalse" (formula "2") (userinteraction))
                     )
                     (branch "CUT: 1 < oldBase FALSE"
                        (builtin "One Step Simplification" (formula "7"))
                        (builtin "One Step Simplification" (formula "6"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                        (rule "true_left" (formula "5"))
                        (rule "eqSymm" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1"))
                        (rule "inEqSimp_ltRight" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_gtRight" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltRight" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "16"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "4"))
                        (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "13") (term "0") (inst "intPow_sk=intPow_sk_9") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "eqSymm" (formula "13") (term "0,1"))
                        (rule "applyEqRigid" (formula "13") (term "1,0,1") (ifseqformula "14"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                        (rule "mul_literals" (formula "17") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
               )
            )
         )
         (branch "m >= factor_0 * oldBase FALSE"
            (rule "close" (formula "18") (ifseqformula "1"))
         )
      )
      (branch "Use Case"
         (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (builtin "One Step Simplification" (formula "17"))
         (rule "variableDeclarationAssign" (formula "17") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "b_1") (userinteraction))
         (rule "compound_greater_equal_than_comparison_2" (formula "17") (term "1") (inst "#v1=x_1") (inst "#v0=x") (userinteraction))
         (rule "variableDeclarationAssign" (formula "17") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_3") (userinteraction))
         (rule "assignment" (formula "17") (term "1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "17") (term "1,1") (userinteraction))
         (rule "variableDeclaration" (formula "17") (term "1,1") (newnames "x_1") (userinteraction))
         (builtin "One Step Simplification" (formula "17"))
         (rule "assignmentMultiplicationInt" (formula "17") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "17"))
         (rule "greater_equal_than_comparison_simple" (formula "17") (term "1") (userinteraction))
         (rule "methodCallEmpty" (formula "17") (term "1,1") (userinteraction))
         (rule "emptyModality" (formula "17") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "17"))
         (rule "impRight" (formula "17") (userinteraction))
         (rule "translateJavaMulInt" (formula "1") (term "1,0") (userinteraction))
         (rule "notLeft" (formula "1") (userinteraction))
         (rule "blockEmpty" (formula "18") (term "1") (userinteraction))
         (rule "tryEmpty" (formula "18") (term "1") (userinteraction))
         (rule "blockEmptyLabel" (formula "18") (term "1") (userinteraction))
         (rule "blockEmpty" (formula "18") (term "1") (userinteraction))
         (rule "methodCallEmpty" (formula "18") (term "1") (userinteraction))
         (rule "emptyModality" (formula "18") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "14")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")))
         (builtin "Evaluate Query" (formula "11") (term "1") (newnames "base_2,exp_3,callee,queryResult_1,res_intPow_1"))
         (rule "notLeft" (formula "1") (userinteraction))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "queryResult_1") (userinteraction))
         (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_intPow_8,result_3,exc_12") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (intPow)"
            (builtin "One Step Simplification" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "assignment" (formula "17") (term "1") (userinteraction))
            (rule "methodCallEmpty" (formula "17") (term "1,1") (userinteraction))
            (rule "emptyModality" (formula "17") (term "1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "17"))
            (rule "notRight" (formula "17") (userinteraction))
            (rule "eqSymm" (formula "1") (userinteraction))
            (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_201_0" (formula "12") (term "1") (userinteraction))
            (rule "applyEq" (formula "12") (term "1") (ifseqformula "1") (userinteraction))
            (rule "applyEq" (formula "12") (term "1") (ifseqformula "17") (userinteraction))
            (rule "translateJavaAddInt" (formula "21") (term "2,1,1") (userinteraction))
            (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_201_0" (formula "21") (term "1,0") (userinteraction))
            (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "1") (userinteraction))
            (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "17") (userinteraction))
            (builtin "Evaluate Query" (formula "21") (term "1,1") (newnames "base_3,exp_4,callee,queryResult_2,res_intPow_2"))
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "queryResult_2") (userinteraction))
            (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_intPow_9,result_4,exc_13") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
            (branch "Post (intPow)"
               (builtin "One Step Simplification" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "19"))
               (rule "assignment" (formula "20") (term "1") (userinteraction))
               (rule "methodCallEmpty" (formula "20") (term "1,1") (userinteraction))
               (rule "emptyModality" (formula "20") (term "1,1") (userinteraction))
               (builtin "One Step Simplification" (formula "20"))
               (rule "notRight" (formula "20") (userinteraction))
               (rule "eqSymm" (formula "1") (userinteraction))
               (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(exp_0,Z(1(#))))_0201_1" (formula "24") (term "1,1") (userinteraction))
               (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "1") (userinteraction))
               (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "20") (userinteraction))
               (rule "applyEq" (formula "15") (term "1") (ifseqformula "13") (userinteraction))
               (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "15") (userinteraction))
               (builtin "One Step Simplification" (formula "24"))
               (rule "powExpSucc" (formula "24") (term "1") (ifseqformula "14") (userinteraction))
               (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "13") (userinteraction))
               (builtin "One Step Simplification" (formula "7"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "eqSymm" (formula "1"))
               (rule "eqSymm" (formula "11"))
               (rule "eqSymm" (formula "2"))
               (rule "eqSymm" (formula "18"))
               (rule "eqSymm" (formula "16"))
               (rule "polySimp_addComm0" (formula "18") (term "1,0"))
               (rule "inEqSimp_gtRight" (formula "21"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltRight" (formula "22"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "21"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "17"))
               (rule "times_zero_1" (formula "17") (term "1,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0"))
               (rule "inEqSimp_commuteGeq" (formula "16"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "19"))
               (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "19"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "19"))
               (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "19"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "14"))
               (rule "eqSymm" (formula "5"))
               (rule "applyEq" (formula "21") (term "1") (ifseqformula "4"))
               (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "14"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
               (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "14"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "14"))
               (rule "inEqSimp_commuteLeq" (formula "16"))
               (rule "applyEq" (formula "19") (term "1") (ifseqformula "14"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1"))
               (rule "polySimp_elimOne" (formula "3") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17"))
               (rule "mul_literals" (formula "17") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch "Exceptional Post (intPow)"
               (builtin "One Step Simplification" (formula "18"))
               (builtin "One Step Simplification" (formula "6"))
               (builtin "One Step Simplification" (formula "5"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "5"))
               (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(exp_0,Z(1(#))))_0201_1" (formula "21") (term "1,1"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "16"))
               (rule "notLeft" (formula "16"))
               (rule "close" (formula "19") (ifseqformula "18"))
            )
            (branch "Pre (intPow)"
               (builtin "One Step Simplification" (formula "6"))
               (builtin "One Step Simplification" (formula "5"))
               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")))
               (rule "true_left" (formula "5"))
               (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(exp_0,Z(1(#))))_0201_1" (formula "20") (term "1,1"))
               (rule "eqSymm" (formula "15"))
               (rule "eqSymm" (formula "1"))
               (rule "eqSymm" (formula "10"))
               (rule "polySimp_mulComm0" (formula "17") (term "1"))
               (rule "polySimp_addComm0" (formula "16") (term "0,1"))
               (rule "inEqSimp_gtRight" (formula "19"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "18"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "15"))
               (rule "times_zero_1" (formula "15") (term "1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20") (term "1"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "20") (term "0,1"))
               (rule "inEqSimp_commuteGeq" (formula "20") (term "0"))
               (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "12"))
               (rule "inEqSimp_commuteLeq" (formula "20") (term "0"))
               (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_leqRight" (formula "20"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "18"))
               (rule "applyEq" (formula "18") (term "1") (ifseqformula "4"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "13"))
               (rule "eqSymm" (formula "4"))
               (rule "applyEq" (formula "18") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1"))
               (rule "mul_literals" (formula "19") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1"))
               (rule "polySimp_elimOne" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "mul_literals" (formula "16") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "19") (term "0") (ifseqformula "10"))
               (rule "leq_literals" (formula "19") (term "0,0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "inEqSimp_geqRight" (formula "19"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "15"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (intPow)"
            (builtin "One Step Simplification" (formula "15"))
            (builtin "One Step Simplification" (formula "5"))
            (builtin "One Step Simplification" (formula "4"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "4"))
            (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_201_0" (formula "9") (term "1"))
            (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_201_0" (formula "18") (term "1,0"))
            (rule "translateJavaAddInt" (formula "18") (term "2,1,1"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "13"))
            (rule "notLeft" (formula "13"))
            (rule "close" (formula "16") (ifseqformula "15"))
         )
         (branch "Pre (intPow)"
            (builtin "One Step Simplification" (formula "5"))
            (builtin "One Step Simplification" (formula "4"))
            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")) (ifInst ""  (formula "1")))
            (rule "true_left" (formula "4"))
            (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_201_0" (formula "9") (term "1"))
            (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,exp_0)_201_0" (formula "17") (term "1,0"))
            (rule "translateJavaAddInt" (formula "17") (term "2,1,1"))
            (rule "eqSymm" (formula "9"))
            (rule "polySimp_mulComm0" (formula "14") (term "1"))
            (rule "polySimp_addComm0" (formula "17") (term "2,1,1"))
            (rule "inEqSimp_gtRight" (formula "16"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "14"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "15"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_gtToGeq" (formula "15"))
            (rule "times_zero_1" (formula "15") (term "1,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "1"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "17") (term "0,1"))
            (rule "inEqSimp_commuteGeq" (formula "17") (term "0"))
            (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "12"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0"))
            (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_leqRight" (formula "17"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "1") (term "0,1,0") (inst "intPow_sk=intPow_sk_13") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "0,1"))
            (rule "polySimp_addComm0" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1"))
            (rule "polySimp_elimOne" (formula "5") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17"))
            (rule "mul_literals" (formula "17") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "11"))
            (rule "qeq_literals" (formula "4") (term "0"))
            (builtin "One Step Simplification" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
   )
   (branch "Precondition"
      (builtin "One Step Simplification" (formula "5"))
      (builtin "One Step Simplification" (formula "4"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
      (rule "closeTrue" (formula "11"))
   )
   (branch "Usage"
      (builtin "One Step Simplification" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (builtin "One Step Simplification" (formula "19"))
      (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=x") (userinteraction))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_25") (userinteraction))
      (rule "inequality_comparison_simple" (formula "19") (term "1") (userinteraction))
      (builtin "One Step Simplification" (formula "19"))
      (rule "if" (formula "19") (term "1") (userinteraction))
      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "10")))
      (rule "blockEmpty" (formula "19") (term "1") (userinteraction))
      (rule "emptyStatement" (formula "19") (term "1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "19") (term "1") (userinteraction))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "a") (userinteraction))
      (rule "assignment" (formula "19") (term "1") (userinteraction))
      (rule "variableDeclarationAssign" (formula "19") (term "1,1") (userinteraction))
      (rule "variableDeclaration" (formula "19") (term "1,1") (newnames "c") (userinteraction))
      (rule "assignment" (formula "19") (term "1,1") (userinteraction))
      (builtin "One Step Simplification" (formula "19"))
      (builtin "Block Contract" (formula "19") (newnames "result_5,exc_14,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,c_Before_BLOCK,a_Before_BLOCK,o,f,anon_c,anon_a"))
      (branch "Validity"
         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")))
         (rule "true_left" (formula "17") (userinteraction))
         (builtin "One Step Simplification" (formula "19"))
         (rule "variableDeclarationAssign" (formula "19") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "19") (term "1") (userinteraction))
         (rule "assignment" (formula "19") (term "1") (userinteraction))
         (builtin "One Step Simplification" (formula "19"))
         (rule "assignmentDivisionInt" (formula "19") (userinteraction))
         (branch "Case 1"
            (builtin "One Step Simplification" (formula "19"))
            (rule "compound_subtraction_2" (formula "19") (term "1") (inst "#v1=x_1") (inst "#v0=x") (userinteraction))
            (rule "variableDeclarationAssign" (formula "19") (term "1") (userinteraction))
            (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_26") (userinteraction))
            (rule "assignment" (formula "19") (term "1") (userinteraction))
            (builtin "One Step Simplification" (formula "19"))
            (rule "variableDeclarationAssign" (formula "19") (term "1") (userinteraction))
            (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_27") (userinteraction))
            (rule "assignmentMultiplicationInt" (formula "19") (term "1") (userinteraction))
            (rule "assignmentSubtractionInt" (formula "19") (term "1,1") (userinteraction))
            (rule "tryEmpty" (formula "19") (term "1,1,1") (userinteraction))
            (rule "blockEmptyLabel" (formula "19") (term "1,1,1") (userinteraction))
            (rule "blockEmpty" (formula "19") (term "1,1,1") (userinteraction))
            (rule "methodCallEmpty" (formula "19") (term "1,1,1") (userinteraction))
            (rule "emptyModality" (formula "19") (term "1,1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "19"))
            (rule "translateJavaSubInt" (formula "19") (term "0,1") (userinteraction))
            (rule "translateJavaSubInt" (formula "19") (term "0,1,0") (userinteraction))
            (rule "translateJavaDivInt" (formula "19") (term "0,1,0,0") (userinteraction))
            (rule "translateJavaMulInt" (formula "19") (term "1,0,1") (userinteraction))
            (rule "translateJavaMulInt" (formula "19") (term "1,0,1,0") (userinteraction))
            (rule "translateJavaDivInt" (formula "19") (term "1,1,0,0,0") (userinteraction))
            (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0,0,0,0,0") (userinteraction))
            (rule "translateJavaDivInt" (formula "19") (term "1,1,1,1,0,0,0,0,0,0") (userinteraction))
            (rule "translateJavaMulInt" (formula "19") (term "1,1,1,0,0,0,0,0,0") (userinteraction))
            (rule "translateJavaDivInt" (formula "19") (term "1,0,1,0,0,0,0,0,0") (userinteraction))
            (rule "translateJavaDivInt" (formula "19") (term "1,1,0,1,0") (userinteraction))
            (rule "translateJavaDivInt" (formula "19") (term "1,1,0,1") (userinteraction))
            (rule "sub" (formula "19") (term "0,1") (userinteraction))
            (rule "sub" (formula "19") (term "0,1,0") (userinteraction))
            (rule "andRight" (formula "19") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "19") (userinteraction))
               (branch "Case 1"
                  (rule "andRight" (formula "19") (userinteraction))
                  (branch "Case 1"
                     (rule "andRight" (formula "19") (userinteraction))
                     (branch "Case 1"
                        (rule "andRight" (formula "19") (userinteraction))
                        (branch "Case 1"
                           (rule "andRight" (formula "19") (userinteraction))
                           (branch "Case 1"
                              (rule "sub" (formula "19") (term "1,1") (userinteraction))
                              (builtin "Evaluate Query" (formula "14") (term "1") (newnames "base_8,exp_9,callee,queryResult_7,res_intPow_7"))
                              (rule "notLeft" (formula "1") (userinteraction))
                              (rule "variableDeclaration" (formula "17") (term "1") (newnames "queryResult_7") (userinteraction))
                              (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_intPow_42,result_10,exc_55") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
                              (branch "Post (intPow)"
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "assignment" (formula "19") (term "1") (userinteraction))
                                 (rule "methodCallEmpty" (formula "19") (term "1,1") (userinteraction))
                                 (rule "emptyModality" (formula "19") (term "1,1") (userinteraction))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "notRight" (formula "19") (userinteraction))
                                 (rule "eqSymm" (formula "1") (userinteraction))
                                 (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_0000000021_0" (formula "15") (term "1") (userinteraction))
                                 (rule "applyEq" (formula "15") (term "1") (ifseqformula "1") (userinteraction))
                                 (rule "applyEq" (formula "15") (term "1") (ifseqformula "19") (userinteraction))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_0000000021_0" (formula "10") (term "1"))
                                 (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                                 (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "polySimp_elimNeg" (formula "19") (term "1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "0,1,1,1"))
                                 (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                                 (rule "polySimp_addComm0" (formula "19") (term "1"))
                                 (rule "polySimp_homoEq" (formula "19"))
                                 (rule "polySimp_addComm1" (formula "19") (term "0"))
                                 (rule "polySimp_addComm1" (formula "19") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "19") (term "0,0,0"))
                                 (rule "add_literals" (formula "19") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "19") (term "0,0"))
                                 (rule "inEqSimp_gtRight" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "13"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "11"))
                                 (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "14"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "19") (term "0"))
                                 (rule "add_literals" (formula "19") (term "1,0"))
                                 (rule "times_zero_1" (formula "19") (term "0"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "closeTrue" (formula "19"))
                              )
                              (branch "Exceptional Post (intPow)"
                                 (builtin "One Step Simplification" (formula "17"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "4"))
                                 (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_0000000021_0" (formula "9") (term "1"))
                                 (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_0000000021_0" (formula "12") (term "1"))
                                 (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "close" (formula "18") (ifseqformula "17"))
                              )
                              (branch "Pre (intPow)"
                                 (builtin "One Step Simplification" (formula "5"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "14")) (ifInst ""  (formula "1")))
                                 (rule "true_left" (formula "4"))
                                 (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_0000000021_0" (formula "9") (term "1"))
                                 (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_0000000021_0" (formula "12") (term "1"))
                                 (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                                 (rule "eqSymm" (formula "12"))
                                 (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "polySimp_elimNeg" (formula "17") (term "1,1,1"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "0,1,1,1"))
                                 (rule "polySimp_addComm0" (formula "10") (term "2,1"))
                                 (rule "polySimp_addComm0" (formula "17") (term "1"))
                                 (rule "polySimp_homoEq" (formula "17"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "17") (term "0,0,0"))
                                 (rule "add_literals" (formula "17") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "17") (term "0,0"))
                                 (rule "inEqSimp_gtRight" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_geqRight" (formula "15"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "13"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "12") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "11"))
                                 (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "14"))
                                 (rule "inEqSimp_commuteLeq" (formula "11"))
                                 (rule "polySimp_sepPosMonomial" (formula "17"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1"))
                                 (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0,1,0") (inst "intPow_sk=intPow_sk_64") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "eqSymm" (formula "12") (term "0,1"))
                                 (rule "polySimp_addComm1" (formula "13") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                                 (rule "mul_literals" (formula "14") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1"))
                                 (rule "mul_literals" (formula "13") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Case 2"
                              (builtin "One Step Simplification" (formula "5"))
                              (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                              (rule "eqSymm" (formula "12"))
                              (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "polySimp_addComm0" (formula "10") (term "2,1"))
                              (rule "inEqSimp_gtRight" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "13"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "12") (term "0"))
                              (rule "inEqSimp_commuteGeq" (formula "11"))
                              (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                              (rule "inEqSimp_commuteLeq" (formula "11"))
                              (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0") (inst "intPow_sk=intPow_sk_58") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "eqSymm" (formula "14") (term "0,1"))
                              (rule "applyEqRigid" (formula "14") (term "1,0,1") (ifseqformula "15"))
                              (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0,1,0") (inst "intPow_sk=intPow_sk_59") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "eqSymm" (formula "12") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "13") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                              (rule "mul_literals" (formula "14") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1"))
                              (rule "polySimp_rightDist" (formula "13") (term "1"))
                              (rule "mul_literals" (formula "13") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Case 2"
                           (builtin "One Step Simplification" (formula "5"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                           (rule "eqSymm" (formula "12"))
                           (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "polySimp_addComm0" (formula "10") (term "2,1"))
                           (rule "inEqSimp_gtRight" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_gtToGeq" (formula "13"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "inEqSimp_commuteGeq" (formula "11"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0") (inst "intPow_sk=intPow_sk_56") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "eqSymm" (formula "14") (term "0,1"))
                           (rule "applyEqRigid" (formula "14") (term "1,0,1") (ifseqformula "15"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0,1,0") (inst "intPow_sk=intPow_sk_57") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "eqSymm" (formula "12") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1"))
                           (rule "inEqSimp_invertInEq1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "times_zero_2" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                           (rule "mul_literals" (formula "14") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                           (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "1"))
                           (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "17"))
                           (rule "applyEqRigid" (formula "12") (term "1,0,1,0") (ifseqformula "17"))
                           (rule "add_zero_right" (formula "12") (term "0,1,0"))
                           (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "17"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "12"))
                           (rule "times_zero_1" (formula "6") (term "0,0"))
                           (rule "add_zero_left" (formula "6") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "mul_literals" (formula "6") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                           (rule "mul_literals" (formula "8") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "8"))
                           (rule "leq_literals" (formula "7") (term "0"))
                           (builtin "One Step Simplification" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "13"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0"))
                           (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1"))
                           (rule "mul_literals" (formula "11") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "14"))
                           (rule "mul_literals" (formula "7") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "7") (term "0"))
                           (rule "add_literals" (formula "7") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "7"))
                           (rule "leq_literals" (formula "6") (term "0"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "boxToDiamond" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "notLeft" (formula "16"))
                           (rule "boxToDiamond" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "notLeft" (formula "13"))
                           (rule "Class_invariant_axiom_for_Goodstein" (formula "9") (inst "sk=sk_23") (ifseqformula "4"))
                           (branch "Use Axiom"
                              (rule "true_left" (formula "9"))
                              (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_intPow_36,savedHeapBefore_intPow_28,x_1Before_intPow_28,x_2Before_intPow_28"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "variableDeclarationAssign" (formula "17") (term "1"))
                              (rule "variableDeclaration" (formula "17") (term "1") (newnames "r_29"))
                              (rule "assignment" (formula "17") (term "1"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_intPow_37,savedHeapBefore_intPow_29,x_1Before_intPow_29,x_2Before_intPow_29"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "variableDeclarationAssign" (formula "16") (term "1"))
                              (rule "variableDeclaration" (formula "16") (term "1") (newnames "r_30"))
                              (rule "assignment" (formula "16") (term "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (builtin "Loop Invariant" (formula "17") (newnames "variant_38,b_40,heapBefore_LOOP_38,x_2Before_LOOP_37,r_29Before_LOOP,x_2_37,r_29_0,heap_After_LOOP_38,anon_heap_LOOP_38,o,f"))
                              (branch "Invariant Initially Valid"
                                 (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "2")))
                                 (rule "translateJavaSubInt" (formula "17") (term "1,1,0"))
                                 (rule "qeq_literals" (formula "17") (term "1"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "sub_literals" (formula "17") (term "1,1"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "closeTrue" (formula "17"))
                              )
                              (branch "Body Preserves Invariant"
                                 (builtin "One Step Simplification" (formula "19"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,0,1"))
                                 (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0,0,0,1,1,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "17") (term "1,1,0,0"))
                                 (rule "impRight" (formula "19"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "eqSymm" (formula "22") (term "0,0,1,0,1,1,0,1"))
                                 (rule "eqSymm" (formula "22") (term "0,0,0,0,1,1,0,1"))
                                 (rule "eqSymm" (formula "18"))
                                 (rule "polySimp_elimSub" (formula "22") (term "1,0,0,0,0,0,1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                 (rule "add_zero_left" (formula "18") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "0,1,1,1,0,1"))
                                 (rule "polySimp_addComm0" (formula "22") (term "0,1,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "1,0,0,0,0,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "19"))
                                 (rule "variableDeclarationAssign" (formula "1") (term "1"))
                                 (rule "variableDeclarationAssign" (formula "22") (term "1"))
                                 (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_40_2"))
                                 (rule "variableDeclaration" (formula "22") (term "1") (newnames "exc_50"))
                                 (rule "assignment" (formula "22") (term "1"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "variableDeclaration" (formula "22") (term "1") (newnames "thrownExc_40"))
                                 (rule "blockThrow" (formula "22") (term "1,0,0,1"))
                                 (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "1") (term "0,1,0") (ifseqformula "20"))
                                 (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "20"))
                                 (rule "leq_literals" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEqRigid" (formula "21") (term "0,0,0,1,1,0,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "21") (term "1,0,1,1,1,0,0") (ifseqformula "19"))
                                 (rule "add_zero_right" (formula "21") (term "0,1,1,1,0,0"))
                                 (rule "applyEq" (formula "18") (term "0,1,0") (ifseqformula "19"))
                                 (rule "times_zero_2" (formula "18") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "eqSymm" (formula "18"))
                                 (rule "applyEqRigid" (formula "21") (term "0,1,0,1,1,0,0") (ifseqformula "18"))
                                 (rule "boxToDiamond" (formula "1") (term "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "inequality_comparison_simple" (formula "19") (term "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "methodCallEmpty" (formula "19") (term "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "emptyModality" (formula "19") (term "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "closeTrue" (formula "19"))
                              )
                              (branch "Use Case"
                                 (builtin "One Step Simplification" (formula "19"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "translateJavaSubInt" (formula "17") (term "1,1,0,0"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                                 (rule "add_zero_left" (formula "17") (term "1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "18"))
                                 (rule "variableDeclarationAssign" (formula "21") (term "1"))
                                 (rule "variableDeclaration" (formula "21") (term "1") (newnames "b_40_1"))
                                 (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "18"))
                                 (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "19"))
                                 (rule "leq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "applyEqRigid" (formula "17") (term "0,1,0") (ifseqformula "18"))
                                 (rule "times_zero_2" (formula "17") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "18"))
                                 (rule "qeq_literals" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "18"))
                                 (rule "applyEqRigid" (formula "20") (term "0,1,1,0") (ifseqformula "17"))
                                 (rule "inequality_comparison_simple" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "methodCallEmpty" (formula "20") (term "1"))
                                 (rule "emptyModality" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "methodCallReturn" (formula "20") (term "1"))
                                 (rule "assignment" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "methodCallEmpty" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "emptyModality" (formula "20") (term "1"))
                                 (builtin "One Step Simplification" (formula "20"))
                                 (rule "notRight" (formula "20"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "1"))
                                 (rule "applyEqRigid" (formula "11") (term "1,1") (ifseqformula "1"))
                                 (rule "add_literals" (formula "11") (term "1"))
                                 (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "applyEqRigid" (formula "14") (term "1") (ifseqformula "1"))
                                 (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "8"))
                                 (rule "leq_literals" (formula "12") (term "0"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "7"))
                                 (rule "leq_literals" (formula "11") (term "0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (builtin "Loop Invariant" (formula "17") (newnames "variant_39,b_41,heapBefore_LOOP_39,x_2Before_LOOP_38,r_30Before_LOOP,x_2_38,r_30_0,heap_After_LOOP_39,anon_heap_LOOP_39,o,f"))
                                 (branch "Invariant Initially Valid"
                                    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "3")))
                                    (rule "translateJavaSubInt" (formula "17") (term "1,1,0,0"))
                                    (rule "qeq_literals" (formula "17") (term "1"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "sub_literals" (formula "17") (term "1,1,0"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "qeq_literals" (formula "17"))
                                    (rule "closeTrue" (formula "17"))
                                 )
                                 (branch "Body Preserves Invariant"
                                    (builtin "One Step Simplification" (formula "18"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0"))
                                    (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,0,1,1"))
                                    (rule "translateJavaAddInt" (formula "19") (term "0,1,1,1,0,1"))
                                    (rule "translateJavaSubInt" (formula "19") (term "1,1,0,0,0,0,1,1,0,1,1"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "impRight" (formula "20"))
                                    (rule "andLeft" (formula "19"))
                                    (rule "eqSymm" (formula "22") (term "0,0,1,0,1,1,0,1"))
                                    (rule "eqSymm" (formula "22") (term "0,0,0,0,1,1,0,1"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "polySimp_elimSub" (formula "22") (term "1,0,0,0,0,0,1,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "22") (term "0,1,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "22") (term "0,1,1,1,0,1"))
                                    (rule "polySimp_addComm0" (formula "22") (term "1,0,0,0,0,0,1,1,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "20"))
                                    (rule "variableDeclarationAssign" (formula "1") (term "1"))
                                    (rule "variableDeclarationAssign" (formula "22") (term "1"))
                                    (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_41_2"))
                                    (rule "variableDeclaration" (formula "22") (term "1") (newnames "exc_49"))
                                    (rule "assignment" (formula "22") (term "1"))
                                    (builtin "One Step Simplification" (formula "22"))
                                    (rule "variableDeclaration" (formula "22") (term "1") (newnames "thrownExc_39"))
                                    (rule "blockThrow" (formula "22") (term "1,0,0,1"))
                                    (rule "boxToDiamond" (formula "1") (term "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inequality_comparison_simple" (formula "21") (term "1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "methodCallEmpty" (formula "21") (term "1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "emptyModality" (formula "21") (term "1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "inEqSimp_strengthen1" (formula "20") (ifseqformula "21"))
                                    (rule "add_zero_right" (formula "20") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "21") (ifseqformula "20"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0"))
                                    (rule "leq_literals" (formula "21") (term "0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "false_right" (formula "21"))
                                    (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "19"))
                                    (rule "applyEqRigid" (formula "18") (term "0,1,1,0") (ifseqformula "20"))
                                    (rule "mul_literals" (formula "18") (term "1,1,0"))
                                    (rule "add_literals" (formula "18") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "applyEq" (formula "21") (term "1,0,1,1,1,0,0") (ifseqformula "19"))
                                    (rule "add_literals" (formula "21") (term "0,1,1,1,0,0"))
                                    (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "applyEqRigid" (formula "20") (term "0,0,0,1,1,0,0") (ifseqformula "19"))
                                    (rule "applyEqRigid" (formula "20") (term "0,1,0,1,1,0,0") (ifseqformula "18"))
                                    (rule "ifUnfold" (formula "20") (term "1") (inst "#boolv=x_3"))
                                    (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_106"))
                                    (rule "inequality_comparison_simple" (formula "20") (term "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "equal_literals" (formula "20") (term "0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "ifSplit" (formula "20"))
                                    (branch "if x_106 true"
                                       (builtin "One Step Simplification" (formula "21"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignmentMultiplicationInt" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "translateJavaMulInt" (formula "20") (term "0,1,0"))
                                       (rule "polySimp_elimOneLeft0" (formula "20") (term "0,1,0"))
                                       (rule "postdecrement" (formula "20") (term "1"))
                                       (rule "compound_subtraction_1" (formula "20") (term "1") (inst "#v=x_3"))
                                       (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                       (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_107"))
                                       (rule "widening_identity_cast_5" (formula "20") (term "1"))
                                       (rule "assignment" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "assignmentSubtractionInt" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "translateJavaSubInt" (formula "20") (term "0,1,0"))
                                       (rule "sub_literals" (formula "20") (term "0,1,0"))
                                       (rule "tryEmpty" (formula "20") (term "1"))
                                       (rule "methodCallEmpty" (formula "20") (term "1"))
                                       (rule "emptyModality" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "qeq_literals" (formula "20") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "times_zero_2" (formula "20") (term "0,1,0,0,0"))
                                       (rule "qeq_literals" (formula "20") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "add_zero_right" (formula "20") (term "0,1"))
                                       (rule "add_zero_left" (formula "20") (term "1,0,0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "precOfInt" (formula "20"))
                                       (rule "less_literals" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "leq_literals" (formula "20"))
                                       (rule "closeTrue" (formula "20"))
                                    )
                                    (branch "if x_106 false"
                                       (builtin "One Step Simplification" (formula "21"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Use Case"
                                    (builtin "One Step Simplification" (formula "19"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "19"))
                                    (rule "variableDeclarationAssign" (formula "21") (term "1"))
                                    (rule "variableDeclaration" (formula "21") (term "1") (newnames "b_41_1"))
                                    (rule "inequality_comparison_simple" (formula "21") (term "1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "methodCallEmpty" (formula "21") (term "1"))
                                    (rule "emptyModality" (formula "21") (term "1"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "impRight" (formula "21"))
                                    (rule "applyEq" (formula "19") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "times_zero_2" (formula "19") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "19") (term "1,0"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "eqSymm" (formula "19"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "applyEq" (formula "20") (term "0,1,0") (ifseqformula "19"))
                                    (rule "methodCallReturn" (formula "20") (term "1"))
                                    (rule "assignment" (formula "20") (term "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "methodCallEmpty" (formula "20") (term "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "emptyModality" (formula "20") (term "1"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "notRight" (formula "20"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "4"))
                                    (rule "applyEq" (formula "11") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "20") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "4"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "inEqSimp_homoInEq1" (formula "13"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0"))
                                    (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                                    (rule "add_literals" (formula "13") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0"))
                                    (rule "add_zero_right" (formula "13") (term "0"))
                                    (rule "leq_literals" (formula "13"))
                                    (rule "closeFalse" (formula "13"))
                                 )
                              )
                           )
                           (branch "Show Axiom Satisfiability"
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "closeTrue" (formula "17"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "jdiv_axiom_inline" (formula "19") (term "1") (userinteraction))
                        (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "7") (userinteraction))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "div_axiom" (formula "19") (term "1") (inst "quotient=quotient_3") (userinteraction))
                        (rule "cut_direct" (formula "1") (term "0") (userinteraction))
                        (branch "CUT: anon_factor = 0 TRUE"
                           (builtin "One Step Simplification" (formula "7"))
                           (builtin "One Step Simplification" (formula "6"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "5"))
                           (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                           (rule "eqSymm" (formula "13"))
                           (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                           (rule "inEqSimp_ltRight" (formula "17"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_gtRight" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "14"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_zero_right" (formula "14") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "inEqSimp_commuteGeq" (formula "12"))
                           (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "3"))
                           (rule "add_zero_right" (formula "14") (term "0"))
                           (rule "qeq_literals" (formula "14"))
                           (rule "closeFalse" (formula "14"))
                        )
                        (branch "CUT: anon_factor = 0 FALSE"
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "cut_direct" (formula "1") (term "0,1") (userinteraction))
                           (branch "CUT: anon_factor >= 0 TRUE"
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "andLeft" (formula "2"))
                              (rule "andLeft" (formula "2"))
                              (rule "applyEq" (formula "24") (term "1") (ifseqformula "2") (userinteraction))
                              (rule "cut" (inst "cutFormula=m = Z(0(#))") (userinteraction))
                              (branch "CUT: m = 0 TRUE"
                                 (builtin "One Step Simplification" (formula "10"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "translateJavaAddInt" (formula "15") (term "2,1"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "0"))
                                 (rule "polySimp_addComm0" (formula "15") (term "2,1"))
                                 (rule "polySimp_addComm1" (formula "5") (term "1"))
                                 (rule "inEqSimp_gtRight" (formula "21"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_ltRight" (formula "22"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_gtToGeq" (formula "18"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "16"))
                                 (rule "applyEq" (formula "16") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "11") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "6") (term "1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "3"))
                                 (rule "add_zero_right" (formula "7") (term "1"))
                                 (rule "applyEq" (formula "12") (term "0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "3"))
                                 (rule "times_zero_2" (formula "2") (term "0,0"))
                                 (rule "add_zero_left" (formula "2") (term "0"))
                                 (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "3"))
                                 (rule "add_zero_right" (formula "16") (term "0,0"))
                                 (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "18") (term "0") (inst "intPow_sk=intPow_sk_48") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "eqSymm" (formula "18") (term "0,1"))
                                 (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                                 (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "16") (term "0,1,0") (inst "intPow_sk=intPow_sk_49") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "eqSymm" (formula "16") (term "0,1"))
                                 (rule "inEqSimp_invertInEq1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "times_zero_2" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                                 (rule "mul_literals" (formula "18") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "18"))
                                 (rule "times_zero_1" (formula "22") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "22") (term "0,0"))
                                 (rule "leq_literals" (formula "22") (term "0"))
                                 (builtin "One Step Simplification" (formula "22"))
                                 (rule "false_right" (formula "22"))
                                 (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "18"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "11") (term "0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "closeFalse" (formula "11"))
                              )
                              (branch "CUT: m = 0 FALSE"
                                 (rule "intquotientGeZeroQ" (inst "n=n") (inst "d=d") (userinteraction))
                                 (rule "instAll" (formula "3") (term "0,0") (ifseqformula "1") (userinteraction))
                                 (rule "hide_left" (formula "1") (userinteraction))
                                 (rule "instAll" (formula "4") (term "1,0") (ifseqformula "2") (userinteraction))
                                 (rule "hide_left" (formula "2") (userinteraction))
                                 (rule "impLeft" (formula "3") (userinteraction))
                                 (branch "Case 1"
                                    (builtin "One Step Simplification" (formula "9"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "translateJavaAddInt" (formula "14") (term "2,1"))
                                    (rule "eqSymm" (formula "16"))
                                    (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "12"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "2,1"))
                                    (rule "polySimp_addComm1" (formula "4") (term "1"))
                                    (rule "inEqSimp_gtRight" (formula "22"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_ltRight" (formula "23"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                                    (rule "inEqSimp_gtToGeq" (formula "17"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
                                    (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "inEqSimp_leqRight" (formula "20"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_commuteGeq" (formula "16"))
                                    (rule "applyEq" (formula "16") (term "0") (ifseqformula "19"))
                                    (rule "inEqSimp_commuteLeq" (formula "16"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "19") (term "0") (inst "intPow_sk=intPow_sk_52") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "eqSymm" (formula "19") (term "0,1"))
                                    (rule "applyEqRigid" (formula "19") (term "1,0,1") (ifseqformula "20"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "17") (term "0,1,0") (inst "intPow_sk=intPow_sk_53") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "eqSymm" (formula "17") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "18") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1"))
                                    (rule "inEqSimp_invertInEq1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "times_zero_2" (formula "2") (term "1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                    (rule "mul_literals" (formula "19") (term "1"))
                                    (rule "inEqSimp_invertInEq1" (formula "1"))
                                    (rule "times_zero_2" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1"))
                                    (rule "mul_literals" (formula "18") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "19"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0"))
                                    (rule "leq_literals" (formula "24") (term "0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "23"))
                                    (rule "add_zero_right" (formula "12") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "12"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0"))
                                    (rule "leq_literals" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "false_right" (formula "23"))
                                    (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "19"))
                                    (rule "leq_literals" (formula "4") (term "0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "18") (term "0"))
                                    (builtin "One Step Simplification" (formula "18"))
                                    (rule "closeFalse" (formula "18"))
                                 )
                                 (branch "Case 2"
                                    (builtin "One Step Simplification" (formula "10"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "translateJavaAddInt" (formula "15") (term "2,1"))
                                    (rule "eqSymm" (formula "17"))
                                    (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "13"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "15") (term "2,1"))
                                    (rule "polySimp_addComm1" (formula "5") (term "1"))
                                    (rule "inEqSimp_ltRight" (formula "23"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_gtRight" (formula "23"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_gtToGeq" (formula "18"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "18") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "17") (term "0"))
                                    (rule "inEqSimp_commuteGeq" (formula "16"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "16") (term "0") (ifseqformula "19"))
                                    (rule "inEqSimp_commuteLeq" (formula "16"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "19") (term "0") (inst "intPow_sk=intPow_sk_54") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "eqSymm" (formula "19") (term "0,1"))
                                    (rule "applyEqRigid" (formula "19") (term "1,0,1") (ifseqformula "20"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "17") (term "0,1,0") (inst "intPow_sk=intPow_sk_55") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "eqSymm" (formula "17") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "18") (term "0"))
                                    (rule "inEqSimp_invertInEq1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "times_zero_2" (formula "2") (term "1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                    (rule "mul_literals" (formula "19") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                                    (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                    (rule "polySimp_rightDist" (formula "18") (term "1"))
                                    (rule "mul_literals" (formula "18") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "19"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0"))
                                    (rule "leq_literals" (formula "24") (term "0"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "23"))
                                    (rule "add_zero_right" (formula "12") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "12"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "23") (term "0,0"))
                                    (rule "leq_literals" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "false_right" (formula "23"))
                                    (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "19"))
                                    (rule "leq_literals" (formula "3") (term "0"))
                                    (builtin "One Step Simplification" (formula "3"))
                                    (rule "true_left" (formula "3"))
                                    (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "2"))
                                    (rule "applyEqRigid" (formula "6") (term "1,0") (ifseqformula "4"))
                                    (rule "times_zero_1" (formula "6") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "6"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEqRigid" (formula "6") (term "1,0") (ifseqformula "3"))
                                    (rule "times_zero_1" (formula "6") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "6"))
                                    (rule "times_zero_2" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                    (rule "mul_literals" (formula "5") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                    (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "5"))
                                    (rule "andLeft" (formula "14"))
                                    (rule "inEqSimp_homoInEq1" (formula "14"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0"))
                                    (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                                    (rule "add_literals" (formula "14") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "14") (term "1,0"))
                                    (rule "add_zero_right" (formula "14") (term "0"))
                                    (rule "leq_literals" (formula "14"))
                                    (rule "closeFalse" (formula "14"))
                                 )
                              )
                           )
                           (branch "CUT: anon_factor >= 0 FALSE"
                              (builtin "One Step Simplification" (formula "6"))
                              (builtin "One Step Simplification" (formula "5"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "5"))
                              (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "eqSymm" (formula "15"))
                              (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "11"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0"))
                              (rule "polySimp_mulComm0" (formula "2") (term "0"))
                              (rule "polySimp_addComm0" (formula "13") (term "2,1"))
                              (rule "polySimp_addComm1" (formula "3") (term "1"))
                              (rule "inEqSimp_geqRight" (formula "17"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_ltRight" (formula "21"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_gtRight" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "17"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0"))
                              (rule "inEqSimp_commuteGeq" (formula "15"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                              (rule "inEqSimp_commuteLeq" (formula "15"))
                              (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
                              (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "18") (term "0") (inst "intPow_sk=intPow_sk_42") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "eqSymm" (formula "18") (term "0,1"))
                              (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                              (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "16") (term "0,1,0") (inst "intPow_sk=intPow_sk_43") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "eqSymm" (formula "16") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "17") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                              (rule "mul_literals" (formula "18") (term "1"))
                              (rule "inEqSimp_invertInEq1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "times_zero_2" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1"))
                              (rule "mul_literals" (formula "17") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                              (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "18"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0"))
                              (rule "leq_literals" (formula "22") (term "0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "false_right" (formula "22"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "18"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "jdiv_axiom_inline" (formula "19") (term "0") (userinteraction))
                     (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "7") (userinteraction))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "div_axiom" (formula "19") (term "0") (inst "quotient=quotient_2") (userinteraction))
                     (rule "cut_direct" (formula "1") (term "0") (userinteraction))
                     (branch "CUT: anon_factor = 0 TRUE"
                        (builtin "One Step Simplification" (formula "7"))
                        (builtin "One Step Simplification" (formula "6"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "5"))
                        (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                        (rule "eqSymm" (formula "13"))
                        (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                        (rule "inEqSimp_gtRight" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltRight" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "14"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "inEqSimp_commuteGeq" (formula "12"))
                        (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "3"))
                        (rule "add_zero_right" (formula "14") (term "0"))
                        (rule "qeq_literals" (formula "14"))
                        (rule "closeFalse" (formula "14"))
                     )
                     (branch "CUT: anon_factor = 0 FALSE"
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "cut_direct" (formula "1") (term "0,1") (userinteraction))
                        (branch "CUT: anon_factor >= 0 TRUE"
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (builtin "Evaluate Query" (formula "18") (term "1") (newnames "base_5,exp_6,callee,queryResult_4,res_intPow_4"))
                           (rule "notLeft" (formula "1") (userinteraction))
                           (rule "variableDeclaration" (formula "21") (term "1") (newnames "queryResult_4") (userinteraction))
                           (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_intPow_19,result_7,exc_27") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
                           (branch "Post (intPow)"
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "22"))
                              (rule "assignment" (formula "23") (term "1") (userinteraction))
                              (rule "methodCallEmpty" (formula "23") (term "1,1") (userinteraction))
                              (rule "emptyModality" (formula "23") (term "1,1") (userinteraction))
                              (builtin "One Step Simplification" (formula "23"))
                              (rule "notRight" (formula "23") (userinteraction))
                              (rule "eqSymm" (formula "1") (userinteraction))
                              (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_011000021_0" (formula "19") (term "1") (userinteraction))
                              (rule "applyEq" (formula "19") (term "1") (ifseqformula "1") (userinteraction))
                              (rule "applyEq" (formula "19") (term "1") (ifseqformula "23") (userinteraction))
                              (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "19") (userinteraction))
                              (rule "powRightIncreasing" (inst "exp=exp_7") (inst "base=base_6") (userinteraction))
                              (rule "instAll" (formula "28") (term "1,1,0") (ifseqformula "1") (userinteraction))
                              (rule "hide_left" (formula "2") (userinteraction))
                              (rule "instAll" (formula "28") (term "0,1,0") (ifseqformula "1") (userinteraction))
                              (rule "hide_left" (formula "2") (userinteraction))
                              (rule "impLeft" (formula "1") (userinteraction))
                              (branch "Case 1"
                                 (builtin "One Step Simplification" (formula "10"))
                                 (builtin "One Step Simplification" (formula "9"))
                                 (rule "true_left" (formula "9"))
                                 (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_011000021_0" (formula "14") (term "1"))
                                 (rule "translateJavaAddInt" (formula "15") (term "2,1"))
                                 (rule "eqSymm" (formula "21"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,1"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "0"))
                                 (rule "polySimp_addComm0" (formula "15") (term "2,1"))
                                 (rule "polySimp_addComm1" (formula "5") (term "1"))
                                 (rule "inEqSimp_ltRight" (formula "25"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_gtRight" (formula "25"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "18"))
                                 (rule "times_zero_1" (formula "18") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "23") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                                 (rule "add_literals" (formula "23") (term "0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "16"))
                                 (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "19"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "22"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "19"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "16"))
                                 (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "5"))
                                 (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "17") (term "0,1,0") (inst "intPow_sk=intPow_sk_35") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                 (builtin "One Step Simplification" (formula "17"))
                                 (rule "eqSymm" (formula "17") (term "0,1"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                 (rule "mul_literals" (formula "19") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0,0"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0,1"))
                                 (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "13"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_geqRight" (formula "24"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1"))
                                 (rule "mul_literals" (formula "19") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                                 (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "20"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0"))
                                 (rule "leq_literals" (formula "25") (term "0"))
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "20"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "inEqSimp_antiSymm" (formula "21") (ifseqformula "1"))
                                 (rule "applyEq" (formula "17") (term "1,0,1,0") (ifseqformula "21"))
                                 (rule "add_zero_right" (formula "17") (term "0,1,0"))
                                 (rule "applyEqRigid" (formula "24") (term "1,0") (ifseqformula "21"))
                                 (builtin "One Step Simplification" (formula "24"))
                                 (rule "eqSymm" (formula "24"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "21"))
                                 (rule "qeq_literals" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "21"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "22"))
                                 (rule "qeq_literals" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "applyEqRigid" (formula "6") (term "0,0") (ifseqformula "21"))
                                 (rule "polySimp_elimOneLeft0" (formula "6") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "6"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                 (rule "applyEq" (formula "15") (term "1") (ifseqformula "21"))
                                 (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "21"))
                                 (rule "polySimp_elimOneLeft0" (formula "5") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "5"))
                                 (rule "applyEqRigid" (formula "4") (term "1,0") (ifseqformula "21"))
                                 (rule "applyEq" (formula "3") (term "1") (ifseqformula "21"))
                                 (rule "applyEq" (formula "18") (term "1") (ifseqformula "21"))
                                 (rule "applyEqRigid" (formula "6") (term "0,1,0,0") (ifseqformula "21"))
                                 (rule "mul_literals" (formula "6") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "15"))
                                 (rule "leq_literals" (formula "11") (term "0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "polyDiv_pullOut" (formula "4") (term "0") (inst "polyDivCoeff=m"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,0"))
                                 (rule "equal_literals" (formula "4") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "0,0,0"))
                                 (rule "div_literals" (formula "4") (term "0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0"))
                                 (rule "applyEq" (formula "1") (term "1") (ifseqformula "4"))
                                 (rule "applyEq" (formula "13") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "15"))
                                 (rule "polySimp_addComm1" (formula "15") (term "0"))
                                 (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "5"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,0"))
                                 (rule "times_zero_1" (formula "5") (term "0"))
                                 (rule "qeq_literals" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                 (rule "add_literals" (formula "4") (term "1,0"))
                                 (rule "times_zero_1" (formula "4") (term "0"))
                                 (rule "leq_literals" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "applyEq" (formula "7") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1"))
                                 (rule "mul_literals" (formula "13") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "8") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                                 (rule "mul_literals" (formula "8") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "8"))
                                 (rule "leq_literals" (formula "12") (term "0"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "true_left" (formula "12"))
                                 (rule "boxToDiamond" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "notLeft" (formula "12"))
                                 (rule "Class_invariant_axiom_for_Goodstein" (formula "10") (inst "sk=sk_13") (ifseqformula "6"))
                                 (branch "Use Axiom"
                                    (rule "true_left" (formula "10"))
                                    (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_intPow_22,savedHeapBefore_intPow_16,x_1Before_intPow_16,x_2Before_intPow_16"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (rule "variableDeclarationAssign" (formula "16") (term "1"))
                                    (rule "variableDeclaration" (formula "16") (term "1") (newnames "r_17"))
                                    (rule "assignment" (formula "16") (term "1"))
                                    (builtin "One Step Simplification" (formula "16"))
                                    (builtin "Loop Invariant" (formula "16") (newnames "variant_21,b_23,heapBefore_LOOP_21,x_2Before_LOOP_20,r_17Before_LOOP,x_2_20,r_17_0,heap_After_LOOP_21,anon_heap_LOOP_21,o,f"))
                                    (branch "Invariant Initially Valid"
                                       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "4")))
                                       (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0"))
                                       (rule "qeq_literals" (formula "16") (term "1"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "sub_literals" (formula "16") (term "1,1,0"))
                                       (builtin "One Step Simplification" (formula "16"))
                                       (rule "qeq_literals" (formula "16"))
                                       (rule "closeTrue" (formula "16"))
                                    )
                                    (branch "Body Preserves Invariant"
                                       (builtin "One Step Simplification" (formula "18"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,0,1"))
                                       (rule "translateJavaSubInt" (formula "18") (term "1,1,0,0,0,0,1,1,0,1,1"))
                                       (rule "translateJavaAddInt" (formula "18") (term "0,1,1,1,0,1,1"))
                                       (rule "translateJavaSubInt" (formula "17") (term "1,1,0,0"))
                                       (rule "impRight" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "eqSymm" (formula "21") (term "0,0,1,0,1,1,0,1"))
                                       (rule "eqSymm" (formula "21") (term "0,0,0,0,1,1,0,1"))
                                       (rule "eqSymm" (formula "18"))
                                       (rule "polySimp_elimSub" (formula "21") (term "1,0,0,0,0,0,1,1,0,1"))
                                       (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                                       (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1,0"))
                                       (rule "polySimp_addComm0" (formula "21") (term "0,1,1,1,0,1"))
                                       (rule "polySimp_addComm0" (formula "21") (term "1,0,0,0,0,0,1,1,0,1"))
                                       (rule "inEqSimp_commuteGeq" (formula "19"))
                                       (rule "variableDeclarationAssign" (formula "1") (term "1"))
                                       (rule "variableDeclarationAssign" (formula "21") (term "1"))
                                       (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_23_2"))
                                       (rule "variableDeclaration" (formula "21") (term "1") (newnames "exc_30"))
                                       (rule "assignment" (formula "21") (term "1"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "variableDeclaration" (formula "21") (term "1") (newnames "thrownExc_22"))
                                       (rule "blockThrow" (formula "21") (term "1,0,0,1"))
                                       (rule "boxToDiamond" (formula "1") (term "1"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "inequality_comparison_simple" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "methodCallEmpty" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "emptyModality" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "inEqSimp_strengthen1" (formula "19") (ifseqformula "20"))
                                       (rule "add_zero_right" (formula "19") (term "1"))
                                       (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "19"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0"))
                                       (rule "leq_literals" (formula "20") (term "0"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "false_right" (formula "20"))
                                       (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "18"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEq" (formula "20") (term "0,0,0,1,1,0,0") (ifseqformula "19"))
                                       (rule "applyEq" (formula "20") (term "1,0,1,1,1,0,0") (ifseqformula "19"))
                                       (rule "add_literals" (formula "20") (term "0,1,1,1,0,0"))
                                       (rule "applyEq" (formula "17") (term "0,1,1,0") (ifseqformula "19"))
                                       (rule "mul_literals" (formula "17") (term "1,1,0"))
                                       (rule "add_literals" (formula "17") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "17"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "applyEqRigid" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "17"))
                                       (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=x_3"))
                                       (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_62"))
                                       (rule "inequality_comparison_simple" (formula "19") (term "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "equal_literals" (formula "19") (term "0,0,1,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "ifSplit" (formula "19"))
                                       (branch "if x_62 true"
                                          (builtin "One Step Simplification" (formula "20"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "assignmentMultiplicationInt" (formula "19") (term "1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "translateJavaMulInt" (formula "19") (term "0,1,0"))
                                          (rule "polySimp_elimOneLeft0" (formula "19") (term "0,1,0"))
                                          (rule "postdecrement" (formula "19") (term "1"))
                                          (rule "compound_subtraction_1" (formula "19") (term "1") (inst "#v=x_3"))
                                          (rule "variableDeclarationAssign" (formula "19") (term "1"))
                                          (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_63"))
                                          (rule "widening_identity_cast_5" (formula "19") (term "1"))
                                          (rule "assignment" (formula "19") (term "1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "assignmentSubtractionInt" (formula "19") (term "1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "translateJavaSubInt" (formula "19") (term "0,1,0"))
                                          (rule "sub_literals" (formula "19") (term "0,1,0"))
                                          (rule "tryEmpty" (formula "19") (term "1"))
                                          (rule "methodCallEmpty" (formula "19") (term "1"))
                                          (rule "emptyModality" (formula "19") (term "1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "qeq_literals" (formula "19") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "times_zero_2" (formula "19") (term "0,1,0,0,0"))
                                          (rule "qeq_literals" (formula "19") (term "1,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "add_zero_right" (formula "19") (term "0,1"))
                                          (rule "add_zero_left" (formula "19") (term "1,0,0"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "precOfInt" (formula "19"))
                                          (rule "less_literals" (formula "19") (term "1"))
                                          (builtin "One Step Simplification" (formula "19"))
                                          (rule "leq_literals" (formula "19"))
                                          (rule "closeTrue" (formula "19"))
                                       )
                                       (branch "if x_62 false"
                                          (builtin "One Step Simplification" (formula "20"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "Use Case"
                                       (builtin "One Step Simplification" (formula "17"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "translateJavaSubInt" (formula "17") (term "1,1,0,0"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "eqSymm" (formula "17"))
                                       (rule "polySimp_elimSub" (formula "17") (term "1,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "18"))
                                       (rule "variableDeclarationAssign" (formula "20") (term "1"))
                                       (rule "variableDeclaration" (formula "20") (term "1") (newnames "b_23_1"))
                                       (rule "inequality_comparison_simple" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "methodCallEmpty" (formula "20") (term "1"))
                                       (rule "emptyModality" (formula "20") (term "1"))
                                       (builtin "One Step Simplification" (formula "20"))
                                       (rule "impRight" (formula "20"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEqRigid" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
                                       (rule "times_zero_2" (formula "18") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "18") (term "1,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "eqSymm" (formula "18"))
                                       (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "18"))
                                       (rule "methodCallReturn" (formula "19") (term "1"))
                                       (rule "assignment" (formula "19") (term "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "methodCallEmpty" (formula "19") (term "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "emptyModality" (formula "19") (term "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "notRight" (formula "19"))
                                       (rule "applyEq" (formula "11") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "19") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "13"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                 )
                                 (branch "Show Axiom Satisfiability"
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "closeTrue" (formula "17"))
                                 )
                              )
                              (branch "Case 2"
                                 (builtin "Evaluate Query" (formula "17") (term "1") (newnames "base_6,exp_7,callee,queryResult_5,res_intPow_5"))
                                 (rule "notLeft" (formula "1") (userinteraction))
                                 (rule "variableDeclaration" (formula "25") (term "1") (newnames "queryResult_5") (userinteraction))
                                 (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_intPow_24,result_8,exc_32") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
                                 (branch "Post (intPow)"
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "assignment" (formula "27") (term "1") (userinteraction))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "methodCallEmpty" (formula "27") (term "1") (userinteraction))
                                    (rule "emptyModality" (formula "27") (term "1") (userinteraction))
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "notRight" (formula "27") (userinteraction))
                                    (rule "eqSymm" (formula "1") (userinteraction))
                                    (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_10011000021_3" (formula "18") (term "1") (userinteraction))
                                    (rule "applyEq" (formula "18") (term "1") (ifseqformula "1") (userinteraction))
                                    (rule "applyEq" (formula "18") (term "1") (ifseqformula "27") (userinteraction))
                                    (rule "translateJavaAddInt" (formula "19") (term "2,1") (userinteraction))
                                    (builtin "Evaluate Query" (formula "19") (term "1") (newnames "base_7,exp_8,callee,queryResult_6,res_intPow_6"))
                                    (rule "notLeft" (formula "1") (userinteraction))
                                    (rule "variableDeclaration" (formula "28") (term "1") (newnames "queryResult_6") (userinteraction))
                                    (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_intPow_25,result_9,exc_33") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
                                    (branch "Post (intPow)"
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "assignment" (formula "30") (term "1") (userinteraction))
                                       (rule "methodCallEmpty" (formula "30") (term "1,1") (userinteraction))
                                       (rule "emptyModality" (formula "30") (term "1,1") (userinteraction))
                                       (builtin "One Step Simplification" (formula "30"))
                                       (rule "notRight" (formula "30") (userinteraction))
                                       (rule "eqSymm" (formula "1") (userinteraction))
                                       (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(anon_exp,Z(1(#))))_010011000021_4" (formula "20") (term "1") (userinteraction))
                                       (rule "applyEq" (formula "20") (term "1") (ifseqformula "1") (userinteraction))
                                       (rule "applyEq" (formula "20") (term "1") (ifseqformula "30") (userinteraction))
                                       (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "22") (userinteraction))
                                       (rule "applyEq" (formula "7") (term "1,0") (ifseqformula "22") (userinteraction))
                                       (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "22") (userinteraction))
                                       (rule "applyEq" (formula "34") (term "0") (ifseqformula "6") (userinteraction))
                                       (rule "multLessAux" (inst "right=right") (inst "left=left") (inst "factor=factor_1") (userinteraction))
                                       (rule "instAll" (formula "34") (term "0") (ifseqformula "1") (userinteraction))
                                       (rule "hide_left" (formula "2") (userinteraction))
                                       (rule "instAll" (formula "35") (term "0") (ifseqformula "1") (userinteraction))
                                       (rule "hide_left" (formula "2") (userinteraction))
                                       (rule "instAll" (formula "8") (term "1,0") (ifseqformula "1") (userinteraction))
                                       (rule "hide_left" (formula "1") (userinteraction))
                                       (rule "impLeft" (formula "7") (userinteraction))
                                       (branch "Case 1"
                                          (builtin "One Step Simplification" (formula "13"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "eqSymm" (formula "20"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "eqSymm" (formula "28"))
                                          (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "16"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0"))
                                          (rule "polySimp_addComm0" (formula "18") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "27") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "8") (term "1"))
                                          (rule "inEqSimp_ltRight" (formula "28"))
                                          (rule "add_zero_right" (formula "1") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_gtRight" (formula "31"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_ltRight" (formula "32"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_gtToGeq" (formula "22"))
                                          (rule "times_zero_1" (formula "22") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "22") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "6"))
                                          (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "21"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "21") (term "0"))
                                          (rule "inEqSimp_commuteGeq" (formula "20"))
                                          (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "23") (term "0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "21") (term "0,1,0") (ifseqformula "30"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "26") (term "1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "28") (term "1") (ifseqformula "5"))
                                          (rule "applyEq" (formula "30") (term "1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "23"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "applyEq" (formula "26") (term "0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "21") (term "0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "7"))
                                          (rule "applyEqRigid" (formula "10") (term "0,0") (ifseqformula "26"))
                                          (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "26"))
                                          (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "26"))
                                          (rule "applyEqRigid" (formula "11") (term "0,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "5") (term "1") (ifseqformula "26"))
                                          (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "7"))
                                          (rule "applyEqRigid" (formula "3") (term "0,0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "26") (term "1") (ifseqformula "7"))
                                          (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "7"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "7"))
                                          (rule "applyEqRigid" (formula "28") (term "1") (ifseqformula "26"))
                                          (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "7"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                          (rule "mul_literals" (formula "22") (term "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "0"))
                                          (rule "inEqSimp_invertInEq1" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "times_zero_2" (formula "3") (term "1"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "inEqSimp_contradEq7" (formula "31") (ifseqformula "22"))
                                          (rule "times_zero_1" (formula "31") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "0,0"))
                                          (rule "leq_literals" (formula "31") (term "0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "false_right" (formula "31"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "22"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "21") (term "0"))
                                          (builtin "One Step Simplification" (formula "21"))
                                          (rule "closeFalse" (formula "21"))
                                       )
                                       (branch "Case 2"
                                          (rule "andLeft" (formula "7"))
                                          (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "36") (userinteraction))
                                          (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "36") (userinteraction))
                                          (builtin "One Step Simplification" (formula "7"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "notLeft" (formula "7") (userinteraction))
                                          (rule "notLeft" (formula "7") (userinteraction))
                                          (rule "hide_right" (formula "31") (userinteraction))
                                          (rule "powExpSucc" (formula "20") (term "1") (ifseqformula "23") (userinteraction))
                                          (builtin "One Step Simplification" (formula "13"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "true_left" (formula "12"))
                                          (rule "eqSymm" (formula "28"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "eqSymm" (formula "20"))
                                          (rule "eqSymm" (formula "26"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "eqSymm" (formula "24"))
                                          (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "16"))
                                          (builtin "One Step Simplification" (formula "22"))
                                          (rule "true_left" (formula "22"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
                                          (rule "polySimp_addComm0" (formula "27") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "8") (term "1"))
                                          (rule "inEqSimp_ltRight" (formula "32"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_gtRight" (formula "32"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "20"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "20") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0"))
                                          (rule "inEqSimp_gtToGeq" (formula "21"))
                                          (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                          (rule "add_literals" (formula "21") (term "0,0"))
                                          (rule "inEqSimp_ltRight" (formula "30"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0"))
                                          (rule "inEqSimp_commuteGeq" (formula "20"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "23"))
                                          (rule "inEqSimp_commuteLeq" (formula "20"))
                                          (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "23"))
                                          (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "23"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                                          (rule "applyEq" (formula "28") (term "0") (ifseqformula "23"))
                                          (rule "eqSymm" (formula "28"))
                                          (rule "applyEq" (formula "23") (term "0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "30") (term "1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "26") (term "1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "7") (term "0") (ifseqformula "23"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "applyEq" (formula "5") (term "0") (ifseqformula "28"))
                                          (rule "eqSymm" (formula "5"))
                                          (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "23"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                                          (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "23"))
                                          (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "23"))
                                          (rule "applyEq" (formula "26") (term "1") (ifseqformula "7"))
                                          (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "26"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                          (rule "polySimp_elimOne" (formula "3") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                          (rule "polySimp_elimOne" (formula "2") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                                          (rule "mul_literals" (formula "22") (term "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_contradEq7" (formula "31") (ifseqformula "22"))
                                          (rule "times_zero_1" (formula "31") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "31") (term "0,0"))
                                          (rule "leq_literals" (formula "31") (term "0"))
                                          (builtin "One Step Simplification" (formula "31"))
                                          (rule "false_right" (formula "31"))
                                          (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "22"))
                                          (rule "leq_literals" (formula "8") (term "0"))
                                          (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "2"))
                                          (rule "mul_literals" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                          (rule "mul_literals" (formula "16") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "16"))
                                          (rule "leq_literals" (formula "15") (term "0"))
                                          (builtin "One Step Simplification" (formula "15"))
                                          (rule "true_left" (formula "15"))
                                          (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "1"))
                                          (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1"))
                                          (rule "mul_literals" (formula "20") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "20"))
                                          (rule "andLeft" (formula "9"))
                                          (rule "inEqSimp_homoInEq1" (formula "9"))
                                          (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                          (rule "add_literals" (formula "9") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "9") (term "1,0"))
                                          (rule "add_zero_right" (formula "9") (term "0"))
                                          (rule "leq_literals" (formula "9"))
                                          (rule "closeFalse" (formula "9"))
                                       )
                                    )
                                    (branch "Exceptional Post (intPow)"
                                       (builtin "One Step Simplification" (formula "28"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "11"))
                                       (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(anon_exp,Z(1(#))))_010011000021_4" (formula "17") (term "1"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "andLeft" (formula "26"))
                                       (rule "notLeft" (formula "26"))
                                       (rule "close" (formula "29") (ifseqformula "28"))
                                    )
                                    (branch "Pre (intPow)"
                                       (builtin "One Step Simplification" (formula "12"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "8")))
                                       (rule "true_left" (formula "11"))
                                       (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,add(anon_exp,Z(1(#))))_010011000021_4" (formula "17") (term "1"))
                                       (rule "eqSymm" (formula "19"))
                                       (rule "eqSymm" (formula "3"))
                                       (rule "eqSymm" (formula "25"))
                                       (rule "eqSymm" (formula "23"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "polySimp_mulComm0" (formula "6") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "0"))
                                       (rule "polySimp_addComm0" (formula "25") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "7") (term "1"))
                                       (rule "inEqSimp_gtRight" (formula "28"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_ltRight" (formula "29"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_gtToGeq" (formula "20"))
                                       (rule "times_zero_1" (formula "20") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "20") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "4"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "19"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "19") (term "0"))
                                       (rule "inEqSimp_commuteGeq" (formula "18"))
                                       (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "21"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "26"))
                                       (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "26"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "26"))
                                       (rule "applyEq" (formula "26") (term "1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "24") (term "1") (ifseqformula "5"))
                                       (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "3"))
                                       (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "24"))
                                       (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "21"))
                                       (rule "applyEq" (formula "18") (term "0") (ifseqformula "21"))
                                       (rule "inEqSimp_commuteLeq" (formula "18"))
                                       (rule "applyEq" (formula "3") (term "1") (ifseqformula "24"))
                                       (rule "applyEq" (formula "26") (term "1") (ifseqformula "24"))
                                       (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "21"))
                                       (rule "applyEq" (formula "5") (term "1") (ifseqformula "21"))
                                       (rule "applyEq" (formula "26") (term "1") (ifseqformula "21"))
                                       (rule "applyEq" (formula "3") (term "1") (ifseqformula "21"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
                                       (rule "mul_literals" (formula "27") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                                       (rule "mul_literals" (formula "20") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "28") (ifseqformula "20"))
                                       (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "0,0"))
                                       (rule "leq_literals" (formula "28") (term "0"))
                                       (builtin "One Step Simplification" (formula "28"))
                                       (rule "false_right" (formula "28"))
                                       (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "20"))
                                       (rule "leq_literals" (formula "6") (term "0"))
                                       (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "inEqSimp_subsumption1" (formula "26") (term "0") (ifseqformula "14"))
                                       (rule "leq_literals" (formula "26") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "26"))
                                       (rule "inEqSimp_geqRight" (formula "26"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Exceptional Post (intPow)"
                                    (builtin "One Step Simplification" (formula "25"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "10"))
                                    (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_011000021_0" (formula "15") (term "1"))
                                    (rule "translateJavaAddInt" (formula "16") (term "2,1"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "notLeft" (formula "23"))
                                    (rule "close" (formula "26") (ifseqformula "25"))
                                 )
                                 (branch "Pre (intPow)"
                                    (builtin "One Step Simplification" (formula "11"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "20")) (ifInst ""  (formula "7")))
                                    (rule "true_left" (formula "10"))
                                    (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_011000021_0" (formula "15") (term "1"))
                                    (rule "translateJavaAddInt" (formula "16") (term "2,1"))
                                    (rule "eqSymm" (formula "18"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "14"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                                    (rule "polySimp_addComm0" (formula "16") (term "2,1"))
                                    (rule "polySimp_addComm1" (formula "6") (term "1"))
                                    (rule "inEqSimp_ltRight" (formula "26"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_gtRight" (formula "26"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "24"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_gtToGeq" (formula "20"))
                                    (rule "times_zero_1" (formula "20") (term "1,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "19"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "19") (term "0"))
                                    (rule "inEqSimp_commuteGeq" (formula "18"))
                                    (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "21"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "5"))
                                    (rule "applyEq" (formula "5") (term "0") (ifseqformula "21"))
                                    (rule "eqSymm" (formula "5"))
                                    (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "5"))
                                    (rule "polySimp_addComm0" (formula "3") (term "0"))
                                    (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_commuteLeq" (formula "18"))
                                    (rule "applyEq" (formula "24") (term "1") (ifseqformula "21"))
                                    (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "7"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "19") (term "0,1,0") (inst "intPow_sk=intPow_sk_37") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "19"))
                                    (rule "eqSymm" (formula "19") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "20") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                    (rule "mul_literals" (formula "21") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1"))
                                    (rule "mul_literals" (formula "20") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "26") (ifseqformula "21"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0"))
                                    (rule "leq_literals" (formula "26") (term "0"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "false_right" (formula "26"))
                                    (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "6") (term "0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "14") (term "0"))
                                    (builtin "One Step Simplification" (formula "14"))
                                    (rule "closeFalse" (formula "14"))
                                 )
                              )
                           )
                           (branch "Exceptional Post (intPow)"
                              (builtin "One Step Simplification" (formula "21"))
                              (builtin "One Step Simplification" (formula "9"))
                              (builtin "One Step Simplification" (formula "8"))
                              (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "8"))
                              (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_011000021_0" (formula "13") (term "1"))
                              (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_011000021_0" (formula "16") (term "1"))
                              (rule "translateJavaAddInt" (formula "14") (term "2,1"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "19"))
                              (rule "close" (formula "22") (ifseqformula "21"))
                           )
                           (branch "Pre (intPow)"
                              (builtin "One Step Simplification" (formula "9"))
                              (builtin "One Step Simplification" (formula "8"))
                              (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "18")) (ifInst ""  (formula "5")))
                              (rule "true_left" (formula "8"))
                              (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_011000021_0" (formula "13") (term "1"))
                              (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_011000021_0" (formula "16") (term "1"))
                              (rule "translateJavaAddInt" (formula "14") (term "2,1"))
                              (rule "eqSymm" (formula "16"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "12"))
                              (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "3") (term "0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0"))
                              (rule "polySimp_addComm0" (formula "14") (term "2,1"))
                              (rule "polySimp_addComm1" (formula "4") (term "1"))
                              (rule "inEqSimp_ltRight" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_gtRight" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "20"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "18"))
                              (rule "times_zero_1" (formula "18") (term "1,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0"))
                              (rule "inEqSimp_commuteGeq" (formula "16"))
                              (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
                              (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "17") (term "0,1,0") (inst "intPow_sk=intPow_sk_32") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                              (builtin "One Step Simplification" (formula "17"))
                              (rule "eqSymm" (formula "17") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "18") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                              (rule "mul_literals" (formula "19") (term "1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1"))
                              (rule "polySimp_rightDist" (formula "18") (term "1"))
                              (rule "mul_literals" (formula "18") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                              (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "19"))
                              (rule "times_zero_1" (formula "22") (term "1,0,0"))
                              (rule "add_zero_right" (formula "22") (term "0,0"))
                              (rule "leq_literals" (formula "22") (term "0"))
                              (builtin "One Step Simplification" (formula "22"))
                              (rule "false_right" (formula "22"))
                              (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "13") (term "0"))
                              (builtin "One Step Simplification" (formula "13"))
                              (rule "closeFalse" (formula "13"))
                           )
                        )
                        (branch "CUT: anon_factor >= 0 FALSE"
                           (builtin "One Step Simplification" (formula "6"))
                           (builtin "One Step Simplification" (formula "5"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "5"))
                           (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "eqSymm" (formula "15"))
                           (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "11"))
                           (builtin "One Step Simplification" (formula "17"))
                           (rule "true_left" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "0"))
                           (rule "polySimp_addComm0" (formula "13") (term "2,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "inEqSimp_ltRight" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "18"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtRight" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "17"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0"))
                           (rule "inEqSimp_commuteGeq" (formula "15"))
                           (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                           (rule "inEqSimp_commuteLeq" (formula "15"))
                           (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "18") (term "0") (inst "intPow_sk=intPow_sk_28") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "16") (term "0,1,0") (inst "intPow_sk=intPow_sk_29") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "eqSymm" (formula "16") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "17") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1"))
                           (rule "polySimp_rightDist" (formula "17") (term "1"))
                           (rule "mul_literals" (formula "17") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                           (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "18"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0"))
                           (rule "leq_literals" (formula "22") (term "0"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "false_right" (formula "22"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "18"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                  )
               )
               (branch "Case 2"
                  (rule "jdiv_axiom" (formula "19") (term "1,0,1,0") (userinteraction))
                  (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "8") (userinteraction))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "1") (userinteraction))
                  (rule "div_axiom" (formula "20") (term "1,0,1,0") (inst "quotient=quotient_1") (userinteraction))
                  (rule "cut_direct" (formula "1") (term "0") (userinteraction))
                  (branch "CUT: anon_factor = 0 TRUE"
                     (builtin "One Step Simplification" (formula "8"))
                     (builtin "One Step Simplification" (formula "7"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "6"))
                     (rule "translateJavaAddInt" (formula "12") (term "2,1"))
                     (rule "eqSymm" (formula "14"))
                     (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "10"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "polySimp_elimNeg" (formula "18") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "12") (term "2,1"))
                     (rule "inEqSimp_gtRight" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "14"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0"))
                     (rule "inEqSimp_ltRight" (formula "18"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "14") (term "0"))
                     (rule "inEqSimp_commuteGeq" (formula "13"))
                     (rule "applyEqRigid" (formula "1") (term "1,0,1,0") (ifseqformula "3"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "3"))
                     (rule "add_zero_right" (formula "15") (term "0"))
                     (rule "qeq_literals" (formula "15"))
                     (rule "closeFalse" (formula "15"))
                  )
                  (branch "CUT: anon_factor = 0 FALSE"
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "cut_direct" (formula "1") (term "0,1") (userinteraction))
                     (branch "CUT: anon_factor >= 0 TRUE"
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (builtin "Evaluate Query" (formula "19") (term "1") (newnames "base_4,exp_5,callee,queryResult_3,res_intPow_3"))
                        (rule "notLeft" (formula "1") (userinteraction))
                        (rule "variableDeclaration" (formula "22") (term "1") (newnames "queryResult_3") (userinteraction))
                        (builtin "Use Operation Contract" (formula "22") (newnames "heapBefore_intPow_14,result_6,exc_20") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
                        (branch "Post (intPow)"
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "23"))
                           (rule "assignment" (formula "24") (term "1") (userinteraction))
                           (rule "methodCallEmpty" (formula "24") (term "1,1") (userinteraction))
                           (rule "emptyModality" (formula "24") (term "1,1") (userinteraction))
                           (builtin "One Step Simplification" (formula "24"))
                           (rule "notRight" (formula "24") (userinteraction))
                           (rule "eqSymm" (formula "1") (userinteraction))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_01100021_0" (formula "20") (term "1") (userinteraction))
                           (rule "applyEq" (formula "20") (term "1") (ifseqformula "1") (userinteraction))
                           (rule "applyEq" (formula "20") (term "1") (ifseqformula "24") (userinteraction))
                           (builtin "One Step Simplification" (formula "11"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "true_left" (formula "10"))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_01100021_0" (formula "15") (term "1"))
                           (rule "translateJavaAddInt" (formula "16") (term "2,1"))
                           (rule "eqSymm" (formula "22"))
                           (rule "eqSymm" (formula "1"))
                           (rule "eqSymm" (formula "18"))
                           (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "14"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "polySimp_elimNeg" (formula "25") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "0"))
                           (rule "polySimp_mulComm0" (formula "5") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "25") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "2,1"))
                           (rule "polySimp_addComm1" (formula "5") (term "1"))
                           (rule "inEqSimp_gtRight" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "inEqSimp_ltRight" (formula "25"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "inEqSimp_commuteGeq" (formula "17"))
                           (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "5"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "20"))
                           (rule "eqSymm" (formula "23"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                           (rule "applyEq" (formula "8") (term "1") (ifseqformula "5"))
                           (rule "applyEq" (formula "17") (term "0") (ifseqformula "23"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "20"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "23"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "18") (term "0,1,0") (inst "intPow_sk=intPow_sk_25") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                           (rule "mul_literals" (formula "20") (term "1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "mul_literals" (formula "19") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                           (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "20"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0"))
                           (rule "add_zero_right" (formula "25") (term "0,0"))
                           (rule "leq_literals" (formula "25") (term "0"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "false_right" (formula "25"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "20"))
                           (rule "leq_literals" (formula "4") (term "0"))
                           (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                           (rule "andLeft" (formula "6"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "6") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "6") (term "0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "1,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0"))
                           (rule "add_zero_right" (formula "6") (term "0"))
                           (rule "polySimp_pullOutFactor2b" (formula "6") (term "0"))
                           (rule "add_literals" (formula "6") (term "1,1,0"))
                           (rule "times_zero_1" (formula "6") (term "1,0"))
                           (rule "add_zero_right" (formula "6") (term "0"))
                           (rule "leq_literals" (formula "6"))
                           (rule "closeFalse" (formula "6"))
                        )
                        (branch "Exceptional Post (intPow)"
                           (builtin "One Step Simplification" (formula "22"))
                           (builtin "One Step Simplification" (formula "10"))
                           (builtin "One Step Simplification" (formula "9"))
                           (builtin "One Step Simplification" (formula "22"))
                           (rule "true_left" (formula "9"))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_01100021_0" (formula "17") (term "1"))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_01100021_0" (formula "14") (term "1"))
                           (rule "translateJavaAddInt" (formula "15") (term "2,1"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "20"))
                           (rule "close" (formula "23") (ifseqformula "22"))
                        )
                        (branch "Pre (intPow)"
                           (builtin "One Step Simplification" (formula "10"))
                           (builtin "One Step Simplification" (formula "9"))
                           (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")) (ifInst ""  (formula "6")))
                           (rule "true_left" (formula "9"))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_01100021_0" (formula "17") (term "1"))
                           (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_01100021_0" (formula "14") (term "1"))
                           (rule "translateJavaAddInt" (formula "15") (term "2,1"))
                           (rule "eqSymm" (formula "17"))
                           (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "polySimp_elimNeg" (formula "23") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "2,1"))
                           (rule "polySimp_addComm1" (formula "4") (term "1"))
                           (rule "inEqSimp_gtRight" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "20"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "18"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "inEqSimp_ltRight" (formula "23"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "inEqSimp_commuteGeq" (formula "17"))
                           (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "5"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                           (rule "applyEq" (formula "8") (term "1") (ifseqformula "5"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "18") (term "0,1,0") (inst "intPow_sk=intPow_sk_24") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "19") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                           (rule "mul_literals" (formula "20") (term "1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                           (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "20"))
                           (rule "times_zero_1" (formula "23") (term "1,0,0"))
                           (rule "add_zero_right" (formula "23") (term "0,0"))
                           (rule "leq_literals" (formula "23") (term "0"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "false_right" (formula "23"))
                           (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "closeFalse" (formula "14"))
                        )
                     )
                     (branch "CUT: anon_factor >= 0 FALSE"
                        (builtin "One Step Simplification" (formula "7"))
                        (builtin "One Step Simplification" (formula "6"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "6"))
                        (rule "translateJavaAddInt" (formula "12") (term "2,1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "16"))
                        (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "12"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "polySimp_elimNeg" (formula "22") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "0,1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "2,1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "inEqSimp_geqRight" (formula "18"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_gtRight" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "17"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0"))
                        (rule "add_literals" (formula "17") (term "0,0"))
                        (rule "inEqSimp_ltRight" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0"))
                        (rule "inEqSimp_commuteGeq" (formula "16"))
                        (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "4"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                        (rule "applyEq" (formula "16") (term "0") (ifseqformula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "16"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "4"))
                        (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "19") (term "0") (inst "intPow_sk=intPow_sk_20") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "eqSymm" (formula "19") (term "0,1"))
                        (rule "applyEqRigid" (formula "19") (term "1,0,1") (ifseqformula "20"))
                        (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "17") (term "0,1,0") (inst "intPow_sk=intPow_sk_21") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "eqSymm" (formula "17") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "18") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                        (rule "mul_literals" (formula "19") (term "1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1"))
                        (rule "mul_literals" (formula "18") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                        (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "19"))
                        (rule "times_zero_1" (formula "23") (term "1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "0,0"))
                        (rule "leq_literals" (formula "23") (term "0"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "false_right" (formula "23"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "19"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "jdiv_axiom_inline" (formula "19") (term "1,0,1,0") (userinteraction))
               (rule "replace_known_left" (formula "19") (term "0,1,0,1,0") (ifseqformula "7") (userinteraction))
               (builtin "One Step Simplification" (formula "19"))
               (rule "div_axiom" (formula "19") (term "1,0,1,0") (inst "quotient=quotient_0") (userinteraction))
               (rule "cut_direct" (formula "1") (term "0") (userinteraction))
               (branch "CUT: anon_factor = 0 TRUE"
                  (builtin "One Step Simplification" (formula "7"))
                  (builtin "One Step Simplification" (formula "6"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "5"))
                  (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                  (rule "eqSymm" (formula "13"))
                  (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "polySimp_elimNeg" (formula "17") (term "1,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                  (rule "inEqSimp_gtRight" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "13"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0"))
                  (rule "add_zero_right" (formula "13") (term "0,0"))
                  (rule "inEqSimp_geqRight" (formula "17"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "inEqSimp_commuteGeq" (formula "12"))
                  (rule "applyEq" (formula "1") (term "1,0,1,0") (ifseqformula "3"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "3"))
                  (rule "add_zero_right" (formula "14") (term "0"))
                  (rule "qeq_literals" (formula "14"))
                  (rule "closeFalse" (formula "14"))
               )
               (branch "CUT: anon_factor = 0 FALSE"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "cut_direct" (formula "3") (term "0") (userinteraction))
                  (branch "CUT: anon_factor >= 0 TRUE"
                     (builtin "One Step Simplification" (formula "4"))
                     (builtin "One Step Simplification" (formula "9"))
                     (builtin "One Step Simplification" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "translateJavaAddInt" (formula "14") (term "2,1"))
                     (rule "eqSymm" (formula "16"))
                     (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "polySimp_elimNeg" (formula "21") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "14") (term "2,1"))
                     (rule "polySimp_addComm1" (formula "4") (term "1"))
                     (rule "inEqSimp_gtRight" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "16"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "21"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0"))
                     (rule "inEqSimp_commuteGeq" (formula "15"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "3"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                     (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "18") (term "0") (inst "intPow_sk=intPow_sk_18") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "eqSymm" (formula "18") (term "0,1"))
                     (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                     (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "16") (term "0,1,0") (inst "intPow_sk=intPow_sk_19") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "eqSymm" (formula "16") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                     (rule "mul_literals" (formula "18") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1"))
                     (rule "mul_literals" (formula "17") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                     (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "18"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0"))
                     (rule "leq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "1"))
                     (rule "andLeft" (formula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "4"))
                     (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "1,1,0"))
                     (rule "times_zero_1" (formula "4") (term "1,0"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "leq_literals" (formula "4"))
                     (rule "closeFalse" (formula "4"))
                  )
                  (branch "CUT: anon_factor >= 0 FALSE"
                     (builtin "One Step Simplification" (formula "8"))
                     (builtin "One Step Simplification" (formula "7"))
                     (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "7"))
                     (rule "translateJavaAddInt" (formula "13") (term "2,1"))
                     (rule "eqSymm" (formula "15"))
                     (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "11"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "polySimp_elimNeg" (formula "21") (term "1,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0"))
                     (rule "polySimp_mulComm0" (formula "3") (term "0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "1"))
                     (rule "polySimp_addComm0" (formula "13") (term "2,1"))
                     (rule "inEqSimp_gtRight" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "18"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "16"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "21"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "16"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "16") (term "0"))
                     (rule "inEqSimp_commuteGeq" (formula "15"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "4"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                     (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "18") (term "0") (inst "intPow_sk=intPow_sk_16") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "eqSymm" (formula "18") (term "0,1"))
                     (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                     (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "16") (term "0,1,0") (inst "intPow_sk=intPow_sk_17") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "eqSymm" (formula "16") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                     (rule "mul_literals" (formula "18") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1"))
                     (rule "mul_literals" (formula "17") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                     (rule "inEqSimp_contradEq3" (formula "22") (ifseqformula "2"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0"))
                     (rule "add_zero_right" (formula "22") (term "0,0"))
                     (rule "qeq_literals" (formula "22") (term "0"))
                     (builtin "One Step Simplification" (formula "22"))
                     (rule "false_right" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "18"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
         )
         (branch "Case 2"
            (builtin "One Step Simplification" (formula "5"))
            (builtin "One Step Simplification" (formula "4"))
            (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "4"))
            (rule "translateJavaAddInt" (formula "10") (term "2,1"))
            (rule "notRight" (formula "17"))
            (rule "eqSymm" (formula "13"))
            (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "polySimp_addComm0" (formula "11") (term "2,1"))
            (rule "inEqSimp_gtRight" (formula "16"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "inEqSimp_gtToGeq" (formula "13"))
            (rule "times_zero_1" (formula "13") (term "1,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0"))
            (rule "inEqSimp_commuteGeq" (formula "11"))
            (rule "applyEqRigid" (formula "13") (term "1,0") (ifseqformula "2"))
            (rule "add_zero_right" (formula "13") (term "0"))
            (rule "qeq_literals" (formula "13"))
            (rule "closeFalse" (formula "13"))
         )
      )
      (branch "Precondition"
         (builtin "One Step Simplification" (formula "5"))
         (builtin "One Step Simplification" (formula "4"))
         (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "18"))
      )
      (branch "Usage"
         (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "18"))
         (builtin "One Step Simplification" (formula "28"))
         (rule "ifUnfold" (formula "28") (term "1") (inst "#boolv=x") (userinteraction))
         (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_120") (userinteraction))
         (rule "inequality_comparison_simple" (formula "28") (term "1") (userinteraction))
         (rule "if" (formula "28") (term "1,1") (userinteraction))
         (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "17")))
         (rule "blockEmpty" (formula "28") (term "1") (userinteraction))
         (rule "emptyStatement" (formula "28") (term "1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "28") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "28") (term "1") (newnames "r_35") (userinteraction))
         (rule "compound_multiplication_1" (formula "28") (term "1") (inst "#v=x") (userinteraction))
         (rule "variableDeclarationAssign" (formula "28") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_121") (userinteraction))
         (rule "methodCallWithAssignmentUnfoldArguments" (formula "28") (term "1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "28") (term "1") (userinteraction))
         (rule "variableDeclaration" (formula "28") (term "1") (newnames "var") (userinteraction))
         (rule "assignmentAdditionInt" (formula "28") (term "1") (userinteraction))
         (rule "variableDeclarationAssign" (formula "28") (term "1,1") (userinteraction))
         (rule "variableDeclaration" (formula "28") (term "1,1") (newnames "var_1") (userinteraction))
         (builtin "One Step Simplification" (formula "28"))
         (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_nextExpand_0,result_11,exc_56") (contract "Goodstein[Goodstein::nextExpand(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (nextExpand)"
            (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "9")))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "assignment" (formula "31") (term "1") (userinteraction))
            (builtin "One Step Simplification" (formula "31"))
            (builtin "Use Operation Contract" (formula "31") (newnames "heapBefore_intPow_52,result_13,exc_69") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
            (branch "Post (intPow)"
               (builtin "One Step Simplification" (formula "29"))
               (rule "andLeft" (formula "29"))
               (rule "andLeft" (formula "30"))
               (rule "assignment" (formula "33") (term "1") (userinteraction))
               (builtin "One Step Simplification" (formula "33"))
               (rule "blockEmpty" (formula "33") (term "1") (userinteraction))
               (rule "assignmentMultiplicationInt" (formula "33") (term "1") (userinteraction))
               (rule "compound_addition_2" (formula "33") (term "1,1") (inst "#v1=x_1") (inst "#v0=x") (userinteraction))
               (rule "variableDeclarationAssign" (formula "33") (term "1,1") (userinteraction))
               (rule "variableDeclaration" (formula "33") (term "1,1") (newnames "x_150") (userinteraction))
               (rule "assignment" (formula "33") (term "1,1") (userinteraction))
               (builtin "One Step Simplification" (formula "33"))
               (rule "variableDeclarationAssign" (formula "33") (term "1") (userinteraction))
               (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_151") (userinteraction))
               (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_nextExpand_1,result_14,exc_70") (contract "Goodstein[Goodstein::nextExpand(int,int)].JML normal_behavior operation contract.0"))
               (branch "Post (nextExpand)"
                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "9")))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "32"))
                  (rule "assignment" (formula "36") (term "1") (userinteraction))
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "assignmentAdditionInt" (formula "36") (term "1") (userinteraction))
                  (builtin "One Step Simplification" (formula "36"))
                  (rule "methodCallReturn" (formula "36") (term "1") (userinteraction))
                  (rule "assignment" (formula "36") (term "1") (userinteraction))
                  (rule "methodCallEmpty" (formula "36") (term "1,1") (userinteraction))
                  (rule "tryEmpty" (formula "36") (term "1,1") (userinteraction))
                  (rule "emptyModality" (formula "36") (term "1,1") (userinteraction))
                  (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "9")))
                  (rule "translateJavaAddInt" (formula "36") (term "0,0") (userinteraction))
                  (rule "translateJavaMulInt" (formula "36") (term "0,0,0") (userinteraction))
                  (rule "andLeft" (formula "33") (userinteraction))
                  (rule "andLeft" (formula "28"))
                  (rule "andRight" (formula "38") (userinteraction))
                  (branch "Case 1"
                     (rule "translateJavaAddInt" (formula "31") (term "0,1") (userinteraction))
                     (rule "cut" (inst "cutFormula=geq(result_13, Z(0(#)))") (userinteraction))
                     (branch "CUT: result_13 >= 0 TRUE"
                        (rule "hide_left" (formula "12") (userinteraction))
                        (rule "hide_left" (formula "12") (userinteraction))
                        (rule "hide_left" (formula "22") (userinteraction))
                        (rule "hide_left" (formula "13") (userinteraction))
                        (rule "hide_left" (formula "26") (userinteraction))
                        (rule "hide_left" (formula "31") (userinteraction))
                        (rule "cut" (inst "cutFormula=geq(mul(result_13, anon_a), Z(0(#)))") (userinteraction))
                        (branch "CUT: result_13 * anon_a >= 0 TRUE"
                           (builtin "One Step Simplification" (formula "7"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "eqSymm" (formula "24"))
                           (rule "eqSymm" (formula "26"))
                           (rule "eqSymm" (formula "29"))
                           (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "polySimp_homoEq" (formula "14"))
                           (rule "polySimp_addComm0" (formula "30") (term "0"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_gtRight" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "12"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "18"))
                           (rule "add_zero_right" (formula "18") (term "0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                           (rule "inEqSimp_geqRight" (formula "30"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "polySimp_sepPosMonomial" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                           (rule "mul_literals" (formula "13") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "17"))
                           (rule "leq_literals" (formula "14") (term "0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "3") (term "0,0"))
                           (rule "add_zero_left" (formula "3") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "27") (term "0"))
                           (builtin "One Step Simplification" (formula "27"))
                           (rule "closeFalse" (formula "27"))
                        )
                        (branch "CUT: result_13 * anon_a >= 0 FALSE"
                           (builtin "One Step Simplification" (formula "6"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "eqSymm" (formula "23"))
                           (rule "eqSymm" (formula "28"))
                           (rule "eqSymm" (formula "25"))
                           (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "12"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "polySimp_homoEq" (formula "13"))
                           (rule "polySimp_addComm0" (formula "30") (term "0"))
                           (rule "polySimp_addComm0" (formula "23") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "inEqSimp_gtRight" (formula "29"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "28"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "12"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18"))
                           (rule "add_zero_right" (formula "18") (term "0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "30"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "inEqSimp_commuteLeq" (formula "17"))
                           (rule "polySimp_sepPosMonomial" (formula "16"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                           (rule "mul_literals" (formula "13") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "17"))
                           (rule "leq_literals" (formula "14") (term "0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "3"))
                           (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                           (rule "mul_literals" (formula "18") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "mul_literals" (formula "18") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                           (rule "leq_literals" (formula "9") (term "0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "divide_inEq1" (formula "2") (inst "divY=anon_a") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "leq_literals" (formula "2") (term "0"))
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "closeFalse" (formula "18"))
                        )
                     )
                     (branch "CUT: result_13 >= 0 FALSE"
                        (rule "applyEq" (formula "36") (term "0") (ifseqformula "31") (userinteraction))
                        (rule "cut" (inst "cutFormula=result_11 = Z(0(#))") (userinteraction))
                        (branch "CUT: result_11 = 0 TRUE"
                           (builtin "One Step Simplification" (formula "6"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "translateJavaAddInt" (formula "28") (term "0,1"))
                           (rule "translateJavaAddInt" (formula "34") (term "0,1"))
                           (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "27"))
                           (rule "eqSymm" (formula "33"))
                           (rule "eqSymm" (formula "30"))
                           (rule "eqSymm" (formula "28"))
                           (rule "eqSymm" (formula "34"))
                           (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "polySimp_homoEq" (formula "16"))
                           (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "36") (term "0"))
                           (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0"))
                           (rule "inEqSimp_gtRight" (formula "35"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "20"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "inEqSimp_gtToGeq" (formula "13"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "36"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "13"))
                           (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "30"))
                           (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "16"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "applyEq" (formula "26") (term "0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "4"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "eqSymm" (formula "29"))
                           (rule "applyEq" (formula "26") (term "1") (ifseqformula "4"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "29"))
                           (rule "polySimp_elimOneLeft0" (formula "1") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "29"))
                           (rule "add_literals" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: result_11 = 0 FALSE"
                           (rule "powLeftIncreasing" (inst "exp=exp_11") (inst "base=base_10") (userinteraction))
                           (builtin "One Step Simplification" (formula "6"))
                           (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "translateJavaAddInt" (formula "34") (term "0,1"))
                           (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                           (rule "translateJavaAddInt" (formula "28") (term "0,1"))
                           (rule "eqSymm" (formula "27"))
                           (rule "eqSymm" (formula "30"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "33"))
                           (rule "eqSymm" (formula "34"))
                           (rule "eqSymm" (formula "28"))
                           (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "true_left" (formula "15"))
                           (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "15"))
                           (builtin "One Step Simplification" (formula "23"))
                           (rule "true_left" (formula "23"))
                           (rule "polySimp_homoEq" (formula "16"))
                           (rule "polySimp_addComm0" (formula "34") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "37") (term "0"))
                           (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                           (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "16") (term "0"))
                           (rule "inEqSimp_gtRight" (formula "36"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "22"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "22") (term "0"))
                           (rule "inEqSimp_gtToGeq" (formula "13"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "35"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_geqRight" (formula "37"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "21"))
                           (rule "inEqSimp_commuteGeq" (formula "13"))
                           (rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "30"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "16"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "polySimp_sepPosMonomial" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "0,1"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "16") (term "0") (inst "intPow_sk=intPow_sk_51") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "eqSymm" (formula "16") (term "0,1"))
                           (rule "applyEqRigid" (formula "16") (term "1,0,1") (ifseqformula "17"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0,1,0") (inst "intPow_sk=intPow_sk_60") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "eqSymm" (formula "14") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                           (rule "polySimp_elimOne" (formula "23") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                           (rule "polySimp_elimOne" (formula "24") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                           (rule "polySimp_elimOne" (formula "25") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                           (rule "inEqSimp_strengthen1" (formula "28") (ifseqformula "37"))
                           (rule "add_zero_right" (formula "28") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "37") (ifseqformula "28"))
                           (rule "times_zero_1" (formula "37") (term "1,0,0"))
                           (rule "add_zero_right" (formula "37") (term "0,0"))
                           (rule "leq_literals" (formula "37") (term "0"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "false_right" (formula "37"))
                           (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "22"))
                           (rule "leq_literals" (formula "19") (term "0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "3"))
                           (rule "mul_literals" (formula "10") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "mul_literals" (formula "10") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                           (rule "leq_literals" (formula "9") (term "0"))
                           (builtin "One Step Simplification" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "15"))
                           (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "3"))
                           (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                           (rule "mul_literals" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1"))
                           (rule "mul_literals" (formula "24") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "16"))
                           (rule "mul_literals" (formula "9") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0"))
                           (rule "add_literals" (formula "9") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                           (rule "mul_literals" (formula "9") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "17"))
                           (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                           (rule "mul_literals" (formula "25") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "25") (term "0"))
                           (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                           (rule "add_literals" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1"))
                           (rule "polySimp_rightDist" (formula "25") (term "1"))
                           (rule "mul_literals" (formula "25") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                           (rule "boxToDiamond" (formula "19") (term "1"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "notLeft" (formula "19"))
                           (rule "boxToDiamond" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "notLeft" (formula "16"))
                           (rule "nnf_imp2or" (formula "4") (term "0,0"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
                           (rule "Class_invariant_axiom_for_Goodstein" (formula "12") (inst "sk=sk_9") (ifseqformula "7"))
                           (branch "Use Axiom"
                              (rule "true_left" (formula "12"))
                              (rule "commute_or" (formula "4") (term "0,0,0"))
                              (rule "methodBodyExpand" (formula "38") (term "1") (newnames "heapBefore_intPow_17,savedHeapBefore_intPow_12,x_1Before_intPow_12,x_2Before_intPow_12"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "variableDeclarationAssign" (formula "38") (term "1"))
                              (rule "variableDeclaration" (formula "38") (term "1") (newnames "r_13"))
                              (rule "assignment" (formula "38") (term "1"))
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "methodBodyExpand" (formula "37") (term "1") (newnames "heapBefore_intPow_18,savedHeapBefore_intPow_13,x_1Before_intPow_13,x_2Before_intPow_13"))
                              (builtin "One Step Simplification" (formula "37"))
                              (rule "variableDeclarationAssign" (formula "37") (term "1"))
                              (rule "variableDeclaration" (formula "37") (term "1") (newnames "r_14"))
                              (rule "assignment" (formula "37") (term "1"))
                              (builtin "One Step Simplification" (formula "37"))
                              (builtin "Loop Invariant" (formula "38") (newnames "variant_18,b_20,heapBefore_LOOP_18,x_2Before_LOOP_17,r_13Before_LOOP,x_2_17,r_13_0,heap_After_LOOP_18,anon_heap_LOOP_18,o,f"))
                              (branch "Invariant Initially Valid"
                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "5")))
                                 (rule "translateJavaSubInt" (formula "38") (term "1,1,0,0"))
                                 (rule "eqSymm" (formula "38") (term "0,0"))
                                 (rule "polySimp_elimSub" (formula "38") (term "1,0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "38") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "38") (term "1,0,0,0"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "inEqSimp_homoInEq1" (formula "38") (term "0"))
                                 (rule "polySimp_pullOutFactor1" (formula "38") (term "0,0"))
                                 (rule "add_literals" (formula "38") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "38") (term "0,0"))
                                 (rule "leq_literals" (formula "38") (term "0"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "inEqSimp_geqRight" (formula "38"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "21") (term "0"))
                                 (builtin "One Step Simplification" (formula "21"))
                                 (rule "closeFalse" (formula "21"))
                              )
                              (branch "Body Preserves Invariant"
                                 (builtin "One Step Simplification" (formula "40"))
                                 (builtin "One Step Simplification" (formula "38"))
                                 (rule "translateJavaAddInt" (formula "40") (term "0,1,1,1,0,1"))
                                 (rule "translateJavaAddInt" (formula "40") (term "0,1,1,1,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "40") (term "1,1,0,0,0,0,1,1,0,1,1"))
                                 (rule "translateJavaSubInt" (formula "38") (term "1,1,0,0"))
                                 (rule "impRight" (formula "40"))
                                 (rule "andLeft" (formula "39"))
                                 (rule "andLeft" (formula "39"))
                                 (rule "eqSymm" (formula "43") (term "0,0,1,0,1,1,0,1"))
                                 (rule "eqSymm" (formula "43") (term "0,0,0,0,1,1,0,1"))
                                 (rule "eqSymm" (formula "39"))
                                 (rule "polySimp_elimSub" (formula "43") (term "1,0,0,0,0,0,1,1,0,1"))
                                 (rule "polySimp_elimSub" (formula "39") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "43") (term "0,1,1,1,0,1"))
                                 (rule "polySimp_addComm0" (formula "43") (term "0,1,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "43") (term "1,0,0,0,0,0,1,1,0,1"))
                                 (rule "inEqSimp_commuteGeq" (formula "40"))
                                 (rule "variableDeclarationAssign" (formula "1") (term "1"))
                                 (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                 (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_20_2"))
                                 (rule "variableDeclaration" (formula "43") (term "1") (newnames "exc_25"))
                                 (rule "assignment" (formula "43") (term "1"))
                                 (builtin "One Step Simplification" (formula "43"))
                                 (rule "variableDeclaration" (formula "43") (term "1") (newnames "thrownExc_18"))
                                 (rule "blockThrow" (formula "43") (term "1,0,0,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "40"))
                                 (rule "times_zero_1" (formula "41") (term "0,0"))
                                 (rule "add_zero_left" (formula "41") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "21"))
                                 (rule "leq_literals" (formula "41") (term "0"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "true_left" (formula "41"))
                                 (rule "boxToDiamond" (formula "1") (term "1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "inequality_comparison_simple" (formula "41") (term "1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "methodCallEmpty" (formula "41") (term "1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "emptyModality" (formula "41") (term "1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "inEqSimp_strengthen1" (formula "40") (ifseqformula "41"))
                                 (rule "add_zero_right" (formula "40") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "40"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0"))
                                 (rule "leq_literals" (formula "41") (term "0"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "false_right" (formula "41"))
                                 (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "39"))
                                 (rule "mul_literals" (formula "40") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                                 (rule "mul_literals" (formula "40") (term "1"))
                                 (builtin "Loop Invariant" (formula "41") (newnames "variant_20,b_22,heapBefore_LOOP_20,x_2Before_LOOP_19,r_14Before_LOOP_0,x_2_19,r_14_1,heap_After_LOOP_20,anon_heap_LOOP_20,o,f"))
                                 (branch "Invariant Initially Valid"
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "5")))
                                    (rule "translateJavaSubInt" (formula "41") (term "1,1,0,0"))
                                    (rule "eqSymm" (formula "41") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "41") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "41") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "41") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "inEqSimp_homoInEq1" (formula "41") (term "0"))
                                    (rule "polySimp_pullOutFactor1" (formula "41") (term "0,0"))
                                    (rule "add_literals" (formula "41") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "0,0"))
                                    (rule "leq_literals" (formula "41") (term "0"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "inEqSimp_geqRight" (formula "41"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "21"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Body Preserves Invariant"
                                    (builtin "One Step Simplification" (formula "42"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "translateJavaSubInt" (formula "42") (term "1,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "43") (term "1,1,0,0,0,0,1,1,0,1,1"))
                                    (rule "translateJavaAddInt" (formula "43") (term "0,1,1,1,0,1,1"))
                                    (rule "translateJavaAddInt" (formula "43") (term "0,1,1,1,0,1"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "impRight" (formula "44"))
                                    (rule "andLeft" (formula "43"))
                                    (rule "eqSymm" (formula "46") (term "0,0,1,0,1,1,0,1"))
                                    (rule "eqSymm" (formula "46") (term "0,0,0,0,1,1,0,1"))
                                    (rule "eqSymm" (formula "43"))
                                    (rule "polySimp_elimSub" (formula "46") (term "1,0,0,0,0,0,1,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "43") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "0,1,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "0,1,1,1,0,1"))
                                    (rule "polySimp_addComm0" (formula "46") (term "1,0,0,0,0,0,1,1,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "44"))
                                    (rule "variableDeclarationAssign" (formula "1") (term "1"))
                                    (rule "variableDeclarationAssign" (formula "46") (term "1"))
                                    (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_22_2"))
                                    (rule "variableDeclaration" (formula "46") (term "1") (newnames "exc_26"))
                                    (rule "assignment" (formula "46") (term "1"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "variableDeclaration" (formula "46") (term "1") (newnames "thrownExc_19"))
                                    (rule "blockThrow" (formula "46") (term "1,0,0,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "44"))
                                    (rule "times_zero_1" (formula "45") (term "0,0"))
                                    (rule "add_zero_left" (formula "45") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                    (rule "mul_literals" (formula "45") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "45") (term "0"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "boxToDiamond" (formula "1") (term "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inequality_comparison_simple" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "methodCallEmpty" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "emptyModality" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_strengthen1" (formula "44") (ifseqformula "45"))
                                    (rule "add_zero_right" (formula "44") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "45") (ifseqformula "44"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0"))
                                    (rule "leq_literals" (formula "45") (term "0"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "false_right" (formula "45"))
                                    (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "43"))
                                    (rule "mul_literals" (formula "44") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "44") (term "0"))
                                    (rule "add_literals" (formula "44") (term "0,0"))
                                    (rule "add_zero_left" (formula "44") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "44") (term "0"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "ifUnfold" (formula "46") (term "1") (inst "#boolv=x_3"))
                                    (rule "variableDeclaration" (formula "46") (term "1") (newnames "x_56"))
                                    (rule "inequality_comparison_simple" (formula "46") (term "1"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "inEqSimp_contradEq7" (formula "46") (term "0,0,1,0") (ifseqformula "40"))
                                    (rule "times_zero_1" (formula "46") (term "1,0,0,0,0,1,0"))
                                    (rule "add_zero_right" (formula "46") (term "0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "46") (term "0,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "ifUnfold" (formula "45") (term "1") (inst "#boolv=x_3"))
                                    (rule "variableDeclaration" (formula "45") (term "1") (newnames "x_57"))
                                    (rule "inequality_comparison_simple" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_contradEq7" (formula "45") (term "0,0,1,0") (ifseqformula "44"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,1,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "45") (term "0,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "allLeft" (formula "4") (inst "t=result_11"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (term "1,0,0") (ifseqformula "29"))
                                    (rule "qeq_literals" (formula "4") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "allLeft" (formula "5") (inst "t=anon_exp"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0,0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "5"))
                                    (rule "ifSplit" (formula "48"))
                                    (branch "if x_56 true"
                                       (builtin "One Step Simplification" (formula "49"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignmentMultiplicationInt" (formula "48") (term "1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "translateJavaMulInt" (formula "48") (term "0,1,0"))
                                       (rule "postdecrement" (formula "48") (term "1"))
                                       (rule "compound_subtraction_1" (formula "48") (term "1") (inst "#v=x_3"))
                                       (rule "variableDeclarationAssign" (formula "48") (term "1"))
                                       (rule "variableDeclaration" (formula "48") (term "1") (newnames "x_58"))
                                       (rule "widening_identity_cast_5" (formula "48") (term "1"))
                                       (rule "assignment" (formula "48") (term "1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "assignmentSubtractionInt" (formula "48") (term "1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "translateJavaSubInt" (formula "48") (term "0,1,0"))
                                       (rule "polySimp_elimSub" (formula "48") (term "0,1,0"))
                                       (rule "mul_literals" (formula "48") (term "1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "48") (term "0,1,0"))
                                       (rule "tryEmpty" (formula "48") (term "1"))
                                       (rule "methodCallEmpty" (formula "48") (term "1"))
                                       (rule "emptyModality" (formula "48") (term "1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "eqSymm" (formula "48") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "48") (term "0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "48") (term "0,0,1,1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "48") (term "1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "48") (term "0,1"))
                                       (rule "add_literals" (formula "48") (term "0,0,1"))
                                       (rule "add_zero_left" (formula "48") (term "0,1"))
                                       (rule "precOfInt" (formula "48") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "48") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,1"))
                                       (rule "mul_literals" (formula "48") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,1"))
                                       (rule "add_literals" (formula "48") (term "0,0,0,1,1"))
                                       (rule "add_zero_left" (formula "48") (term "0,0,1,1"))
                                       (rule "polySimp_pullOutFactor2" (formula "48") (term "0,1,1"))
                                       (rule "add_literals" (formula "48") (term "1,0,1,1"))
                                       (rule "times_zero_1" (formula "48") (term "0,1,1"))
                                       (rule "leq_literals" (formula "48") (term "1,1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "inEqSimp_commuteLeq" (formula "48") (term "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "48") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "48") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0"))
                                       (rule "mul_literals" (formula "48") (term "1,1,0"))
                                       (rule "replace_known_left" (formula "48") (term "1,0") (ifseqformula "42"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "48") (term "1,1,0"))
                                       (rule "mul_literals" (formula "48") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0"))
                                       (rule "inEqSimp_subsumption1" (formula "48") (term "1") (ifseqformula "42"))
                                       (rule "leq_literals" (formula "48") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "inEqSimp_subsumption0" (formula "48") (term "1") (ifseqformula "41"))
                                       (rule "inEqSimp_homoInEq0" (formula "48") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
                                       (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "48") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "48") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "ifSplit" (formula "47"))
                                       (branch "if x_57 true"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "assignmentMultiplicationInt" (formula "47") (term "1"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "translateJavaMulInt" (formula "47") (term "0,1,0"))
                                          (rule "postdecrement" (formula "47") (term "1"))
                                          (rule "compound_subtraction_1" (formula "47") (term "1") (inst "#v=x_3"))
                                          (rule "variableDeclarationAssign" (formula "47") (term "1"))
                                          (rule "variableDeclaration" (formula "47") (term "1") (newnames "x_59"))
                                          (rule "widening_identity_cast_5" (formula "47") (term "1"))
                                          (rule "assignment" (formula "47") (term "1"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "assignmentSubtractionInt" (formula "47") (term "1"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "translateJavaSubInt" (formula "47") (term "0,1,0"))
                                          (rule "polySimp_elimSub" (formula "47") (term "0,1,0"))
                                          (rule "mul_literals" (formula "47") (term "1,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "47") (term "0,1,0"))
                                          (rule "tryEmpty" (formula "47") (term "1"))
                                          (rule "methodCallEmpty" (formula "47") (term "1"))
                                          (rule "emptyModality" (formula "47") (term "1"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "eqSymm" (formula "47") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "47") (term "0,1,1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "47") (term "0,1,1,0,0,0"))
                                          (rule "mul_literals" (formula "47") (term "0,0,1,1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "47") (term "1,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "47") (term "0,1"))
                                          (rule "add_literals" (formula "47") (term "0,0,1"))
                                          (rule "add_zero_left" (formula "47") (term "0,1"))
                                          (rule "polySimp_addAssoc" (formula "47") (term "0,1,1,0,0,0"))
                                          (rule "add_literals" (formula "47") (term "0,0,1,1,0,0,0"))
                                          (rule "precOfInt" (formula "47") (term "1"))
                                          (rule "inEqSimp_ltToLeq" (formula "47") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,1"))
                                          (rule "mul_literals" (formula "47") (term "0,1,0,0,1,1"))
                                          (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,1"))
                                          (rule "add_literals" (formula "47") (term "0,0,0,1,1"))
                                          (rule "add_zero_left" (formula "47") (term "0,0,1,1"))
                                          (rule "polySimp_pullOutFactor2" (formula "47") (term "0,1,1"))
                                          (rule "add_literals" (formula "47") (term "1,0,1,1"))
                                          (rule "times_zero_1" (formula "47") (term "0,1,1"))
                                          (rule "leq_literals" (formula "47") (term "1,1"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "inEqSimp_commuteLeq" (formula "47") (term "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "47") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "47") (term "1,0,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "47") (term "1,0,1,0,0"))
                                          (rule "mul_literals" (formula "47") (term "0,1,0,1,0,0"))
                                          (rule "polySimp_addComm1" (formula "47") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0"))
                                          (rule "mul_literals" (formula "47") (term "1,1,0"))
                                          (rule "replace_known_left" (formula "47") (term "1,0") (ifseqformula "46"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0"))
                                          (rule "polySimp_mulComm0" (formula "47") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "47") (term "1,1,0"))
                                          (rule "mul_literals" (formula "47") (term "0,1,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0"))
                                          (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0"))
                                          (rule "inEqSimp_subsumption1" (formula "47") (term "1") (ifseqformula "46"))
                                          (rule "leq_literals" (formula "47") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "inEqSimp_subsumption0" (formula "47") (term "1") (ifseqformula "45"))
                                          (rule "inEqSimp_homoInEq0" (formula "47") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "47") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "47") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "47") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "47") (term "0,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,1"))
                                          (rule "add_literals" (formula "47") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "47") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "47") (term "0,0,1"))
                                          (rule "qeq_literals" (formula "47") (term "0,1"))
                                          (builtin "One Step Simplification" (formula "47"))
                                          (rule "allLeft" (formula "5") (inst "t=oldBase"))
                                          (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "14"))
                                          (rule "qeq_literals" (formula "5") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "5"))
                                          (rule "allLeft" (formula "4") (inst "t=add(Z(1(#)), oldBase)"))
                                          (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                          (rule "add_literals" (formula "4") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "4") (term "0,0"))
                                          (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "36"))
                                          (rule "inEqSimp_invertInEq1" (formula "4") (term "0"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
                                          (rule "times_zero_2" (formula "4") (term "1,0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "15"))
                                          (rule "qeq_literals" (formula "4") (term "0,0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                          (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                          (rule "mul_literals" (formula "4") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "4") (term "0"))
                                          (rule "add_literals" (formula "4") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                          (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                          (rule "polySimp_elimOne" (formula "4") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "16"))
                                          (rule "qeq_literals" (formula "4") (term "0"))
                                          (builtin "One Step Simplification" (formula "4"))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                       (branch "if x_57 false"
                                          (builtin "One Step Simplification" (formula "48"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "if x_56 false"
                                       (builtin "One Step Simplification" (formula "49"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Use Case"
                                    (builtin "One Step Simplification" (formula "43"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "translateJavaSubInt" (formula "42") (term "1,1,0,0"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "eqSymm" (formula "42"))
                                    (rule "polySimp_elimSub" (formula "42") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "43"))
                                    (rule "variableDeclarationAssign" (formula "45") (term "1"))
                                    (rule "variableDeclaration" (formula "45") (term "1") (newnames "b_22_1"))
                                    (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "43"))
                                    (rule "times_zero_1" (formula "44") (term "0,0"))
                                    (rule "add_zero_left" (formula "44") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                                    (rule "mul_literals" (formula "44") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "20"))
                                    (rule "leq_literals" (formula "44") (term "0"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "inequality_comparison_simple" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "methodCallEmpty" (formula "45") (term "1"))
                                    (rule "emptyModality" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "impRight" (formula "45"))
                                    (rule "applyEq" (formula "43") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "times_zero_2" (formula "43") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "43") (term "1,0"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "44"))
                                    (rule "times_zero_2" (formula "44") (term "1,0"))
                                    (rule "add_zero_right" (formula "44") (term "0"))
                                    (rule "applyEqRigid" (formula "45") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                                    (rule "mul_literals" (formula "44") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "21"))
                                    (rule "leq_literals" (formula "44") (term "0"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "methodCallReturn" (formula "44") (term "1"))
                                    (rule "assignment" (formula "44") (term "1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "methodCallEmpty" (formula "44") (term "1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "emptyModality" (formula "44") (term "1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "notRight" (formula "44"))
                                    (rule "applyEq" (formula "44") (term "1") (ifseqformula "1"))
                                    (rule "ifUnfold" (formula "45") (term "1") (inst "#boolv=x_3"))
                                    (rule "variableDeclaration" (formula "45") (term "1") (newnames "x_54"))
                                    (rule "inequality_comparison_simple" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_contradEq7" (formula "45") (term "0,0,1,0") (ifseqformula "42"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,1,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "45") (term "0,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "allLeft" (formula "6") (inst "t=add(Z(1(#)), anon_exp)"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                                    (rule "mul_literals" (formula "6") (term "1,1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0,0") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "allLeft" (formula "7") (inst "t=result_11"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0") (ifseqformula "32"))
                                    (rule "qeq_literals" (formula "7") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "allLeft" (formula "8") (inst "t=anon_exp"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0,0") (ifseqformula "25"))
                                    (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "ifSplit" (formula "48"))
                                    (branch "if x_54 true"
                                       (builtin "One Step Simplification" (formula "49"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignmentMultiplicationInt" (formula "48") (term "1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "translateJavaMulInt" (formula "48") (term "0,1,0"))
                                       (rule "postdecrement" (formula "48") (term "1"))
                                       (rule "compound_subtraction_1" (formula "48") (term "1") (inst "#v=x_3"))
                                       (rule "variableDeclarationAssign" (formula "48") (term "1"))
                                       (rule "variableDeclaration" (formula "48") (term "1") (newnames "x_55"))
                                       (rule "widening_identity_cast_5" (formula "48") (term "1"))
                                       (rule "assignment" (formula "48") (term "1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "assignmentSubtractionInt" (formula "48") (term "1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "translateJavaSubInt" (formula "48") (term "0,1,0"))
                                       (rule "polySimp_elimSub" (formula "48") (term "0,1,0"))
                                       (rule "mul_literals" (formula "48") (term "1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "48") (term "0,1,0"))
                                       (rule "tryEmpty" (formula "48") (term "1"))
                                       (rule "methodCallEmpty" (formula "48") (term "1"))
                                       (rule "emptyModality" (formula "48") (term "1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "eqSymm" (formula "48") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "48") (term "0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "48") (term "0,0,1,1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "48") (term "1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "48") (term "0,1"))
                                       (rule "add_literals" (formula "48") (term "0,0,1"))
                                       (rule "add_zero_left" (formula "48") (term "0,1"))
                                       (rule "precOfInt" (formula "48") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "48") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,1"))
                                       (rule "mul_literals" (formula "48") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,1"))
                                       (rule "add_literals" (formula "48") (term "0,0,0,1,1"))
                                       (rule "add_zero_left" (formula "48") (term "0,0,1,1"))
                                       (rule "polySimp_pullOutFactor2" (formula "48") (term "0,1,1"))
                                       (rule "add_literals" (formula "48") (term "1,0,1,1"))
                                       (rule "times_zero_1" (formula "48") (term "0,1,1"))
                                       (rule "leq_literals" (formula "48") (term "1,1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "inEqSimp_commuteLeq" (formula "48") (term "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "48") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "48") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0"))
                                       (rule "mul_literals" (formula "48") (term "1,1,0"))
                                       (rule "replace_known_left" (formula "48") (term "1,0") (ifseqformula "45"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "48") (term "1,1,0"))
                                       (rule "mul_literals" (formula "48") (term "0,1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0"))
                                       (rule "inEqSimp_subsumption1" (formula "48") (term "1") (ifseqformula "45"))
                                       (rule "leq_literals" (formula "48") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "inEqSimp_subsumption0" (formula "48") (term "1") (ifseqformula "44"))
                                       (rule "inEqSimp_homoInEq0" (formula "48") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "48") (term "0,0,1"))
                                       (rule "add_literals" (formula "48") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "48") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "48") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "48") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "48"))
                                       (rule "allLeft" (formula "8") (inst "t=oldBase"))
                                       (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "8") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "allLeft" (formula "10") (inst "t=add(add(Z(1(#)), anon_exp),
    mul(x_2_17, Z(neglit(1(#)))))"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "10") (term "1,0,0") (ifseqformula "46"))
                                       (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "10") (term "1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                                       (rule "leq_literals" (formula "10") (term "0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "10"))
                                       (rule "allLeft" (formula "7") (inst "t=add(Z(1(#)), oldBase)"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                                       (rule "add_literals" (formula "7") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "7") (term "0,0"))
                                       (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "40"))
                                       (rule "inEqSimp_invertInEq1" (formula "7") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                                       (rule "times_zero_2" (formula "7") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "19"))
                                       (rule "qeq_literals" (formula "7") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                                       (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "7") (term "0"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "20"))
                                       (rule "qeq_literals" (formula "7") (term "0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "closeFalse" (formula "7"))
                                    )
                                    (branch "if x_54 false"
                                       (builtin "One Step Simplification" (formula "49"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch "Use Case"
                                 (builtin "One Step Simplification" (formula "38"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "translateJavaSubInt" (formula "38") (term "1,1,0,0"))
                                 (rule "andLeft" (formula "38"))
                                 (rule "andLeft" (formula "38"))
                                 (rule "eqSymm" (formula "38"))
                                 (rule "polySimp_elimSub" (formula "38") (term "1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "39"))
                                 (rule "variableDeclarationAssign" (formula "42") (term "1"))
                                 (rule "variableDeclaration" (formula "42") (term "1") (newnames "b_20_1"))
                                 (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "39"))
                                 (rule "times_zero_1" (formula "40") (term "0,0"))
                                 (rule "add_zero_left" (formula "40") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "20"))
                                 (rule "leq_literals" (formula "40") (term "0"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "inequality_comparison_simple" (formula "42") (term "1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "methodCallEmpty" (formula "42") (term "1"))
                                 (rule "emptyModality" (formula "42") (term "1"))
                                 (builtin "One Step Simplification" (formula "42"))
                                 (rule "impRight" (formula "42"))
                                 (rule "applyEq" (formula "39") (term "0,1,1,0") (ifseqformula "1"))
                                 (rule "times_zero_2" (formula "39") (term "1,1,0"))
                                 (rule "add_zero_right" (formula "39") (term "1,0"))
                                 (rule "applyEq" (formula "40") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_commuteLeq" (formula "40"))
                                 (rule "applyEq" (formula "41") (term "0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "41"))
                                 (rule "true_left" (formula "41"))
                                 (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "39"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "39"))
                                 (rule "inEqSimp_subsumption1" (formula "40") (ifseqformula "21"))
                                 (rule "leq_literals" (formula "40") (term "0"))
                                 (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "methodCallReturn" (formula "41") (term "1"))
                                 (rule "assignment" (formula "41") (term "1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "methodCallEmpty" (formula "41") (term "1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "emptyModality" (formula "41") (term "1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "notRight" (formula "41"))
                                 (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "40") (term "1") (ifseqformula "1"))
                                 (builtin "Loop Invariant" (formula "41") (newnames "variant_19,b_21,heapBefore_LOOP_19,x_2Before_LOOP_18,r_14Before_LOOP,x_2_18,r_14_0,heap_After_LOOP_19,anon_heap_LOOP_19,o,f"))
                                 (branch "Invariant Initially Valid"
                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "7")))
                                    (rule "translateJavaSubInt" (formula "41") (term "1,1,0,0"))
                                    (rule "eqSymm" (formula "41") (term "0,0"))
                                    (rule "polySimp_elimSub" (formula "41") (term "1,0,0,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "41") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "41") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "1,0,0,0"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "inEqSimp_homoInEq1" (formula "41") (term "0"))
                                    (rule "polySimp_pullOutFactor1" (formula "41") (term "0,0"))
                                    (rule "add_literals" (formula "41") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "0,0"))
                                    (rule "leq_literals" (formula "41") (term "0"))
                                    (builtin "One Step Simplification" (formula "41"))
                                    (rule "inEqSimp_geqRight" (formula "41"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "23") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "closeFalse" (formula "23"))
                                 )
                                 (branch "Body Preserves Invariant"
                                    (builtin "One Step Simplification" (formula "42"))
                                    (builtin "One Step Simplification" (formula "43"))
                                    (rule "translateJavaSubInt" (formula "42") (term "1,1,0,0"))
                                    (rule "translateJavaSubInt" (formula "43") (term "1,1,0,0,0,0,1,1,0,1,1"))
                                    (rule "translateJavaAddInt" (formula "43") (term "0,1,1,1,0,1,1"))
                                    (rule "translateJavaAddInt" (formula "43") (term "0,1,1,1,0,1"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "impRight" (formula "44"))
                                    (rule "andLeft" (formula "43"))
                                    (rule "eqSymm" (formula "46") (term "0,0,1,0,1,1,0,1"))
                                    (rule "eqSymm" (formula "46") (term "0,0,0,0,1,1,0,1"))
                                    (rule "eqSymm" (formula "43"))
                                    (rule "polySimp_elimSub" (formula "46") (term "1,0,0,0,0,0,1,1,0,1"))
                                    (rule "polySimp_elimSub" (formula "43") (term "1,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "0,1,1,1,0,1"))
                                    (rule "polySimp_addComm0" (formula "46") (term "0,1,1,1,0"))
                                    (rule "polySimp_addComm0" (formula "46") (term "1,0,0,0,0,0,1,1,0,1"))
                                    (rule "inEqSimp_commuteGeq" (formula "44"))
                                    (rule "variableDeclarationAssign" (formula "1") (term "1"))
                                    (rule "variableDeclarationAssign" (formula "46") (term "1"))
                                    (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_21_2"))
                                    (rule "variableDeclaration" (formula "46") (term "1") (newnames "exc_24"))
                                    (rule "assignment" (formula "46") (term "1"))
                                    (builtin "One Step Simplification" (formula "46"))
                                    (rule "variableDeclaration" (formula "46") (term "1") (newnames "thrownExc_17"))
                                    (rule "blockThrow" (formula "46") (term "1,0,0,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "45") (ifseqformula "44"))
                                    (rule "times_zero_1" (formula "45") (term "0,0"))
                                    (rule "add_zero_left" (formula "45") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                    (rule "mul_literals" (formula "45") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "45") (term "0"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "boxToDiamond" (formula "1") (term "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inequality_comparison_simple" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "methodCallEmpty" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "emptyModality" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_strengthen1" (formula "44") (ifseqformula "45"))
                                    (rule "add_zero_right" (formula "44") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "45") (ifseqformula "44"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0"))
                                    (rule "add_literals" (formula "45") (term "0,0"))
                                    (rule "leq_literals" (formula "45") (term "0"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "false_right" (formula "45"))
                                    (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "43"))
                                    (rule "mul_literals" (formula "44") (term "0,0"))
                                    (rule "polySimp_addAssoc" (formula "44") (term "0"))
                                    (rule "add_literals" (formula "44") (term "0,0"))
                                    (rule "add_zero_left" (formula "44") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "22"))
                                    (rule "leq_literals" (formula "44") (term "0"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "ifUnfold" (formula "45") (term "1") (inst "#boolv=x_3"))
                                    (rule "variableDeclaration" (formula "45") (term "1") (newnames "x_52"))
                                    (rule "inequality_comparison_simple" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_contradEq7" (formula "45") (term "0,0,1,0") (ifseqformula "44"))
                                    (rule "times_zero_1" (formula "45") (term "1,0,0,0,0,1,0"))
                                    (rule "add_zero_right" (formula "45") (term "0,0,0,0,1,0"))
                                    (rule "leq_literals" (formula "45") (term "0,0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "allLeft" (formula "6") (inst "t=anon_exp"))
                                    (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0,0") (ifseqformula "23"))
                                    (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (rule "allLeft" (formula "7") (inst "t=result_11"))
                                    (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0") (ifseqformula "32"))
                                    (rule "qeq_literals" (formula "7") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "ifSplit" (formula "47"))
                                    (branch "if x_52 true"
                                       (builtin "One Step Simplification" (formula "48"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignmentMultiplicationInt" (formula "47") (term "1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "translateJavaMulInt" (formula "47") (term "0,1,0"))
                                       (rule "postdecrement" (formula "47") (term "1"))
                                       (rule "compound_subtraction_1" (formula "47") (term "1") (inst "#v=x_3"))
                                       (rule "variableDeclarationAssign" (formula "47") (term "1"))
                                       (rule "variableDeclaration" (formula "47") (term "1") (newnames "x_53"))
                                       (rule "widening_identity_cast_5" (formula "47") (term "1"))
                                       (rule "assignment" (formula "47") (term "1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "assignmentSubtractionInt" (formula "47") (term "1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "translateJavaSubInt" (formula "47") (term "0,1,0"))
                                       (rule "polySimp_elimSub" (formula "47") (term "0,1,0"))
                                       (rule "mul_literals" (formula "47") (term "1,0,1,0"))
                                       (rule "polySimp_addComm0" (formula "47") (term "0,1,0"))
                                       (rule "tryEmpty" (formula "47") (term "1"))
                                       (rule "methodCallEmpty" (formula "47") (term "1"))
                                       (rule "emptyModality" (formula "47") (term "1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "eqSymm" (formula "47") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "47") (term "0,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "47") (term "0,0,1,1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "47") (term "1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "47") (term "0,1"))
                                       (rule "add_literals" (formula "47") (term "0,0,1"))
                                       (rule "add_zero_left" (formula "47") (term "0,1"))
                                       (rule "polySimp_addAssoc" (formula "47") (term "0,1,1,0,0,0"))
                                       (rule "add_literals" (formula "47") (term "0,0,1,1,0,0,0"))
                                       (rule "precOfInt" (formula "47") (term "1"))
                                       (rule "inEqSimp_ltToLeq" (formula "47") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,1"))
                                       (rule "mul_literals" (formula "47") (term "0,1,0,0,1,1"))
                                       (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,1"))
                                       (rule "add_literals" (formula "47") (term "0,0,0,1,1"))
                                       (rule "add_zero_left" (formula "47") (term "0,0,1,1"))
                                       (rule "polySimp_pullOutFactor2" (formula "47") (term "0,1,1"))
                                       (rule "add_literals" (formula "47") (term "1,0,1,1"))
                                       (rule "times_zero_1" (formula "47") (term "0,1,1"))
                                       (rule "leq_literals" (formula "47") (term "1,1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_commuteLeq" (formula "47") (term "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "47") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "47") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "47") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "47") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0"))
                                       (rule "mul_literals" (formula "47") (term "1,1,0"))
                                       (rule "replace_known_left" (formula "47") (term "1,0") (ifseqformula "46"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0"))
                                       (rule "mul_literals" (formula "47") (term "0,1,1,0"))
                                       (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0"))
                                       (rule "inEqSimp_subsumption1" (formula "47") (term "1") (ifseqformula "46"))
                                       (rule "leq_literals" (formula "47") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "inEqSimp_subsumption0" (formula "47") (term "1") (ifseqformula "45"))
                                       (rule "inEqSimp_homoInEq0" (formula "47") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "47") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "47") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "47") (term "0,0,0,1"))
                                       (rule "add_literals" (formula "47") (term "0,0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,1"))
                                       (rule "add_literals" (formula "47") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "47") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "47") (term "0,0,1"))
                                       (rule "qeq_literals" (formula "47") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "47"))
                                       (rule "allLeft" (formula "8") (inst "t=add(add(Z(2(#)), anon_exp),
    mul(x_2_18, Z(neglit(1(#)))))"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "8") (term "0,1,0,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "8") (term "1,0,0") (ifseqformula "46"))
                                       (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "8") (term "0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "8") (term "0,0,0,0,1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "8") (term "1,1,0,0,1,0,0"))
                                       (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                                       (rule "leq_literals" (formula "8") (term "0,1,0,0"))
                                       (builtin "One Step Simplification" (formula "8"))
                                       (rule "allLeft" (formula "7") (inst "t=add(Z(1(#)), oldBase)"))
                                       (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "7") (term "1,0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                                       (rule "add_literals" (formula "7") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "7") (term "0,0"))
                                       (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "38"))
                                       (rule "inEqSimp_invertInEq1" (formula "7") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "0,0"))
                                       (rule "times_zero_2" (formula "7") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "7") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
                                       (rule "polySimp_rightDist" (formula "7") (term "0,0"))
                                       (rule "mul_literals" (formula "7") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "7") (term "0"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "7"))
                                       (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                                       (rule "polySimp_elimOne" (formula "7") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "18"))
                                       (rule "qeq_literals" (formula "7") (term "0"))
                                       (builtin "One Step Simplification" (formula "7"))
                                       (rule "closeFalse" (formula "7"))
                                    )
                                    (branch "if x_52 false"
                                       (builtin "One Step Simplification" (formula "48"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Use Case"
                                    (builtin "One Step Simplification" (formula "43"))
                                    (builtin "One Step Simplification" (formula "42"))
                                    (rule "translateJavaSubInt" (formula "42") (term "1,1,0,0"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "andLeft" (formula "42"))
                                    (rule "eqSymm" (formula "42"))
                                    (rule "polySimp_elimSub" (formula "42") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "43"))
                                    (rule "variableDeclarationAssign" (formula "45") (term "1"))
                                    (rule "variableDeclaration" (formula "45") (term "1") (newnames "b_21_1"))
                                    (rule "inEqSimp_exactShadow3" (formula "44") (ifseqformula "43"))
                                    (rule "times_zero_1" (formula "44") (term "0,0"))
                                    (rule "add_zero_left" (formula "44") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                                    (rule "mul_literals" (formula "44") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "22"))
                                    (rule "leq_literals" (formula "44") (term "0"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "inequality_comparison_simple" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "methodCallEmpty" (formula "45") (term "1"))
                                    (rule "emptyModality" (formula "45") (term "1"))
                                    (builtin "One Step Simplification" (formula "45"))
                                    (rule "impRight" (formula "45"))
                                    (rule "applyEqRigid" (formula "43") (term "0,1,1,0") (ifseqformula "1"))
                                    (rule "times_zero_2" (formula "43") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "43") (term "1,0"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "45"))
                                    (rule "true_left" (formula "45"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq0" (formula "44"))
                                    (rule "times_zero_2" (formula "44") (term "1,0"))
                                    (rule "add_zero_right" (formula "44") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                                    (rule "mul_literals" (formula "44") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "44") (term "0"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "true_left" (formula "44"))
                                    (rule "methodCallReturn" (formula "44") (term "1"))
                                    (rule "assignment" (formula "44") (term "1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "methodCallEmpty" (formula "44") (term "1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "emptyModality" (formula "44") (term "1"))
                                    (builtin "One Step Simplification" (formula "44"))
                                    (rule "notRight" (formula "44"))
                                    (rule "applyEq" (formula "44") (term "1") (ifseqformula "1"))
                                    (rule "allLeft" (formula "8") (inst "t=anon_exp"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "1,0,0") (ifseqformula "25"))
                                    (rule "qeq_literals" (formula "8") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "allLeft" (formula "9") (inst "t=add(Z(1(#)), anon_exp)"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                    (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "9") (term "1,0,0") (ifseqformula "26"))
                                    (rule "qeq_literals" (formula "9") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "9"))
                                    (rule "allLeft" (formula "10") (inst "t=result_11"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0,0") (ifseqformula "35"))
                                    (rule "qeq_literals" (formula "10") (term "0,1,0,0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "allLeft" (formula "8") (inst "t=oldBase"))
                                    (rule "applyEq" (formula "8") (term "0,1") (ifseqformula "46"))
                                    (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "8") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "8"))
                                    (rule "mul_literals" (formula "19") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                                    (rule "mul_literals" (formula "19") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "19"))
                                    (rule "leq_literals" (formula "25") (term "0"))
                                    (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "8"))
                                    (rule "polySimp_rightDist" (formula "32") (term "0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "32"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1"))
                                    (rule "mul_literals" (formula "32") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1"))
                                    (rule "allLeft" (formula "10") (inst "t=oldBase"))
                                    (rule "applyEq" (formula "10") (term "0,1") (ifseqformula "50"))
                                    (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                                    (rule "qeq_literals" (formula "10") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "10"))
                                    (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "10"))
                                    (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1"))
                                    (rule "mul_literals" (formula "34") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                                    (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "31"))
                                    (rule "inEqSimp_homoInEq0" (formula "34") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "34") (term "1,0,0"))
                                    (rule "mul_literals" (formula "34") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                                    (rule "add_literals" (formula "34") (term "0,0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                                    (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "34") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "34") (term "0,0"))
                                    (rule "qeq_literals" (formula "34") (term "0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "true_left" (formula "34"))
                                    (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "10"))
                                    (rule "mul_literals" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                                    (rule "mul_literals" (formula "21") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "18"))
                                    (rule "leq_literals" (formula "21") (term "0"))
                                    (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "allLeft" (formula "12") (inst "t=add(Z(1(#)), oldBase)"))
                                    (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0"))
                                    (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "43"))
                                    (rule "inEqSimp_invertInEq1" (formula "12") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
                                    (rule "times_zero_2" (formula "12") (term "1,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "12") (term "0,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "6"))
                                    (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "12") (term "0"))
                                    (rule "add_literals" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "0"))
                                    (rule "inEqSimp_contradInEq0" (formula "23") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "23") (term "0"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "closeFalse" (formula "23"))
                                 )
                              )
                           )
                           (branch "Show Axiom Satisfiability"
                              (builtin "One Step Simplification" (formula "38"))
                              (rule "closeTrue" (formula "38"))
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "38") (userinteraction))
                     (branch "Case 1"
                        (rule "translateJavaAddInt" (formula "38") (term "0") (userinteraction))
                        (rule "translateJavaMulInt" (formula "38") (term "0,0") (userinteraction))
                        (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "31") (userinteraction))
                        (rule "translateJavaAddInt" (formula "38") (term "0,0,0,0") (userinteraction))
                        (rule "applyEq" (formula "38") (term "1,0,0,0") (ifseqformula "28") (userinteraction))
                        (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "34") (userinteraction))
                        (rule "oHNfDef2" (inst "base=base_10") (inst "m=m_1") (inst "k=k") (inst "a=a_1") (inst "c=c_1") (userinteraction))
                        (rule "instAll" (formula "6") (term "0") (ifseqformula "1") (userinteraction))
                        (rule "hide_left" (formula "1") (userinteraction))
                        (rule "instAll" (formula "7") (term "0") (ifseqformula "5") (userinteraction))
                        (rule "hide_left" (formula "5") (userinteraction))
                        (rule "instAll" (formula "19") (term "1,0,0,1") (ifseqformula "6") (userinteraction))
                        (rule "hide_left" (formula "6") (userinteraction))
                        (rule "instAll" (formula "19") (term "1,0,1") (ifseqformula "18") (userinteraction))
                        (rule "hide_left" (formula "18") (userinteraction))
                        (rule "instAll" (formula "19") (term "1,1") (ifseqformula "18") (userinteraction))
                        (rule "hide_left" (formula "18") (userinteraction))
                        (rule "replace_known_left" (formula "18") (term "0,0,0,0,0,0") (ifseqformula "19") (userinteraction))
                        (rule "replace_known_left" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "20") (userinteraction))
                        (rule "replace_known_left" (formula "18") (term "1,0,0,0,0") (ifseqformula "21") (userinteraction))
                        (rule "replace_known_left" (formula "18") (term "1,0,0,0") (ifseqformula "22") (userinteraction))
                        (rule "replace_known_left" (formula "18") (term "1,0,0") (ifseqformula "23") (userinteraction))
                        (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "24") (userinteraction))
                        (builtin "One Step Simplification" (formula "18"))
                        (builtin "One Step Simplification" (formula "5"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                        (rule "translateJavaAddInt" (formula "28") (term "0,1"))
                        (rule "translateJavaAddInt" (formula "30") (term "0,1"))
                        (rule "translateJavaAddInt" (formula "34") (term "0,1"))
                        (rule "eqSymm" (formula "33"))
                        (rule "eqSymm" (formula "27"))
                        (rule "eqSymm" (formula "12"))
                        (rule "eqSymm" (formula "28"))
                        (rule "eqSymm" (formula "30"))
                        (rule "eqSymm" (formula "34"))
                        (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "polySimp_homoEq" (formula "16"))
                        (rule "polySimp_homoEq" (formula "35"))
                        (rule "polySimp_homoEq" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "10") (term "2,1"))
                        (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "32") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "35") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "polySimp_addComm0" (formula "35") (term "0,0,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "0,1,0"))
                        (rule "inEqSimp_gtRight" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20"))
                        (rule "add_zero_right" (formula "20") (term "0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                        (rule "inEqSimp_gtToGeq" (formula "12"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "21"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "21") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "11"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "11") (term "0"))
                        (rule "inEqSimp_commuteGeq" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "18"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "applyEq" (formula "34") (term "1,0,0,1,0") (ifseqformula "25"))
                        (rule "applyEq" (formula "16") (term "1,0,1,0") (ifseqformula "25"))
                        (rule "applyEq" (formula "16") (term "0,1,0") (ifseqformula "28"))
                        (rule "applyEq" (formula "34") (term "0,0,1,0") (ifseqformula "28"))
                        (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "31"))
                        (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "31"))
                        (rule "polySimp_sepPosMonomial" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,1"))
                        (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "13") (term "0") (inst "intPow_sk=intPow_sk_77") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "eqSymm" (formula "13") (term "0,1"))
                        (rule "applyEqRigid" (formula "13") (term "1,0,1") (ifseqformula "14"))
                        (rule "polySimp_sepPosMonomial" (formula "17"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "0,1"))
                        (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "17"))
                        (rule "polySimp_pullOutFactor1" (formula "35") (term "0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "add_literals" (formula "35") (term "0,1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "closeTrue" (formula "35"))
                     )
                     (branch "Case 2"
                        (rule "translateJavaAddInt" (formula "38") (term "0,1") (userinteraction))
                        (rule "translateJavaAddInt" (formula "38") (term "1,1") (userinteraction))
                        (rule "translateJavaMulInt" (formula "38") (term "0,1,1") (userinteraction))
                        (rule "applyEq" (formula "38") (term "0,0,1,1") (ifseqformula "31") (userinteraction))
                        (rule "translateJavaAddInt" (formula "38") (term "0,0,0,1,1") (userinteraction))
                        (rule "applyEq" (formula "38") (term "1,1,1") (ifseqformula "34") (userinteraction))
                        (rule "oGSnextb" (inst "base=base_10") (inst "m=m_1") (userinteraction))
                        (rule "instAll" (formula "39") (term "0,0") (ifseqformula "1") (userinteraction))
                        (rule "hide_left" (formula "2") (userinteraction))
                        (rule "instAll" (formula "39") (term "1,0") (ifseqformula "1") (userinteraction))
                        (rule "hide_left" (formula "2") (userinteraction))
                        (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "20") (userinteraction))
                        (rule "leq_to_geq" (formula "1") (term "1,0") (userinteraction))
                        (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "8") (userinteraction))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "oHNfDef2" (inst "base=base_10") (inst "m=m_1") (inst "k=k") (inst "a=a_1") (inst "c=c_1") (userinteraction))
                        (rule "instAll" (formula "2") (term "0,1,1") (ifseqformula "1") (userinteraction))
                        (rule "hide_left" (formula "1") (userinteraction))
                        (rule "instAll" (formula "2") (term "1,1,1") (ifseqformula "1") (userinteraction))
                        (rule "hide_left" (formula "1") (userinteraction))
                        (rule "instAll" (formula "20") (term "1,0,0,1") (ifseqformula "1") (userinteraction))
                        (rule "hide_left" (formula "1") (userinteraction))
                        (rule "instAll" (formula "20") (term "1,0,1") (ifseqformula "19") (userinteraction))
                        (rule "hide_left" (formula "19") (userinteraction))
                        (rule "instAll" (formula "20") (term "1,1") (ifseqformula "19") (userinteraction))
                        (rule "hide_left" (formula "19") (userinteraction))
                        (rule "replace_known_left" (formula "19") (term "0,0,0,0,0,0") (ifseqformula "20") (userinteraction))
                        (rule "replace_known_left" (formula "19") (term "1,0,0,0,0,0") (ifseqformula "21") (userinteraction))
                        (rule "replace_known_left" (formula "19") (term "1,0,0,0,0") (ifseqformula "22") (userinteraction))
                        (rule "replace_known_left" (formula "19") (term "1,0,0,0") (ifseqformula "23") (userinteraction))
                        (rule "replace_known_left" (formula "19") (term "1,0,0") (ifseqformula "24") (userinteraction))
                        (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "25") (userinteraction))
                        (builtin "One Step Simplification" (formula "19"))
                        (builtin "One Step Simplification" (formula "6"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                        (rule "translateJavaAddInt" (formula "29") (term "0,1"))
                        (rule "translateJavaAddInt" (formula "31") (term "0,1"))
                        (rule "translateJavaAddInt" (formula "35") (term "0,1"))
                        (rule "eqSymm" (formula "38"))
                        (rule "eqSymm" (formula "13"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "28"))
                        (rule "eqSymm" (formula "34"))
                        (rule "eqSymm" (formula "29"))
                        (rule "eqSymm" (formula "31"))
                        (rule "eqSymm" (formula "35"))
                        (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "polySimp_homoEq" (formula "17"))
                        (rule "polySimp_homoEq" (formula "16"))
                        (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                        (rule "polySimp_addComm0" (formula "36") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "36") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0,0"))
                        (rule "polySimp_addComm0" (formula "36") (term "0,0,1,1,0"))
                        (rule "polySimp_addComm1" (formula "17") (term "0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0"))
                        (rule "inEqSimp_gtRight" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "13"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "21"))
                        (rule "add_zero_right" (formula "21") (term "0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "12") (term "0"))
                        (rule "inEqSimp_commuteGeq" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "applyEq" (formula "35") (term "0,1,1,0") (ifseqformula "29"))
                        (rule "applyEq" (formula "17") (term "1,0,1,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "17") (term "0,1,0") (ifseqformula "29"))
                        (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "32"))
                        (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "32"))
                        (rule "polySimp_sepPosMonomial" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,1"))
                        (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0") (inst "intPow_sk=intPow_sk_70") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "eqSymm" (formula "14") (term "0,1"))
                        (rule "applyEqRigid" (formula "14") (term "1,0,1") (ifseqformula "15"))
                        (rule "polySimp_sepPosMonomial" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,1"))
                        (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "18"))
                        (rule "polySimp_addAssoc" (formula "36") (term "1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0"))
                        (rule "add_literals" (formula "36") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "36") (term "0,1,0"))
                        (rule "add_zero_left" (formula "36") (term "1,0"))
                        (rule "close" (formula "36") (ifseqformula "2"))
                     )
                  )
               )
               (branch "Exceptional Post (nextExpand)"
                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "9")))
                  (builtin "One Step Simplification" (formula "5"))
                  (builtin "One Step Simplification" (formula "4"))
                  (builtin "One Step Simplification" (formula "33"))
                  (rule "true_left" (formula "4"))
                  (rule "translateJavaAddInt" (formula "28") (term "0,1"))
                  (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                  (rule "translateJavaAddInt" (formula "26") (term "0,1,1"))
                  (rule "translateJavaAddInt" (formula "29") (term "0,1,1,1,0,1"))
                  (rule "translateJavaMulInt" (formula "32") (term "0,0,1,0"))
                  (rule "translateJavaMulInt" (formula "32") (term "0,1,1,0"))
                  (rule "translateJavaAddInt" (formula "32") (term "0,1,0,1,1,0,0,0,1"))
                  (rule "andLeft" (formula "26"))
                  (rule "andLeft" (formula "30"))
                  (rule "andLeft" (formula "30"))
                  (rule "andLeft" (formula "32"))
                  (rule "notLeft" (formula "30"))
                  (rule "close" (formula "33") (ifseqformula "32"))
               )
               (branch "Pre (nextExpand)"
                  (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "1")) (ifInst ""  (formula "24")) (ifInst ""  (formula "9")) (ifInst ""  (formula "8")))
                  (rule "measuredByCheck" (formula "33") (ifseqformula "6") (userinteraction))
                  (rule "precOfInt" (formula "33") (userinteraction))
                  (rule "andRight" (formula "33") (userinteraction))
                  (branch "Case 1"
                     (builtin "One Step Simplification" (formula "5"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                     (rule "andLeft" (formula "26"))
                     (rule "translateJavaAddInt" (formula "29") (term "0,1"))
                     (rule "translateJavaAddInt" (formula "27") (term "0,1"))
                     (rule "eqSymm" (formula "12"))
                     (rule "eqSymm" (formula "26"))
                     (rule "eqSymm" (formula "29"))
                     (rule "eqSymm" (formula "27"))
                     (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "polySimp_homoEq" (formula "15"))
                     (rule "polySimp_addComm0" (formula "10") (term "2,1"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "25") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "30"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "inEqSimp_gtRight" (formula "30"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "13"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "22") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "20"))
                     (rule "add_zero_right" (formula "20") (term "0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0"))
                     (rule "inEqSimp_commuteGeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "19"))
                     (rule "inEqSimp_commuteLeq" (formula "18"))
                     (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "polySimp_sepPosMonomial" (formula "17"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "0,1"))
                     (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0") (inst "intPow_sk=intPow_sk_3") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "eqSymm" (formula "14") (term "0,1"))
                     (rule "applyEqRigid" (formula "14") (term "1,0,1") (ifseqformula "15"))
                     (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0,1,0") (inst "intPow_sk=intPow_sk_5") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "eqSymm" (formula "12") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                     (rule "polySimp_elimOne" (formula "22") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                     (rule "mul_literals" (formula "14") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                     (rule "polySimp_elimOne" (formula "23") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                     (rule "mul_literals" (formula "13") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                     (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "20"))
                     (rule "leq_literals" (formula "17") (term "0"))
                     (builtin "One Step Simplification" (formula "17"))
                     (rule "true_left" (formula "17"))
                     (rule "inEqSimp_contradInEq0" (formula "23") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "23") (term "0"))
                     (builtin "One Step Simplification" (formula "23"))
                     (rule "closeFalse" (formula "23"))
                  )
                  (branch "Case 2"
                     (rule "translateJavaAddInt" (formula "30") (term "0,1") (userinteraction))
                     (rule "cut" (inst "cutFormula=leq(mul(pow(oldBase, anon_exp), anon_a), m)") (userinteraction))
                     (branch "CUT: pow(oldBase, anon_exp) * anon_a <= m TRUE"
                        (rule "cut" (inst "cutFormula=leq(pow(oldBase, anon_exp),
    mul(pow(oldBase, anon_exp), anon_a))") (userinteraction))
                        (branch "CUT: pow(oldBase, anon_exp) <= pow(oldBase, anon_exp) * anon_a TRUE"
                           (builtin "One Step Simplification" (formula "7"))
                           (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "translateJavaAddInt" (formula "12") (term "2,1"))
                           (rule "translateJavaAddInt" (formula "28") (term "0,1,1"))
                           (rule "andLeft" (formula "28"))
                           (rule "eqSymm" (formula "14"))
                           (rule "eqSymm" (formula "31"))
                           (rule "eqSymm" (formula "29"))
                           (rule "eqSymm" (formula "28"))
                           (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "17"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "10"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "polySimp_homoEq" (formula "17"))
                           (rule "polySimp_addComm0" (formula "12") (term "2,1"))
                           (rule "polySimp_addComm0" (formula "29") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "17") (term "0"))
                           (rule "inEqSimp_ltRight" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_gtRight" (formula "32"))
                           (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22"))
                           (rule "add_zero_right" (formula "22") (term "0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "23"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "23") (term "0"))
                           (rule "inEqSimp_gtToGeq" (formula "15"))
                           (rule "times_zero_1" (formula "15") (term "1,0,0"))
                           (rule "add_zero_right" (formula "15") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_commuteLeq" (formula "3"))
                           (rule "inEqSimp_commuteGeq" (formula "13"))
                           (rule "applyEq" (formula "13") (term "0") (ifseqformula "16"))
                           (rule "inEqSimp_commuteLeq" (formula "13"))
                           (rule "polySimp_sepPosMonomial" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "0,1"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "19"))
                           (rule "inEqSimp_commuteGeq" (formula "3"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "polySimp_mulAssoc" (formula "4") (term "0,1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "15") (term "0") (inst "intPow_sk=intPow_sk_6") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "15"))
                           (rule "eqSymm" (formula "15") (term "0,1"))
                           (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
                           (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "13") (term "0,1,0") (inst "intPow_sk=intPow_sk_7") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "eqSymm" (formula "13") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "14") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                           (rule "polySimp_elimOne" (formula "22") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                           (rule "polySimp_elimOne" (formula "23") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                           (rule "mul_literals" (formula "15") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                           (rule "polySimp_elimOne" (formula "24") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                           (rule "mul_literals" (formula "14") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "21"))
                           (rule "leq_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "14"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
                           (rule "mul_literals" (formula "9") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                           (rule "mul_literals" (formula "9") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
                           (rule "leq_literals" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "3"))
                           (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                           (rule "mul_literals" (formula "24") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "24") (term "0"))
                           (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1"))
                           (rule "polySimp_rightDist" (formula "24") (term "1"))
                           (rule "mul_literals" (formula "24") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                           (rule "mul_literals" (formula "23") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1"))
                           (rule "polySimp_rightDist" (formula "23") (term "1"))
                           (rule "mul_literals" (formula "23") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "2"))
                           (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "13"))
                           (rule "mul_literals" (formula "17") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                           (rule "mul_literals" (formula "17") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "17"))
                           (rule "leq_literals" (formula "29") (term "0"))
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "true_left" (formula "29"))
                           (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "2"))
                           (rule "mul_literals" (formula "8") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "8"))
                           (rule "leq_literals" (formula "18") (term "0"))
                           (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "17"))
                           (rule "mul_literals" (formula "9") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0"))
                           (rule "add_literals" (formula "9") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                           (rule "mul_literals" (formula "9") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "2"))
                           (rule "polySimp_rightDist" (formula "28") (term "0,0"))
                           (rule "mul_literals" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "28") (term "0"))
                           (rule "add_literals" (formula "28") (term "1,1,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "28") (term "0"))
                           (builtin "One Step Simplification" (formula "28"))
                           (rule "closeFalse" (formula "28"))
                        )
                        (branch "CUT: pow(oldBase, anon_exp) <= pow(oldBase, anon_exp) * anon_a FALSE"
                           (rule "multLessAux" (inst "right=right") (inst "left=left") (inst "factor=factor_1") (userinteraction))
                           (rule "instAll" (formula "33") (term "1,1") (ifseqformula "1") (userinteraction))
                           (rule "hide_left" (formula "2") (userinteraction))
                           (rule "allLeftHide" (formula "1") (inst "t=Z(1(#))") (userinteraction))
                           (rule "instAll" (formula "33") (term "0,1") (ifseqformula "1") (userinteraction))
                           (rule "hide_left" (formula "2") (userinteraction))
                           (rule "impLeft" (formula "1") (userinteraction))
                           (branch "Case 1"
                              (builtin "One Step Simplification" (formula "6"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "translateJavaAddInt" (formula "11") (term "2,1"))
                              (rule "translateJavaAddInt" (formula "27") (term "0,1,1"))
                              (rule "andLeft" (formula "27"))
                              (rule "eqSymm" (formula "13"))
                              (rule "eqSymm" (formula "30"))
                              (rule "eqSymm" (formula "28"))
                              (rule "eqSymm" (formula "27"))
                              (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "16"))
                              (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                              (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "polySimp_homoEq" (formula "16"))
                              (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                              (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "30"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_gtRight" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "32"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "23"))
                              (rule "add_zero_right" (formula "23") (term "0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                              (rule "inEqSimp_gtToGeq" (formula "16"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "21"))
                              (rule "inEqSimp_commuteLeq" (formula "21"))
                              (rule "inEqSimp_commuteGeq" (formula "14"))
                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "17"))
                              (rule "inEqSimp_commuteLeq" (formula "14"))
                              (rule "polySimp_sepPosMonomial" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "20") (term "0,1"))
                              (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "20"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "applyEq" (formula "5") (term "0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq0" (formula "5"))
                              (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                              (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0"))
                              (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0"))
                              (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                              (rule "add_literals" (formula "5") (term "1,1,0"))
                              (rule "times_zero_1" (formula "5") (term "1,0"))
                              (rule "add_zero_right" (formula "5") (term "0"))
                              (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "16") (term "0") (inst "intPow_sk=intPow_sk_30") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "eqSymm" (formula "16") (term "0,1"))
                              (rule "applyEqRigid" (formula "16") (term "1,0,1") (ifseqformula "17"))
                              (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0,1,0") (inst "intPow_sk=intPow_sk_31") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "eqSymm" (formula "14") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "3"))
                              (rule "times_zero_2" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_elimOne" (formula "3") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                              (rule "polySimp_elimOne" (formula "23") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                              (rule "mul_literals" (formula "16") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                              (rule "polySimp_elimOne" (formula "25") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                              (rule "polySimp_elimOne" (formula "24") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,1"))
                              (rule "mul_literals" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1"))
                              (rule "polySimp_rightDist" (formula "15") (term "1"))
                              (rule "mul_literals" (formula "15") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "22"))
                              (rule "leq_literals" (formula "19") (term "0"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                              (rule "polySimp_elimOne" (formula "13") (term "0"))
                              (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
                              (rule "mul_literals" (formula "10") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                              (rule "mul_literals" (formula "10") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                              (rule "leq_literals" (formula "9") (term "0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "16"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1"))
                              (rule "polySimp_rightDist" (formula "14") (term "1"))
                              (rule "mul_literals" (formula "14") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "2"))
                              (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                              (rule "mul_literals" (formula "25") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1"))
                              (rule "mul_literals" (formula "25") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "3"))
                              (rule "add_zero_right" (formula "27") (term "0"))
                              (rule "polySimp_rightDist" (formula "27") (term "0"))
                              (rule "mul_literals" (formula "27") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                              (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                              (rule "polySimp_elimOne" (formula "27") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "29"))
                              (rule "qeq_literals" (formula "27") (term "0"))
                              (builtin "One Step Simplification" (formula "27"))
                              (rule "closeFalse" (formula "27"))
                           )
                           (branch "Case 2"
                              (rule "andLeft" (formula "1"))
                              (rule "cut" (inst "cutFormula=anon_a = Z(1(#))") (userinteraction))
                              (branch "CUT: anon_a = 1 TRUE"
                                 (builtin "One Step Simplification" (formula "9"))
                                 (builtin "One Step Simplification" (formula "8"))
                                 (rule "true_left" (formula "8"))
                                 (rule "translateJavaAddInt" (formula "14") (term "2,1"))
                                 (rule "translateJavaAddInt" (formula "30") (term "0,1,1"))
                                 (rule "andLeft" (formula "30"))
                                 (rule "eqSymm" (formula "33"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "12"))
                                 (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "18"))
                                 (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "polySimp_homoEq" (formula "19"))
                                 (rule "polySimp_elimOneLeft0" (formula "2") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,1"))
                                 (rule "polySimp_addComm0" (formula "13") (term "2,1"))
                                 (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "inEqSimp_ltRight" (formula "34"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_gtRight" (formula "34"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_gtToGeq" (formula "17"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "17") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "26"))
                                 (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "26") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "25"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "24"))
                                 (rule "add_zero_right" (formula "24") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23"))
                                 (rule "inEqSimp_commuteGeq" (formula "15"))
                                 (rule "inEqSimp_commuteLeq" (formula "22"))
                                 (rule "applyEqRigid" (formula "5") (term "0,1,0,0") (ifseqformula "4"))
                                 (rule "mul_literals" (formula "5") (term "1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0"))
                                 (rule "leq_literals" (formula "5") (term "0"))
                                 (builtin "One Step Simplification" (formula "5"))
                                 (rule "notLeft" (formula "5"))
                                 (rule "inEqSimp_leqRight" (formula "32"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "applyEqRigid" (formula "2") (term "1,0,1,0") (ifseqformula "5"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "qeq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "CUT: anon_a = 1 FALSE"
                                 (rule "hide_left" (formula "1") (userinteraction))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,1") (userinteraction))
                                 (rule "cut_direct" (formula "1") (term "0") (userinteraction))
                                 (branch "CUT: 1 < anon_a TRUE"
                                    (builtin "One Step Simplification" (formula "2"))
                                    (builtin "One Step Simplification" (formula "8"))
                                    (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "translateJavaAddInt" (formula "13") (term "2,1"))
                                    (rule "translateJavaAddInt" (formula "29") (term "0,1,1"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "eqSymm" (formula "15"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "18"))
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "11"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "polySimp_homoEq" (formula "18"))
                                    (rule "polySimp_addComm0" (formula "13") (term "2,1"))
                                    (rule "polySimp_addComm0" (formula "30") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "18") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "18") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "32"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_gtRight" (formula "34"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_ltRight" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "24"))
                                    (rule "add_zero_right" (formula "24") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "inEqSimp_gtToGeq" (formula "17"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "25"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "25") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "26"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "26") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "add_literals" (formula "4") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23"))
                                    (rule "inEqSimp_commuteLeq" (formula "22"))
                                    (rule "inEqSimp_commuteGeq" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                                    (rule "inEqSimp_commuteLeq" (formula "15"))
                                    (rule "polySimp_sepPosMonomial" (formula "21"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "0,1"))
                                    (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "21"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "21"))
                                    (rule "inEqSimp_homoInEq0" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "20"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "17") (term "0") (inst "intPow_sk=intPow_sk_26") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "eqSymm" (formula "17") (term "0,1"))
                                    (rule "applyEqRigid" (formula "17") (term "1,0,1") (ifseqformula "18"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "15") (term "0,1,0") (inst "intPow_sk=intPow_sk_27") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "eqSymm" (formula "15") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                                    (rule "mul_literals" (formula "17") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "26"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                    (rule "polySimp_elimOne" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                                    (rule "mul_literals" (formula "3") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                                    (rule "mul_literals" (formula "5") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1"))
                                    (rule "mul_literals" (formula "16") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                    (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "4"))
                                    (rule "mul_literals" (formula "34") (term "1,0,0"))
                                    (rule "add_literals" (formula "34") (term "0,0"))
                                    (rule "leq_literals" (formula "34") (term "0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "false_right" (formula "34"))
                                    (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "20") (term "0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "3"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "inEqSimp_homoInEq1" (formula "5"))
                                    (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "5") (term "0,1,0"))
                                    (rule "mul_literals" (formula "5") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "1,0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                    (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                    (rule "add_literals" (formula "5") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "5") (term "0"))
                                    (rule "add_literals" (formula "5") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "5") (term "1,0"))
                                    (rule "add_zero_right" (formula "5") (term "0"))
                                    (rule "leq_literals" (formula "5"))
                                    (rule "closeFalse" (formula "5"))
                                 )
                                 (branch "CUT: 1 < anon_a FALSE"
                                    (builtin "One Step Simplification" (formula "7"))
                                    (builtin "One Step Simplification" (formula "6"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "6"))
                                    (rule "translateJavaAddInt" (formula "12") (term "2,1"))
                                    (rule "translateJavaAddInt" (formula "28") (term "0,1,1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "eqSymm" (formula "13"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "9"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "15"))
                                    (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "polySimp_homoEq" (formula "16"))
                                    (rule "polySimp_addComm0" (formula "11") (term "2,1"))
                                    (rule "polySimp_addComm0" (formula "28") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "26") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0"))
                                    (rule "inEqSimp_ltRight" (formula "30"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_gtRight" (formula "34"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "33"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltRight" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_ltRight" (formula "33"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "inEqSimp_gtToGeq" (formula "17"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "26"))
                                    (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "26") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "25"))
                                    (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "25") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "24"))
                                    (rule "add_zero_right" (formula "24") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23"))
                                    (rule "inEqSimp_commuteGeq" (formula "15"))
                                    (rule "inEqSimp_commuteLeq" (formula "22"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "18"))
                                    (rule "inEqSimp_commuteLeq" (formula "15"))
                                    (rule "polySimp_sepPosMonomial" (formula "21"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "0,1"))
                                    (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "21"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                                    (rule "polySimp_addComm0" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "6") (term "0") (ifseqformula "21"))
                                    (rule "inEqSimp_homoInEq0" (formula "6"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "6") (term "0,1,0"))
                                    (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                    (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                                    (rule "add_literals" (formula "6") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "6") (term "1,0"))
                                    (rule "add_zero_right" (formula "6") (term "0"))
                                    (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "20"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                    (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "17") (term "0") (inst "intPow_sk=intPow_sk_22") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "17"))
                                    (rule "eqSymm" (formula "17") (term "0,1"))
                                    (rule "applyEqRigid" (formula "17") (term "1,0,1") (ifseqformula "18"))
                                    (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "15") (term "0,1,0") (inst "intPow_sk=intPow_sk_23") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                                    (builtin "One Step Simplification" (formula "15"))
                                    (rule "eqSymm" (formula "15") (term "0,1"))
                                    (rule "polySimp_addComm1" (formula "16") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                    (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                    (rule "polySimp_elimOne" (formula "5") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                                    (rule "mul_literals" (formula "17") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "26"))
                                    (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                                    (rule "polySimp_elimOne" (formula "26") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "25"))
                                    (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                                    (rule "polySimp_elimOne" (formula "25") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                                    (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                    (rule "polySimp_elimOne" (formula "24") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                                    (rule "mul_literals" (formula "3") (term "0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1"))
                                    (rule "mul_literals" (formula "16") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                                    (rule "inEqSimp_strengthen1" (formula "24") (ifseqformula "34"))
                                    (rule "add_literals" (formula "24") (term "1"))
                                    (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "24"))
                                    (rule "mul_literals" (formula "34") (term "1,0,0"))
                                    (rule "add_literals" (formula "34") (term "0,0"))
                                    (rule "leq_literals" (formula "34") (term "0"))
                                    (builtin "One Step Simplification" (formula "34"))
                                    (rule "false_right" (formula "34"))
                                    (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "20") (term "0"))
                                    (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "22"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                              )
                           )
                        )
                     )
                     (branch "CUT: pow(oldBase, anon_exp) * anon_a <= m FALSE"
                        (builtin "One Step Simplification" (formula "5"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                        (rule "andLeft" (formula "26"))
                        (rule "translateJavaAddInt" (formula "27") (term "0,1"))
                        (rule "eqSymm" (formula "29"))
                        (rule "eqSymm" (formula "26"))
                        (rule "eqSymm" (formula "12"))
                        (rule "eqSymm" (formula "27"))
                        (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "polySimp_homoEq" (formula "15"))
                        (rule "polySimp_addComm0" (formula "10") (term "2,1"))
                        (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "25") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "28"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_ltRight" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0"))
                        (rule "inEqSimp_gtRight" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "14"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "21"))
                        (rule "add_zero_right" (formula "21") (term "0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "inEqSimp_commuteGeq" (formula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "20"))
                        (rule "inEqSimp_commuteLeq" (formula "19"))
                        (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "polySimp_sepPosMonomial" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,1"))
                        (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "18"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_zero_right" (formula "3") (term "0"))
                        (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "15") (term "0") (inst "intPow_sk=intPow_sk_14") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "eqSymm" (formula "15") (term "0,1"))
                        (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
                        (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "13") (term "0,1,0") (inst "intPow_sk=intPow_sk_15") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "eqSymm" (formula "13") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                        (rule "mul_literals" (formula "15") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                        (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                        (rule "polySimp_elimOne" (formula "23") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                        (rule "polySimp_elimOne" (formula "24") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "mul_literals" (formula "14") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "21"))
                        (rule "leq_literals" (formula "18") (term "0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "24") (term "0"))
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "closeFalse" (formula "24"))
                     )
                  )
               )
            )
            (branch "Exceptional Post (intPow)"
               (builtin "One Step Simplification" (formula "29"))
               (builtin "One Step Simplification" (formula "5"))
               (builtin "One Step Simplification" (formula "4"))
               (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "4"))
               (rule "translateJavaAddInt" (formula "10") (term "2,1"))
               (rule "translateJavaAddInt" (formula "30") (term "0,1,0,1,1,0,0,0,1"))
               (rule "translateJavaAddInt" (formula "26") (term "0,1,1"))
               (rule "translateJavaAddInt" (formula "27") (term "0,1,0,1"))
               (rule "andLeft" (formula "26"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "28"))
               (rule "andLeft" (formula "30"))
               (rule "notLeft" (formula "28"))
               (rule "close" (formula "31") (ifseqformula "30"))
            )
            (branch "Pre (intPow)"
               (builtin "One Step Simplification" (formula "5"))
               (builtin "One Step Simplification" (formula "4"))
               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "1")) (ifInst ""  (formula "26")))
               (rule "true_left" (formula "4"))
               (rule "translateJavaAddInt" (formula "29") (term "0") (userinteraction))
               (rule "translateJavaAddInt" (formula "10") (term "2,1"))
               (rule "translateJavaAddInt" (formula "26") (term "0,1,1"))
               (rule "andLeft" (formula "26"))
               (rule "eqSymm" (formula "12"))
               (rule "eqSymm" (formula "27"))
               (rule "eqSymm" (formula "26"))
               (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "true_left" (formula "23"))
               (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "polySimp_homoEq" (formula "15"))
               (rule "polySimp_addComm0" (formula "28") (term "0"))
               (rule "polySimp_addComm0" (formula "10") (term "2,1"))
               (rule "polySimp_addComm0" (formula "25") (term "0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "inEqSimp_gtRight" (formula "27"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "21"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "21") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "12"))
               (rule "times_zero_1" (formula "12") (term "1,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "19"))
               (rule "add_zero_right" (formula "19") (term "0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
               (rule "inEqSimp_geqRight" (formula "28"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteGeq" (formula "11"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "polySimp_sepPosMonomial" (formula "17"))
               (rule "polySimp_mulComm0" (formula "17") (term "1"))
               (rule "polySimp_rightDist" (formula "17") (term "1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1"))
               (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0") (inst "intPow_sk=intPow_sk_1") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "eqSymm" (formula "14") (term "0,1"))
               (rule "applyEqRigid" (formula "14") (term "1,0,1") (ifseqformula "15"))
               (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0,1,0") (inst "intPow_sk=intPow_sk_2") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "eqSymm" (formula "12") (term "0,1"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1"))
               (rule "polySimp_elimOne" (formula "2") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0"))
               (rule "polySimp_elimOne" (formula "23") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0"))
               (rule "polySimp_elimOne" (formula "22") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "21"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0"))
               (rule "polySimp_elimOne" (formula "21") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "20"))
               (rule "leq_literals" (formula "17") (term "0"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
               (rule "qeq_literals" (formula "8") (term "0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
         )
         (branch "Exceptional Post (nextExpand)"
            (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "9")))
            (builtin "One Step Simplification" (formula "5"))
            (builtin "One Step Simplification" (formula "4"))
            (builtin "One Step Simplification" (formula "28"))
            (rule "true_left" (formula "4"))
            (rule "translateJavaAddInt" (formula "10") (term "2,1"))
            (rule "andLeft" (formula "24"))
            (rule "andLeft" (formula "25"))
            (rule "andLeft" (formula "24"))
            (rule "andLeft" (formula "26"))
            (rule "notLeft" (formula "24"))
            (rule "close" (formula "28") (ifseqformula "27"))
         )
         (branch "Pre (nextExpand)"
            (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "1")) (ifInst ""  (formula "15")) (ifInst ""  (formula "9")) (ifInst ""  (formula "8")))
            (rule "measuredByCheck" (formula "28") (ifseqformula "6") (userinteraction))
            (rule "precOfInt" (formula "28") (userinteraction))
            (rule "andRight" (formula "28") (userinteraction))
            (branch "Case 1"
               (builtin "One Step Simplification" (formula "5"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "translateJavaAddInt" (formula "10") (term "2,1"))
               (rule "eqSymm" (formula "12"))
               (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "polySimp_homoEq" (formula "15"))
               (rule "polySimp_addComm0" (formula "10") (term "2,1"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "inEqSimp_gtRight" (formula "23"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "24"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "22"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "22") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "21"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "21") (term "0"))
               (rule "inEqSimp_gtToGeq" (formula "13"))
               (rule "times_zero_1" (formula "13") (term "1,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "20"))
               (rule "add_zero_right" (formula "20") (term "0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "19"))
               (rule "inEqSimp_commuteLeq" (formula "18"))
               (rule "inEqSimp_commuteGeq" (formula "11"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "14"))
               (rule "inEqSimp_commuteLeq" (formula "11"))
               (rule "polySimp_sepPosMonomial" (formula "17"))
               (rule "polySimp_mulComm0" (formula "17") (term "1"))
               (rule "polySimp_rightDist" (formula "17") (term "1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1"))
               (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0") (inst "intPow_sk=intPow_sk_71") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "eqSymm" (formula "14") (term "0,1"))
               (rule "applyEqRigid" (formula "14") (term "1,0,1") (ifseqformula "15"))
               (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "12") (term "0,1,0") (inst "intPow_sk=intPow_sk_72") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "eqSymm" (formula "12") (term "0,1"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1"))
               (rule "polySimp_elimOne" (formula "2") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "23"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0"))
               (rule "polySimp_elimOne" (formula "23") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "22"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0"))
               (rule "polySimp_elimOne" (formula "22") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "21"))
               (rule "polySimp_mulLiterals" (formula "21") (term "0"))
               (rule "polySimp_elimOne" (formula "21") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1"))
               (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "1"))
               (rule "qeq_literals" (formula "17") (term "0"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "closeFalse" (formula "17"))
            )
            (branch "Case 2"
               (builtin "Evaluate Query" (formula "11") (term "1") (newnames "base_9,exp_10,callee,queryResult_8,res_intPow_8"))
               (rule "notLeft" (formula "1") (userinteraction))
               (rule "variableDeclaration" (formula "26") (term "1") (newnames "queryResult_8") (userinteraction))
               (builtin "Use Operation Contract" (formula "26") (newnames "heapBefore_intPow_49,result_12,exc_66") (contract "Goodstein[Goodstein::intPow(int,int)].JML normal_behavior operation contract.0"))
               (branch "Post (intPow)"
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "andLeft" (formula "26"))
                  (rule "andLeft" (formula "27"))
                  (rule "assignment" (formula "28") (term "1") (userinteraction))
                  (rule "methodCallEmpty" (formula "28") (term "1,1") (userinteraction))
                  (rule "emptyModality" (formula "28") (term "1,1") (userinteraction))
                  (builtin "One Step Simplification" (formula "28"))
                  (rule "notRight" (formula "28") (userinteraction))
                  (rule "eqSymm" (formula "1") (userinteraction))
                  (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_12221_0" (formula "12") (term "1") (userinteraction))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "1") (userinteraction))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "28") (userinteraction))
                  (rule "powRightIncreasing" (inst "exp=exp_11") (inst "base=base_10") (userinteraction))
                  (builtin "One Step Simplification" (formula "7"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_12221_0" (formula "14") (term "1"))
                  (rule "translateJavaAddInt" (formula "12") (term "2,1"))
                  (rule "eqSymm" (formula "2"))
                  (rule "eqSymm" (formula "27"))
                  (rule "eqSymm" (formula "14"))
                  (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "polySimp_homoEq" (formula "17"))
                  (rule "polySimp_addComm0" (formula "12") (term "2,1"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0"))
                  (rule "inEqSimp_ltRight" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_gtRight" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "15"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "22"))
                  (rule "add_zero_right" (formula "22") (term "0"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "21"))
                  (rule "inEqSimp_commuteLeq" (formula "20"))
                  (rule "inEqSimp_commuteGeq" (formula "13"))
                  (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "26"))
                  (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "13") (term "0") (ifseqformula "4"))
                  (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "4"))
                  (rule "applyEqRigid" (formula "23") (term "0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "26") (term "1") (ifseqformula "4"))
                  (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "16"))
                  (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_commuteLeq" (formula "13"))
                  (rule "applyEqRigid" (formula "19") (term "0,1,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "26") (term "1") (ifseqformula "16"))
                  (rule "polySimp_sepPosMonomial" (formula "19"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "0,1"))
                  (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "14") (term "0,1,0") (inst "intPow_sk=intPow_sk_75") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "eqSymm" (formula "14") (term "0,1"))
                  (rule "polySimp_addComm1" (formula "15") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                  (rule "polySimp_elimOne" (formula "23") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                  (rule "polySimp_elimOne" (formula "22") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "24"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                  (rule "polySimp_elimOne" (formula "24") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "21"))
                  (rule "leq_literals" (formula "18") (term "0"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                  (rule "mul_literals" (formula "22") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1"))
                  (rule "polySimp_rightDist" (formula "22") (term "1"))
                  (rule "mul_literals" (formula "22") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                  (rule "mul_literals" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                  (rule "leq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "2"))
                  (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "13") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "16"))
                  (rule "polySimp_mulComm0" (formula "14") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1"))
                  (rule "mul_literals" (formula "14") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "13"))
                  (rule "mul_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                  (rule "mul_literals" (formula "18") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                  (rule "mul_literals" (formula "24") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1"))
                  (rule "mul_literals" (formula "24") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "2"))
                  (rule "mul_literals" (formula "9") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "9"))
                  (rule "leq_literals" (formula "23") (term "0"))
                  (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "14"))
                  (rule "polySimp_rightDist" (formula "27") (term "0,0"))
                  (rule "mul_literals" (formula "27") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1"))
                  (rule "polySimp_rightDist" (formula "27") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
                  (rule "mul_literals" (formula "27") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                  (rule "mul_literals" (formula "10") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "19"))
                  (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                  (rule "mul_literals" (formula "26") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "26") (term "0"))
                  (rule "polySimp_addComm1" (formula "26") (term "0,0"))
                  (rule "add_literals" (formula "26") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                  (rule "polySimp_mulComm0" (formula "26") (term "1"))
                  (rule "polySimp_rightDist" (formula "26") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "26") (term "1,1"))
                  (rule "mul_literals" (formula "26") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "26") (term "1,1"))
                  (rule "boxToDiamond" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "nnf_imp2or" (formula "3") (term "0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "3") (term "0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "3") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "3") (term "1,1,0,0,0"))
                  (rule "Class_invariant_axiom_for_Goodstein" (formula "13") (inst "sk=sk_30") (ifseqformula "7"))
                  (branch "Use Axiom"
                     (rule "true_left" (formula "13"))
                     (rule "commute_or" (formula "3") (term "0,0,0"))
                     (rule "methodBodyExpand" (formula "32") (term "1") (newnames "heapBefore_intPow_51,savedHeapBefore_intPow_41,x_1Before_intPow_41,x_2Before_intPow_41"))
                     (builtin "One Step Simplification" (formula "32"))
                     (rule "variableDeclarationAssign" (formula "32") (term "1"))
                     (rule "variableDeclaration" (formula "32") (term "1") (newnames "r_43"))
                     (rule "assignment" (formula "32") (term "1"))
                     (builtin "One Step Simplification" (formula "32"))
                     (builtin "Loop Invariant" (formula "32") (newnames "variant_54,b_56,heapBefore_LOOP_54,x_2Before_LOOP_53,r_43Before_LOOP,x_2_53,r_43_0,heap_After_LOOP_54,anon_heap_LOOP_54,o,f"))
                     (branch "Invariant Initially Valid"
                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "5")))
                        (rule "translateJavaSubInt" (formula "32") (term "1,1,0,0"))
                        (rule "eqSymm" (formula "32") (term "0,0"))
                        (rule "polySimp_elimSub" (formula "32") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "32") (term "1,0,0,0"))
                        (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_homoInEq1" (formula "32") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "32") (term "0,0"))
                        (rule "add_literals" (formula "32") (term "1,0,0"))
                        (rule "times_zero_1" (formula "32") (term "0,0"))
                        (rule "leq_literals" (formula "32") (term "0"))
                        (builtin "One Step Simplification" (formula "32"))
                        (rule "inEqSimp_geqRight" (formula "32"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "closeFalse" (formula "10"))
                     )
                     (branch "Body Preserves Invariant"
                        (builtin "One Step Simplification" (formula "34"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "translateJavaSubInt" (formula "34") (term "1,1,0,0,0,0,1,1,0,1,1"))
                        (rule "translateJavaAddInt" (formula "34") (term "0,1,1,1,0,1,1"))
                        (rule "translateJavaAddInt" (formula "34") (term "0,1,1,1,0,1"))
                        (rule "translateJavaSubInt" (formula "33") (term "1,1,0,0"))
                        (rule "impRight" (formula "34"))
                        (rule "andLeft" (formula "34"))
                        (rule "andLeft" (formula "34"))
                        (rule "eqSymm" (formula "37") (term "0,0,0,0,1,1,0,1"))
                        (rule "eqSymm" (formula "37") (term "0,0,1,0,1,1,0,1"))
                        (rule "eqSymm" (formula "34"))
                        (rule "polySimp_elimSub" (formula "37") (term "1,0,0,0,0,0,1,1,0,1"))
                        (rule "polySimp_elimSub" (formula "34") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,1,1,1,0"))
                        (rule "polySimp_addComm0" (formula "37") (term "0,1,1,1,0,1"))
                        (rule "polySimp_addComm0" (formula "37") (term "1,0,0,0,0,0,1,1,0,1"))
                        (rule "inEqSimp_commuteGeq" (formula "35"))
                        (rule "variableDeclarationAssign" (formula "1") (term "1"))
                        (rule "variableDeclarationAssign" (formula "37") (term "1"))
                        (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_56_2"))
                        (rule "variableDeclaration" (formula "37") (term "1") (newnames "exc_68"))
                        (rule "assignment" (formula "37") (term "1"))
                        (builtin "One Step Simplification" (formula "37"))
                        (rule "variableDeclaration" (formula "37") (term "1") (newnames "thrownExc_55"))
                        (rule "blockThrow" (formula "37") (term "1,0,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "35"))
                        (rule "times_zero_1" (formula "36") (term "0,0"))
                        (rule "add_zero_left" (formula "36") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                        (rule "mul_literals" (formula "36") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "10"))
                        (rule "leq_literals" (formula "36") (term "0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "true_left" (formula "36"))
                        (rule "boxToDiamond" (formula "1") (term "1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "inequality_comparison_simple" (formula "36") (term "1"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "methodCallEmpty" (formula "36") (term "1"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "emptyModality" (formula "36") (term "1"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_strengthen1" (formula "35") (ifseqformula "36"))
                        (rule "add_zero_right" (formula "35") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "36") (ifseqformula "35"))
                        (rule "times_zero_1" (formula "36") (term "1,0,0"))
                        (rule "add_literals" (formula "36") (term "0,0"))
                        (rule "leq_literals" (formula "36") (term "0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "false_right" (formula "36"))
                        (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "34"))
                        (rule "mul_literals" (formula "35") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "35") (term "0"))
                        (rule "add_literals" (formula "35") (term "0,0"))
                        (rule "add_zero_left" (formula "35") (term "0"))
                        (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "9"))
                        (rule "leq_literals" (formula "35") (term "0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "ifUnfold" (formula "36") (term "1") (inst "#boolv=x_3"))
                        (rule "variableDeclaration" (formula "36") (term "1") (newnames "x_148"))
                        (rule "inequality_comparison_simple" (formula "36") (term "1"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "inEqSimp_contradEq7" (formula "36") (term "0,0,1,0") (ifseqformula "35"))
                        (rule "times_zero_1" (formula "36") (term "1,0,0,0,0,1,0"))
                        (rule "add_zero_right" (formula "36") (term "0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "36") (term "0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "allLeft" (formula "3") (inst "t=anon_exp"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (term "1,0,0") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "3") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "ifSplit" (formula "37"))
                        (branch "if x_148 true"
                           (builtin "One Step Simplification" (formula "38"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "assignmentMultiplicationInt" (formula "37") (term "1"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "translateJavaMulInt" (formula "37") (term "0,1,0"))
                           (rule "postdecrement" (formula "37") (term "1"))
                           (rule "compound_subtraction_1" (formula "37") (term "1") (inst "#v=x_3"))
                           (rule "variableDeclarationAssign" (formula "37") (term "1"))
                           (rule "variableDeclaration" (formula "37") (term "1") (newnames "x_149"))
                           (rule "widening_identity_cast_5" (formula "37") (term "1"))
                           (rule "assignment" (formula "37") (term "1"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "assignmentSubtractionInt" (formula "37") (term "1"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "translateJavaSubInt" (formula "37") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "37") (term "0,1,0"))
                           (rule "mul_literals" (formula "37") (term "1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "37") (term "0,1,0"))
                           (rule "tryEmpty" (formula "37") (term "1"))
                           (rule "methodCallEmpty" (formula "37") (term "1"))
                           (rule "emptyModality" (formula "37") (term "1"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "eqSymm" (formula "37") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "0,1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "37") (term "0,1,1,0,0,0"))
                           (rule "mul_literals" (formula "37") (term "0,0,1,1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "37") (term "1,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,1"))
                           (rule "add_literals" (formula "37") (term "0,0,1"))
                           (rule "add_zero_left" (formula "37") (term "0,1"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,1,1,0,0,0"))
                           (rule "add_literals" (formula "37") (term "0,0,1,1,0,0,0"))
                           (rule "precOfInt" (formula "37") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "37") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,1"))
                           (rule "mul_literals" (formula "37") (term "0,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,1"))
                           (rule "add_literals" (formula "37") (term "0,0,0,1,1"))
                           (rule "add_zero_left" (formula "37") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor2" (formula "37") (term "0,1,1"))
                           (rule "add_literals" (formula "37") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "37") (term "0,1,1"))
                           (rule "leq_literals" (formula "37") (term "1,1"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_commuteLeq" (formula "37") (term "1"))
                           (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "37") (term "0,1,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "37") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "37") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0"))
                           (rule "mul_literals" (formula "37") (term "1,1,0"))
                           (rule "replace_known_left" (formula "37") (term "1,0") (ifseqformula "36"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,1,0"))
                           (rule "mul_literals" (formula "37") (term "0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0"))
                           (rule "inEqSimp_subsumption1" (formula "37") (term "1") (ifseqformula "36"))
                           (rule "leq_literals" (formula "37") (term "0,1"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "inEqSimp_subsumption0" (formula "37") (term "1") (ifseqformula "35"))
                           (rule "inEqSimp_homoInEq0" (formula "37") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "37") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "37") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "37") (term "0,0,0,1"))
                           (rule "add_literals" (formula "37") (term "0,0,0,0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                           (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "37") (term "0,0,1"))
                           (rule "qeq_literals" (formula "37") (term "0,1"))
                           (builtin "One Step Simplification" (formula "37"))
                           (rule "allLeft" (formula "3") (inst "t=oldBase"))
                           (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "33"))
                           (rule "inEqSimp_contradInEq0" (formula "3") (term "1") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "3") (term "0,0,1"))
                           (rule "leq_literals" (formula "3") (term "0,1"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "closeFalse" (formula "14"))
                        )
                        (branch "if x_148 false"
                           (builtin "One Step Simplification" (formula "38"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Use Case"
                        (builtin "One Step Simplification" (formula "34"))
                        (builtin "One Step Simplification" (formula "33"))
                        (rule "translateJavaSubInt" (formula "33") (term "1,1,0,0"))
                        (rule "andLeft" (formula "33"))
                        (rule "andLeft" (formula "33"))
                        (rule "eqSymm" (formula "33"))
                        (rule "polySimp_elimSub" (formula "33") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "34"))
                        (rule "variableDeclarationAssign" (formula "36") (term "1"))
                        (rule "variableDeclaration" (formula "36") (term "1") (newnames "b_56_1"))
                        (rule "inEqSimp_exactShadow3" (formula "35") (ifseqformula "34"))
                        (rule "times_zero_1" (formula "35") (term "0,0"))
                        (rule "add_zero_left" (formula "35") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "9"))
                        (rule "leq_literals" (formula "35") (term "0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "inequality_comparison_simple" (formula "36") (term "1"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "methodCallEmpty" (formula "36") (term "1"))
                        (rule "emptyModality" (formula "36") (term "1"))
                        (builtin "One Step Simplification" (formula "36"))
                        (rule "impRight" (formula "36"))
                        (rule "applyEq" (formula "34") (term "0,1,1,0") (ifseqformula "1"))
                        (rule "times_zero_2" (formula "34") (term "1,1,0"))
                        (rule "add_zero_right" (formula "34") (term "1,0"))
                        (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "35"))
                        (rule "times_zero_2" (formula "35") (term "1,0"))
                        (rule "add_zero_right" (formula "35") (term "0"))
                        (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "36"))
                        (rule "true_left" (formula "36"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "35"))
                        (rule "mul_literals" (formula "35") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "10"))
                        (rule "leq_literals" (formula "35") (term "0"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "true_left" (formula "35"))
                        (rule "methodCallReturn" (formula "35") (term "1"))
                        (rule "assignment" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "methodCallEmpty" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "emptyModality" (formula "35") (term "1"))
                        (builtin "One Step Simplification" (formula "35"))
                        (rule "notRight" (formula "35"))
                        (rule "applyEq" (formula "35") (term "1") (ifseqformula "1"))
                        (rule "allLeft" (formula "5") (inst "t=add(Z(1(#)), anon_exp)"))
                        (rule "polySimp_addAssoc" (formula "5") (term "1,1,0"))
                        (rule "add_literals" (formula "5") (term "0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
                        (rule "mul_literals" (formula "5") (term "1,1,0,0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0,0") (ifseqformula "12"))
                        (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "allLeft" (formula "6") (inst "t=anon_exp"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0,0") (ifseqformula "13"))
                        (rule "qeq_literals" (formula "6") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "allLeft" (formula "5") (inst "t=oldBase"))
                        (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "38"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "17"))
                        (rule "qeq_literals" (formula "5") (term "0,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "allLeft" (formula "7") (inst "t=oldBase"))
                        (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "37"))
                        (rule "inEqSimp_contradInEq0" (formula "7") (term "1") (ifseqformula "20"))
                        (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                        (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "7") (term "0,0,1"))
                        (rule "leq_literals" (formula "7") (term "0,1"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "18") (term "0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "closeFalse" (formula "18"))
                     )
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "33"))
                     (rule "closeTrue" (formula "33"))
                  )
               )
               (branch "Exceptional Post (intPow)"
                  (builtin "One Step Simplification" (formula "26"))
                  (builtin "One Step Simplification" (formula "5"))
                  (builtin "One Step Simplification" (formula "4"))
                  (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "4"))
                  (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_12221_0" (formula "12") (term "1"))
                  (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_12221_0" (formula "9") (term "1"))
                  (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "andLeft" (formula "26"))
                  (rule "notLeft" (formula "24"))
                  (rule "close" (formula "27") (ifseqformula "26"))
               )
               (branch "Pre (intPow)"
                  (builtin "One Step Simplification" (formula "5"))
                  (builtin "One Step Simplification" (formula "4"))
                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "14")) (ifInst ""  (formula "1")))
                  (rule "true_left" (formula "4"))
                  (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_12221_0" (formula "9") (term "1"))
                  (rule "replaceKnownQuery_Goodstein_intPow(heap,oldBase,anon_exp)_12221_0" (formula "12") (term "1"))
                  (rule "translateJavaAddInt" (formula "10") (term "2,1"))
                  (rule "eqSymm" (formula "12"))
                  (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "8"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "polySimp_homoEq" (formula "15"))
                  (rule "polySimp_addComm0" (formula "10") (term "2,1"))
                  (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0"))
                  (rule "inEqSimp_gtRight" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltRight" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "24"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "21"))
                  (rule "add_zero_right" (formula "21") (term "0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "23"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "22"))
                  (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "22") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "14"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0"))
                  (rule "add_zero_right" (formula "14") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "20"))
                  (rule "inEqSimp_commuteLeq" (formula "19"))
                  (rule "inEqSimp_commuteGeq" (formula "12"))
                  (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "polySimp_sepPosMonomial" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1"))
                  (rule "polySimp_rightDist" (formula "18") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,1"))
                  (rule "Query_axiom_for_intPow_int_int__in_Goodstein" (formula "13") (term "0,1,0") (inst "intPow_sk=intPow_sk_73") (inst "#p1=x_2") (inst "#p0=x_1") (inst "#res=x"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "eqSymm" (formula "13") (term "0,1"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                  (rule "polySimp_elimOne" (formula "21") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                  (rule "polySimp_elimOne" (formula "23") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "22"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                  (rule "polySimp_elimOne" (formula "22") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                  (rule "mul_literals" (formula "15") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                  (rule "mul_literals" (formula "14") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "closeFalse" (formula "9"))
               )
            )
         )
      )
   )
)
)

}
