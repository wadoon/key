\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Mar 28 14:24:02 CEST 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=2000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Tue Mar 28 14:24:02 CEST 2017
name=Goodstein[Goodstein\\:\\:GoodsteinSequence(int)].JML normal_behavior operation contract.0
contract=Goodstein[Goodstein\\:\\:GoodsteinSequence(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "7f6e941f75af2a784306433b7f217c99f6fb84c7"))
(keyLog "1" (keyUser "pschmitt" ) (keyVersion "d2d1b7463a24ad5aab7d217e8ab9e5ca13a01496"))

(autoModeTime "3073162546")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "startM,self,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(builtin "One Step Simplification" (formula "9"))
(builtin "One Step Simplification" (formula "4"))
(rule "true_left" (formula "4"))
(rule "inEqSimp_gtToGeq" (formula "5"))
(rule "times_zero_1" (formula "5") (term "1,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "mul_literals" (formula "5") (term "1"))
(rule "Class_invariant_axiom_for_Goodstein" (formula "6") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "6"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_GoodsteinSequence,savedHeapBefore_GoodsteinSequence,_startMBefore_GoodsteinSequence"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "base"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "m"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (builtin "Loop Invariant" (formula "7") (newnames "variant,b,heapBefore_LOOP,baseBefore_LOOP,mBefore_LOOP,base_0,m_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
      (rule "qeq_literals" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_geqRight" (formula "7"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "impRight" (formula "10"))
      (rule "variableDeclarationAssign" (formula "1") (term "1"))
      (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "greater_than_comparison_simple" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_gtToGeq" (formula "9") (term "0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "variableDeclarationAssign" (formula "11") (term "1") (userinteraction))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "exc_2") (userinteraction))
      (rule "assignment" (formula "11") (term "1") (userinteraction))
      (builtin "One Step Simplification" (formula "11"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "thrownExc_1") (userinteraction))
      (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x") (userinteraction))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1") (userinteraction))
      (rule "greater_than_comparison_simple" (formula "11") (term "1") (userinteraction))
      (builtin "One Step Simplification" (formula "11"))
      (rule "if" (formula "11") (term "1") (userinteraction))
      (builtin "One Step Simplification" (formula "11"))
      (rule "ifthenelse_split_for" (formula "11") (userinteraction))
      (branch "m_0 > 0 TRUE"
         (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_nextExpand_0,result_0,exc_3") (contract "Goodstein[Goodstein::nextExpand(int,int)].JML normal_behavior operation contract.0"))
         (branch "Post (nextExpand)"
            (builtin "One Step Simplification" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "14"))
            (rule "assignment" (formula "17") (term "1") (userinteraction))
            (rule "assignmentSubtractionInt" (formula "17") (term "1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "17"))
            (rule "assignmentAdditionInt" (formula "17") (term "1") (userinteraction))
            (rule "tryEmpty" (formula "17") (term "1,1") (userinteraction))
            (rule "methodCallEmpty" (formula "17") (term "1,1") (userinteraction))
            (rule "emptyModality" (formula "17") (term "1,1") (userinteraction))
            (builtin "One Step Simplification" (formula "17"))
            (rule "andRight" (formula "17") (userinteraction))
            (branch "Case 1"
               (rule "translateJavaSubInt" (formula "17") (term "0,0") (userinteraction))
               (rule "translateJavaAddInt" (formula "17") (term "0,1") (userinteraction))
               (rule "andRight" (formula "17") (userinteraction))
               (branch "Case 1"
                  (rule "oHNfIncreasing" (inst "base=base_1") (inst "m=m_1") (userinteraction))
                  (rule "instAll" (formula "14") (term "0,1") (ifseqformula "1") (userinteraction))
                  (rule "hide_left" (formula "1") (userinteraction))
                  (rule "instAll" (formula "14") (term "1,1") (ifseqformula "13") (userinteraction))
                  (rule "hide_left" (formula "13") (userinteraction))
                  (rule "impLeft" (formula "13") (userinteraction))
                  (branch "Case 1"
                     (rule "andRight" (formula "16") (userinteraction))
                     (branch "Case 1"
                        (rule "translateJavaAddInt" (formula "14") (term "0,1"))
                        (rule "eqSymm" (formula "13"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "18") (term "0"))
                        (rule "mul_literals" (formula "18") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "18"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "3"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                        (rule "leq_literals" (formula "10") (term "0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "10"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "Case 2"
                        (rule "cut" (inst "cutFormula=geq(m_0, Z(0(#)))") (userinteraction))
                        (branch "CUT: m_0 >= 0 TRUE"
                           (rule "oHNfDef1" (inst "base=base_1") (inst "m=m_1") (userinteraction))
                           (rule "translateJavaAddInt" (formula "15") (term "0,1"))
                           (rule "eqSymm" (formula "14"))
                           (rule "eqSymm" (formula "15"))
                           (rule "polySimp_elimSub" (formula "19") (term "0"))
                           (rule "mul_literals" (formula "19") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "19"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "4"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "4"))
                           (rule "leq_literals" (formula "11") (term "0"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
                           (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                           (rule "qeq_literals" (formula "14"))
                           (rule "true_left" (formula "14"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "12"))
                           (rule "applyEq" (formula "13") (term "1") (ifseqformula "12"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                           (rule "mul_literals" (formula "3") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "nnf_imp2or" (formula "2") (term "0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "2") (term "1,0,0,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,1,0,0,0,0"))
                           (rule "Class_invariant_axiom_for_Goodstein" (formula "15") (inst "sk=sk_10") (ifseqformula "6"))
                           (branch "Use Axiom"
                              (rule "true_left" (formula "15"))
                              (rule "allLeft" (formula "2") (inst "t=base_0"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0,0,0") (ifseqformula "11"))
                              (rule "qeq_literals" (formula "2") (term "0,0,0,0,0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "allLeft" (formula "2") (inst "t=m_0"))
                              (rule "applyEq" (formula "2") (term "0,1") (ifseqformula "15"))
                              (rule "eqSymm" (formula "2") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "2") (term "1") (ifseqformula "5"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "2") (term "0,0,1"))
                              (rule "leq_literals" (formula "2") (term "0,1"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_contradInEq0" (formula "2") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "2") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "2") (term "0,0,1"))
                              (rule "polySimp_addComm0" (formula "2") (term "0,0,0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "2") (term "0,0,1"))
                              (rule "leq_literals" (formula "2") (term "0,1"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "5") (term "0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "closeFalse" (formula "5"))
                           )
                           (branch "Show Axiom Satisfiability"
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "closeTrue" (formula "16"))
                           )
                        )
                        (branch "CUT: m_0 >= 0 FALSE"
                           (rule "close" (formula "16") (ifseqformula "9"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "translateJavaAddInt" (formula "15") (term "0,1"))
                     (rule "eqSymm" (formula "14"))
                     (rule "eqSymm" (formula "15"))
                     (rule "polySimp_elimSub" (formula "18") (term "0"))
                     (rule "mul_literals" (formula "18") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "18") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "18"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "2"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "14") (term "0"))
                     (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "15"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "2"))
                     (rule "leq_literals" (formula "9") (term "0"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                     (rule "qeq_literals" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "times_zero_2" (formula "12") (term "1,0"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                     (rule "leq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "10"))
                     (rule "applyEq" (formula "12") (term "1") (ifseqformula "10"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                     (rule "mul_literals" (formula "11") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "11"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                  (rule "translateJavaAddInt" (formula "14") (term "0,1"))
                  (rule "eqSymm" (formula "13"))
                  (rule "eqSymm" (formula "14"))
                  (rule "polySimp_addComm0" (formula "17") (term "0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                  (rule "inEqSimp_geqRight" (formula "17"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_gtToGeq" (formula "2"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "2"))
                  (rule "leq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "9"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Case 2"
               (rule "translateJavaAddInt" (formula "17") (term "0,0") (userinteraction))
               (rule "translateJavaSubInt" (formula "17") (term "1,0") (userinteraction))
               (rule "precOfOrd" (formula "17") (userinteraction))
               (rule "applyEq" (formula "17") (term "0,1,0") (ifseqformula "13") (userinteraction))
               (rule "oGSstrictMonotone" (inst "n=n") (inst "m1=m1") (inst "m2=m2") (userinteraction))
               (rule "cut" (inst "cutFormula=olt(oGS(add(base_0, Z(1(#))),
        sub(oHNf(base_0, m_0), Z(1(#)))),
    oGS(add(base_0, Z(1(#))), oHNf(base_0, m_0)))") (userinteraction))
               (branch "CUT: olt(oGS(base_0 + 1, oHNf(base_0, m_0) - 1), oGS(base_0 + 1, oHNf(base_0, m_0))) TRUE"
                  (rule "translateJavaAddInt" (formula "16") (term "0,1"))
                  (rule "eqSymm" (formula "15"))
                  (rule "eqSymm" (formula "16"))
                  (rule "polySimp_elimSub" (formula "19") (term "1,0"))
                  (rule "mul_literals" (formula "19") (term "1,1,0"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "1,1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "19") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_gtToGeq" (formula "3"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "19") (term "1,1,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "15"))
                  (rule "applyEq" (formula "1") (term "1") (ifseqformula "16"))
                  (rule "close" (formula "19") (ifseqformula "1"))
               )
               (branch "CUT: olt(oGS(base_0 + 1, oHNf(base_0, m_0) - 1), oGS(base_0 + 1, oHNf(base_0, m_0))) FALSE"
                  (rule "instAll" (formula "19") (term "0,0") (ifseqformula "1") (userinteraction))
                  (rule "hide_left" (formula "2") (userinteraction))
                  (rule "instAll" (formula "17") (term "1,0") (ifseqformula "1") (userinteraction))
                  (rule "hide_left" (formula "2") (userinteraction))
                  (rule "instAll" (formula "17") (term "0,1,0") (ifseqformula "1") (userinteraction))
                  (rule "hide_left" (formula "2") (userinteraction))
                  (rule "impLeft" (formula "1") (userinteraction))
                  (branch "Case 1"
                     (rule "hide_right" (formula "17") (userinteraction))
                     (rule "hide_right" (formula "18") (userinteraction))
                     (rule "andRight" (formula "16") (userinteraction))
                     (branch "Case 1"
                        (rule "andRight" (formula "16") (userinteraction))
                        (branch "Case 1"
                           (rule "translateJavaAddInt" (formula "14") (term "0,1"))
                           (rule "eqSymm" (formula "13"))
                           (rule "eqSymm" (formula "14"))
                           (rule "polySimp_addComm0" (formula "16") (term "1"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "16"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_gtToGeq" (formula "2"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0"))
                           (rule "inEqSimp_invertInEq1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "times_zero_2" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "10") (term "0"))
                           (builtin "One Step Simplification" (formula "10"))
                           (rule "closeFalse" (formula "10"))
                        )
                        (branch "Case 2"
                           (rule "oHNfIncreasing" (inst "base=base_1") (inst "m=m_1") (userinteraction))
                           (rule "instAll" (formula "17") (term "0,0,1") (ifseqformula "1") (userinteraction))
                           (rule "hide_left" (formula "2") (userinteraction))
                           (rule "instAll" (formula "17") (term "1,0,1") (ifseqformula "1") (userinteraction))
                           (rule "hide_left" (formula "2") (userinteraction))
                           (rule "impLeft" (formula "1") (userinteraction))
                           (branch "Case 1"
                              (rule "andRight" (formula "16") (userinteraction))
                              (branch "Case 1"
                                 (rule "translateJavaAddInt" (formula "14") (term "0,1"))
                                 (rule "eqSymm" (formula "13"))
                                 (rule "eqSymm" (formula "14"))
                                 (rule "polySimp_elimSub" (formula "17") (term "1"))
                                 (rule "mul_literals" (formula "17") (term "1,1"))
                                 (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "17") (term "1"))
                                 (rule "inEqSimp_leqRight" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "17"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_gtToGeq" (formula "3"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0"))
                                 (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "15"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_invertInEq1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "times_zero_2" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "11") (term "0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "closeFalse" (formula "11"))
                              )
                              (branch "Case 2"
                                 (rule "cut" (inst "cutFormula=leq(base_0, m_0)") (userinteraction))
                                 (branch "CUT: base_0 <= m_0 TRUE"
                                    (rule "close" (formula "17") (ifseqformula "1"))
                                 )
                                 (branch "CUT: base_0 <= m_0 FALSE"
                                    (rule "oHNfDef1" (inst "base=base_1") (inst "m=m_1") (userinteraction))
                                    (rule "instAll" (formula "18") (term "0,0,1") (ifseqformula "1") (userinteraction))
                                    (rule "hide_left" (formula "2") (userinteraction))
                                    (rule "instAll" (formula "18") (term "1,0,1") (ifseqformula "1") (userinteraction))
                                    (rule "hide_left" (formula "2") (userinteraction))
                                    (rule "impLeft" (formula "1") (userinteraction))
                                    (branch "Case 1"
                                       (rule "translateJavaAddInt" (formula "14") (term "0,1"))
                                       (rule "eqSymm" (formula "13"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "polySimp_elimSub" (formula "18") (term "1"))
                                       (rule "mul_literals" (formula "18") (term "1,1"))
                                       (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "18") (term "1"))
                                       (rule "inEqSimp_leqRight" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "18"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_gtToGeq" (formula "3"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0"))
                                       (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "11"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteLeq" (formula "18") (term "0"))
                                       (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "12"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_leqRight" (formula "18"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "16"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_invertInEq1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "times_zero_2" (formula "2") (term "1"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "4"))
                                       (rule "leq_literals" (formula "11") (term "0"))
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "true_left" (formula "11"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                    (branch "Case 2"
                                       (rule "translateJavaAddInt" (formula "15") (term "0,1"))
                                       (rule "eqSymm" (formula "14"))
                                       (rule "eqSymm" (formula "15"))
                                       (rule "polySimp_elimSub" (formula "18") (term "1"))
                                       (rule "mul_literals" (formula "18") (term "1,1"))
                                       (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "18") (term "1"))
                                       (rule "inEqSimp_leqRight" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "18"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_gtToGeq" (formula "4"))
                                       (rule "times_zero_1" (formula "4") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "4") (term "0,0"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "16"))
                                       (rule "applyEqRigid" (formula "16") (term "0") (ifseqformula "3"))
                                       (rule "eqSymm" (formula "16"))
                                       (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "15"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_invertInEq1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "times_zero_2" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "4") (term "0"))
                                       (builtin "One Step Simplification" (formula "4"))
                                       (rule "closeFalse" (formula "4"))
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "translateJavaAddInt" (formula "15") (term "0,1"))
                              (rule "eqSymm" (formula "14"))
                              (rule "eqSymm" (formula "15"))
                              (rule "polySimp_elimSub" (formula "17") (term "1"))
                              (rule "mul_literals" (formula "17") (term "1,1"))
                              (rule "polySimp_addComm0" (formula "15") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "17") (term "1"))
                              (rule "inEqSimp_leqRight" (formula "17"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_gtToGeq" (formula "3"))
                              (rule "times_zero_1" (formula "3") (term "1,0,0"))
                              (rule "add_zero_right" (formula "3") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "15"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_invertInEq1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "times_zero_2" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
                              (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "12"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "times_zero_2" (formula "2") (term "1,0"))
                              (rule "add_zero_right" (formula "2") (term "0"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEq" (formula "12") (term "1") (ifseqformula "11"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "translateJavaAddInt" (formula "14") (term "0,1"))
                        (rule "eqSymm" (formula "13"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "16") (term "0"))
                        (rule "mul_literals" (formula "16") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0"))
                        (rule "inEqSimp_ltRight" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "oGSnextb" (inst "base=base_1") (inst "m=m_1") (userinteraction))
                     (rule "close" (formula "18") (ifseqformula "2") (userinteraction))
                  )
               )
            )
         )
         (branch "Exceptional Post (nextExpand)"
            (builtin "One Step Simplification" (formula "11"))
            (rule "translateJavaAddInt" (formula "11") (term "0,1,0,1,1,0,1"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "13"))
            (rule "notLeft" (formula "11"))
            (rule "close" (formula "14") (ifseqformula "13"))
         )
         (branch "Pre (nextExpand)"
            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "3")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
            (rule "measuredByCheckEmpty" (formula "12") (term "1") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_gtToGeq" (formula "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
            (rule "leq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "Class_invariant_axiom_for_Goodstein" (formula "10") (inst "sk=sk_4") (ifseqformula "4"))
            (branch "Use Axiom"
               (rule "closeTrue" (formula "10"))
            )
            (branch "Show Axiom Satisfiability"
               (builtin "One Step Simplification" (formula "10"))
               (rule "closeTrue" (formula "10"))
            )
         )
      )
      (branch "m_0 > 0 FALSE"
         (rule "eqSymm" (formula "12") (term "0,0,1,0,1,1,0,1"))
         (rule "inEqSimp_gtRight" (formula "11"))
         (rule "times_zero_1" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "blockThrow" (formula "12") (term "1,0,0,1"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "2"))
         (rule "leq_literals" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "7"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_1"))
      (rule "greater_than_comparison_simple" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_gtToGeq" (formula "10") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (rule "emptyModality" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "impRight" (formula "10"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "9"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (rule "tryEmpty" (formula "10") (term "1"))
      (rule "emptyModality" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "Class_invariant_axiom_for_Goodstein" (formula "10") (inst "sk=sk_1") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "closeTrue" (formula "10"))
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "10"))
         (rule "closeTrue" (formula "10"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)

}
