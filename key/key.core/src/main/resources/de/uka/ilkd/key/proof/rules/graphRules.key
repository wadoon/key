
/*
 Rules for isEmpty
 */
\rules {

    emptyGraphisEmpty {
        \find(isEmptyGraph(emptyGraph))
        \replacewith(true)
        \heuristics(concrete)
    };

    vertexGraphisNotEmpty {
        \schemaVar \term VertexLabel node;

        \find(isEmptyGraph(vertex(node)))
        \replacewith(false)
        \heuristics(concrete)
    };

    connectGraphEmptyIfBothSubGraphsEmpty {
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term Graph graph1, graph2;

        \find(isEmptyGraph(connect(edge,graph1,graph2)))
        \replacewith(isEmptyGraph(graph1) & isEmptyGraph(graph2))
        \heuristics(simplify_enlarging)
    };


    // EQ variants

    emptyGraphisEmptyEQ {
        \schemaVar \term Graph EQ;

        \assumes(emptyGraph=EQ ==>)
        \find(isEmptyGraph(EQ))
        \sameUpdateLevel
        \replacewith(true)
        \heuristics(concrete)
    };

    vertexGraphisNotEmptyEQ {
        \schemaVar \term Graph EQ;
        \schemaVar \term VertexLabel node;

        \assumes(vertex(node)=EQ ==>)
        \find(isEmptyGraph(EQ))
        \sameUpdateLevel
        \replacewith(false)
        \heuristics(concrete)
    };

    connectGraphEmptyIfBothSubGraphsEmptyEQ {
        \schemaVar \term Graph EQ;
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term Graph graph1, graph2;

        \assumes(connect(edge,graph1,graph2)=EQ ==>)
        \find(isEmptyGraph(EQ))
        \sameUpdateLevel
        \replacewith(isEmptyGraph(graph1) & isEmptyGraph(graph2))
        \heuristics(simplify_enlarging)
    };

}


/*
  rules for hasVertex
*/
\rules{

    emptyGraphHasNoVertices {
        \schemaVar \term VertexLabel lookupNode;

        \find(hasVertex(lookupNode, emptyGraph))
        \replacewith(false)
        \heuristics(concrete)
    };

    vertexGraphHasVertex {
        \schemaVar \term VertexLabel node, lookupNode;

        \find(hasVertex(lookupNode, vertex(node)))
        \replacewith(lookupNode = node)
        \heuristics(simplify)
    };

    connectGraphHasVertexIfVertexInOneOfSubgraphs {
        \schemaVar \term VertexLabel lookupNode;
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term Graph graph1, graph2;

        \find(hasVertex(lookupNode, connect(edge,graph1,graph2)))
        \replacewith(hasVertex(lookupNode, graph1) | hasVertex(lookupNode, graph2))
        \heuristics(simplify_enlarging)
    };


    //EQ variants
    emptyGraphHasNoVerticesEQ {
        \schemaVar \term VertexLabel lookupNode;
        \schemaVar \term Graph EQ;

        \assumes(emptyGraph=EQ ==>)
        \find(hasVertex(lookupNode, emptyGraph))
        \sameUpdateLevel
        \replacewith(false)
        \heuristics(concrete)
    };

  vertexGraphHasVertexEQ {
        \schemaVar \term Graph EQ;
        \schemaVar \term VertexLabel node, lookupNode;

        \assumes(vertex(node)=EQ ==>)
        \find(hasVertex(lookupNode, EQ))
        \sameUpdateLevel
        \replacewith(lookupNode = node)
        \heuristics(simplify)
    };

    connectGraphHasVertexIfVertexInOneOfSubgraphsEQ {
        \schemaVar \term VertexLabel lookupNode;
        \schemaVar \term Graph EQ;
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term Graph graph1, graph2;

        \assumes(connect(edge,graph1,graph2)=EQ ==>)
        \find(hasVertex(lookupNode, EQ))
        \sameUpdateLevel
        \replacewith(hasVertex(lookupNode, graph1) | hasVertex(lookupNode, graph2))
        \heuristics(simplify_enlarging)
    };

}


/*
  rules for vertexCount, edgeCount
*/
\rules{

    emptyGraphZeroVertices {
        \find(vertexCount(emptyGraph))
        \replacewith(0)
        \heuristics(concrete)
    };

    emptyGraphZeroEdges {
        \find(edgeCount(emptyGraph))
        \replacewith(0)
        \heuristics(concrete)
    };

    vertexGraphOneVertex {
        \schemaVar \term VertexLabel node, lookupNode;

        \find(vertexCount(vertex(node)))
        \replacewith(1)
        \heuristics(simplify)
    };

    vertexGraphZeroEdges {
        \schemaVar \term VertexLabel node, lookupNode;

        \find(edgeCount(vertex(node)))
        \replacewith(0)
        \heuristics(simplify)
    };

    connectGraphVerticesBounds {
        \schemaVar \term EdgeLabel edgeLabel;
        \schemaVar \term Graph graph1, graph2;

        \find(vertexCount(connect(edgeLabel,graph1,graph2)))
        \sameUpdateLevel
        \add( vertexCount(connect(edgeLabel,graph1,graph2)) >= vertexCount(graph1),
              vertexCount(connect(edgeLabel,graph1,graph2)) <= vertexCount(graph1) + vertexCount(graph2) ==> )
    };

    connectGraphEdgesBounds {
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term Graph graph1, graph2;

        \find(edgeCount(connect(edge,graph1,graph2)))
        \sameUpdateLevel
        \add( edgeCount(connect(edge,graph1,graph2)) <= vertexCount(graph1) * vertexCount(graph2) + edgeCount(graph1) + edgeCount(graph2) ==> )
    };

    // TODO: EQ variant if needed
    connectDifferentVerticesVertexCount {
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term VertexLabel x,y;

        \find(vertexCount(connect(edge,vertex(x), vertex(y))))
        \replacewith(\if (x=y) \then (1) \else (2))
        \heuristics(simplify)
    };

    // TODO: EQ variant if needed
    connectDifferentVerticesEdgeCount {
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term VertexLabel x,y;

        \find(edgeCount(connect(edge,vertex(x), vertex(y))))
        \replacewith(\if (edge=zero) \then (0) \else (1))
        \heuristics(simplify)
    };


    //EQ variants

    emptyGraphZeroVerticesEQ {
        \schemaVar \term Graph EQ;

        \assumes(emptyGraph=EQ ==>)
        \find(vertexCount(EQ))
        \sameUpdateLevel
        \replacewith(0)
        \heuristics(concrete)
    };

    emptyGraphZeroEdgesEQ {
        \schemaVar \term Graph EQ;

        \assumes(emptyGraph=EQ ==>)
        \find(edgeCount(EQ))
        \sameUpdateLevel
        \replacewith(0)
        \heuristics(concrete)
    };

    vertexGraphOneVertexEQ {
        \schemaVar \term Graph EQ;
        \schemaVar \term VertexLabel node, lookupNode;

        \assumes(vertex(node)=EQ ==>)
        \find(vertexCount(EQ))
        \sameUpdateLevel
        \replacewith(1)
        \heuristics(simplify)
    };

    vertexGraphZeroEdgesEQ {
        \schemaVar \term Graph EQ;
        \schemaVar \term VertexLabel node, lookupNode;

        \assumes(vertex(node)=EQ ==>)
        \find(edgeCount(EQ))
        \sameUpdateLevel
        \replacewith(0)
        \heuristics(simplify)
    };

    connectGraphVerticesBoundsEQ {
        \schemaVar \term Graph EQ;
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term Graph graph1, graph2;

        \assumes (EQ=connect(edge,graph1,graph2)==>)
        \find(vertexCount(EQ))
        \sameUpdateLevel
        \add( vertexCount(EQ) >= vertexCount(graph1),
              vertexCount(EQ) <= vertexCount(graph1) + vertexCount(graph2) ==> )
    };

    connectGraphEdgesBounds {
        \schemaVar \term Graph EQ;
        \schemaVar \term EdgeLabel edge;
        \schemaVar \term Graph graph1, graph2;

        \assumes (EQ=connect(edge,graph1,graph2)==>)
        \find(edgeCount(EQ))
        \sameUpdateLevel
        \add( edgeCount(EQ) <= vertexCount(graph1) * vertexCount(graph2) + edgeCount(graph1) + edgeCount(graph2) ==> )
    };

}

//TODO: EQ variants
\rules {
    edgeDef {
        \schemaVar \term EdgeLabel edgeLabel;
        \schemaVar \term VertexLabel vertexLabel1, vertexLabel2;

        \find(edge(edgeLabel, vertexLabel1, vertexLabel2))
        \replacewith(connect(edgeLabel, vertex(vertexLabel1), vertex(vertexLabel2)))
    };

    edgeDefZero {
        \schemaVar \term VertexLabel vertexLabel1, vertexLabel2;

        \find(edge(zero, vertexLabel1, vertexLabel2))
        \replacewith(vertices(seqConcat(seqSingleton(vertexLabel1), seqSingleton(vertexLabel2))))
    };

    hasEdge{
        \schemaVar \term EdgeLabel edgeLabel;
        \schemaVar \term VertexLabel vertexLabel1, vertexLabel2, vertexLabel3, vertexLabel4;

        \find(hasEdge(vertexLabel1,vertexLabel2,edge(edgeLabel,vertexLabel3,vertexLabel4)))
        \replacewith(\if (edgeLabel != zero & vertexLabel1=vertexLabel3 & vertexLabel2=vertexLabel4)
                     \then(true) \else(false))
        \heuristics(simplify)
    };

   vertexCountForEdge {
        \schemaVar \term EdgeLabel edgeLabel;
        \schemaVar \term VertexLabel vertexLabel1, vertexLabel2;

        \find(vertexCount(edge(edgeLabel, vertexLabel1, vertexLabel2)))
        \replacewith(\if(vertexLabel1=vertexLabel2) \then(1) \else(2))
        \heuristics(simplify)
   };

   edgeCountForEdge {
        \schemaVar \term EdgeLabel edgeLabel;
        \schemaVar \term VertexLabel vertexLabel1, vertexLabel2;

        \find(edgeCount(edge(edgeLabel, vertexLabel1, vertexLabel2)))
        \replacewith(\if(edgeLabel=zero) \then(0) \else(1))
        \heuristics(simplify)
   };

}
