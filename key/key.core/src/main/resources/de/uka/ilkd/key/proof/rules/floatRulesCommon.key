// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
// 


\schemaVariables {
  \term float left, right;
}


\rules(programRules:Java){

  //primary
  //If the argument is NaN or an infinity, then the result is NaN.
  sinIsNaN {
      \schemaVar \term double arg;
      \find( sinDouble(arg) )
      \add( doubleIsNaN(arg) | doubleIsInfinite(arg) -> doubleIsNaN(sinDouble(arg)) ==>)
  };

  //primary
  //If the argument is zero, then the result is a zero with the same sign as the argument.
  sineIsZero {
      \schemaVar \term double arg;
      \find( sinDouble(arg) )
      \add( arg = 0.0 -> sinDouble(arg) = 0.0 ==>)
  };

  sineRange {
    \schemaVar \term double arg;
    \find( sinDouble(arg) )
    \add( sinDouble(arg) >= -1.0 & sinDouble(arg) <= 1.0 | doubleIsNaN(sinDouble(arg)) ==> )
  };

  sineIsNaNAlt {
    \schemaVar \term double arg;
    \find( doubleIsNaN(sinDouble(arg)) )
    \replacewith( doubleIsNaN(arg) | doubleIsInfinite(arg) )
  };

  sineRangeAlt {
    \schemaVar \term double arg;
    \find( ==> doubleIsNaN(sinDouble(arg)) )
    \add( sinDouble(arg) >= -1.0 & sinDouble(arg) <= 1.0 ==> )
  };

  //primary
  //If the argument is NaN or an infinity, then the result is NaN.
  cosIsNaN {
      \schemaVar \term double arg;
      \find( cosDouble(arg) )
      \add( doubleIsNaN(arg) | doubleIsInfinite(arg) -> doubleIsNaN(cosDouble(arg)) ==>)
  };

  cosRange {
     \schemaVar \term double arg;
     \find( cosDouble(arg) )
     \add( cosDouble(arg) >= 0.0 & cosDouble(arg) <= 1.0 | doubleIsNaN(cosDouble(arg)) ==> )
  };

  cosIsNaNAlt {
    \schemaVar \term double arg;
    \find( doubleIsNaN(cosDouble(arg)) )
    \replacewith( doubleIsNaN(arg) | doubleIsInfinite(arg) )
  };

  cosRangeAlt {
    \schemaVar \term double arg;
    \find( ==> doubleIsNaN(cosDouble(arg)) )
    \add( cosDouble(arg) >= 0.0 & cosDouble(arg) <= 1.0 ==> )
  };

  //primary
  //If the argument is NaN or its absolute value is greater than 1, then the result is NaN.
  asinIsNaN {
      \schemaVar \term double arg;
      \find( asinDouble(arg) )
      \add( doubleIsNaN(arg) | arg <-1.0 | arg > 1.0  -> doubleIsNaN(asinDouble(arg)) ==>)
  };

  //primary
  //If the argument is zero, then the result is a zero with the same sign as the argument.
  asineIsZero {
      \schemaVar \term double arg;
      \find( asinDouble(arg) )
      \add( arg = 0.0 -> asinDouble(arg) = 0.0 ==>)
  };

  //primary
  //If the argument is between -1 and 1 then the returned angle is in the range -pi/2 through pi/2
  asineRange {
      \schemaVar \term double arg;
      \find( asinDouble(arg) )
      \add(arg >=-1.0 & arg <= 1.0 -> asinDouble(arg) >= (-1.5707963267948966)& asinDouble(arg) <= (1.5707963267948966)==>)
  };

  //primary
  //If the argument is NaN or its absolute value is greater than 1, then the result is NaN
  acosIsNaN {
      \schemaVar \term double arg;
      \find( acosDouble(arg) )
      \add( doubleIsNaN(arg) | arg <-1.0 | arg > 1.0  -> doubleIsNaN(acosDouble(arg)) ==>)
  };

  //primary
  //If the argument is between -1 and 1 then the returned angle is in the range 0.0 through pi
  acosRange {
      \schemaVar \term double arg;
      \find( acosDouble(arg) )
      \add(arg >=-1.0 & arg <= 1.0 -> acosDouble(arg) >= 0.0 & acosDouble(arg) <= 3.14159265358979323846 ==>)
  };

  //primary
  //If the argument is NaN or an infinity, then the result is NaN
  tanIsNaN {
      \schemaVar \term double arg;
      \find( tanDouble(arg) )
      \add( doubleIsNaN(arg) | doubleIsInfinite(arg) -> doubleIsNaN(tanDouble(arg)) ==>)
  };

  //primary
  //If the argument is zero, then the result is a zero with the same sign as the argument.
  tanIsZero {
      \schemaVar \term double arg;
      \find( tanDouble(arg) )
      \add( arg = 0.0 -> tanDouble(arg) = 0.0 ==>)
  };

  //primary
  //If either argument is NaN, then the result is NaN
  atan2IsNaN{
      \schemaVar \term double arg1, arg2;
      \find( atan2Double(arg1 , arg2) )
      \add( doubleIsNaN(arg1) | doubleIsNaN(arg2) -> doubleIsNaN(atan2Double(arg1, arg2)) ==>)
  };

  //primary
  //If neither argument is NaN, then the returned angle is in the range of -pi through pi
  atan2Range {
      \schemaVar \term double arg1, arg2;
      \find( atan2Double(arg1, arg2) )
      \add(!doubleIsNaN(arg1) & !doubleIsNaN(arg2)->  atan2Double(arg1 , arg2) >= -3.14159265358979323846 & atan2Double(arg1 , arg2) <= 3.14159265358979323846 ==>)
  };

  //primary
  //If the argument is NaN or less than zero, then the result is NaN
  sqrtIsNaN {
      \schemaVar \term double arg;
      \find( sqrtDouble(arg) )
      \add( doubleIsNaN(arg) | arg < 0.0 -> doubleIsNaN(sqrtDouble(arg)) ==>)
  };

  //primary
  //If the argument is positive infinity, then the result is positive infinity.
  sqrtIsInfinite {
      \schemaVar \term double arg;
      \find( sqrtDouble(arg) )
      \add( doubleIsInfinite(arg) & arg > 0.0 -> doubleIsInfinite(sqrtDouble(arg)) & sqrtDouble(arg) > 0.0 ==>)
  };

  //primary
  //If the argument is positive zero or negative zero, then the result is the same as the argument.
  sqrtIsZero {
      \schemaVar \term double arg;
      \find( sqrtDouble(arg) )
      \add( arg = 0.0 -> sqrtDouble(arg) = 0.0 ==>)
  };

  //proved by SMT solver
  //If the argument is not NaN and greater or equal to zero, then the result is not NaN
  sqrtIsNotNaN {
      \schemaVar \term double arg;
      \find( sqrtDouble(arg) )
      \add( !doubleIsNaN(arg) & arg >= 0.0 -> !doubleIsNaN(sqrtDouble(arg)) ==>)
  };

  //primary
  //If the second argument is positive or negative zero, then the result is 1.0.
  powIsOne {
      \schemaVar \term double arg1 , arg2;
      \find( powDouble(arg1 , arg2) )
      \add( arg2 = 0.0 -> powDouble(arg1, arg2) = 1.0 ==>)
  };

  //primary
  //If the second argument is 1.0 and the first argument is not a NaN, then the result is the same as the first argument.
  powIsNotNaN {
      \schemaVar \term double arg1, arg2;
      \find( powDouble(arg1, arg2) )
      \add(!doubleIsNaN(arg1) & arg2 = 1.0 -> powDouble(arg1, arg2) = arg1  ==>)
  };

  //primary
  //If the second argument is NaN, then the result is NaN.
  powIsNaN1 {
      \schemaVar \term double arg1, arg2;
      \find( powDouble(arg1, arg2) )
      \add(doubleIsNaN(arg2) -> doubleIsNaN (powDouble(arg1, arg2)) ==>)
  };

  //primary
  //If the first argument is NaN and the second argument is nonzero, then the result is NaN.
  powIsNaN2 {
      \schemaVar \term double arg1, arg2;
      \find( powDouble(arg1, arg2) )
      \add(doubleIsNaN(arg1) & arg2 != 0.0 -> doubleIsNaN (powDouble(arg1, arg2)) ==>)
  };

  //primary
  //If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or
  //the absolute value of the first argument is less than 1 and the second argument is negative infinity,
  //then the result is positive infinity.
  powIsInfinite1 {
      \schemaVar \term double arg1, arg2;
      \find( powDouble(arg1, arg2) )
      \add(((arg1 >= 1.0 | arg1 <= -1.0) & doubleIsInfinite(arg2) & arg2 > 0.0) |
            (arg1 < 1.0 & arg1 > -1.0 & doubleIsInfinite(arg2) & arg2 < 0.0)
           -> doubleIsInfinite (powDouble(arg1, arg2)) & powDouble(arg1, arg2) > 0.0 ==>)
  };

  //primary
  //If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or
  //the absolute value of the first argument is less than 1 and the second argument is positive infinity,
  //then the result is positive zero.
  powIsZero1 {
      \schemaVar \term double arg1, arg2;
      \find( powDouble(arg1, arg2) )
      \add(((arg1 >= 1.0 | arg1 <= -1.0) & doubleIsInfinite(arg2) & arg2 < 0.0) |
            (arg1 < 1.0 & arg1 > -1.0 & doubleIsInfinite(arg2) & arg2 > 0.0)
           -> powDouble(arg1, arg2) = 0.0 ==>)
  };

  //primary
  //If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN.
  powIsNaN3 {
      \schemaVar \term double arg1, arg2;
      \find( powDouble(arg1, arg2) )
      \add((arg1 >= 1.0 | arg1 <= -1.0) & doubleIsInfinite(arg2) -> doubleIsNaN (powDouble(arg1, arg2)) ==>)
  };

  //primary
  //the first argument is positive zero and the second argument is greater than zero, or
  //the first argument is positive infinity and the second argument is less than zero,
  //then the result is positive zero.
  powIsZero2 {
      \schemaVar \term double arg1, arg2;
      \find( powDouble(arg1, arg2) )
      \add((javaEqDouble(arg1 , 0.0) & arg2 > 0.0) | (doubleIsInfinite(arg1) & arg1 > 0.0 & arg2 < 0.0)
           -> powDouble(arg1, arg2) = 0.0 ==>)
  };

  //primary
  //the first argument is positive zero and the second argument is less than zero, or
  //the first argument is positive infinity and the second argument is greater than zero,
  //then the result is positive infinity.
  powIsInfinite2 {
      \schemaVar \term double arg1, arg2;
      \find( powDouble(arg1, arg2) )
      \add((javaEqDouble(arg1 , 0.0) & arg2 < 0.0) | (doubleIsInfinite(arg1) & arg1 > 0.0 & arg2 > 0.0)
           -> doubleIsInfinite(powDouble(arg1, arg2)) & powDouble(arg1, arg2) > 0.0  ==>)
  };

  //primary
  //If the argument is NaN, the result is NaN.
  expIsNaN {
      \schemaVar \term double arg;
      \find( expDouble(arg) )
      \add( doubleIsNaN(arg)  -> doubleIsNaN(expDouble(arg)) ==>)
  };

  //primary
  //If the argument is positive infinity, then the result is positive infinity.
  expIsInfinite {
      \schemaVar \term double arg;
      \find( expDouble(arg) )
      \add( doubleIsInfinite(arg) & arg > 0.0 -> doubleIsInfinite(expDouble(arg)) & expDouble(arg) > 0.0 ==>)
  };

  //primary
  //If the argument is negative infinity, then the result is positive zero.
  expIsZero {
      \schemaVar \term double arg;
      \find( expDouble(arg) )
      \add( doubleIsInfinite(arg) & arg < 0.0 ->  expDouble(arg) = 0.0 ==>)
  };

  //primary
  //If the argument is NaN, the result is NaN.
  atanIsNaN {
      \schemaVar \term double arg;
      \find( atanDouble(arg) )
      \add( doubleIsNaN(arg)  -> doubleIsNaN(atanDouble(arg)) ==>)
  };

  //primary
  //If the argument is zero, then the result is a zero with the same sign as the argument.
  atanIsZero {
      \schemaVar \term double arg;
      \find( atanDouble(arg) )
      \add( arg = 0.0 -> atanDouble(arg) = 0.0 ==>)
  };

  //primary
  //If the argument is not NaN,  the returned angle is in the range -pi/2 through pi/2
  atanRange {
      \schemaVar \term double arg;
      \find( atanDouble(arg) )
      \add(!doubleIsNaN(arg) ->  atanDouble(arg) >= (-1.5707963267948966) & atanDouble(arg) <= 1.5707963267948966 ==>)
  };

}

