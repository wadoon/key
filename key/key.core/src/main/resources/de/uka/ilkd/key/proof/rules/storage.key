\sorts {
	Field;
	Heap; // Replace with 'Memory'?
	Path;
	Storage;
	Struct;
	
	\generic alphaObj \extends Object;
	\generic alpha \extends any;
}

\functions {
	// Storage; structs
	Struct emptyStruct;
	Struct writeStruct(Struct, Field, any);
	alpha alpha::readStruct(Struct, Field);
	
	// Storage; contracts
	Storage emptyStg;
	Storage writeField(Storage, Field, any);
	alpha alpha::readField(Storage, Field);
	
	// Storage to memory
	Heap struct2Mem(Heap, Object, Struct); // convert struct in storage to Object in memory
	
	// Memory to Storage (yet to be formalized)
	Storage object2Stg(Storage, Heap, Object); // convert Object in memory to struct in storage TODO change rules for new param list
	
	// Storage variables
	\unique Path headStoragePath(Field);
	\unique Path consStoragePath(Struct, Path);
	Storage writePath(Storage, Path, any);
	alpha alpha::readPath(Storage, Path);
	
	// default value for a field
    alpha alpha::defaultValue;
}

\programVariables {

Storage storage;

}