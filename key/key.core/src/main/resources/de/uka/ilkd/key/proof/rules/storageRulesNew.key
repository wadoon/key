\sorts{
	\generic alpha \extends any;
}

\schemaVariables {
	\formula post;

	\modalOperator {box_transaction, diamond_transaction, box, diamond} #allmodal;

	\program JavaIntExpression #i;
	\program SimpleExpression #se, #se0;
	\program Variable #v, #v0, #a, #a0, #this, #f, #f0;

	\term alpha x;
	\term Field f, f0;
	\term Heap heap;
	\term Object o, o0;
	\term Path path;
	\program Variable stg;
	\term Struct struct;
}

\rules(programRules:Solidity) {
	readEmptyStruct {
		\find(alpha::readStruct(emptyStruct, f))
		\replacewith ( alpha::defaultValue )
	};

	readOfWriteStruct {
		\find(alpha::readStruct(writeStruct(struct, f, x), f0))
		\replacewith( \if (f = f0) \then (x) \else (alpha::readStruct(struct, f0)) )
	};

	readEmptyStorage {
		\find(alpha::readField(emptyStg, f))
		\replacewith ( alpha::defaultValue )
	};

	readOfWriteStorage {
		\find(alpha::readField(writeField(stg, f, x), f0))
		\replacewith( \if (f = f0) \then (x) \else (alpha::readField(stg, f0)) )
	};

	selectStructToMem {
		\find(alpha::select(struct2Mem(heap, o, struct), o0, f))
		\replacewith( \if (o = o0) \then (alpha::readStruct(struct, f)) \else (alpha::select(heap, o0, f)))
	};




}