


/**
  READ FIRST BEFORE EDITING:
    This file interpretes integer semantics sensitive functions
  but without overflows.

  In case of changes PLEASE preserve the files intended meaning. If
  you want to test some rules before implementing them completely,
  please create a new file and include it into the standardRules.key

  Files:
     // rules treating Java programs 

     integerAssignment2UpdateRules.key: all integer related assignment
                                        rules for normal assignments      
     integerAssignment2UpdateRulesTout.key: all integer related assignment
                                        rules for throughout assignments      
     integerAssignment2UpdateRulesTraOnly.key: all integer related assignment
                                        rules for traonly assignments
     

     integerCommonRules.key: integer semantics independent rules which 
         transform programs

     // rules treating integer semantics sensitive functions 

     intRules.key: rules interpreting the generic translation
        functions 'java...' faithfully according to the Java Language
        Specification (sound, but a lot of divisions and modulo
        computation need to be performed)

     intRulesIgnoringOverflow.key: rules interpreting the generic translation
        functions 'java...' without overflow (not sound)  

     intRulesArith.key: rules interpreting the generic translation
        functions 'java...' as in intRulesIgnoringOverflow.key, but 
        requires to show absence of overflow or that the property to
        be proven does not depend on the value of an expression where
        an overflow occured (sound, but incomplete)
   
     // rules treating integer semantics insensitive functions 

     integerSimplificationRules.key: rules for arithmetic functions
         that do not depend on the chose integer semantics
        
*/



\schemaVariables {
  \term int left, right, i, i0, i1 ;
  \term numbers iz, jz;
}



\rules(programRules:Java & (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF)) {

//--------------------------------------------------------------------------
// Axioms defining the integer translation functions 
//--------------------------------------------------------------------------

  translateJavaUnaryMinusInt {
     \find (javaUnaryMinusInt(left))
     \replacewith(neg(left))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaUnaryMinus"
  };

  translateJavaUnaryMinusLong {
     \find (javaUnaryMinusLong(left))
     \replacewith(neg(left))
     \heuristics(javaIntegerSemantics,simplify)  
     \displayname "translateJavaUnaryMinus"
  };

  // TODO wiesler Why not? Bigint has bitwise negation
/** inverting bits is not canonical defineable in this semantics
  translateJavaBitwiseNegation {
     \find(javaBitwiseNegation(left))
     \replacewith(???)
     \heuristics(javaIntegerSemantics,simplify)  
     \displayname "translateJavaUnaryMinus"
  };
*/

  translateJavaAddInt {
     \find(javaAddInt(left,right))
     \replacewith(add(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaAdd"
  };

  translateJavaAddLong{
     \find(javaAddLong(left,right))
     \replacewith(add(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaAdd"
  };

  translateJavaSubInt{
     \find(javaSubInt(left,right))
     \replacewith(sub(left,right))
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaSub"
  };
  
  translateJavaSubLong{
     \find(javaSubLong(left,right))
     \replacewith(sub(left,right))  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaSub"
  };
  
  translateJavaMulInt{
     \find(javaMulInt(left,right))
     \replacewith(mul(left,right))  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaMul"
  };
  
  translateJavaMulLong{
     \find(javaMulLong(left,right))
     \replacewith(mul(left,right))  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaMul"
  };

  // TODO wiesler: jmod or mod?
  translateJavaMod{
     \find(javaMod(left,right))
     \replacewith(jmod(left,right))  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaMod"
  };

  // TODO wiesler: jdiv or div?
  translateJavaDivInt{
     \find(javaDivInt(left,right))
     \replacewith(jdiv(left,right))  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaDiv"
  };

  // TODO wiesler: jdiv or div?
  translateJavaDivLong{
     \find(javaDivLong(left,right))
     \replacewith(jdiv(left,right))  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaDiv"
  };

  translateJavaCastByte{
     \find(javaCastByte(left))
     \replacewith(left)  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };
  
  translateJavaCastShort{
     \find(javaCastShort(left))
     \replacewith(left)  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };
  
  translateJavaCastInt{
     \find(javaCastInt(left))
     \replacewith(left)  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };
  
  translateJavaCastLong{
     \find(javaCastLong(left))
     \replacewith(left)  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };
  
  translateJavaCastChar{
     \find(javaCastChar(left))
     \replacewith(left)  
     \heuristics(javaIntegerSemantics,simplify)
     \displayname "translateJavaCast"
  };

  translateJavaShiftRightInt{
      \find(javaShiftRightInt(left,right))
      \replacewith(shiftright(left, right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftRight"
  };

  translateJavaShiftRightLong{
      \find(javaShiftRightLong(left,right))
      \replacewith(shiftright(left, right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftRight"
  };

  translateJavaShiftLeftInt{
      \find(javaShiftLeftInt(left,right))
      \replacewith(shiftleft(left, right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftLeft"
  };

  translateJavaShiftLeftLong{
      \find(javaShiftLeftLong(left,right))
      \replacewith(shiftleft(left, right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaShiftLeft"
  };

  /*
  translateJavaUnsignedShiftRightInt{
      \find(javaUnsignedShiftRightInt(left,right))
      \replacewith(unsignedshiftrightJint(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaUnsignedShiftRight"
  };

  translateJavaUnsignedShiftRightLong{
      \find(javaUnsignedShiftRightLong(left,right))
      \replacewith(unsignedshiftrightJlong(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaUnsignedShiftRight"
  };
  */

  translateJavaBitwiseOrInt{
      \find(javaBitwiseOrInt(left,right))
      \replacewith(binaryOr(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseOr"
  };

  translateJavaBitwiseOrLong{
      \find(javaBitwiseOrLong(left,right))
      \replacewith(binaryOr(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseOr"
  };

  translateJavaBitwiseAndInt{
      \find(javaBitwiseAndInt(left,right))
      \replacewith(binaryAnd(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseAnd"
  };

  translateJavaBitwiseAndLong{
      \find(javaBitwiseAndLong(left,right))
      \replacewith(binaryAnd(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseAnd"
  };

  translateJavaBitwiseXOrInt{
      \find(javaBitwiseXOrInt(left,right))
      \replacewith(binaryXOr(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseXOr"
  };

  translateJavaBitwiseXOrLong{
      \find(javaBitwiseXOrLong(left,right))
      \replacewith(binaryXOr(left,right))
      \heuristics(javaIntegerSemantics)
      \displayname "translateJavaBitwiseXOr"
  };
}
