\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 30 00:01:20 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Wed Nov 30 00:01:20 CET 2016
name=powExpAdd
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "6d73cdc7b35c11e06d16e181ff733e7fd33d2a3c"))

(autoModeTime "580313340")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "f_base,f_exp1,f_exp2"))
(rule "notRight" (formula "2"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "cut" (inst "cutFormula=\\forall int d;
  (   leq(Z(0(#)), d)
   ->   pow(f_base, add(f_exp1, d))
      = mul(pow(f_base, f_exp1), pow(f_base, d)))"))
(branch "CUT: forall int d; ( 0 <= d -> pow(f_base, f_exp1 + d) = pow(f_base, f_exp1) * pow(f_base, d)) TRUE"
   (rule "allLeftHide" (formula "1") (inst "t=f_exp2"))
   (rule "impLeft" (formula "1"))
   (branch "Case 1"
      (rule "eqSymm" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "0"))
      (rule "inEqSimp_leqRight" (formula "3"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
      (rule "qeq_literals" (formula "3") (term "0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
   (branch "Case 2"
      (rule "close" (formula "4") (ifseqformula "1"))
   )
)
(branch "CUT: forall int d; ( 0 <= d -> pow(f_base, f_exp1 + d) = pow(f_base, f_exp1) * pow(f_base, d)) FALSE"
   (rule "hide_right" (formula "4"))
   (rule "auto_int_induction_geqZero" (formula "3") (inst "sk=d_1"))
   (branch "Base Case"
      (builtin "One Step Simplification" (formula "3"))
      (rule "add_zero_right" (formula "3") (term "1,0,1"))
      (rule "leq_literals" (formula "3") (term "0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "polySimp_elimOne" (formula "3") (term "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "closeTrue" (formula "3"))
   )
   (branch "Step Case (positive)"
      (rule "impRight" (formula "3"))
      (rule "impRight" (formula "4"))
      (rule "andLeft" (formula "2"))
      (rule "impLeft" (formula "3"))
      (branch "Case 1"
         (rule "eqSymm" (formula "6"))
         (rule "polySimp_addComm0" (formula "1") (term "1"))
         (rule "polySimp_addComm0" (formula "6") (term "1,1"))
         (rule "polySimp_addComm0" (formula "6") (term "1,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,1,1"))
         (rule "inEqSimp_leqRight" (formula "5"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1,0"))
         (rule "add_zero_right" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
      (branch "Case 2"
         (rule "cut" (inst "cutFormula=  pow(f_base, add(f_exp1, add(d_1, Z(1(#)))))
= pow(f_base, add(add(f_exp1, d_1), Z(1(#))))"))
         (branch "CUT: pow(f_base, f_exp1 + (d_1 + 1)) = pow(f_base, f_exp1 + d_1 + 1) TRUE"
            (rule "geq_to_leq" (formula "3"))
            (rule "cut" (inst "cutFormula=\\forall int x;
  (   leq(Z(0(#)), x)
   ->   pow(f_base, add(x, Z(1(#))))
      = mul(pow(f_base, x), f_base))"))
            (branch "CUT: forall int x; ( 0 <= x -> pow(f_base, x + 1) = pow(f_base, x) * f_base) TRUE"
               (rule "eqSymm" (formula "2"))
               (rule "eqSymm" (formula "5"))
               (rule "eqSymm" (formula "8"))
               (rule "eqSymm" (formula "1") (term "1,0"))
               (rule "polySimp_addComm0" (formula "3") (term "1"))
               (rule "polySimp_addComm1" (formula "2") (term "1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "1,1"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1,0"))
               (rule "polySimp_addComm0" (formula "8") (term "1,1"))
               (rule "polySimp_addComm0" (formula "1") (term "1,1,1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0,1,1"))
               (rule "polySimp_addComm0" (formula "8") (term "0,1,1"))
               (rule "polySimp_addComm1" (formula "2") (term "1,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
               (rule "leq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "nnf_imp2or" (formula "1") (term "0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "allLeft" (formula "1") (inst "t=f_exp1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_critPair" (formula "4") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
               (rule "polySimp_mulComm1" (formula "4") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulAssoc" (formula "4") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,1,0"))
               (rule "times_zero_1" (formula "4") (term "1,0"))
               (rule "add_zero_right" (formula "4") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1"))
               (rule "polySimp_elimOne" (formula "4") (term "1"))
               (rule "allLeft" (formula "2") (inst "t=d_1"))
               (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "2") (term "0,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "allLeft" (formula "3") (inst "t=add(Z(1(#)), d_1)"))
               (rule "polySimp_addAssoc" (formula "3") (term "1,1,1"))
               (rule "add_literals" (formula "3") (term "0,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3") (term "0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
               (rule "polySimp_elimOne" (formula "3") (term "0,0"))
               (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "3") (term "0,0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "allLeft" (formula "4") (inst "t=add(Z(1(#)), f_exp1)"))
               (rule "polySimp_addAssoc" (formula "4") (term "1,1,1"))
               (rule "add_literals" (formula "4") (term "0,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "4") (term "0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "0,0"))
               (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "9"))
               (rule "qeq_literals" (formula "4") (term "0,0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "polySimp_critPair" (formula "7") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "7") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "7") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0"))
               (rule "polySimp_mulComm1" (formula "7") (term "1,1,0"))
               (rule "polySimp_mulComm1" (formula "7") (term "0,1,1,0"))
               (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0"))
               (rule "polySimp_addComm1" (formula "7") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "1,1,0"))
               (rule "times_zero_1" (formula "7") (term "1,0"))
               (rule "add_zero_right" (formula "7") (term "0"))
               (rule "apply_eq_monomials" (formula "7") (term "1,0") (ifseqformula "9"))
               (rule "polySimp_rightDist" (formula "7") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
               (rule "polySimp_mulComm1" (formula "7") (term "1,0,1,0"))
               (rule "polySimp_mulComm1" (formula "7") (term "0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0,1,0"))
               (rule "polySimp_pullOutFactor2b" (formula "7") (term "1,0"))
               (rule "add_literals" (formula "7") (term "1,1,1,0"))
               (rule "times_zero_1" (formula "7") (term "1,1,0"))
               (rule "add_zero_right" (formula "7") (term "1,0"))
               (rule "polySimp_pullOutFactor2" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "1,0"))
               (rule "times_zero_1" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "polySimp_critPair" (formula "7") (ifseqformula "2"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0"))
               (rule "polySimp_mulComm1" (formula "7") (term "1,1,0"))
               (rule "polySimp_mulComm1" (formula "7") (term "0,1,1,0"))
               (rule "polySimp_mulAssoc" (formula "7") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,0,1,0"))
               (rule "polySimp_rightDist" (formula "7") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "7") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "7") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0"))
               (rule "polySimp_addComm1" (formula "7") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "1,1,0"))
               (rule "times_zero_1" (formula "7") (term "1,0"))
               (rule "add_zero_right" (formula "7") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1"))
               (rule "polySimp_elimOne" (formula "7") (term "1"))
               (rule "add_non_neg_square" (inst "squareFac=pow(f_base, d_1)"))
               (rule "polySimp_critPair" (formula "9") (ifseqformula "4"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "polySimp_mulComm1" (formula "9") (term "1,1,0"))
               (rule "polySimp_mulComm1" (formula "9") (term "0,1,1,0"))
               (rule "polySimp_mulAssoc" (formula "9") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "9") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,1,0"))
               (rule "times_zero_1" (formula "9") (term "1,0"))
               (rule "add_zero_right" (formula "9") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1"))
               (rule "polySimp_elimOne" (formula "9") (term "1"))
               (rule "polySimp_critPair" (formula "10") (ifseqformula "5"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "polySimp_mulComm1" (formula "10") (term "1,1,0"))
               (rule "polySimp_mulComm1" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1"))
               (rule "polySimp_elimOne" (formula "10") (term "1"))
               (rule "add_non_neg_square" (inst "squareFac=pow(f_base, add(Z(1(#)), f_exp1))"))
               (rule "polySimp_critPair" (formula "13") (ifseqformula "4"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
               (rule "polySimp_mulComm1" (formula "13") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "13") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "13") (term "0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "1,1,0"))
               (rule "times_zero_1" (formula "13") (term "1,0"))
               (rule "add_zero_right" (formula "13") (term "0"))
               (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "12"))
               (rule "polySimp_sepPosMonomial" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1"))
               (rule "polySimp_elimOne" (formula "13") (term "1"))
               (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "13"))
               (rule "apply_eq_monomials" (formula "11") (term "0") (ifseqformula "13"))
               (rule "polySimp_homoEq" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "0,1,1,0"))
               (rule "polySimp_mulComm1" (formula "11") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm1" (formula "11") (term "0,1,0,1,1,0"))
               (rule "polySimp_pullOutFactor2b" (formula "11") (term "1,1,0"))
               (rule "add_literals" (formula "11") (term "1,1,1,1,0"))
               (rule "times_zero_1" (formula "11") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "11") (term "1,1,0"))
               (rule "polySimp_mulAssoc" (formula "11") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
               (rule "apply_eq_monomials" (formula "10") (term "0") (ifseqformula "13"))
               (rule "polySimp_homoEq" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_mulComm1" (formula "10") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm1" (formula "10") (term "0,1,0,1,1,0"))
               (rule "polySimp_pullOutFactor2b" (formula "10") (term "1,1,0"))
               (rule "add_literals" (formula "10") (term "1,1,1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "10") (term "1,1,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,0,1,0"))
               (rule "apply_eq_monomials" (formula "9") (term "0") (ifseqformula "14"))
               (rule "polySimp_homoEq" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,0,1,1,0"))
               (rule "polySimp_mulComm1" (formula "9") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm1" (formula "9") (term "0,1,0,1,1,0"))
               (rule "polySimp_pullOutFactor2b" (formula "9") (term "1,1,0"))
               (rule "add_literals" (formula "9") (term "1,1,1,1,0"))
               (rule "times_zero_1" (formula "9") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "9") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
               (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,0"))
               (rule "times_zero_1" (formula "9") (term "0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "applyEq" (formula "11") (term "1") (ifseqformula "12"))
               (rule "polySimp_sepNegMonomial" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "polySimp_sepNegMonomial" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "add_non_neg_square" (inst "squareFac=pow(f_base, add(Z(1(#)), d_1))"))
               (rule "polySimp_critPair" (formula "6") (ifseqformula "5"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "6") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0"))
               (rule "polySimp_mulComm1" (formula "6") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
               (rule "polySimp_mulComm1" (formula "6") (term "0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
               (rule "add_literals" (formula "6") (term "1,1,0"))
               (rule "times_zero_1" (formula "6") (term "1,0"))
               (rule "add_zero_right" (formula "6") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1"))
               (rule "polySimp_elimOne" (formula "6") (term "1"))
               (rule "polySimp_critPair" (formula "8") (ifseqformula "4"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "8") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
               (rule "polySimp_mulComm1" (formula "8") (term "1,1,0"))
               (rule "polySimp_mulComm1" (formula "8") (term "0,1,1,0"))
               (rule "polySimp_rightDist" (formula "8") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "8") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "8") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "8") (term "0"))
               (rule "polySimp_addComm1" (formula "8") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
               (rule "add_literals" (formula "8") (term "1,1,0"))
               (rule "times_zero_1" (formula "8") (term "1,0"))
               (rule "add_zero_right" (formula "8") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "8"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1"))
               (rule "polySimp_elimOne" (formula "8") (term "1"))
               (rule "polySimp_critPair" (formula "9") (ifseqformula "5"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "9") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "9") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "9") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "9") (term "1,0"))
               (rule "polySimp_mulComm1" (formula "9") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
               (rule "polySimp_mulComm1" (formula "9") (term "0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "9") (term "0"))
               (rule "polySimp_addComm1" (formula "9") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "1,1,0"))
               (rule "times_zero_1" (formula "9") (term "1,0"))
               (rule "add_zero_right" (formula "9") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1"))
               (rule "polySimp_elimOne" (formula "9") (term "1"))
               (rule "polySimp_critPair" (formula "10") (ifseqformula "7"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "10") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "10") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "polySimp_mulComm1" (formula "10") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "0,1,0"))
               (rule "polySimp_mulComm1" (formula "10") (term "0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "polySimp_addComm1" (formula "10") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
               (rule "add_literals" (formula "10") (term "1,1,0"))
               (rule "times_zero_1" (formula "10") (term "1,0"))
               (rule "add_zero_right" (formula "10") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1"))
               (rule "polySimp_elimOne" (formula "10") (term "1"))
               (rule "polySimp_critPair" (formula "4") (ifseqformula "5"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "4") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
               (rule "polySimp_mulComm1" (formula "4") (term "1,1,0"))
               (rule "polySimp_mulComm1" (formula "4") (term "0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,1,0"))
               (rule "times_zero_1" (formula "4") (term "1,0"))
               (rule "add_zero_right" (formula "4") (term "0"))
               (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "18"))
               (rule "polySimp_pullOutFactor2" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,0"))
               (rule "times_zero_1" (formula "4") (term "0"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "polySimp_critPair" (formula "4") (ifseqformula "7"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0"))
               (rule "polySimp_mulComm1" (formula "4") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
               (rule "polySimp_mulComm1" (formula "4") (term "0,1,1,0"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "polySimp_mulComm1" (formula "4") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "4") (term "0,0,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "polySimp_addComm1" (formula "4") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "1,1,0"))
               (rule "times_zero_1" (formula "4") (term "1,0"))
               (rule "add_zero_right" (formula "4") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1"))
               (rule "polySimp_elimOne" (formula "4") (term "1"))
               (rule "apply_eq_monomials" (formula "16") (term "0") (ifseqformula "4"))
               (rule "polySimp_homoEq" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "0,1,1,0"))
               (rule "polySimp_mulComm1" (formula "16") (term "1,0,1,1,0"))
               (rule "polySimp_mulComm1" (formula "16") (term "0,1,0,1,1,0"))
               (rule "polySimp_pullOutFactor2b" (formula "16") (term "1,1,0"))
               (rule "add_literals" (formula "16") (term "1,1,1,1,0"))
               (rule "times_zero_1" (formula "16") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "16") (term "1,1,0"))
               (rule "polySimp_mulAssoc" (formula "16") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
               (rule "applyEqRigid" (formula "10") (term "1") (ifseqformula "4"))
               (rule "polySimp_sepNegMonomial" (formula "16"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0"))
               (rule "polySimp_elimOne" (formula "16") (term "0"))
               (rule "add_non_neg_square" (inst "squareFac=pow(f_base, f_exp1)"))
               (rule "allLeft" (formula "14") (inst "t=add(Z(2(#)), d_1)"))
               (rule "polySimp_addAssoc" (formula "14") (term "1,1,1"))
               (rule "add_literals" (formula "14") (term "0,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "14") (term "0,0"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "allLeft" (formula "15") (inst "t=add(Z(2(#)), f_exp1)"))
               (rule "polySimp_addAssoc" (formula "15") (term "1,1,1"))
               (rule "add_literals" (formula "15") (term "0,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "15") (term "0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "15") (term "0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "0,0"))
               (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "23"))
               (rule "qeq_literals" (formula "15") (term "0,0"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "allLeft" (formula "16") (inst "t=add(add(Z(1(#)), d_1), f_exp1)"))
               (rule "polySimp_addAssoc" (formula "16") (term "1,1,1"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,1,1,1"))
               (rule "add_literals" (formula "16") (term "0,0,1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "16") (term "0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0"))
               (rule "allLeft" (formula "17") (inst "t=add(d_1, f_exp1)"))
               (rule "polySimp_addAssoc" (formula "17") (term "1,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
               (rule "applyEqRigid" (formula "17") (term "0,1") (ifseqformula "22"))
               (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "27"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_sepNegMonomial1" (formula "17"))
               (rule "polySimp_mulLiterals" (formula "17") (term "0"))
               (rule "polySimp_elimOne" (formula "17") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "17"))
               (rule "mul_literals" (formula "25") (term "0,0"))
               (rule "add_zero_left" (formula "25") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "25"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0"))
               (rule "polySimp_elimOne" (formula "25") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "25"))
               (rule "qeq_literals" (formula "19") (term "0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "closeFalse" (formula "19"))
            )
            (branch "CUT: forall int x; ( 0 <= x -> pow(f_base, x + 1) = pow(f_base, x) * f_base) FALSE"
               (rule "hide_right" (formula "8"))
               (rule "hide_left" (formula "1"))
               (rule "hide_left" (formula "3"))
               (rule "hide_left" (formula "1"))
               (rule "hide_left" (formula "1"))
               (rule "hide_left" (formula "1"))
               (rule "hide_left" (formula "1"))
               (rule "allRight" (formula "1") (inst "sk=x_1"))
               (rule "impRight" (formula "1"))
               (rule "leq_to_geq" (formula "1"))
               (rule "powExpSucc" (formula "2") (term "0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "closeTrue" (formula "2"))
            )
         )
         (branch "CUT: pow(f_base, f_exp1 + (d_1 + 1)) = pow(f_base, f_exp1 + d_1 + 1) FALSE"
            (rule "eqSymm" (formula "3"))
            (rule "eqSymm" (formula "6"))
            (rule "eqSymm" (formula "7"))
            (rule "polySimp_addComm0" (formula "1") (term "1"))
            (rule "polySimp_addComm0" (formula "3") (term "1,1"))
            (rule "polySimp_addComm1" (formula "6") (term "1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "1,1"))
            (rule "polySimp_addComm0" (formula "7") (term "1,1"))
            (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,1,1"))
            (rule "polySimp_addComm0" (formula "7") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "6") (term "1,0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "closeTrue" (formula "6"))
         )
      )
   )
   (branch "Step Case (negative)"
      (rule "impRight" (formula "3"))
      (rule "impRight" (formula "4"))
      (rule "andLeft" (formula "2"))
      (rule "eqSymm" (formula "6"))
      (rule "eqSymm" (formula "3") (term "1"))
      (rule "polySimp_elimSub" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "polySimp_elimSub" (formula "6") (term "1,1,0"))
      (rule "mul_literals" (formula "6") (term "1,1,1,0"))
      (rule "polySimp_elimSub" (formula "6") (term "1,1,1"))
      (rule "mul_literals" (formula "6") (term "1,1,1,1"))
      (rule "polySimp_addComm0" (formula "3") (term "1,1,1"))
      (rule "polySimp_addComm0" (formula "1") (term "1"))
      (rule "polySimp_addComm0" (formula "6") (term "1,1,0"))
      (rule "polySimp_addComm0" (formula "6") (term "1,1"))
      (rule "polySimp_addComm0" (formula "6") (term "0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
