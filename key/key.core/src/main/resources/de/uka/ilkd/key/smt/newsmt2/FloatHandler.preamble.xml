<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

    <comment>These are the preamble snippets needed for handling floating point numbers</comment>

    <entry key="float.axioms">
        (assert (forall ((f Float32)) (= (u2f (f2u f)) f)))
        (assert (forall ((x U)) (=> (= (typeof x) sort_float) (= (f2u (u2f x)) x))))
        (assert (forall ((x U)) (=> (instanceof x sort_float) (= (typeof x ) sort_float))))
        (assert (forall ((f Float32)) (= (typeof (f2u f)) sort_float)))

        (assert (forall ((d Float64)) (= (u2d (d2u d)) d)))
        (assert (forall ((x U)) (=> (= (typeof x) sort_double) (= (d2u (u2d x)) x))))
        (assert (forall ((x U)) (=> (instanceof x sort_double) (= (typeof x ) sort_double))))
        (assert (forall ((d Float64)) (= (typeof (d2u d)) sort_double)))
    </entry>

    <entry key="float.decls">
        (declare-fun u2f (U) Float32)
        (declare-fun f2u (Float32) U)
        (declare-const sort_float T)

        (declare-fun u2d (U) Float64)
        (declare-fun d2u (Float64) U)
        (declare-const sort_double T)
    </entry>

    <entry key="sinDouble.axioms">
        (assert (forall ((a Float64)) (=> (not (fp.isNaN a)) (and (fp.leq (sinDouble a) (fp #b0 #b01111111111
        #b0000000000000000000000000000000000000000000000000000))(fp.geq (sinDouble a) (fp #b1 #b01111111111
        #b0000000000000000000000000000000000000000000000000000))))))
        (assert (forall ((a Float64)) (=> (or (fp.isNaN a)(fp.isInfinite a)) (fp.isNaN (sinDouble a)))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (sinDouble a) (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b1 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (sinDouble a) (fp #b1 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))

    </entry>

    <entry key="sinDouble.decls">
        (declare-fun sinDouble (Float64) Float64)
    </entry>

    <entry key="cosDouble.axioms">
        (assert (forall ((a Float64)) (=> (not (fp.isNaN a)) (and (fp.leq (cosDouble a) (fp #b0 #b01111111111
        #b0000000000000000000000000000000000000000000000000000))(fp.geq (cosDouble a) (fp #b1 #b01111111111
        #b0000000000000000000000000000000000000000000000000000))))))
        (assert (forall ((a Float64)) (=> (or (fp.isNaN a)(fp.isInfinite a)) (fp.isNaN (cosDouble a)))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (cosDouble a) (fp #b0 #b01111111111
        #b0000000000000000000000000000000000000000000000000000)))))
    </entry>

    <entry key="cosDouble.decls">
        (declare-fun cosDouble (Float64) Float64)
    </entry>

    <entry key="asinDouble.axioms">
        (assert (forall ((a Float64)) (=> (or (fp.isNaN a)(fp.gt a (fp #b0 #b01111111111
        #b0000000000000000000000000000000000000000000000000000)) (fp.lt a (fp #b1 #b01111111111
        #b0000000000000000000000000000000000000000000000000000))) (fp.isNaN (asinDouble a)))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (asinDouble a) (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b1 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (asinDouble a) (fp #b1 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))
        (assert (forall ((a Float64)) (=> (and (not (fp.isNaN a)) (fp.geq a (fp #b1 #b01111111111
        #b0000000000000000000000000000000000000000000000000000)) (fp.leq a (fp #b0 #b01111111111
        #b0000000000000000000000000000000000000000000000000000)))(and (fp.geq (asinDouble a) (fp #b1 #b01111111111
        #b1001001000011111101101010100010001000010110100011000))(fp.leq (asinDouble a) (fp #b0 #b01111111111
        #b1001001000011111101101010100010001000010110100011000))))))
    </entry>

    <entry key="asinDouble.decls">
        (declare-fun asinDouble (Float64) Float64)
    </entry>

    <entry key="acosDouble.axioms">
        (assert (forall ((a Float64)) (=> (or (fp.isNaN a)(fp.gt a (fp #b0 #b01111111111
        #b0000000000000000000000000000000000000000000000000000)) (fp.lt a (fp #b1 #b01111111111
        #b0000000000000000000000000000000000000000000000000000))) (fp.isNaN (acosDouble a)))))
        (assert (forall ((a Float64)) (=> (and (not (fp.isNaN a)) (fp.geq a (fp #b1 #b01111111111
        #b0000000000000000000000000000000000000000000000000000)) (fp.leq a (fp #b0 #b01111111111
        #b0000000000000000000000000000000000000000000000000000)))(and (fp.geq (acosDouble a) (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.leq (acosDouble a) (fp #b0 #b10000000000
        #b1001001000011111101101010100010001000010110100011000))))))
    </entry>

    <entry key="acosDouble.decls">
        (declare-fun acosDouble (Float64) Float64)
    </entry>

    <entry key="tanDouble.axioms">
        (assert (forall ((a Float64)) (=> (or (fp.isNaN a) (fp.isInfinite a)) (fp.isNaN (tanDouble a)))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (tanDouble a) (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b1 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (tanDouble a) (fp #b1 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))
    </entry>
    <entry key="tanDouble.decls">
        (declare-fun tanDouble (Float64) Float64)
    </entry>

    <!--TODO implemented the rest if needed-->
    <entry key="atan2Double.axioms">
        (assert (forall ((a Float64)(b Float64)) (=> (or (fp.isNaN a) (fp.isNaN b)) (fp.isNaN (atan2Double a b)))))
        (assert (forall ((a Float64)(b Float64)) (=> (and (not(fp.isNaN a))(not(fp.isNaN b))) (and (fp.gt (atan2Double a
        b) (fp #b1 #b10000000000
        #b1001001000011111101101010100010001000010110100011000))(fp.leq (atan2Double a b) (fp #b0 #b10000000000
        #b1001001000011111101101010100010001000010110100011000))))))
    </entry>

    <entry key="atan2Double.decls">
        (declare-fun atan2Double (Float64 Float64) Float64)
    </entry>

    <entry key="sqrtDouble.axioms">
        (assert (forall ((a Float64)) (=> (or (fp.isNaN a) (fp.lt a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))(fp.isNaN (sqrtDouble a)))))
        (assert (forall ((a Float64)) (=> (and (fp.isInfinite a) (fp.gt a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))(and (fp.isInfinite (sqrtDouble a))(fp.gt (sqrtDouble
        a) (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (sqrtDouble a) (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))
        (assert (forall ((a Float64)) (=> (fp.eq a (fp #b1 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))(fp.eq (sqrtDouble a) (fp #b1 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))
        (assert (forall ((a Float64)) (=> (not (fp.isInfinite a)) (not (fp.isInfinite (sqrtDouble a))))))
        (assert (forall ((a Float64)) (=> (and (not (fp.isInfinite a)) (fp.gt a (fp #b0 #b01111111111
        #b0000000000000000000000000000000000000000000000000000)))(fp.lt (sqrtDouble a) a))))
        (assert (forall ((a Float64)) (=> (and (not (fp.isNaN a)) (fp.geq a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))(not (fp.isNaN (sqrtDouble a))))))

    </entry>

    <entry key="sqrtDouble.decls">
        (declare-fun sqrtDouble (Float64) Float64)
    </entry>

    <entry key="powDouble.decls">
        (declare-fun powDouble (Float64 Float64) Float64)
    </entry>

    <!--TODO implement the ones for -0.0 if needed-->
    <entry key="expDouble.axioms">
        (assert (forall ((a Float64)) (=> (fp.isNaN a) (fp.isNaN (expDouble a)))))
        (assert (forall ((a Float64)) (=> (and (fp.isInfinite a) (fp.gt a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))) (fp.isInfinite (expDouble a)))))
        (assert (forall ((a Float64)) (=> (and (fp.isInfinite a) (fp.lt a (fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000))) (fp.eq (expDouble a)(fp #b0 #b00000000000
        #b0000000000000000000000000000000000000000000000000000)))))
    </entry>
    <entry key="expDouble.decls">
        (declare-fun expDouble (Float64) Float64)
    </entry>

</properties>

