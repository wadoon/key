\sorts {
    \abstract java.lang.Throwable \extends java.lang.Object;
    \generic G;
}

\schemaVariables {
    \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
    \modalOperator { diamond, diamond_transaction } #dia;
    \modalOperator { box, box_transaction } #box;
    
    \formula fml, post;
    \update upd;
    
    \program AbstractProgram #absProg;
    \program[list] Statement #slist, #slist1, #slist2;
    \program Statement #s;
    \program Expression #e, #e1, #e2;
    \program Variable #normal, #exc, #returns, #result, #breaks, #continues;
    \program Variable #v, #v1;
    \program[list] Variable #vars, #vars1;
    \program ExecutionContext #ctx, #ctx1;
    \program Label #label, #label1;
    \program[list] Label #labels, #labels1;

    \program SimpleExpression #se;
    \program LeftHandSide #lhs;
    \program Statement #body;
    \program Variable #x;
}

\heuristicsDecl {
    abstractExecution;
    abstrUpdPriorityRules;
    abstrUpdLowPrioRules;
    abstrUpdLowestPrioRules;
    abstr_upd_commute;
}

\rules(programRules:Java) {
    // Rules directly treating abstract updates
    
    applyOnAbstractUpdate {
        \schemaVar \update u1, u2, result;    
    
        \find({u1}u2)
        \varcond(\abstractUpdate(u2))
        \varcond(\applyOnAbstractUpdate(u1, u2, result))
    
        \replacewith(result)
        \heuristics(update_apply_on_update)
    };
    
    // Simplifies, e.g., 
    //   U_P(x!,y!,someloc:=accessibles)
    // to
    //   U_P(x,y,someloc:=accessibles)||x:=f_P_1(accessibles)||y:=f_P_2(accessibles)
    abstractUpdateToElementaryUpdates {
        \schemaVar \update u, result;
        
        \find(u)
        \varcond(\abstractUpdate(u))
        \varcond(\abstractUpdateToElementaryUpdates(u, result))
        
        \replacewith(result)
	    \heuristics(simplify)
    };
    
    dropUpdateInFrontOfLocsetFormulas {
        \schemaVar \update u;
        \schemaVar \formula phi;
        
        \find({u}phi)
        \varcond(\isLocsetFormula(phi))
        
        \replacewith(phi)
        \heuristics(simplify)
    };
    
    // Rules for simplifying "value" terms
    
    valueOfSingletonPV {
        \find(value(singletonPV(#x)))
        \replacewith(#x)
        \heuristics(simplify)
    };
    
    //TODO (DS, 2019-10-28): Add rules for singletons (to select terms) etc.
}
