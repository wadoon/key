// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\sorts{

  fp \extends num;
  float \extends fp;
  double \extends fp;

  fpRoundingMode;

  java.lang.Math \extends java.lang.Object;
}

\functions
{
  //Float literals, represented as the integer with the
  //same binary representation as the fp literal
  //(second number is currently always 0)
  //TODO: add information about the precision here,
  //or in the sort itself?
  float FP(numbers, numbers);
  double DFP(numbers, numbers);

  //Arithmetic operations transformed differently depending on chosen semantics
  float javaUnaryMinusFloat(float);
  float javaAddFloat(float, float);
  float javaSubFloat(float, float);
  float javaMulFloat(float, float);
  float javaDivFloat(float, float);
  float javaModFloat(float, float);
  float javaMinFloat(float, float);
  float javaMaxFloat(float, float);

  //Operations indicating forbidden float values (e.g. NaN or overflow/underflow)
  float javaAddFloatForbiddenResult(float, float);
  float javaSubFloatForbiddenResult(float, float);
  float javaMulFloatForbiddenResult(float, float);
  float javaDivFloatForbiddenResult(float, float);

  //Floating-point arithmetic with IEEE 754 semantics
  float addFloatIEEE(fpRoundingMode, float, float);
  float subFloatIEEE(fpRoundingMode, float, float);
  float mulFloatIEEE(fpRoundingMode, float, float);
  float divFloatIEEE(fpRoundingMode, float, float);

  float floatAbs(float);

  float castLongToFloat(int);
  
  int castFloatToLong(float);





  //DOUBLE PRECISION OPERATIONS

  //Arithmetic operations transformed differently depending on chosen semantics
  double javaUnaryMinusDouble(double);
  double javaAddDouble(double, double);
  double javaSubDouble(double, double);
  double javaMulDouble(double, double);
  double javaDivDouble(double, double);
  double javaModDouble(double, double);
  double javaMinDouble(double, double);
  double javaMaxDouble(double, double);

  double sinDouble(double);
  double asinDouble(double);
  double cosDouble(double);
  double acosDouble(double);
  double tanDouble(double);
  double atan2Double(double, double);
  double sqrtDouble(double);
  double powDouble(double, double);
  double expDouble(double);

  //Operations indicating forbidden double values (e.g. NaN or overflow/underflow)
  double javaAddDoubleForbiddenResult(double, double);
  double javaSubDoubleForbiddenResult(double, double);
  double javaMulDoubleForbiddenResult(double, double);
  double javaDivDoubleForbiddenResult(double, double);

  //Doubleing-point arithmetic with IEEE 754 semantics
  double addDoubleIEEE(fpRoundingMode, double, double);
  double subDoubleIEEE(fpRoundingMode, double, double);
  double mulDoubleIEEE(fpRoundingMode, double, double);
  double divDoubleIEEE(fpRoundingMode, double, double);

  double doubleAbs(double);

  //Floating-point rounding modes
  //For java arithmetic, RNE is used
  fpRoundingMode RNE;
  fpRoundingMode RNA;
  fpRoundingMode RTP;
  fpRoundingMode RTN;
  fpRoundingMode RTZ;
}

\predicates
{
  javaLtFloat(float, float);
  javaGtFloat(float, float);
  javaLeqFloat(float, float);
  javaGeqFloat(float, float);
  javaEqFloat(float, float);

  floatIsNaN(float);
  floatIsZero(float);
  floatIsNormal(float);
  floatIsSubnormal(float);
  floatIsInfinite(float);
  floatIsPositive(float);
  floatIsNegative(float);

  javaLtDouble(double, double);
  javaGtDouble(double, double);
  javaLeqDouble(double, double);
  javaGeqDouble(double, double);
  javaEqDouble(double, double);

  doubleIsNaN(double);
  doubleIsZero(double);
  doubleIsNormal(double);
  doubleIsSubnormal(double);
  doubleIsInfinite(double);
  doubleIsPositive(double);
  doubleIsNegative(double);


}
