\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Jan 09 00:25:39 CET 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Mon Jan 09 00:25:39 CET 2017
name=powRightIncreasing
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "40fa9138bbc963da4df18c66c948814ce086c91e"))

(autoModeTime "273429429")

(branch "dummy ID"
(rule "auto_int_induction_geqZero" (formula "1") (newnames "v_exp,v_base") (inst "sk=v_exp_0"))
(branch "Base Case"
   (builtin "One Step Simplification" (formula "1"))
   (rule "less_literals" (formula "1") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeTrue" (formula "1"))
)
(branch "Step Case (positive)"
   (rule "impRight" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "allRight" (formula "3") (inst "sk=v_base_2"))
   (rule "impRight" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "powExpSucc" (formula "5") (term "1") (ifseqformula "3"))
   (rule "allLeftHide" (formula "4") (inst "t=v_base_2"))
   (rule "impLeft" (formula "4"))
   (branch "Case 1"
      (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "polySimp_addComm0" (formula "1") (term "1"))
      (rule "polySimp_addComm0" (formula "5") (term "0"))
      (rule "inEqSimp_ltRight" (formula "4"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0"))
      (rule "inEqSimp_ltRight" (formula "5"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "0,0"))
      (rule "add_zero_left" (formula "3") (term "0"))
      (rule "inEqSimp_invertInEq1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0"))
      (rule "polySimp_elimOne" (formula "4") (term "0"))
      (rule "inEqSimp_invertInEq0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "2"))
      (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "4"))
      (rule "qeq_literals" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
      (rule "leq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "3"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_elimOneLeft0" (formula "1") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Case 2"
      (rule "cut" (inst "cutFormula=!lt(Z(0(#)), v_base_2)"))
      (branch "CUT: !0 < v_base_2 TRUE"
         (rule "notLeft" (formula "1"))
         (rule "polySimp_addComm0" (formula "1") (term "1"))
         (rule "polySimp_addComm0" (formula "6") (term "0"))
         (rule "inEqSimp_ltRight" (formula "5"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0"))
         (rule "inEqSimp_ltRight" (formula "6"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "add_zero_right" (formula "3") (term "0"))
         (rule "polySimp_rightDist" (formula "3") (term "1,0"))
         (rule "mul_literals" (formula "3") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "0,0"))
         (rule "add_zero_left" (formula "3") (term "0"))
         (rule "inEqSimp_invertInEq1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "mul_literals" (formula "2") (term "1"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "0"))
         (rule "polySimp_elimOne" (formula "4") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_invertInEq0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "mul_literals" (formula "3") (term "1"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "2"))
         (rule "qeq_literals" (formula "3") (term "0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
      (branch "CUT: !0 < v_base_2 FALSE"
         (rule "notRight" (formula "5"))
         (rule "cut" (inst "cutFormula=!lt(mul(v_exp_0, v_base_2),
    mul(pow(v_base_2, v_exp_0), v_base_2))"))
         (branch "CUT: !v_exp_0 * v_base_2 < pow(v_base_2, v_exp_0) * v_base_2 TRUE"
            (rule "notLeft" (formula "1"))
            (rule "multLess2" (formula "6") (ifseqformula "1"))
            (rule "close" (formula "6") (ifseqformula "5"))
         )
         (branch "CUT: !v_exp_0 * v_base_2 < pow(v_base_2, v_exp_0) * v_base_2 FALSE"
            (rule "notRight" (formula "6"))
            (rule "cut" (inst "cutFormula=v_exp_0 = Z(1(#))"))
            (branch "CUT: v_exp_0 = 1 TRUE"
               (rule "multLess2" (formula "2") (ifseqformula "3"))
               (rule "polySimp_addComm0" (formula "7") (term "0"))
               (rule "polySimp_addComm0" (formula "3") (term "1"))
               (rule "inEqSimp_ltRight" (formula "7"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "add_zero_right" (formula "3") (term "0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "add_zero_right" (formula "4") (term "0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "0,0"))
               (rule "add_zero_left" (formula "4") (term "0"))
               (rule "applyEq" (formula "6") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "applyEqRigid" (formula "1") (term "1,0,0,1,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "2"))
               (rule "mul_literals" (formula "4") (term "0"))
               (rule "leq_literals" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "applyEq" (formula "5") (term "1,0,1,0") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "applyEqRigid" (formula "5") (term "1,0") (ifseqformula "2"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "applyEqRigid" (formula "1") (term "1,0,0") (ifseqformula "2"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
               (rule "leq_literals" (formula "3") (term "0"))
               (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "add_non_neg_square" (inst "squareFac=v_base_2"))
               (rule "divide_inEq0" (formula "2") (inst "divY=v_base_2") (ifseqformula "4"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "qeq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "qeq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "div_literals" (formula "2") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
               (rule "qeq_literals" (formula "5") (term "0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
            (branch "CUT: v_exp_0 = 1 FALSE"
               (rule "powMul2Add" (inst "factor2=factor2") (inst "factor1=factor1"))
               (rule "allLeftHide" (formula "1") (inst "t=v_base_2"))
               (rule "allLeftHide" (formula "1") (inst "t=v_exp_0"))
               (rule "impLeft" (formula "1"))
               (branch "Case 1"
                  (rule "multLess2" (formula "1") (ifseqformula "2"))
                  (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "polySimp_addComm0" (formula "2") (term "1"))
                  (rule "polySimp_addComm0" (formula "8") (term "0"))
                  (rule "inEqSimp_ltRight" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltRight" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "add_zero_left" (formula "4") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_invertInEq0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "7"))
                  (rule "add_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradEq3" (formula "7") (ifseqformula "2"))
                  (rule "mul_literals" (formula "7") (term "1,0,0"))
                  (rule "add_literals" (formula "7") (term "0,0"))
                  (rule "qeq_literals" (formula "7") (term "0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "false_right" (formula "7"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                  (rule "leq_literals" (formula "3") (term "0"))
                  (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "2"))
                  (rule "applyEqRigid" (formula "6") (term "1,1") (ifseqformula "4"))
                  (rule "add_literals" (formula "6") (term "1"))
                  (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "4"))
                  (rule "leq_literals" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "5"))
                  (rule "qeq_literals" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "applyEqRigid" (formula "1") (term "1,1") (ifseqformula "3"))
                  (rule "add_literals" (formula "1") (term "1"))
                  (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "3"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "polySimp_elimOneLeft0" (formula "1") (term "0"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "cut" (inst "cutFormula=!lt(add(v_exp_0, v_base_2),
    mul(pow(v_base_2, v_exp_0), v_base_2))"))
                  (branch "CUT: !v_exp_0 + v_base_2 < pow(v_base_2, v_exp_0) * v_base_2 TRUE"
                     (rule "notLeft" (formula "1"))
                     (rule "hide_right" (formula "10"))
                     (rule "hide_right" (formula "9"))
                     (rule "hide_left" (formula "7"))
                     (rule "hide_left" (formula "6"))
                     (rule "hide_left" (formula "5"))
                     (rule "hide_left" (formula "4"))
                     (rule "hide_left" (formula "3"))
                     (rule "polySimp_addComm0" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltRight" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "2"))
                     (rule "andLeft" (formula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_zero_right" (formula "3") (term "0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "1,1,0"))
                     (rule "times_zero_1" (formula "3") (term "1,0"))
                     (rule "add_literals" (formula "3") (term "0"))
                     (rule "leq_literals" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
                  (branch "CUT: !v_exp_0 + v_base_2 < pow(v_base_2, v_exp_0) * v_base_2 FALSE"
                     (rule "multLess2" (formula "2") (ifseqformula "3"))
                     (rule "notRight" (formula "7"))
                     (rule "polySimp_addComm0" (formula "2") (term "0"))
                     (rule "polySimp_addComm0" (formula "4") (term "1"))
                     (rule "polySimp_addComm0" (formula "9") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltRight" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "8") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "4"))
                     (rule "add_zero_right" (formula "4") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "add_literals" (formula "6") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "5"))
                     (rule "add_zero_right" (formula "5") (term "0"))
                     (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                     (rule "mul_literals" (formula "5") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "5") (term "0"))
                     (rule "add_literals" (formula "5") (term "0,0"))
                     (rule "add_zero_left" (formula "5") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "inEqSimp_invertInEq0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "mul_literals" (formula "5") (term "1"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
                     (rule "leq_literals" (formula "4") (term "0"))
                     (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                     (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "polySimp_addLiterals" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_invertInEq1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "5") (term "0"))
                     (builtin "One Step Simplification" (formula "5"))
                     (rule "closeFalse" (formula "5"))
                  )
               )
            )
         )
      )
   )
)
(branch "Step Case (negative)"
   (rule "impRight" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "allRight" (formula "3") (inst "sk=v_base_0"))
   (rule "impRight" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_elimSub" (formula "5") (term "1,1"))
   (rule "mul_literals" (formula "5") (term "1,1,1"))
   (rule "polySimp_elimSub" (formula "5") (term "0"))
   (rule "mul_literals" (formula "5") (term "1,0"))
   (rule "polySimp_elimSub" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "polySimp_addComm0" (formula "5") (term "1,1"))
   (rule "polySimp_addComm0" (formula "5") (term "0"))
   (rule "polySimp_addComm0" (formula "1") (term "1"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
   (rule "inEqSimp_ltRight" (formula "5"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "0,0"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "0,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "5") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
   (rule "qeq_literals" (formula "4") (term "0"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "closeFalse" (formula "4"))
)
)

}
