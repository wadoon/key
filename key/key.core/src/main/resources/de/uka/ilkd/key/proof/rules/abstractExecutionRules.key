\sorts {
    \abstract java.lang.Throwable \extends java.lang.Object;
    \generic G;
}

\schemaVariables {
    \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
    \modalOperator { diamond, diamond_transaction } #dia;
    \modalOperator { box, box_transaction } #box;
    
    \formula fml, post;
    \update upd;
    
    \program AbstractStatement #absProg;
    \program AbstractExpression #aexp;
    \program[list] Statement #slist, #slist1, #slist2;
    \program Statement #s;
    \program Expression #e, #e1, #e2;
    \program Variable #normal, #throwsExc, #exc, #returns, #result, #breaks, #continues;
    \program Variable #v, #v1;
    \program[list] Variable #vars, #vars1;
    \program ExecutionContext #ctx, #ctx1;
    \program Label #label, #label1;
    \program[list] Label #labels, #labels1;

    \program SimpleExpression #se;
    \program LeftHandSide #lhs;
    \program Statement #body;
    \program Variable #x;
}

\heuristicsDecl {
    abstractExecution;
    abstrUpdPriorityRules;
    abstrUpdLowPrioRules;
    abstrUpdLowestPrioRules;
    abstr_upd_commute;
}

/* TODO (DS, 2019-11-07):
 * - we also have to consider the labeled break specification (and continue
 *   for the rules within loop scope)
 */
\rules(programRules:Java) {
    abstractExpression {
        \schemaVar \update U;
    
        \find (\modality{#allmodal}{ .. #v = #aexp; ... }\endmodality(post))
        
        \varcond(\new(#normal, boolean))
        \varcond(\new(#throwsExc, boolean))
        \varcond(\new(#exc, java.lang.Throwable))
        \varcond(\new(#returns, boolean))
        \varcond(\new(#result, \typeof(#v)))
        
        \varcond(\initializeParametricSkolemUpdate(U, #aexp))
        
        \replacewith ( 
             {   #normal:=#abstrPrecond(#aexp, "normal")
              || #throwsExc:=#abstrPrecond(#aexp, "throwsExc")
              || #exc:=#abstrPrecond(#aexp, "exceptionObject")
              || #result:=#addCast(#abstrPrecond(#aexp, "resultObject"), #v)}
              (
                (  (#normal = TRUE <-> !#throwsExc = TRUE)
                 & #excPrecondition(#aexp, #throwsExc)) ->
                (
                  (#throwsExc = TRUE -> !#exc = null ->
                    {U}(
                      #postCondAE(#aexp, "throwsExc", #returns, #result, #exc) ->
                        \modality{#allmodal}{..
                          if (#throwsExc) {
                              throw #exc;
                          }
                        ...}\endmodality(post)
                    )) & 
                  (!#throwsExc = TRUE ->
                      #postCondAE(#aexp, "normal", #returns, #result, #exc) ->
                        {U||#v:=#result}(\modality{#allmodal}{.. ...}\endmodality(post)))
                )
              )
        )
        
        \heuristics(abstractExecution, simplify_prog)
    };

    abstractExecutionNonVoid {
        // All Skolem symbols are "fresh for" the abstract program, such that
        // the same program occurring twice directly encodes the same behavior.
        \schemaVar \update U;
    
        \find (\modality{#allmodal}{ .. #absProg ... }\endmodality(post))
                
        // Check that we're outside a loop scope 
        \varcond(\not\prefixContainsElement("LoopScopeBlock"))
        // Check that we're inside a method frame (otherwise returning makes no sense)
        \varcond(\prefixContainsElement("MethodFrame"))
        
        // Check that we're in a non-void method, extract result variable
        \varcond(\storeResultVarIn(#v))
        \varcond(\isDefined(#v))
        
        // Surrounding block labels 
        \varcond(\storeContextLabelsIn(#labels))
        // Booleans modeling breaks to those labels. Fresh for the abstract program.
        \varcond(\instantiateVarsFresh(#vars, #labels, "breaks", boolean))
        
        // Program variables for modeling irregular termination
        \varcond(\new(#normal, boolean))
        \varcond(\new(#throwsExc, boolean))
        \varcond(\new(#exc, java.lang.Throwable))
        \varcond(\new(#returns, boolean))
        \varcond(\new(#result, \typeof(#v)))
        
        // Parametric Skolem update initialization.
        //
        // The update receives two location sets as parameters; the first one for its
        // assignable, and the second one for its accessible locations (similar to a
        // normal update, just with sets).
        \varcond(\initializeParametricSkolemUpdate(U, #absProg))
 
        // Index variables for foreach loop 
        \varcond(\new(#v1, boolean))
        \varcond(\newLabel(#label))
        
        \replacewith ( 
             {   #normal:=#abstrPrecond(#absProg, "normal")
              || #throwsExc:=#abstrPrecond(#absProg, "throwsExc")
              || #returns:=#abstrPrecond(#absProg, "returns")
              || #exc:=#abstrPrecond(#absProg, "exceptionObject")
              || #result:=#addCast(#abstrPrecond(#absProg, "resultObject"), #result)}
              (
                (  #mutualExclusionFormula3(#returns, #throwsExc, #vars)
                 & (#normal = TRUE <-> !#returns = TRUE & !#throwsExc = TRUE)
                 & #returnPrecondition(#absProg, #returns)
                 & !#exc = null
                 & #excPrecondition(#absProg, #throwsExc)) ->
                {U}
                  (
                    ((#returns = TRUE   -> #postCondAE(#absProg, "returns", #returns, #result, #exc)) &
                     (#throwsExc = TRUE -> #postCondAE(#absProg, "throwsExc", #returns, #result, #exc))) ->
                       \modality{#allmodal}{
                         ..
                         if (#returns) {
                             return #result;
                         }
                         if (#throwsExc) {
                             throw #exc;
                         }
                         #foreach (#v1, #label in #vars, #labels) { 
                             if (#v1) {
                                 break #label;
                             }
                         }
                         ...
                       }\endmodality(post)
                  )
              )
        )
        
        \heuristics(abstractExecution, simplify_prog)
    };
    
    abstractExecutionVoid {
        \schemaVar \update U;
    
        \find (\modality{#allmodal}{ .. #absProg ... }\endmodality(post))
                
        \varcond(\not\prefixContainsElement("LoopScopeBlock"))
        \varcond(\prefixContainsElement("MethodFrame"))
        
        \varcond(\storeResultVarIn(#v))
        \varcond(\not\isDefined(#v))
        
        \varcond(\storeContextLabelsIn(#labels))
        \varcond(\instantiateVarsFresh(#vars, #labels, "breaks", boolean))
        
        \varcond(\new(#normal, boolean))
        \varcond(\new(#throwsExc, boolean))
        \varcond(\new(#exc, java.lang.Throwable))
        \varcond(\new(#returns, boolean))
        
        \varcond(\initializeParametricSkolemUpdate(U, #absProg))
 
        \varcond(\new(#v1, boolean))
        \varcond(\newLabel(#label))
        
        \replacewith ( 
             {   #normal:=#abstrPrecond(#absProg, "normal")
              || #throwsExc:=#abstrPrecond(#absProg, "throwsExc")
              || #returns:=#abstrPrecond(#absProg, "returns")
              || #exc:=#abstrPrecond(#absProg, "exceptionObject")
             }
              (
                (  #mutualExclusionFormula3(#returns, #throwsExc, #vars) 
                 & (#normal = TRUE <-> !#returns = TRUE & #exc = null)
                 & #returnPrecondition(#absProg, #returns)
                 & !#exc = null
                 & #excPrecondition(#absProg, #throwsExc)
                ) ->
                {U}
                  (
                    ((#returns = TRUE   -> #postCondAE(#absProg, "returns", #returns, #result, #exc)) &
                     (#throwsExc = TRUE -> #postCondAE(#absProg, "throwsExc", #returns, #result, #exc))) ->
                       \modality{#allmodal}{
                         ..
                         if (#returns) {
                             return;
                         }
                         if (#throwsExc) {
                             throw #exc;
                         }
                         #foreach (#v1, #label in #vars, #labels) { 
                             if (#v1) {
                                 break #label;
                             }
                         }
                         ...
                       }\endmodality(post)
                  )
              )
        )

        \heuristics(abstractExecution, simplify_prog)
    };
    
    abstractExecutionNonVoidLoopScope {
        \schemaVar \update U;
    
        \find (\modality{#allmodal}{ .. #absProg ... }\endmodality(post))

        \varcond(\prefixContainsElement("LoopScopeBlock"))
        \varcond(\prefixContainsElement("MethodFrame"))
        
        \varcond(\storeResultVarIn(#v))
        \varcond(\isDefined(#v))
        
        \varcond(\storeContextLabelsIn(#labels))
        \varcond(\storeContextLoopLabelsIn(#labels1))
        \varcond(\instantiateVarsFresh(#vars, #labels, "breaks", boolean \freshFor(#absProg)))
        \varcond(\instantiateVarsFresh(#vars1, #labels1, "continues", boolean \freshFor(#absProg)))
        
        \varcond(\new(#normal, boolean))
        \varcond(\new(#throwsExc, boolean))
        \varcond(\new(#exc, java.lang.Throwable))
        \varcond(\new(#returns, boolean))
        \varcond(\new(#result, \typeof(#v)))
        \varcond(\new(#breaks, boolean))
        \varcond(\new(#continues, boolean))
        
        \varcond(\initializeParametricSkolemUpdate(U, #absProg))
 
        // Index variables for foreach loop 
        \varcond(\new(#v1, boolean))
        \varcond(\newLabel(#label))
        
        \replacewith ( 
             {   #normal:=#abstrPrecond(#absProg, "normal")
              || #throwsExc:=#abstrPrecond(#absProg, "throwsExc")
              || #returns:=#abstrPrecond(#absProg, "returns")
              || #breaks:=#abstrPrecond(#absProg, "breaks")
              || #continues:=#abstrPrecond(#absProg, "continues")
              || #exc:=#abstrPrecond(#absProg, "exceptionObject")
              || #result:=#addCast(#abstrPrecond(#absProg, "resultObject"), #result)
             }
              (
                (  #mutualExclusionFormula5(#returns, #throwsExc, #breaks, #continues, #vars) 
                 & (#normal = TRUE <-> !#returns = TRUE & #exc = null & !#breaks = TRUE & !#continues = TRUE)
                 & #returnPrecondition(#absProg, #returns)
                 & !#exc = null
                 & #excPrecondition(#absProg, #throwsExc)
                 & #breaksPrecondition(#absProg, #breaks)
                 & #continuesPrecondition(#absProg, #continues)
                ) ->
                {U}
                  (
                    ((#returns = TRUE   -> #postCondAE(#absProg, "returns", #returns, #result, #exc)) &
                     (#throwsExc = TRUE -> #postCondAE(#absProg, "throwsExc", #returns, #result, #exc))) ->
                       \modality{#allmodal}{
                         ..
                         if (#returns) {
                             return #result;
                         }
                         if (#throwsExc) {
                             throw #exc;
                         }
                         if (#continues) {
                         continue;
                         }
                         if (#breaks) {
                         break;
                         }
                         #foreach (#v1, #label in #vars, #labels) { 
                             if (#v1) {
                                 break #label;
                             }
                         }
                         #foreach (#v1, #label1 in #vars1, #labels1) { 
                             if (#v1) {
                                 continue #label1;
                             }
                         }
                         ...
                       }\endmodality(post)
                  )
              )
        )
        
        \heuristics(abstractExecution, simplify_prog)
    };
    

    abstractExecutionNoMethod {
        \schemaVar \update U;
    
        \find (\modality{#allmodal}{ .. #absProg ... }\endmodality(post))
                
        \varcond(\not\prefixContainsElement("LoopScopeBlock"))
        \varcond(\not\prefixContainsElement("MethodFrame"))
        
        \varcond(\storeContextLabelsIn(#labels))
        \varcond(\instantiateVarsFresh(#vars, #labels, "breaks", boolean))
        
        \varcond(\new(#normal, boolean))
        \varcond(\new(#throwsExc, boolean))
        \varcond(\new(#exc, java.lang.Throwable))
        
        \varcond(\initializeParametricSkolemUpdate(U, #absProg))
 
        \varcond(\new(#v1, boolean))
        \varcond(\newLabel(#label))
        
        \replacewith ( 
             {   #normal:=#abstrPrecond(#absProg, "normal")
              || #throwsExc:=#abstrPrecond(#absProg, "throwsExc")
              || #exc:=#abstrPrecond(#absProg, "exceptionObject")
             }
              (
                (  #mutualExclusionFormula2(#throwsExc, #vars)
                 & (#normal = TRUE <-> !#throwsExc = TRUE)
                 & !#exc = null
                 & #excPrecondition(#absProg, #throwsExc)) ->
                {U}
                  (
                    ((#throwsExc = TRUE -> #postCondAE(#absProg, "throwsExc", #returns, #result, #exc))) ->
                       \modality{#allmodal}{
                         ..
                         if (#throwsExc) {
                             throw #exc;
                         }
                         #foreach (#v1, #label in #vars, #labels) { 
                             if (#v1) {
                                 break #label;
                             }
                         }
                         ...
                       }\endmodality(post)
                  )
              )
        )

        \heuristics(abstractExecution, simplify_prog)
    };

    // /////////////////////////////////////////////////////////////
    // Special loop treatment for program equivalence proofs with AE
    // /////////////////////////////////////////////////////////////
    
    // TODO (DS, 2017-07-23): Update the loop rules according to the changes in loopScopeRules.key.

    loopScopeInvDiaAEEquiv {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \term any variantTerm;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      \schemaVar \program Variable #variant;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
       
      \find ( (\modality{#dia} {.. while (#e) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#variant, any))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
     
      \varcond(\storeTermIn(loopFormula, \modality{#dia}{ while (#e) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#dia}{ while (#e) #body }\endmodality(post)))
      \varcond(\not\isLabeled(#loopStmt)) 
      \varcond(\hasInvariant(#loopStmt, #dia)) 
      \varcond(\getInvariant(#loopStmt, #dia, inv))
      \varcond(\getFreeInvariant(#loopStmt, #dia, freeInv))
      \varcond(\getVariant(#loopStmt, variantTerm))
      \varcond(\hasAEPredicate(post))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
            {#variant:=variantTerm}
              (inv & freeInv ->
                 (\modality{#dia}{
                    ..
                    boolean #x;
                    loop-scope(#x) {
                      if (#e) { 
                        #body
                        continue;
                      } else {
                        break;
                      }
                    }
                    ...
                  }\endmodality(
                    (#x<<loopScopeIndex>> = TRUE -> post) & 
                    (#x<<loopScopeIndex>> = FALSE -> 
                        inv & freeInv
                      & #setLastComponentOfAEPredsToFalse(post)
                      // The change to the original rule is the above additional subformula:
                      // We strengthen the invariant to show it by also keeping the post
                      // condition there. This has the effect to actually make relational
                      // proofs simpler, since the actual invariant can be weakened (e.g.,
                      // only termination- related stuff), and the post condition (with 
                      // modified termination information) can be proved by the 
                      // assumption (the other program).
                      & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP)
                      & prec(variantTerm, #variant))
                   )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
  
    loopScopeInvDiaLabelAEEquiv {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \term any variantTerm;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      \schemaVar \program Variable #variant;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
       
      \find ( (\modality{#dia} {.. #label: while (#e) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#variant, any))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
     
      \varcond(\storeTermIn(loopFormula, \modality{#dia}{ while (#e) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#dia}{ while (#e) #body }\endmodality(post)))
      \varcond(\hasInvariant(#loopStmt, #dia)) 
      \varcond(\getInvariant(#loopStmt, #dia, inv))
      \varcond(\getFreeInvariant(#loopStmt, #dia, freeInv))
      \varcond(\getVariant(#loopStmt, variantTerm))
      \varcond(\hasAEPredicate(post))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
            {#variant:=variantTerm}
              (inv & freeInv ->
                 (\modality{#dia}{
                    ..
                    boolean #x;
                    #label: loop-scope(#x) {
                      if (#e) { 
                        #body
                        continue;
                      } else {
                        break;
                      }
                    }
                    ...
                  }\endmodality(
                    (#x<<loopScopeIndex>> = TRUE -> post) & 
                    (#x<<loopScopeIndex>> = FALSE -> 
                        inv & freeInv
                      & #setLastComponentOfAEPredsToFalse(post)
                      & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP)
                      & prec(variantTerm, #variant))
                   )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
  
    loopScopeInvBoxAEEquiv {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
       
      \find ( (\modality{#box} {.. while (#e) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
      
      \varcond(\storeTermIn(loopFormula, \modality{#box}{ while (#e) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#box}{ while (#e) #body }\endmodality(post)))
      \varcond(\not\isLabeled(#loopStmt)) 
      \varcond(\hasInvariant(#loopStmt, #box)) 
      \varcond(\getInvariant(#loopStmt, #box, inv))
      \varcond(\getFreeInvariant(#loopStmt, #box, freeInv))
      \varcond(\hasAEPredicate(post))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
            (inv & freeInv ->
               (\modality{#box}{
                  ..
                  boolean #x;
                  loop-scope(#x) {
                    if (#e) { 
                      #body
                      continue;
                    } else {
                      break;
                    }
                  }
                  ...
                }\endmodality(
                  (#x<<loopScopeIndex>> = TRUE -> post) & 
                  (#x<<loopScopeIndex>> = FALSE -> 
                      inv & freeInv
                    & #setLastComponentOfAEPredsToFalse(post)
                    & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP))
                 )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
  
    loopScopeInvBoxLabelAEEquiv {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
       
      \find ( (\modality{#box} {.. #label: while (#e) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
      
      \varcond(\storeTermIn(loopFormula, \modality{#box}{ while (#e) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#box}{ while (#e) #body }\endmodality(post)))
      \varcond(\hasInvariant(#loopStmt, #box)) 
      \varcond(\getInvariant(#loopStmt, #box, inv))
      \varcond(\getFreeInvariant(#loopStmt, #box, freeInv))
      \varcond(\hasAEPredicate(post))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
              (inv & freeInv ->
                 (\modality{#box}{
                    ..
                    boolean #x;
                    #label: loop-scope(#x) {
                      if (#e) { 
                        #body
                        continue;
                      } else {
                        break;
                      }
                    }
                    ...
                  }\endmodality(
                    (#x<<loopScopeIndex>> = TRUE -> post) & 
                    (#x<<loopScopeIndex>> = FALSE -> 
                        inv & freeInv
                      & #setLastComponentOfAEPredsToFalse(post)
                      & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP))
                   )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };

    loopScopeInvDiaAEEquivUnroll {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \term any variantTerm;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      \schemaVar \program Variable #variant;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
    
      \schemaVar \term int i;
      \schemaVar \program Expression #i;
       
      \find ( (\modality{#dia} {.. while (#e) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#variant, any))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
     
      \varcond(\storeTermIn(loopFormula, \modality{#dia}{ while (#e) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#dia}{ while (#e) #body }\endmodality(post)))
      \varcond(\not\isLabeled(#loopStmt)) 
      \varcond(\hasInvariant(#loopStmt, #dia)) 
      \varcond(\getInvariant(#loopStmt, #dia, inv))
      \varcond(\getFreeInvariant(#loopStmt, #dia, freeInv))
      \varcond(\getVariant(#loopStmt, variantTerm))
      \varcond(\hasAEPredicate(post))
      \varcond(\initializeExpression(#i, int, i))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
            {#variant:=variantTerm}
              (inv & freeInv & i = i // NOTE (DS, 2019-02-22): That's a hack to make KeY understand that
                                     //   this term is not instantiated yet and we have to supply a value.
                                     //   If i does not occur anywhere, it's simply ignored.
                ->
                 (\modality{#dia}{
                    ..
                    boolean #x;
                    loop-scope(#x) {
                      if (#e) { 
                        { 
                          #repeat(#i) {
                            if (#e)  
                              #body
                            else
                              break;
                          }
                        }
                        
                        continue;
                      } else {
                        break;
                      }
                    }
                    ...
                  }\endmodality(
                    (#x<<loopScopeIndex>> = TRUE -> post) & 
                    (#x<<loopScopeIndex>> = FALSE -> 
                        inv & freeInv
                      & #setLastComponentOfAEPredsToFalse(post)
                      & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP)
                      & prec(variantTerm, #variant))
                   )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
  
    loopScopeInvDiaAEEquivUnrollSplit {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \term any variantTerm;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      \schemaVar \program Variable #variant;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
    
      \schemaVar \term int i;
      \schemaVar \program Expression #i;
       
      \find ( (\modality{#dia} {.. while (#e1 && #e2) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#variant, any))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
     
      \varcond(\storeTermIn(loopFormula, \modality{#dia}{ while (#e1 && #e2) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#dia}{ while (#e1 && #e2) #body }\endmodality(post)))
      \varcond(\not\isLabeled(#loopStmt)) 
      \varcond(\hasInvariant(#loopStmt, #dia)) 
      \varcond(\getInvariant(#loopStmt, #dia, inv))
      \varcond(\getFreeInvariant(#loopStmt, #dia, freeInv))
      \varcond(\getVariant(#loopStmt, variantTerm))
      \varcond(\hasAEPredicate(post))
      \varcond(\initializeExpression(#i, int, i))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
            {#variant:=variantTerm}
              (inv & freeInv & i = i // NOTE (DS, 2019-02-22): That's a hack to make KeY understand that
                                     //   this term is not instantiated yet and we have to supply a value.
                                     //   If i does not occur anywhere, it's simply ignored.
                ->
                 (\modality{#dia}{
                    ..
                    boolean #x;
                    loop-scope(#x) {
                      if (#e1 && #e2) { 
                        { 
                          #repeat(#i) {
                            if (#e1) { 
                              if (#e2) #body
                            }
                            else break;
                          }
                        }
                        continue;
                      } else {
                        break;
                      }
                    }
                    ...
                  }\endmodality(
                    (#x<<loopScopeIndex>> = TRUE -> post) & 
                    (#x<<loopScopeIndex>> = FALSE -> 
                        inv & freeInv
                      & #setLastComponentOfAEPredsToFalse(post)
                      & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP)
                      & prec(variantTerm, #variant))
                   )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
  
    loopScopeInvDiaLabelAEEquivUnroll {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \term any variantTerm;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      \schemaVar \program Variable #variant;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
    
      \schemaVar \term int i;
      \schemaVar \program Expression #i;
       
      \find ( (\modality{#dia} {.. #label: while (#e) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#variant, any))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
     
      \varcond(\storeTermIn(loopFormula, \modality{#dia}{ while (#e) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#dia}{ while (#e) #body }\endmodality(post)))
      \varcond(\hasInvariant(#loopStmt, #dia)) 
      \varcond(\getInvariant(#loopStmt, #dia, inv))
      \varcond(\getFreeInvariant(#loopStmt, #dia, freeInv))
      \varcond(\getVariant(#loopStmt, variantTerm))
      \varcond(\hasAEPredicate(post))
      \varcond(\initializeExpression(#i, int, i))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
            {#variant:=variantTerm}
              (inv & freeInv & i = i // NOTE (DS, 2019-02-22): That's a hack to make KeY understand that
                                     //   this term is not instantiated yet and we have to supply a value.
                                     //   If i does not occur anywhere, it's simply ignored.
                ->
                 (\modality{#dia}{
                    ..
                    boolean #x;
                    loop-scope(#x) {
                      if (#e) #label: { 
                        { 
                          #repeat(#i) {
                            if (#e)  
                              #body
                            else
                              break;
                          }
                        }
                        continue;
                      } else {
                        break;
                      }
                    }
                    ...
                  }\endmodality(
                    (#x<<loopScopeIndex>> = TRUE -> post) & 
                    (#x<<loopScopeIndex>> = FALSE -> 
                        inv & freeInv
                      & #setLastComponentOfAEPredsToFalse(post)
                      & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP)
                      & prec(variantTerm, #variant))
                   )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
  
    loopScopeInvBoxAEEquivUnroll {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
    
      \schemaVar \term int i;
      \schemaVar \program Expression #i;
       
      \find ( (\modality{#box} {.. while (#e) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
      
      \varcond(\storeTermIn(loopFormula, \modality{#box}{ while (#e) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#box}{ while (#e) #body }\endmodality(post)))
      \varcond(\not\isLabeled(#loopStmt)) 
      \varcond(\hasInvariant(#loopStmt, #box)) 
      \varcond(\getInvariant(#loopStmt, #box, inv))
      \varcond(\getFreeInvariant(#loopStmt, #box, freeInv))
      \varcond(\hasAEPredicate(post))
      \varcond(\initializeExpression(#i, int, i))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
            (inv & freeInv & i = i // NOTE (DS, 2019-02-22): That's a hack to make KeY understand that
                                   //   this term is not instantiated yet and we have to supply a value.
                                   //   If i does not occur anywhere, it's simply ignored.
                ->
               (\modality{#box}{
                  ..
                  boolean #x;
                  loop-scope(#x) {
                    if (#e) { 
                        { 
                          #repeat(#i) {
                            if (#e)  
                              #body
                            else
                              break;
                          }
                        }
                      continue;
                    } else {
                      break;
                    }
                  }
                  ...
                }\endmodality(
                  (#x<<loopScopeIndex>> = TRUE -> post) & 
                  (#x<<loopScopeIndex>> = FALSE -> 
                      inv & freeInv
                    & #setLastComponentOfAEPredsToFalse(post)
                    & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP))
                 )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
  
    loopScopeInvBoxAEEquivUnrollSplit {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
    
      \schemaVar \term int i;
      \schemaVar \program Expression #i;
       
      \find ( (\modality{#box} {.. while (#e1 && #e2) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
      
      \varcond(\storeTermIn(loopFormula, \modality{#box}{ while (#e1 && #e2) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#box}{ while (#e1 && #e2) #body }\endmodality(post)))
      \varcond(\not\isLabeled(#loopStmt)) 
      \varcond(\hasInvariant(#loopStmt, #box)) 
      \varcond(\getInvariant(#loopStmt, #box, inv))
      \varcond(\getFreeInvariant(#loopStmt, #box, freeInv))
      \varcond(\hasAEPredicate(post))
      \varcond(\initializeExpression(#i, int, i))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
            (inv & freeInv & i = i // NOTE (DS, 2019-02-22): That's a hack to make KeY understand that
                                   //   this term is not instantiated yet and we have to supply a value.
                                   //   If i does not occur anywhere, it's simply ignored.
                ->
               (\modality{#box}{
                  ..
                  boolean #x;
                  loop-scope(#x) {
                    if (#e1 && #e2) { 
                        { 
                          #repeat(#i) {
                            if (#e1) { 
                              if (#e2) { #body }
                            }
                            else break;
                          }
                        }
                      continue;
                    } else {
                      break;
                    }
                  }
                  ...
                }\endmodality(
                  (#x<<loopScopeIndex>> = TRUE -> post) & 
                  (#x<<loopScopeIndex>> = FALSE -> 
                      inv & freeInv
                    & #setLastComponentOfAEPredsToFalse(post)
                    & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP))
                 )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
  
    loopScopeInvBoxLabelAEEquivUnroll {
      \schemaVar \formula inv;
      \schemaVar \formula freeInv;
      \schemaVar \formula loopFormula;
      \schemaVar \program Statement #loopStmt;
      
      \schemaVar \skolemTerm Heap anon_heap_LOOP; 
      \schemaVar \skolemTerm Heap anon_savedHeap_LOOP; 
      \schemaVar \skolemTerm Heap anon_permissions_LOOP; 
       
      \schemaVar \program Variable #heapBefore_LOOP; 
      \schemaVar \program Variable #savedHeapBefore_LOOP; 
      \schemaVar \program Variable #permissionsBefore_LOOP; 
    
      \schemaVar \term int i;
      \schemaVar \program Expression #i;
       
      \find ( (\modality{#box} {.. #label: while (#e) #body ... }\endmodality(post)) )

      \varcond(\new(#x, boolean))
      \varcond(\new(#heapBefore_LOOP, Heap))
      \varcond(\new(#savedHeapBefore_LOOP, Heap))
      \varcond(\new(#permissionsBefore_LOOP, Heap))
      
      \varcond(\storeTermIn(loopFormula, \modality{#box}{ while (#e) #body }\endmodality(post)))
      \varcond(\storeStmtIn(#loopStmt, \modality{#box}{ while (#e) #body }\endmodality(post)))
      \varcond(\hasInvariant(#loopStmt, #box)) 
      \varcond(\getInvariant(#loopStmt, #box, inv))
      \varcond(\getFreeInvariant(#loopStmt, #box, freeInv))
      \varcond(\hasAEPredicate(post))
      \varcond(\initializeExpression(#i, int, i))

      "Invariant Initially Valid":
        \replacewith(inv);

      "Invariant Preserved and Used":
        \replacewith (
          {   #createBeforeLoopUpdate(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP) 
           || #createLocalAnonUpdate(loopFormula)
           || #createHeapAnonUpdate(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP)}
              (inv & freeInv & i = i // NOTE (DS, 2019-02-22): That's a hack to make KeY understand that
                                     //   this term is not instantiated yet and we have to supply a value.
                                     //   If i does not occur anywhere, it's simply ignored.
                ->
                 (\modality{#box}{
                    ..
                    boolean #x;
                    loop-scope(#x) {
                      if (#e) #label: { 
                        { 
                          #repeat(#i) {
                            if (#e)  
                              #body
                            else
                              break;
                          }
                        }
                        continue;
                      } else {
                        break;
                      }
                    }
                    ...
                  }\endmodality(
                    (#x<<loopScopeIndex>> = TRUE -> post) & 
                    (#x<<loopScopeIndex>> = FALSE -> 
                        inv & freeInv
                      & #setLastComponentOfAEPredsToFalse(post)
                      & #createFrameCond(loopFormula, #heapBefore_LOOP, #savedHeapBefore_LOOP, #permissionsBefore_LOOP))
                   )))
        )
        
        \add (#wellFormedCond(loopFormula, anon_heap_LOOP, anon_savedHeap_LOOP, anon_permissions_LOOP) ==>)
  
      \heuristics(abstractExecution, loop_scope_inv_taclet)
    };
}
