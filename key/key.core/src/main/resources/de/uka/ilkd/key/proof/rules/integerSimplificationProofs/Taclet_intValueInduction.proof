\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Jan 04 11:32:13 CET 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Wed Jan 04 11:32:13 CET 2017
name=intValueInduction
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "4206eb0ce872ecd15815df55b23a471371e808f5"))

(autoModeTime "377228863")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "v_i,v_k,f_phi"))
(rule "cut" (inst "cutFormula=\\forall int v_i;
  (   leq(Z(0(#)), v_i)
   -> \\forall int j;
        (leq(Z(0(#)), j) & lt(j, v_i) -> f_phi(j)))"))
(branch "CUT: forall int v_i; ( 0 <= v_i -> forall int j; (0 <= j & j < v_i -> f_phi(j))) TRUE"
   (rule "hide_left" (formula "2"))
   (rule "allRight" (formula "2") (inst "sk=v_i_0"))
   (rule "impRight" (formula "2"))
   (rule "allLeftHide" (formula "2") (inst "t=add(v_i_0, Z(1(#)))"))
   (rule "polySimp_addComm0" (formula "2") (term "1,1,0,0,1"))
   (rule "polySimp_addComm0" (formula "2") (term "1,0"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,1"))
   (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
   (rule "mul_literals" (formula "2") (term "1,0,0"))
   (rule "add_zero_right" (formula "2") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0"))
   (rule "mul_literals" (formula "2") (term "1,0"))
   (rule "inEqSimp_subsumption1" (formula "2") (term "0") (ifseqformula "1"))
   (rule "leq_literals" (formula "2") (term "0,0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "2") (term "0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "allLeft" (formula "2") (inst "t=v_i_0"))
   (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "4"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "2") (term "1"))
   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "1,1,0,1"))
   (rule "times_zero_1" (formula "2") (term "1,0,1"))
   (rule "add_literals" (formula "2") (term "0,1"))
   (rule "leq_literals" (formula "2") (term "1"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
   (rule "qeq_literals" (formula "2") (term "0"))
   (builtin "One Step Simplification" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
(branch "CUT: forall int v_i; ( 0 <= v_i -> forall int j; (0 <= j & j < v_i -> f_phi(j))) FALSE"
   (rule "hide_right" (formula "3"))
   (rule "auto_int_induction_geqZero" (formula "2") (inst "sk=v_i_3"))
   (branch "Base Case"
      (rule "apply_subst_for" (formula "1") (term "1,0,1,0,0"))
      (rule "leq_literals" (formula "2") (term "0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "allRight" (formula "2") (inst "sk=j_3"))
      (rule "impRight" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1,0,0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "Step Case (positive)"
      (rule "apply_subst_for" (formula "1") (term "1,0,1,0,0"))
      (rule "impRight" (formula "2"))
      (rule "impRight" (formula "3"))
      (rule "andLeft" (formula "2"))
      (rule "allRight" (formula "5") (inst "sk=j_2"))
      (rule "impRight" (formula "5"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addComm0" (formula "3") (term "1"))
      (rule "polySimp_addComm0" (formula "2") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0"))
      (rule "polySimp_addComm0" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
      (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "4"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
      (rule "inEqSimp_homoInEq0" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1,0"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
      (rule "leq_literals" (formula "3") (term "0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "nnf_imp2or" (formula "5") (term "0"))
      (rule "nnf_imp2or" (formula "4") (term "0"))
      (rule "nnf_notAnd" (formula "5") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "4") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "4") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "4") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "4") (term "0,0,0"))
      (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
      (rule "mul_literals" (formula "4") (term "1,0,0,0"))
      (rule "nnf_notAll" (formula "5") (term "1,0,0"))
      (rule "nnf_imp2or" (formula "5") (term "0,0,1,0,0"))
      (rule "nnf_notOr" (formula "5") (term "0,1,0,0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "commute_or_2" (formula "4") (term "0"))
      (rule "commute_or" (formula "4") (term "0,0"))
      (rule "commute_and_2" (formula "5") (term "0,1,0,0"))
      (rule "commute_and" (formula "5") (term "0,0,1,0,0"))
      (rule "ex_pull_out3" (formula "5") (term "0,0"))
      (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
      (rule "commute_or" (formula "5") (term "1,0,0,0"))
      (rule "cnf_rightDist" (formula "5") (term "0,0,0,0"))
      (rule "commute_or" (formula "5") (term "1,0,0,0,0"))
      (rule "commute_or" (formula "5") (term "0,0,0,0,0"))
      (rule "ex_pull_out2" (formula "5") (term "0"))
      (rule "commute_or" (formula "5") (term "0,0"))
      (rule "cnf_rightDist" (formula "5") (term "0,0"))
      (rule "commute_or_2" (formula "5") (term "1,0,0"))
      (rule "commute_or" (formula "5") (term "0,1,0,0"))
      (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
      (rule "commute_or_2" (formula "5") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
      (rule "commute_or" (formula "5") (term "0,1,0,0,0"))
      (rule "commute_and" (formula "5") (term "0,0,0"))
      (rule "commute_and_2" (formula "5") (term "0,0"))
      (rule "allLeft" (formula "4") (inst "t=j_2"))
      (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "4") (term "0,0"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "4"))
      (rule "applyEqRigid" (formula "6") (term "1,1,0") (ifseqformula "2"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq0" (formula "4"))
      (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,0"))
      (rule "times_zero_1" (formula "4") (term "0"))
      (rule "qeq_literals" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "1,0"))
      (rule "times_zero_1" (formula "3") (term "0"))
      (rule "leq_literals" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "allLeft" (formula "4") (inst "t=j_2"))
      (rule "exLeft" (formula "4") (inst "sk=v_k_10"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "4"))
      (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "4") (term "0,0"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_contradInEq1" (formula "5") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "5") (term "0,0"))
      (builtin "One Step Simplification" (formula "5"))
      (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "1"))
      (rule "qeq_literals" (formula "6") (term "0,1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "notLeft" (formula "6"))
      (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
      (rule "mul_literals" (formula "4") (term "0,0"))
      (rule "add_zero_left" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4"))
      (rule "mul_literals" (formula "4") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
      (rule "leq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "allLeft" (formula "2") (inst "t=v_k_10"))
      (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "5"))
      (rule "qeq_literals" (formula "2") (term "0,0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_contradInEq1" (formula "6") (ifseqformula "2"))
      (rule "andLeft" (formula "6"))
      (rule "inEqSimp_homoInEq1" (formula "6"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0"))
      (rule "mul_literals" (formula "6") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0"))
      (rule "polySimp_addComm0" (formula "6") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
      (rule "add_literals" (formula "6") (term "1,1,0"))
      (rule "times_zero_1" (formula "6") (term "1,0"))
      (rule "add_literals" (formula "6") (term "0"))
      (rule "leq_literals" (formula "6"))
      (rule "closeFalse" (formula "6"))
   )
   (branch "Step Case (negative)"
      (rule "apply_subst_for" (formula "1") (term "1,0,1,0,0"))
      (rule "impRight" (formula "2"))
      (rule "impRight" (formula "3"))
      (rule "andLeft" (formula "2"))
      (rule "allRight" (formula "5") (inst "sk=j_1"))
      (rule "impRight" (formula "5"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_elimSub" (formula "3") (term "1"))
      (rule "mul_literals" (formula "3") (term "1,1"))
      (rule "polySimp_elimSub" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "1,1"))
      (rule "polySimp_addComm0" (formula "3") (term "1"))
      (rule "polySimp_addComm0" (formula "2") (term "1"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "2"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "inEqSimp_homoInEq0" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1,0"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "0,1,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "5") (term "0,1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
      (rule "qeq_literals" (formula "4") (term "0"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
)

}
