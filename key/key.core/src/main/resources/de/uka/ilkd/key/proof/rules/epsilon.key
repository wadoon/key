\rules(integerSimplificationRules:full) {

// The pull out rules are currently commented out
// because the regular pull out rule can do the job.
// These here are meant to be assigned a special
// ruleset in the future for better automation.

/*
  pullOutMin {
    \schemaVar\variables alpha x;
    \schemaVar\term boolean b;
    \schemaVar\term int t;
    \schemaVar\skolemTerm int sk;
    \find( min{x;}(b,t) )
    \varcond ( \newDependingOn(sk, b),
	       \newDependingOn(sk, t))
    \replacewith ( sk )
    \add( min{x;}(b,t) = sk ==> )
  };
*/

  minEqLeft {
    \schemaVar\variables alpha x, y, z;
    \schemaVar\term boolean b;
    \schemaVar\term int t, t2;
    \find( min{x;}(b,t) = t2 ==>)
    \varcond( \notFreeIn(x, t2) )
    \add( \forall x; (b = TRUE -> t >= t2 ) 
    	& (\exists x; b=TRUE -> \exists x; (b = TRUE & t = t2)) ==>)
  };

  minEqRight {
    \schemaVar\variables alpha x, y, z;
    \schemaVar\term boolean b;
    \schemaVar\term int t, t2;
    \find( ==> min{x;}(b,t) = t2)
    \varcond( \notFreeIn(x, t2) )
    \replacewith( ==> \forall x; (b = TRUE -> t >= t2 ) 
    	& \exists x; (b = TRUE & t = t2))
  };

/*
  pullOutMax {
    \schemaVar\variables alpha x;
    \schemaVar\term boolean b;
    \schemaVar\term int t;
    \schemaVar\skolemTerm int sk;
    \find( max{x;}(b,t) )
    \varcond ( \newDependingOn(sk, b),
	       \newDependingOn(sk, t))
    \replacewith ( sk )
    \add( max{x;}(b,t) = sk ==> )
  };
*/

  maxEqLeft {
    \schemaVar\variables alpha x, y, z;
    \schemaVar\term boolean b;
    \schemaVar\term int t, t2;
    \find( max{x;}(b,t) = t2 ==>)
    \varcond( \notFreeIn(x, t2), \notFreeIn(y, b, t, t2) )
    \add( \forall x; (b = TRUE -> t <= t2 )
        & (\exists x; b=TRUE -> \exists x; (b = TRUE & t = t2)) ==> )
  };

  maxEqRight {
    \schemaVar\variables alpha x, y, z;
    \schemaVar\term boolean b;
    \schemaVar\term int t, t2;
    \find( ==> max{x;}(b,t) = t2)
    \varcond( \notFreeIn(x, t2), \notFreeIn(y, b, t, t2) )
    \replacewith( ==> \forall y; {\subst x; y} (b = TRUE -> t <= t2 )
        & \exists y; {\subst x; y} (b = TRUE &   t = t2 ))
  };
}
