// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//


\schemaVariables {
  \term float f1, f2;
  \term double d1, d2;
}


\rules(programRules:Java, floatRules:assumeStrictfp){

    translateJavaAddFloat {
        \find(javaAddFloat(f1, f2))
        \replacewith(addFloatIEEE(RNE, f1, f2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaSubFloat {
        \find(javaSubFloat(f1, f2))
        \replacewith(subFloatIEEE(RNE, f1, f2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaMulFloat {
        \find(javaMulFloat(f1, f2))
        \replacewith(mulFloatIEEE(RNE, f1, f2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaDivFloat {
        \find(javaDivFloat(f1, f2))
        \replacewith(divFloatIEEE(RNE, f1, f2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaAddDouble {
        \find(javaAddDouble(d1, d2))
        \replacewith(addDoubleIEEE(RNE, d1, d2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaSubDouble {
        \find(javaSubDouble(d1, d2))
        \replacewith(subDoubleIEEE(RNE, d1, d2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaMulDouble {
        \find(javaMulDouble(d1, d2))
        \replacewith(mulDoubleIEEE(RNE, d1, d2))
        \heuristics(javaFloatSemantics)
    };

    translateJavaDivDouble {
        \find(javaDivDouble(d1, d2))
        \replacewith(divDoubleIEEE(RNE, d1, d2))
        \heuristics(javaFloatSemantics)
    };

    doubleSin {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.sin(#se); ...}\endmodality (post) )
        \replacewith ({#loc := sinDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleCos {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.cos(#se); ...}\endmodality (post) )
        \replacewith ({#loc := cosDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleAcos {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.acos(#se); ...}\endmodality (post) )
        \replacewith ({#loc := acosDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleAsin {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.asin(#se); ...}\endmodality (post) )
        \replacewith ({#loc := asinDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleTan {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.tan(#se); ...}\endmodality (post) )
        \replacewith ({#loc := tanDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleAtan2 {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se1;
        \schemaVar \program SimpleExpression #se2;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.atan2(#se1, #se2); ...}\endmodality (post) )
        \replacewith ({#loc := atan2Double(#se1, #se2)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleSqrt {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.sqrt(#se); ...}\endmodality (post) )
        \replacewith ({#loc := sqrtDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doublePow {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se1;
        \schemaVar \program SimpleExpression #se2;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.pow(#se1, #se2); ...}\endmodality (post) )
        \replacewith ({#loc := powDouble(#se1, #se2)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleExp {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.exp(#se); ...}\endmodality (post) )
        \replacewith ({#loc := expDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleAtan {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.atan(#se); ...}\endmodality (post) )
        \replacewith ({#loc := atanDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleCbrt {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.cbrt(#se); ...}\endmodality (post) )
        \replacewith ({#loc := cbrtDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleCosh {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.cosh(#se); ...}\endmodality (post) )
        \replacewith ({#loc := coshDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleExpm1 {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.expm1(#se); ...}\endmodality (post) )
        \replacewith ({#loc := expm1Double(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleHypot {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se1;
        \schemaVar \program SimpleExpression #se2;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.hypot(#se1, #se2); ...}\endmodality (post) )
        \replacewith ({#loc := hypotDouble(#se1, #se2)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleLog {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.log(#se); ...}\endmodality (post) )
        \replacewith ({#loc := logDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleLog10 {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.log10(#se); ...}\endmodality (post) )
        \replacewith ({#loc := log10Double(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleLog1p {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.log1p(#se); ...}\endmodality (post) )
        \replacewith ({#loc := log1pDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleSinh {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.sinh(#se); ...}\endmodality (post) )
        \replacewith ({#loc := sinhDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };

    doubleTanh {
        \schemaVar \program Variable #loc;
        \schemaVar \program SimpleExpression #se;
        \schemaVar \formula post;
        \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
        \find( \modality{#allmodal}{.. #loc = java.lang.Math.tanh(#se); ...}\endmodality (post) )
        \replacewith ({#loc := tanhDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
        \heuristics(simplify_prog)
    };
}
