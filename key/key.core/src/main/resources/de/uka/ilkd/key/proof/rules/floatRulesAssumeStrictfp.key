// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
// 


\schemaVariables {
  \term float f1, f2;
  \term double d1, d2;
}


\rules(programRules:Java, floatRules:assumeStrictfp){

  translateJavaAddFloat {
     \find(javaAddFloat(f1, f2))
     \replacewith(addFloatIEEE(RNE, f1, f2))
     \heuristics(javaFloatSemantics)
  };

  translateJavaSubFloat {
     \find(javaSubFloat(f1, f2))
     \replacewith(subFloatIEEE(RNE, f1, f2))
     \heuristics(javaFloatSemantics)
  };

  translateJavaMulFloat {
     \find(javaMulFloat(f1, f2))
     \replacewith(mulFloatIEEE(RNE, f1, f2))
     \heuristics(javaFloatSemantics)
  };

  translateJavaDivFloat {
     \find(javaDivFloat(f1, f2))
     \replacewith(divFloatIEEE(RNE, f1, f2))
     \heuristics(javaFloatSemantics)
  };


  translateJavaAddDouble {
     \find(javaAddDouble(d1, d2))
     \replacewith(addDoubleIEEE(RNE, d1, d2))
     \heuristics(javaFloatSemantics)
  };

  translateJavaSubDouble {
     \find(javaSubDouble(d1, d2))
     \replacewith(subDoubleIEEE(RNE, d1, d2))
     \heuristics(javaFloatSemantics)
  };

  translateJavaMulDouble {
     \find(javaMulDouble(d1, d2))
     \replacewith(mulDoubleIEEE(RNE, d1, d2))
     \heuristics(javaFloatSemantics)
  };

  translateJavaDivDouble {
     \find(javaDivDouble(d1, d2))
     \replacewith(divDoubleIEEE(RNE, d1, d2))
     \heuristics(javaFloatSemantics)
  };

  doubleSin {
     \schemaVar \program Variable #loc;
     \schemaVar \program SimpleExpression #se;
     \schemaVar \formula post;
     \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
     \find( \modality{#allmodal}{.. #loc = java.lang.Math.sin(#se); ...}\endmodality (post) )
     \replacewith ({#loc := sinDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
     \heuristics(simplify_prog)
  };

  doubleCos {
       \schemaVar \program Variable #loc;
       \schemaVar \program SimpleExpression #se;
       \schemaVar \formula post;
       \schemaVar \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
       \find( \modality{#allmodal}{.. #loc = java.lang.Math.cos(#se); ...}\endmodality (post) )
       \replacewith ({#loc := cosDouble(#se)} \modality{#allmodal}{.. ...}\endmodality (post) )
       \heuristics(simplify_prog)
    };

}
