 \sorts {
	Storage;
 }


 \schemaVariables {
  \modalOperator { diamond, box } #allmodal;
  \modalOperator { diamond } #diamond;
  \modalOperator { box } #box;

  \program Variable #v;
  \program SimpleExpression #se;
  \formula post;		

 }
 
 \functions{
   int solidityUintAddition(int, int);
   int solidityUintSubtraction(int, int);
   \unique int UINT_MAX;
     
 }
 
 
 \predicates {
   inUint(int);
 }
 
 \programVariables {
   Storage storage;
 }

 \rules(intRules:solidity) {

    uintMaxDef {
    	\find(UINT_MAX) 
    	\replacewith(115792089237316195423570985008687907853269984665640564039457584007913129639936)
    	\heuristics(simplify)
    
    };

 	inUintDef {
 		\schemaVar \term int val;
 		\find(inUint(val))
 		\replacewith(val>=0 & val<=UINT_MAX)
 		\heuristics(simplify) 		
 	};

 	translateSolidityUintAddition {
 		\schemaVar \term int left, right;
 		\find(solidityUintAddition(left,right))
 		\replacewith(jmod(left+right,UINT_MAX))
 		\heuristics(simplify)
 	};

 	translateSolidityUintSubtraction {
 		\schemaVar \term int left, right;
 		\find(solidityUintSubtraction(left,right))
 		\replacewith(\if (left-right < 0) \then (UINT_MAX+(left-right+1)) \else (left-right))
 		\heuristics(simplify)
 	};
 
 }
 
 \rules(programRules:Solidity) {
 
    variableDeclarationAssign  {
     \schemaVar \program Type #t;
     \schemaVar \program VariableInitializer #vi ;
     
     \find (\modality{#allmodal}{.. #t #v = #vi; ...}\endmodality(post))
     \replacewith (\modality{#allmodal}{.. #t #v; #v = #vi; ...}\endmodality(post))
     \heuristics(simplify_prog, simplify_prog_subset)
     \displayname "variableDeclaration"
  }; 
  
  variableDeclaration { 
     \schemaVar \program Type #t;

    \find (\modality{#allmodal}{.. #t #v; ...}\endmodality(post)) 
	\replacewith (\modality{#allmodal}{..  ...}\endmodality(post)) 
    \addprogvars(#v) 
    \heuristics(simplify_prog, simplify_prog_subset)
    \displayname "variableDeclaration"
  };

	assignLocalVariable {
		\find(\modality{#allmodal}{.. #v = #se; ...}\endmodality(post))
		\replacewith({#v:=#se}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"
	};
	
	assignLocalVariableIntAddition {
	    \schemaVar \program SimpleExpression #left, #right;
	
		\find(\modality{#allmodal}{.. #v = #left + #right; ...}\endmodality(post))
		\replacewith({#v:=solidityUintAddition(#left,#right)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};
	
    assignLocalVariableIntSubtraction {
	    \schemaVar \program SimpleExpression #left, #right;
	
		\find(\modality{#allmodal}{.. #v = #left - #right; ...}\endmodality(post))
		\replacewith({#v:=solidityUintSubtraction(#left,#right)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};
	
    assignLocalVariableLessThan {
	    \schemaVar \program SimpleExpression #left, #right;
	
		\find(\modality{#allmodal}{.. #v = #left < #right; ...}\endmodality(post))
		\replacewith({#v:=\if (#left<#right) \then (TRUE) \else (FALSE)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};

    assignLocalVariableLessOrEqual {
	    \schemaVar \program SimpleExpression #left, #right;
	
		\find(\modality{#allmodal}{.. #v = #left <= #right; ...}\endmodality(post))
		\replacewith({#v:=\if (#left<=#right) \then (TRUE) \else (FALSE)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};
	
	 assignLocalVariableGreaterThan {
	    \schemaVar \program SimpleExpression #left, #right;
	
		\find(\modality{#allmodal}{.. #v = #left > #right; ...}\endmodality(post))
		\replacewith({#v:=\if (#left>#right) \then (TRUE) \else (FALSE)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};

    assignLocalVariableGreaterOrEqual {
	    \schemaVar \program SimpleExpression #left, #right;
	
		\find(\modality{#allmodal}{.. #v = #left <= #right; ...}\endmodality(post))
		\replacewith({#v:=\if (#left>=#right) \then (TRUE) \else (FALSE)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};
	
	assignLocalVariablEqual {
	    \schemaVar \program SimpleExpression #left, #right;
	
		\find(\modality{#allmodal}{.. #v = #left == #right; ...}\endmodality(post))
		\replacewith({#v:=\if (#left=#right) \then (TRUE) \else (FALSE)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};

	assignLocalVariableNotEqual {
	    \schemaVar \program SimpleExpression #left, #right;
	
		\find(\modality{#allmodal}{.. #v = #left != #right; ...}\endmodality(post))
		\replacewith({#v:=\if (!#left=#right) \then (TRUE) \else (FALSE)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};
	
	evalNegation {
	    \schemaVar \program NonSimpleExpression #nse;
		\schemaVar \program Variable #b;
		
	
		\find(\modality{#allmodal}{.. #v = !#nse; ...}\endmodality(post))
		\varcond(\new(#b,boolean))
		\replacewith(\modality{#allmodal}{.. boolean #b = #nse; #v=!#b; ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "evalNegation"		
	};


	assignLocalVariableNegation {
		\schemaVar \program Variable #b;
		
	
		\find(\modality{#allmodal}{.. #v = !#se; ...}\endmodality(post))
		\replacewith({#v:=\if (#se=TRUE)\then(FALSE)\else(TRUE)}\modality{#allmodal}{.. ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assign"		
	};


	ifThenEvalGuard {
	    \schemaVar \program NonSimpleExpression #nse;
	    \schemaVar \program Variable #b;
	    \schemaVar \program Statement #s;

		\find (\modality{#allmodal}{.. if (#nse) #s ...}\endmodality(post))
		\varcond(\new(#b, boolean))
		\replacewith(\modality{#allmodal}{.. boolean #b = #nse; if (#b) #s ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
	};

	ifThenElseEvalGuard {
	    \schemaVar \program NonSimpleExpression #nse;
	    \schemaVar \program Variable #b;
	    \schemaVar \program Statement #s1,#s2;

		\find (\modality{#allmodal}{.. if (#nse) #s1 else #s2 ...}\endmodality(post))
		\varcond(\new(#b, boolean))
		\replacewith(\modality{#allmodal}{.. boolean #b = #nse; if (#b) #s1 else #s2 ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)
	};
	
	ifThenElseSplit {
	    \schemaVar \program SimpleExpression #guard;
	    \schemaVar \program Statement #s1,#s2;

		\find (\modality{#allmodal}{.. if (#guard) #s1 else #s2 ...}\endmodality(post))
		\replacewith(\if (#guard=TRUE) \then 
		    (\modality{#allmodal}{.. #s1 ...}\endmodality(post))
		   \else
		    (\modality{#allmodal}{.. #s2 ...}\endmodality(post))
		)
		\heuristics(simplify_prog_subset,simplify)
	};	
	
	ifThenSplit {
	    \schemaVar \program SimpleExpression #guard;
	    \schemaVar \program Statement #s;

		\find (\modality{#allmodal}{.. if (#guard) #s ...}\endmodality(post))
		\replacewith(\if (#guard=TRUE) \then 
		    (\modality{#allmodal}{.. #s ...}\endmodality(post))
		   \else
		    (\modality{#allmodal}{.. ...}\endmodality(post))
		)
		\heuristics(simplify_prog_subset,simplify)
	};	
	
    assertEval {
        \schemaVar \program NonSimpleExpression #nse;
	    \schemaVar \program Variable #b;
        
        \find (\modality{#allmodal}{.. assert #nse; ...}\endmodality(post))
		\varcond(\new(#b, boolean))
		\replacewith(\modality{#allmodal}{.. boolean #b = #nse; assert #b; ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)	
    };

    assertSucc {        
        \find (==> \modality{#allmodal}{.. assert #se; ...}\endmodality(post))        
		\replacewith(==> \modality{#allmodal}{.. ...}\endmodality(post))
		\add(#se=TRUE ==>);
		\replacewith(==> #se=TRUE)
		\heuristics(simplify_prog_subset,simplify)
		\displayname "assert"	
    };
    
    requireEval {
        \schemaVar \program MethodName[name=require] #require;
    
        \schemaVar \program NonSimpleExpression #nse;
	    \schemaVar \program Variable #b;
        
        \find (\modality{#allmodal}{.. #require(#nse); ...}\endmodality(post))
		\varcond(\new(#b, boolean))
		\replacewith(\modality{#allmodal}{.. boolean #b = #nse; #require(#b); ...}\endmodality(post))
		\heuristics(simplify_prog_subset,simplify)	
    };

    requireSucc {        
        \schemaVar \program MethodName[name=require] #require;
        \find (==> \modality{#allmodal}{.. #require(#se); ...}\endmodality(post))        
		\replacewith(==> \modality{#allmodal}{.. ...}\endmodality(post))
		\add(#se=TRUE ==>);
		\replacewith(==> \modality{#allmodal}{.. throw null; ...}\endmodality(post))
		\add(#se=FALSE ==>)
		\heuristics(simplify_prog_subset,simplify)
		\displayname "require"	
    };


   functionCallEmpty {
   	\schemaVar \program ExecutionContext #ex;
    \find (\modality{#allmodal}{.. method-frame(#ex):{} ...}\endmodality(post)) 
    \replacewith (\modality{#allmodal}{..  ...}\endmodality(post)) 
    \heuristics(simplify_prog) 
  };
  
  
  emptyBlock {
    \find (\modality{#allmodal}{.. {} ...}\endmodality(post)) 
    \replacewith (\modality{#allmodal}{.. ...}\endmodality(post)) 
    \heuristics(simplify_prog) 
  };
  
  emptyProgram {
    \find (\modality{#allmodal}{ }\endmodality(post)) 
    \replacewith (post) 
    \heuristics(simplify_prog) 
  };
}
