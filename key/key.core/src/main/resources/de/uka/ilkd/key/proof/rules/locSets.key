// This file contains the DECLARATIONS for location sets.
// Find the rules in file locSetRules.key

\sorts {
    LocSet;
    ProgVar;
}

\functions {
    // unique function symbols 
    \unique LocSet empty;
    \unique LocSet allLocs;

    // other constructors 
    LocSet singleton(Object, Field);
    LocSet union(LocSet, LocSet);
    LocSet intersect(LocSet, LocSet);
    LocSet setMinus(LocSet, LocSet);
    LocSet infiniteUnion{true}(LocSet);
    LocSet allFields(Object);
    LocSet allObjects(Field);
    LocSet arrayRange(Object, int, int);
    LocSet freshLocs(Heap);
    // work-a-round
    LocSet allElementsOfArray(Heap, Object, LocSet);
    LocSet allElementsOfArrayLocsets(Heap, Object, LocSet);
    
    // Abstract Execution-related constructors / functions
    ProgVar PV(any);              // Needed because there is no way of referring to the set of program variable symbols
    LocSet singletonPV(ProgVar);  // A singleton with a program variable
    LocSet hasTo(any);            // Used in assignable directives for assignables that have to be assigned
    LocSet irr(any);              // Used to identify "irrelevant" locations in assignables
    \nonRigid any value(LocSet);  // Conversion of location sets to values, e.g., {(o,f)} --> select(heap, o, f)
    LocSet heapLocs(LocSet);      // Returns all heap locations in the given set
    LocSet pvLocs(LocSet);        // Returns all program variable locations in the given set
    ProgVar anonPV(ProgVar, LocSet, ProgVar); // Like anon for heaps
}

\predicates {
    elementOf(Object, Field, LocSet);
    subset(LocSet, LocSet);
    disjoint(LocSet, LocSet);
    createdInHeap(LocSet, Heap);
    
    // Abstract Execution-related predicates
    pvElementOf(ProgVar, LocSet);
}
