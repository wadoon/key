ensures true;
requires true;
---Contract---

/*@ public normal_behavior
      @   assignable \nothing;
      @   assignable<permissions> \nothing;
      @*/

//    public AssertionError(double detailMessage) {}
//    public AssertionError(float detailMessage)  {}
//   public float floatValue();
//   public double doubleValue();
/*@ public normal_behavior
     @   ensures message == null && cause == null;
     @   assignable message, cause;
     @*/

/*@ public normal_behavior
     @   ensures message == arg0 && cause == null;
     @   assignable message, cause;
     @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//   public abstract float floatValue();
//   public abstract double doubleValue();

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:16:59 CET 2014
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

// public final static java.util.Comparator CASE_INSENSITIVE_ORDER;

// public String(byte[] arg0, int arg1, int arg2, java.lang.String arg3) throws java.io.UnsupportedEncodingException;
// public String(byte[] arg0, int arg1, int arg2, java.nio.charset.Charset arg3);
// public String(byte[] arg0, java.lang.String arg1) throws java.io.UnsupportedEncodingException;
// public String(byte[] arg0, java.nio.charset.Charset arg1);

// public String(java.lang.StringBuffer arg0);
// public String(java.lang.StringBuilder arg0);

// public byte[] getBytes(java.lang.String arg0) throws java.io.UnsupportedEncodingException;
// public byte[] getBytes(java.nio.charset.Charset arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(byte[]);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result[*] \by \dl_strContent(this);
     @*/

// public boolean contentEquals(java.lang.StringBuffer arg0);
// public boolean contentEquals(java.lang.CharSequence arg0);

// public java.lang.CharSequence subSequence(int arg0, int arg1);

// public boolean contains(java.lang.CharSequence arg0);

// public java.lang.String replace(java.lang.CharSequence arg0, java.lang.CharSequence arg1);

// public java.lang.String toLowerCase(java.util.Locale arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(String);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \dl_strContent(\result) \by \dl_strContent(this);
     @*/

// public java.lang.String toUpperCase(java.util.Locale arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(String);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \dl_strContent(\result) \by \dl_strContent(this);
     @*/

/*@ public normal_behavior
     @ ensures \result.length == \dl_strContent(this).length;
     @ ensures (\forall \bigint i; 0 <= i && i < \result.length; \dl_inChar(\result[i]));
     @ ensures \fresh(\result) && \typeof(\result) == \type(char[]);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result[*] \by \dl_strContent(this);
     @*/

// public static java.lang.String format(java.util.Locale arg0, java.lang.String arg1, java.lang.Object[] arg2);

//   public static java.lang.String valueOf(float arg0);
//   public static java.lang.String valueOf(double arg0);

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//, CharSequence

//    public StringBuffer	append(char[] str);
    //    public StringBuffer	append(char[] str, int offset, int len);
    //    public StringBuffer	append(double d);
    //    public StringBuffer	append(float f);

//    public CharSequence subSequence(int start, int end);

// Remarks: Currently the specifications assumes src and dest to be int[].
    //          This is incomplete, and should be amended when needed
    // added by Mattias Ulbrich in Jan 19.
    /*@ public exceptional_behavior
      @   requires src == null || dest == null;
      @   signals_only NullPointerException;
      @   assignable \nothing;
      @ also
      @ public exceptional_behavior
      @   requires src instanceof int[] && dest instanceof int[];
      @   requires src != null && dest != null;
      @   requires (srcPos < 0 || destPos < 0 || length < 0
      @                  || srcPos + length > ((int[])src).length
      @                  || destPos + length > ((int[])dest).length);
      @    assignable \nothing;
      @    signals_only ArrayIndexOutOfBoundsException;
      @ also
      @ public normal_behavior
      @   requires src instanceof int[] && dest instanceof int[];
      @   requires src != null && dest != null;
      @   requires srcPos >= 0 && destPos >= 0;
      @   requires length >= 0;
      @   requires srcPos + length <= ((int[])src).length
      @         && destPos + length <= ((int[])dest).length;
      @   ensures (\forall int i; 0 <= i && i < length;
      @             ((int[])dest)[destPos + i] == \old(((int[])src)[srcPos + i]));
      @   assignable ((int[])dest)[destPos .. destPos + length - 1];
      @*/

// This implementation has been used to verify the above contracts
    // {
    //     if(src == null || dest == null) {
    //         throw new NullPointerException();
    //     }
    //     int[] isrc = (int[])src;
    //     int[] idest = (int[])dest;
    //     if(length < 0) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     int[] tmp = new int[length];
    //     if(srcPos < 0 || srcPos + length > isrc.length) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     /*@ loop_invariant 0 <= i && i <= length;
    //       @ loop_invariant (\forall int j; 0<=j && j < i; tmp[j] == isrc[srcPos + j]);
    //       @ loop_invariant \fresh(tmp);
    //       @ decreases length - i;
    //       @ assignable tmp[*];
    //       @*/
    //     for(int i = 0; i < length; i++) {
    //         tmp[i] = isrc[srcPos + i];
    //     }
    //     if(destPos < 0 || destPos + length > idest.length) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     /*@ loop_invariant 0 <= k && k <= length;
    //       @ loop_invariant (\forall int j; 0<=j && j < k; idest[destPos + j] == tmp[j]);
    //       @ decreases length - k;
    //       @ assignable idest[destPos .. destPos + length - 1];
    //       @*/
    //     for(int k = 0; k < length; k++) {
    //         idest[destPos + k] = tmp[k];
    //     }
    // }

    /*@ public behavior
      @ ensures false;
      @ signals_only \nothing;
      @ diverges true;
      @*/

//@ protected nullable ghost String message = null;
   //@ protected nullable ghost Throwable cause = null;

   /*@ public normal_behavior
     @    requires true;
     @    ensures message == null && cause == null;
     @    assignable message, cause;
     @*/

/*@ public normal_behavior
     @    requires true;
     @    ensures message == arg0 && cause == null;
     @    assignable message, cause;
     @*/

/*@ public normal_behavior
     @    requires true;
     @    ensures message == arg0 && cause == arg1;
     @    assignable message, cause;
     @*/

//@ set message = arg0;
       //@ set cause = arg1;

   /*@ public normal_behavior
     @    requires true;
     @    ensures message == null && cause == arg0;
     @    assignable message, cause;
     @*/

/*@ public normal_behavior
     @    ensures \result == message;
     @*/

/*@ public normal_behavior
     @    ensures \result == cause;
     @*/

/*@ public normal_behavior
     @    requires cause == null;
     @    ensures \result == this && cause == arg0;
     @    assignable cause;
     @ helper // needs to be helper because called in constructor
     @*/

//@ set cause = arg0;

// public void printStackTrace(java.io.PrintStream arg0);
// public void printStackTrace(java.io.PrintWriter arg0);

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 *
 * Enriched by JML specifications by MU
 *
 */
// public java.lang.StackTraceElement[] getStackTrace();
// public void setStackTrace(java.lang.StackTraceElement[] arg0);

//@ public instance ghost \seq seq;

   /*@ public normal_behavior
     @ ensures \result == seq.length;
     @ assignable \nothing;
     @ determines \result \by seq.length;
     @ */

/*@ public normal_behavior
     @ ensures \result == (size() == 0);
     @ assignable \nothing;
     @ determines \result \by seq.length;
     @*/

/*@ public normal_behavior
     @ ensures seq == \seq_concat(\old(seq), \seq_singleton(arg0));
     @ assignable seq;
     @ determines seq \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ ensures seq == \seq_concat(\old(seq), arg0.seq);
     @ assignable seq;
     @ determines seq \by seq, arg0.seq;
     @*/

/*@ public normal_behavior
     @ ensures \result == (\exists \bigint i; 0 <= i && i < seq.length; ((String)seq[i]) == arg0);
     @ assignable \nothing;
     @ determines \result \by seq, arg0;
     @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/*@ public normal_behavior
     @ requires arg0 == 0;
     @ ensures seq == \seq_concat(\seq_singleton(arg0), \old(seq));
     @ assignable seq;
     @ determines seq \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ requires 0 <= arg0 && arg0 < seq.length;
     @ ensures ((Object)seq[arg0]) == \result;
     @ assignable \nothing;
     @ determines \result \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ ensures \result.index == 0;
     @ ensures \result.seq == seq;
     @ ensures \fresh(\result) && \fresh(\result.*);
     @ ensures \result instanceof ListIteratorImpl;
     @ assignable \nothing;
     @ determines \result.seq \by seq;
     @ determines \result.index \by \nothing;
     @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//@ public instance ghost \seq seq;
    //@ public instance ghost \bigint index;

    //@ public instance invariant 0 <= index && index <= seq.length;

    /*@ public normal_behavior
      @ ensures \result == true <==> index < seq.length;
      @ assignable \strictly_nothing;
      @ determines \result \by seq.length, index;
      @*/

/*@ public behavior
      @ requires index < seq.length;
      @ ensures \result == ((Object)seq[\old(index)]);
      @ ensures index == \old(index) + 1;
      @ assignable index;
      @ signals_only java.lang.RuntimeException;
      @ determines \result \by seq, index;
      @ determines index \by \itself;
      @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//@ public instance ghost \seq key_seq;
    //@ public instance ghost \seq value_seq;

    //@ public instance invariant key_seq.length == value_seq.length;
    //@ public instance invariant (\forall \bigint i; 0 <= i && i < key_seq.length; ((Object)key_seq[i]) != null);
    //@ public instance invariant (\forall \bigint i; 0 <= i && i < value_seq.length; ((Object)value_seq[i]) != null);

    /*@ public normal_behavior
      @ ensures \result.seq == key_seq;
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

// public void print(float f);
    // public void print(double d);

// public void println(float x);
    // public void println(double x);

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//@ public final ghost \bigint value;

   //@ public static invariant java.math.BigInteger.ZERO.value == (\bigint) 0;

/*@ public normal_behavior
     @ requires true;
     @ ensures (\result <= 0) <==> (this.value - param0.value <= 0);
     @ ensures (\result >= 0) <==> (this.value - param0.value >= 0);
     @ assignable \strictly_nothing;
     @ determines \result \by this.value, param0.value;
     @*/

/*@ public normal_behavior
     @ requires true;
     @ ensures \result.value == this.value % param0.value;
     @ ensures \fresh(\result) && \fresh(\result.*) && \typeof(\result) == \type(BigInteger);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result.value \by this.value, param0.value;
     @*/


/*@ public normal_behavior
      @ ensures seq.length == 0;
      @ ensures \fresh(this) && \fresh(this.*);
      @ determines seq \by \nothing;
      @*/

/*@ public normal_behavior
      @ ensures seq == c.seq;
      @ ensures \fresh(this) && \fresh(this.*) && \typeof(this) == \type(ArrayList);
      @ determines this, seq \by c.seq \new_objects this;
      @*/

/*@ public normal_behavior
	  @ ensures \invariant_for(\result);
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \invariant_for(\result);
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \fresh(\result) && \fresh(\result.*);
      @ ensures \invariant_for(\result);
      @ ensures (\forall \bigint i; 0 <= i && i < \result.seq.length; ((String)\result.seq[i]) != null);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \fresh(\result) && \fresh(\result.*);
      @ ensures \invariant_for(\result);
      @ ensures (\forall \bigint i; 0 <= i && i < \result.seq.length; ((String)\result.seq[i]) != null);
      @ assignable \nothing;
      @*/

/*@ public behavior
     @ requires true;
     @ ensures true;
     @ assignable \everything;
     @*/

/*@ public normal_behavior
      @ ensures key_seq.length == 0;
      @ ensures value_seq.length == 0;
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
	  @ ensures seq == param0.seq;
      @*/

/*@ public normal_behavior
      @ requires true;
      @*/

/*@ normal_behaviour
      @   requires (\forall int i; 0 <= i && i < a.length; 0 <= a[i]);
      @   assignable sum, max;
      @   ensures (\forall int i; 0 <= i && i < a.length; a[i] <= max);
      @   ensures (a.length > 0
      @           ==> (\exists int i; 0 <= i && i < a.length; max == a[i]));
      @   ensures sum == (\sum int i; 0 <= i && i < a.length; a[i]);
      @   ensures sum <= a.length * max;
      @*/



/*@ normal_behaviour
      @   requires (\forall int i; 0 <= i && i < a.length; 0 <= a[i]);
      @   assignable sum, max;
      @   ensures (\forall int i; 0 <= i && i < a.length; a[i] <= max);
      @   ensures (a.length > 0
      @           ==> (\exists int i; 0 <= i && i < a.length; max == a[i]));
      @   ensures sum == (\sum int i; 0 <= i && i < a.length; a[i]);
      @   ensures sum <= a.length * max;
      @*/

/*@ normal_behaviour
      @   requires (\forall int i; 0 <= i && i < a.length; 0 <= a[i]);
      @   assignable sum, max;
      @   ensures (\forall int i; 0 <= i && i < a.length; a[i] <= max);
      @   ensures (a.length > 0
      @           ==> (\exists int i; 0 <= i && i < a.length; max == a[i]));
      @   ensures sum == (\sum int i; 0 <= i && i < a.length; a[i]);
      @   ensures sum <= a.length * max;
      @*/



/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

// public void print(float f);
    // public void print(double d);

// public void println(float x);
    // public void println(double x);

// public void print(float f);
    // public void print(double d);

// public void println(float x);
    // public void println(double x);

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//    public AssertionError(double detailMessage) {}
//    public AssertionError(float detailMessage)  {}

//    public AssertionError(double detailMessage) {}
//    public AssertionError(float detailMessage)  {}

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Tue Apr 15 10:18:21 CEST 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

// the following is needed for in some examples to static initialisation:

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

// the following is needed for in some examples to static initialisation:

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//   public float floatValue();
//   public double doubleValue();

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */

//   public float floatValue();
//   public double doubleValue();

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Tue Apr 15 10:18:21 CEST 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Tue Apr 15 10:17:24 CEST 2008
 */

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/*@ public normal_behavior
     @   ensures message == null && cause == null;
     @   assignable message, cause;
     @*/

/*@ public normal_behavior
     @   ensures message == arg0 && cause == null;
     @   assignable message, cause;
     @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/*@ public normal_behavior
     @   ensures message == null && cause == null;
     @   assignable message, cause;
     @*/

/*@ public normal_behavior
     @   ensures message == arg0 && cause == null;
     @   assignable message, cause;
     @*/

//   public abstract float floatValue();
//   public abstract double doubleValue();

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:16:59 CET 2014
 */

//   public abstract float floatValue();
//   public abstract double doubleValue();

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */

/*@ public normal_behavior
      @   assignable \nothing;
      @   assignable<permissions> \nothing;
      @*/

/*@ public normal_behavior
      @   assignable \nothing;
      @   assignable<permissions> \nothing;
      @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

// public final static java.util.Comparator CASE_INSENSITIVE_ORDER;

// public String(byte[] arg0, int arg1, int arg2, java.lang.String arg3) throws java.io.UnsupportedEncodingException;
// public String(byte[] arg0, int arg1, int arg2, java.nio.charset.Charset arg3);
// public String(byte[] arg0, java.lang.String arg1) throws java.io.UnsupportedEncodingException;
// public String(byte[] arg0, java.nio.charset.Charset arg1);

// public String(java.lang.StringBuffer arg0);
// public String(java.lang.StringBuilder arg0);

// public byte[] getBytes(java.lang.String arg0) throws java.io.UnsupportedEncodingException;
// public byte[] getBytes(java.nio.charset.Charset arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(byte[]);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result[*] \by \dl_strContent(this);
     @*/

// public boolean contentEquals(java.lang.StringBuffer arg0);
// public boolean contentEquals(java.lang.CharSequence arg0);

// public java.lang.CharSequence subSequence(int arg0, int arg1);

// public boolean contains(java.lang.CharSequence arg0);

// public java.lang.String replace(java.lang.CharSequence arg0, java.lang.CharSequence arg1);

// public java.lang.String toLowerCase(java.util.Locale arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(String);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \dl_strContent(\result) \by \dl_strContent(this);
     @*/

// public java.lang.String toUpperCase(java.util.Locale arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(String);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \dl_strContent(\result) \by \dl_strContent(this);
     @*/

/*@ public normal_behavior
     @ ensures \result.length == \dl_strContent(this).length;
     @ ensures (\forall \bigint i; 0 <= i && i < \result.length; \dl_inChar(\result[i]));
     @ ensures \fresh(\result) && \typeof(\result) == \type(char[]);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result[*] \by \dl_strContent(this);
     @*/

// public static java.lang.String format(java.util.Locale arg0, java.lang.String arg1, java.lang.Object[] arg2);

//   public static java.lang.String valueOf(float arg0);
//   public static java.lang.String valueOf(double arg0);

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

// public String(java.lang.StringBuffer arg0);
// public String(java.lang.StringBuilder arg0);

// public byte[] getBytes(java.lang.String arg0) throws java.io.UnsupportedEncodingException;
// public byte[] getBytes(java.nio.charset.Charset arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(byte[]);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result[*] \by \dl_strContent(this);
     @*/

// public boolean contentEquals(java.lang.StringBuffer arg0);
// public boolean contentEquals(java.lang.CharSequence arg0);

// public java.lang.CharSequence subSequence(int arg0, int arg1);

// public boolean contains(java.lang.CharSequence arg0);

// public java.lang.String replace(java.lang.CharSequence arg0, java.lang.CharSequence arg1);

// public java.lang.String toLowerCase(java.util.Locale arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(String);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \dl_strContent(\result) \by \dl_strContent(this);
     @*/

// public java.lang.String toUpperCase(java.util.Locale arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(String);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \dl_strContent(\result) \by \dl_strContent(this);
     @*/

/*@ public normal_behavior
     @ ensures \result.length == \dl_strContent(this).length;
     @ ensures (\forall \bigint i; 0 <= i && i < \result.length; \dl_inChar(\result[i]));
     @ ensures \fresh(\result) && \typeof(\result) == \type(char[]);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result[*] \by \dl_strContent(this);
     @*/

// public static java.lang.String format(java.util.Locale arg0, java.lang.String arg1, java.lang.Object[] arg2);

//   public static java.lang.String valueOf(float arg0);
//   public static java.lang.String valueOf(double arg0);

// public final static java.util.Comparator CASE_INSENSITIVE_ORDER;

// public String(byte[] arg0, int arg1, int arg2, java.lang.String arg3) throws java.io.UnsupportedEncodingException;
// public String(byte[] arg0, int arg1, int arg2, java.nio.charset.Charset arg3);
// public String(byte[] arg0, java.lang.String arg1) throws java.io.UnsupportedEncodingException;
// public String(byte[] arg0, java.nio.charset.Charset arg1);

//, CharSequence

//    public StringBuffer	append(char[] str);
    //    public StringBuffer	append(char[] str, int offset, int len);
    //    public StringBuffer	append(double d);
    //    public StringBuffer	append(float f);

//    public CharSequence subSequence(int start, int end);

//    public StringBuffer	append(char[] str);
    //    public StringBuffer	append(char[] str, int offset, int len);
    //    public StringBuffer	append(double d);
    //    public StringBuffer	append(float f);

//    public CharSequence subSequence(int start, int end);

//, CharSequence

// Remarks: Currently the specifications assumes src and dest to be int[].
    //          This is incomplete, and should be amended when needed
    // added by Mattias Ulbrich in Jan 19.
    /*@ public exceptional_behavior
      @   requires src == null || dest == null;
      @   signals_only NullPointerException;
      @   assignable \nothing;
      @ also
      @ public exceptional_behavior
      @   requires src instanceof int[] && dest instanceof int[];
      @   requires src != null && dest != null;
      @   requires (srcPos < 0 || destPos < 0 || length < 0
      @                  || srcPos + length > ((int[])src).length
      @                  || destPos + length > ((int[])dest).length);
      @    assignable \nothing;
      @    signals_only ArrayIndexOutOfBoundsException;
      @ also
      @ public normal_behavior
      @   requires src instanceof int[] && dest instanceof int[];
      @   requires src != null && dest != null;
      @   requires srcPos >= 0 && destPos >= 0;
      @   requires length >= 0;
      @   requires srcPos + length <= ((int[])src).length
      @         && destPos + length <= ((int[])dest).length;
      @   ensures (\forall int i; 0 <= i && i < length;
      @             ((int[])dest)[destPos + i] == \old(((int[])src)[srcPos + i]));
      @   assignable ((int[])dest)[destPos .. destPos + length - 1];
      @*/

// This implementation has been used to verify the above contracts
    // {
    //     if(src == null || dest == null) {
    //         throw new NullPointerException();
    //     }
    //     int[] isrc = (int[])src;
    //     int[] idest = (int[])dest;
    //     if(length < 0) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     int[] tmp = new int[length];
    //     if(srcPos < 0 || srcPos + length > isrc.length) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     /*@ loop_invariant 0 <= i && i <= length;
    //       @ loop_invariant (\forall int j; 0<=j && j < i; tmp[j] == isrc[srcPos + j]);
    //       @ loop_invariant \fresh(tmp);
    //       @ decreases length - i;
    //       @ assignable tmp[*];
    //       @*/
    //     for(int i = 0; i < length; i++) {
    //         tmp[i] = isrc[srcPos + i];
    //     }
    //     if(destPos < 0 || destPos + length > idest.length) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     /*@ loop_invariant 0 <= k && k <= length;
    //       @ loop_invariant (\forall int j; 0<=j && j < k; idest[destPos + j] == tmp[j]);
    //       @ decreases length - k;
    //       @ assignable idest[destPos .. destPos + length - 1];
    //       @*/
    //     for(int k = 0; k < length; k++) {
    //         idest[destPos + k] = tmp[k];
    //     }
    // }

    /*@ public behavior
      @ ensures false;
      @ signals_only \nothing;
      @ diverges true;
      @*/

// Remarks: Currently the specifications assumes src and dest to be int[].
    //          This is incomplete, and should be amended when needed
    // added by Mattias Ulbrich in Jan 19.
    /*@ public exceptional_behavior
      @   requires src == null || dest == null;
      @   signals_only NullPointerException;
      @   assignable \nothing;
      @ also
      @ public exceptional_behavior
      @   requires src instanceof int[] && dest instanceof int[];
      @   requires src != null && dest != null;
      @   requires (srcPos < 0 || destPos < 0 || length < 0
      @                  || srcPos + length > ((int[])src).length
      @                  || destPos + length > ((int[])dest).length);
      @    assignable \nothing;
      @    signals_only ArrayIndexOutOfBoundsException;
      @ also
      @ public normal_behavior
      @   requires src instanceof int[] && dest instanceof int[];
      @   requires src != null && dest != null;
      @   requires srcPos >= 0 && destPos >= 0;
      @   requires length >= 0;
      @   requires srcPos + length <= ((int[])src).length
      @         && destPos + length <= ((int[])dest).length;
      @   ensures (\forall int i; 0 <= i && i < length;
      @             ((int[])dest)[destPos + i] == \old(((int[])src)[srcPos + i]));
      @   assignable ((int[])dest)[destPos .. destPos + length - 1];
      @*/

// This implementation has been used to verify the above contracts
    // {
    //     if(src == null || dest == null) {
    //         throw new NullPointerException();
    //     }
    //     int[] isrc = (int[])src;
    //     int[] idest = (int[])dest;
    //     if(length < 0) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     int[] tmp = new int[length];
    //     if(srcPos < 0 || srcPos + length > isrc.length) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     /*@ loop_invariant 0 <= i && i <= length;
    //       @ loop_invariant (\forall int j; 0<=j && j < i; tmp[j] == isrc[srcPos + j]);
    //       @ loop_invariant \fresh(tmp);
    //       @ decreases length - i;
    //       @ assignable tmp[*];
    //       @*/
    //     for(int i = 0; i < length; i++) {
    //         tmp[i] = isrc[srcPos + i];
    //     }
    //     if(destPos < 0 || destPos + length > idest.length) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     /*@ loop_invariant 0 <= k && k <= length;
    //       @ loop_invariant (\forall int j; 0<=j && j < k; idest[destPos + j] == tmp[j]);
    //       @ decreases length - k;
    //       @ assignable idest[destPos .. destPos + length - 1];
    //       @*/
    //     for(int k = 0; k < length; k++) {
    //         idest[destPos + k] = tmp[k];
    //     }
    // }

    /*@ public behavior
      @ ensures false;
      @ signals_only \nothing;
      @ diverges true;
      @*/

//@ protected nullable ghost String message = null;
   //@ protected nullable ghost Throwable cause = null;

   /*@ public normal_behavior
     @    requires true;
     @    ensures message == null && cause == null;
     @    assignable message, cause;
     @*/

/*@ public normal_behavior
     @    requires true;
     @    ensures message == arg0 && cause == null;
     @    assignable message, cause;
     @*/

/*@ public normal_behavior
     @    requires true;
     @    ensures message == arg0 && cause == arg1;
     @    assignable message, cause;
     @*/

//@ set message = arg0;
       //@ set cause = arg1;

   /*@ public normal_behavior
     @    requires true;
     @    ensures message == null && cause == arg0;
     @    assignable message, cause;
     @*/

/*@ public normal_behavior
     @    ensures \result == message;
     @*/

/*@ public normal_behavior
     @    ensures \result == cause;
     @*/

/*@ public normal_behavior
     @    requires cause == null;
     @    ensures \result == this && cause == arg0;
     @    assignable cause;
     @ helper // needs to be helper because called in constructor
     @*/

//@ set cause = arg0;

// public void printStackTrace(java.io.PrintStream arg0);
// public void printStackTrace(java.io.PrintWriter arg0);

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 *
 * Enriched by JML specifications by MU
 *
 */
// public java.lang.StackTraceElement[] getStackTrace();
// public void setStackTrace(java.lang.StackTraceElement[] arg0);

/*@ public normal_behavior
     @    ensures \result == message;
     @*/

/*@ public normal_behavior
     @    ensures \result == cause;
     @*/

/*@ public normal_behavior
     @    requires cause == null;
     @    ensures \result == this && cause == arg0;
     @    assignable cause;
     @ helper // needs to be helper because called in constructor
     @*/

//@ set cause = arg0;

// public void printStackTrace(java.io.PrintStream arg0);
// public void printStackTrace(java.io.PrintWriter arg0);

//@ protected nullable ghost String message = null;
   //@ protected nullable ghost Throwable cause = null;

   /*@ public normal_behavior
     @    requires true;
     @    ensures message == null && cause == null;
     @    assignable message, cause;
     @*/

/*@ public normal_behavior
     @    requires true;
     @    ensures message == arg0 && cause == null;
     @    assignable message, cause;
     @*/

/*@ public normal_behavior
     @    requires true;
     @    ensures message == arg0 && cause == arg1;
     @    assignable message, cause;
     @*/

//@ set message = arg0;
       //@ set cause = arg1;

   /*@ public normal_behavior
     @    requires true;
     @    ensures message == null && cause == arg0;
     @    assignable message, cause;
     @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */

//@ public final ghost \bigint value;

   //@ public static invariant java.math.BigInteger.ZERO.value == (\bigint) 0;

/*@ public normal_behavior
     @ requires true;
     @ ensures (\result <= 0) <==> (this.value - param0.value <= 0);
     @ ensures (\result >= 0) <==> (this.value - param0.value >= 0);
     @ assignable \strictly_nothing;
     @ determines \result \by this.value, param0.value;
     @*/

/*@ public normal_behavior
     @ requires true;
     @ ensures \result.value == this.value % param0.value;
     @ ensures \fresh(\result) && \fresh(\result.*) && \typeof(\result) == \type(BigInteger);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result.value \by this.value, param0.value;
     @*/

/*@ public normal_behavior
     @ requires true;
     @ ensures (\result <= 0) <==> (this.value - param0.value <= 0);
     @ ensures (\result >= 0) <==> (this.value - param0.value >= 0);
     @ assignable \strictly_nothing;
     @ determines \result \by this.value, param0.value;
     @*/

/*@ public normal_behavior
     @ requires true;
     @ ensures \result.value == this.value % param0.value;
     @ ensures \fresh(\result) && \fresh(\result.*) && \typeof(\result) == \type(BigInteger);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result.value \by this.value, param0.value;
     @*/

/*@ public normal_behavior
      @ ensures seq.length == 0;
      @ ensures \fresh(this) && \fresh(this.*);
      @ determines seq \by \nothing;
      @*/

/*@ public normal_behavior
      @ ensures seq == c.seq;
      @ ensures \fresh(this) && \fresh(this.*) && \typeof(this) == \type(ArrayList);
      @ determines this, seq \by c.seq \new_objects this;
      @*/

/*@ public normal_behavior
      @ ensures seq.length == 0;
      @ ensures \fresh(this) && \fresh(this.*);
      @ determines seq \by \nothing;
      @*/

/*@ public normal_behavior
      @ ensures seq == c.seq;
      @ ensures \fresh(this) && \fresh(this.*) && \typeof(this) == \type(ArrayList);
      @ determines this, seq \by c.seq \new_objects this;
      @*/

/*@ public normal_behavior
	  @ ensures \invariant_for(\result);
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \invariant_for(\result);
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \fresh(\result) && \fresh(\result.*);
      @ ensures \invariant_for(\result);
      @ ensures (\forall \bigint i; 0 <= i && i < \result.seq.length; ((String)\result.seq[i]) != null);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \fresh(\result) && \fresh(\result.*);
      @ ensures \invariant_for(\result);
      @ ensures (\forall \bigint i; 0 <= i && i < \result.seq.length; ((String)\result.seq[i]) != null);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
	  @ ensures \invariant_for(\result);
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \invariant_for(\result);
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \fresh(\result) && \fresh(\result.*);
      @ ensures \invariant_for(\result);
      @ ensures (\forall \bigint i; 0 <= i && i < \result.seq.length; ((String)\result.seq[i]) != null);
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures \fresh(\result) && \fresh(\result.*);
      @ ensures \invariant_for(\result);
      @ ensures (\forall \bigint i; 0 <= i && i < \result.seq.length; ((String)\result.seq[i]) != null);
      @ assignable \nothing;
      @*/

//@ public instance ghost \seq seq;

   /*@ public normal_behavior
     @ ensures \result == seq.length;
     @ assignable \nothing;
     @ determines \result \by seq.length;
     @ */

/*@ public normal_behavior
     @ ensures \result == (size() == 0);
     @ assignable \nothing;
     @ determines \result \by seq.length;
     @*/

/*@ public normal_behavior
     @ ensures seq == \seq_concat(\old(seq), \seq_singleton(arg0));
     @ assignable seq;
     @ determines seq \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ ensures seq == \seq_concat(\old(seq), arg0.seq);
     @ assignable seq;
     @ determines seq \by seq, arg0.seq;
     @*/

/*@ public normal_behavior
     @ ensures \result == (\exists \bigint i; 0 <= i && i < seq.length; ((String)seq[i]) == arg0);
     @ assignable \nothing;
     @ determines \result \by seq, arg0;
     @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//@ public instance ghost \seq seq;

   /*@ public normal_behavior
     @ ensures \result == seq.length;
     @ assignable \nothing;
     @ determines \result \by seq.length;
     @ */

/*@ public normal_behavior
     @ ensures \result == (size() == 0);
     @ assignable \nothing;
     @ determines \result \by seq.length;
     @*/

/*@ public normal_behavior
     @ ensures seq == \seq_concat(\old(seq), \seq_singleton(arg0));
     @ assignable seq;
     @ determines seq \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ ensures seq == \seq_concat(\old(seq), arg0.seq);
     @ assignable seq;
     @ determines seq \by seq, arg0.seq;
     @*/

/*@ public normal_behavior
     @ ensures \result == (\exists \bigint i; 0 <= i && i < seq.length; ((String)seq[i]) == arg0);
     @ assignable \nothing;
     @ determines \result \by seq, arg0;
     @*/

/*@ public behavior
     @ requires true;
     @ ensures true;
     @ assignable \everything;
     @*/

/*@ public behavior
     @ requires true;
     @ ensures true;
     @ assignable \everything;
     @*/

/*@ public normal_behavior
      @ ensures key_seq.length == 0;
      @ ensures value_seq.length == 0;
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
      @ ensures key_seq.length == 0;
      @ ensures value_seq.length == 0;
      @ assignable \nothing;
      @*/

/*@ public normal_behavior
	  @ ensures seq == param0.seq;
      @*/

/*@ public normal_behavior
      @ requires true;
      @*/

/*@ public normal_behavior
      @ requires true;
      @*/

/*@ public normal_behavior
	  @ ensures seq == param0.seq;
      @*/

/*@ public normal_behavior
     @ requires arg0 == 0;
     @ ensures seq == \seq_concat(\seq_singleton(arg0), \old(seq));
     @ assignable seq;
     @ determines seq \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ requires 0 <= arg0 && arg0 < seq.length;
     @ ensures ((Object)seq[arg0]) == \result;
     @ assignable \nothing;
     @ determines \result \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ ensures \result.index == 0;
     @ ensures \result.seq == seq;
     @ ensures \fresh(\result) && \fresh(\result.*);
     @ ensures \result instanceof ListIteratorImpl;
     @ assignable \nothing;
     @ determines \result.seq \by seq;
     @ determines \result.index \by \nothing;
     @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

/*@ public normal_behavior
     @ requires arg0 == 0;
     @ ensures seq == \seq_concat(\seq_singleton(arg0), \old(seq));
     @ assignable seq;
     @ determines seq \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ requires 0 <= arg0 && arg0 < seq.length;
     @ ensures ((Object)seq[arg0]) == \result;
     @ assignable \nothing;
     @ determines \result \by seq, arg0;
     @*/

/*@ public normal_behavior
     @ ensures \result.index == 0;
     @ ensures \result.seq == seq;
     @ ensures \fresh(\result) && \fresh(\result.*);
     @ ensures \result instanceof ListIteratorImpl;
     @ assignable \nothing;
     @ determines \result.seq \by seq;
     @ determines \result.index \by \nothing;
     @*/

//@ public instance ghost \seq seq;
    //@ public instance ghost \bigint index;

    //@ public instance invariant 0 <= index && index <= seq.length;

    /*@ public normal_behavior
      @ ensures \result == true <==> index < seq.length;
      @ assignable \strictly_nothing;
      @ determines \result \by seq.length, index;
      @*/

/*@ public behavior
      @ requires index < seq.length;
      @ ensures \result == ((Object)seq[\old(index)]);
      @ ensures index == \old(index) + 1;
      @ assignable index;
      @ signals_only java.lang.RuntimeException;
      @ determines \result \by seq, index;
      @ determines index \by \itself;
      @*/

/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */

//@ public instance ghost \seq seq;
    //@ public instance ghost \bigint index;

    //@ public instance invariant 0 <= index && index <= seq.length;

    /*@ public normal_behavior
      @ ensures \result == true <==> index < seq.length;
      @ assignable \strictly_nothing;
      @ determines \result \by seq.length, index;
      @*/

/*@ public behavior
      @ requires index < seq.length;
      @ ensures \result == ((Object)seq[\old(index)]);
      @ ensures index == \old(index) + 1;
      @ assignable index;
      @ signals_only java.lang.RuntimeException;
      @ determines \result \by seq, index;
      @ determines index \by \itself;
      @*/

//@ public instance ghost \seq key_seq;
    //@ public instance ghost \seq value_seq;

    //@ public instance invariant key_seq.length == value_seq.length;
    //@ public instance invariant (\forall \bigint i; 0 <= i && i < key_seq.length; ((Object)key_seq[i]) != null);
    //@ public instance invariant (\forall \bigint i; 0 <= i && i < value_seq.length; ((Object)value_seq[i]) != null);

    /*@ public normal_behavior
      @ ensures \result.seq == key_seq;
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/

//@ public instance ghost \seq key_seq;
//@ public instance ghost \seq value_seq;

//@ public instance invariant key_seq.length == value_seq.length;
//@ public instance invariant (\forall \bigint i; 0 <= i && i < key_seq.length; ((Object)key_seq[i]) != null);
//@ public instance invariant (\forall \bigint i; 0 <= i && i < value_seq.length; ((Object)value_seq[i]) != null);

/*@ public normal_behavior
  @ ensures \result.seq == key_seq;
  @ ensures \fresh(\result);
  @ assignable \nothing;
  @*/



3:23:15 AM: Executing task 'run'...

> Task :key.core:compileJavacc UP-TO-DATE
> Task :key.core:generateGrammarSource UP-TO-DATE
> Task :key.core:runAntlr4 UP-TO-DATE
> Task :key.util:compileJava UP-TO-DATE

> Task :key.core:compileJava

> Task :key.core:generateVersionFiles UP-TO-DATE
> Task :key.core:processResources UP-TO-DATE
> Task :key.core:classes
Note: /home/weigl/work/key/key/key.core/src/main/java/de/uka/ilkd/key/speclang/jml/JMLSpecExtractor.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
> Task :key.core:jar
> Task :key.core.proof_references:compileJava UP-TO-DATE
> Task :key.core.proof_references:processResources UP-TO-DATE
> Task :key.core.proof_references:classes UP-TO-DATE
> Task :key.core.proof_references:jar UP-TO-DATE
> Task :key.core.symbolic_execution:compileJava UP-TO-DATE
> Task :key.core.symbolic_execution:processResources UP-TO-DATE
> Task :key.core.symbolic_execution:classes UP-TO-DATE
> Task :key.core.symbolic_execution:jar UP-TO-DATE
> Task :key.core.testgen:compileJava UP-TO-DATE
> Task :key.core.testgen:processResources UP-TO-DATE
> Task :key.core.testgen:classes UP-TO-DATE
> Task :key.core.testgen:jar UP-TO-DATE
> Task :key.removegenerics:compileJava UP-TO-DATE
> Task :key.removegenerics:processResources NO-SOURCE
> Task :key.removegenerics:classes UP-TO-DATE
> Task :key.removegenerics:jar UP-TO-DATE
> Task :key.core:rifl:compileJava UP-TO-DATE
> Task :key.ui:compileJava UP-TO-DATE
> Task :key.ui:createExamplesZip UP-TO-DATE
> Task :key.ui:processResources UP-TO-DATE
> Task :key.ui:classes UP-TO-DATE
> Task :key.ui:jar UP-TO-DATE
> Task :key.util:processResources UP-TO-DATE
> Task :key.util:classes UP-TO-DATE
> Task :key.util:jar UP-TO-DATE
> Task :keyext.interactionlog:compileJava UP-TO-DATE
> Task :keyext.interactionlog:processResources UP-TO-DATE
> Task :keyext.interactionlog:classes UP-TO-DATE
> Task :keyext.interactionlog:jar UP-TO-DATE
> Task :key.core:rifl:processResources UP-TO-DATE
> Task :key.core:rifl:classes UP-TO-DATE
> Task :key.core:rifl:jar UP-TO-DATE

> Task :key.ui:run

KeY Version 2.7 (internal: b254ba3b03)
© Copyright 2001–2019 Karlsruhe Institute of Technology, Chalmers University of Technology, and Technische Universität Darmstadt
KeY is protected by the GNU General Public License

Using assertions ...
[KeyStrokeSettings] Save keyboard shortcuts to: /home/weigl/.key/keystrokes.properties
--- Contract ---
/*@ public normal_behavior
      @   assignable \nothing;
      @   assignable<permissions> \nothing;
      @*/
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
//    public AssertionError(double detailMessage) {}
//    public AssertionError(float detailMessage)  {}
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Tue Apr 15 10:18:21 CEST 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
// the following is needed for in some examples to static initialisation:
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
//   public float floatValue();
//   public double doubleValue();
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Tue Apr 15 10:18:21 CEST 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Tue Apr 15 10:17:24 CEST 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/*@ public normal_behavior
     @   ensures message == null && cause == null;
     @   assignable message, cause;
     @*/
--- Contract ---
/*@ public normal_behavior
     @   ensures message == arg0 && cause == null;
     @   assignable message, cause;
     @*/
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
//   public abstract float floatValue();
//   public abstract double doubleValue();
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:16:59 CET 2014
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Jan 31 13:24:50 CET 2014
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
// public final static java.util.Comparator CASE_INSENSITIVE_ORDER;
--- Contract ---
// public String(byte[] arg0, int arg1, int arg2, java.lang.String arg3) throws java.io.UnsupportedEncodingException;
// public String(byte[] arg0, int arg1, int arg2, java.nio.charset.Charset arg3);
// public String(byte[] arg0, java.lang.String arg1) throws java.io.UnsupportedEncodingException;
// public String(byte[] arg0, java.nio.charset.Charset arg1);
--- Contract ---
// public String(java.lang.StringBuffer arg0);
// public String(java.lang.StringBuilder arg0);
--- Contract ---
// public byte[] getBytes(java.lang.String arg0) throws java.io.UnsupportedEncodingException;
// public byte[] getBytes(java.nio.charset.Charset arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(byte[]);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result[*] \by \dl_strContent(this);
     @*/
--- Contract ---
// public boolean contentEquals(java.lang.StringBuffer arg0);
// public boolean contentEquals(java.lang.CharSequence arg0);
--- Contract ---
// public java.lang.CharSequence subSequence(int arg0, int arg1);
--- Contract ---
// public boolean contains(java.lang.CharSequence arg0);
--- Contract ---
// public java.lang.String replace(java.lang.CharSequence arg0, java.lang.CharSequence arg1);
--- Contract ---
// public java.lang.String toLowerCase(java.util.Locale arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(String);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \dl_strContent(\result) \by \dl_strContent(this);
     @*/
--- Contract ---
// public java.lang.String toUpperCase(java.util.Locale arg0);

   /*@ public normal_behavior
     @ ensures \fresh(\result) && \typeof(\result) == \type(String);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \dl_strContent(\result) \by \dl_strContent(this);
     @*/
--- Contract ---
/*@ public normal_behavior
     @ ensures \result.length == \dl_strContent(this).length;
     @ ensures (\forall \bigint i; 0 <= i && i < \result.length; \dl_inChar(\result[i]));
     @ ensures \fresh(\result) && \typeof(\result) == \type(char[]);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result[*] \by \dl_strContent(this);
     @*/
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
--- Contract ---
// public static java.lang.String format(java.util.Locale arg0, java.lang.String arg1, java.lang.Object[] arg2);
--- Contract ---
//   public static java.lang.String valueOf(float arg0);
//   public static java.lang.String valueOf(double arg0);
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
//, CharSequence
--- Contract ---
//    public StringBuffer	append(char[] str);
    //    public StringBuffer	append(char[] str, int offset, int len);
    //    public StringBuffer	append(double d);
    //    public StringBuffer	append(float f);
--- Contract ---
//    public CharSequence subSequence(int start, int end);
--- Contract ---
// Remarks: Currently the specifications assumes src and dest to be int[].
    //          This is incomplete, and should be amended when needed
    // added by Mattias Ulbrich in Jan 19.
    /*@ public exceptional_behavior
      @   requires src == null || dest == null;
      @   signals_only NullPointerException;
      @   assignable \nothing;
      @ also
      @ public exceptional_behavior
      @   requires src instanceof int[] && dest instanceof int[];
      @   requires src != null && dest != null;
      @   requires (srcPos < 0 || destPos < 0 || length < 0
      @                  || srcPos + length > ((int[])src).length
      @                  || destPos + length > ((int[])dest).length);
      @    assignable \nothing;
      @    signals_only ArrayIndexOutOfBoundsException;
      @ also
      @ public normal_behavior
      @   requires src instanceof int[] && dest instanceof int[];
      @   requires src != null && dest != null;
      @   requires srcPos >= 0 && destPos >= 0;
      @   requires length >= 0;
      @   requires srcPos + length <= ((int[])src).length
      @         && destPos + length <= ((int[])dest).length;
      @   ensures (\forall int i; 0 <= i && i < length;
      @             ((int[])dest)[destPos + i] == \old(((int[])src)[srcPos + i]));
      @   assignable ((int[])dest)[destPos .. destPos + length - 1];
      @*/
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
--- Contract ---
// This implementation has been used to verify the above contracts
    // {
    //     if(src == null || dest == null) {
    //         throw new NullPointerException();
    //     }
    //     int[] isrc = (int[])src;
    //     int[] idest = (int[])dest;
    //     if(length < 0) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     int[] tmp = new int[length];
    //     if(srcPos < 0 || srcPos + length > isrc.length) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     /*@ loop_invariant 0 <= i && i <= length;
    //       @ loop_invariant (\forall int j; 0<=j && j < i; tmp[j] == isrc[srcPos + j]);
    //       @ loop_invariant \fresh(tmp);
    //       @ decreases length - i;
    //       @ assignable tmp[*];
    //       @*/
    //     for(int i = 0; i < length; i++) {
    //         tmp[i] = isrc[srcPos + i];
    //     }
    //     if(destPos < 0 || destPos + length > idest.length) {
    //         throw new ArrayIndexOutOfBoundsException();
    //     }
    //     /*@ loop_invariant 0 <= k && k <= length;
    //       @ loop_invariant (\forall int j; 0<=j && j < k; idest[destPos + j] == tmp[j]);
    //       @ decreases length - k;
    //       @ assignable idest[destPos .. destPos + length - 1];
    //       @*/
    //     for(int k = 0; k < length; k++) {
    //         idest[destPos + k] = tmp[k];
    //     }
    // }

    /*@ public behavior
      @ ensures false;
      @ signals_only \nothing;
      @ diverges true;
      @*/
--- Contract ---
//@ protected nullable ghost String message = null;
   //@ protected nullable ghost Throwable cause = null;

   /*@ public normal_behavior
     @    requires true;
     @    ensures message == null && cause == null;
     @    assignable message, cause;
     @*/
--- Contract ---
/*@ public normal_behavior
     @    requires true;
     @    ensures message == arg0 && cause == null;
     @    assignable message, cause;
     @*/
--- Contract ---
/*@ public normal_behavior
     @    requires true;
     @    ensures message == arg0 && cause == arg1;
     @    assignable message, cause;
     @*/
--- Contract ---
//@ set message = arg0;
       //@ set cause = arg1;

   /*@ public normal_behavior
     @    requires true;
     @    ensures message == null && cause == arg0;
     @    assignable message, cause;
     @*/
--- Contract ---
/*@ public normal_behavior
     @    ensures \result == message;
     @*/
--- Contract ---
/*@ public normal_behavior
     @    ensures \result == cause;
     @*/
--- Contract ---
/*@ public normal_behavior
     @    requires cause == null;
     @    ensures \result == this && cause == arg0;
     @    assignable cause;
     @ helper // needs to be helper because called in constructor
     @*/
--- Contract ---
//@ set cause = arg0;
--- Contract ---
// public void printStackTrace(java.io.PrintStream arg0);
// public void printStackTrace(java.io.PrintWriter arg0);
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 *
 * Enriched by JML specifications by MU
 *
 */
// public java.lang.StackTraceElement[] getStackTrace();
// public void setStackTrace(java.lang.StackTraceElement[] arg0);
--- Contract ---
//@ public instance ghost \seq seq;

   /*@ public normal_behavior
     @ ensures \result == seq.length;
     @ assignable \nothing;
     @ determines \result \by seq.length;
     @ */
--- Contract ---
/*@ public normal_behavior
     @ ensures \result == (size() == 0);
     @ assignable \nothing;
     @ determines \result \by seq.length;
     @*/
--- Contract ---
/*@ public normal_behavior
     @ ensures seq == \seq_concat(\old(seq), \seq_singleton(arg0));
     @ assignable seq;
     @ determines seq \by seq, arg0;
     @*/
--- Contract ---
/*@ public normal_behavior
     @ ensures seq == \seq_concat(\old(seq), arg0.seq);
     @ assignable seq;
     @ determines seq \by seq, arg0.seq;
     @*/
--- Contract ---
/*@ public normal_behavior
     @ ensures \result == (\exists \bigint i; 0 <= i && i < seq.length; ((String)seq[i]) == arg0);
     @ assignable \nothing;
     @ determines \result \by seq, arg0;
     @*/
line 1:44 mismatched input '=' expecting {'[]', ';', '(', SEMI_TOPLEVEL, EQUALITY}
line 2:48 mismatched input '=' expecting {'[]', ';', '(', SEMI_TOPLEVEL, EQUALITY}
line 1:16 extraneous input '=' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:22 missing IDENT at ';'
line 2:21 extraneous input '=' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 2:27 missing IDENT at ';'
line 1:14 extraneous input '=' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
line 1:20 missing IDENT at ';'
line 1:0 extraneous input '/*' expecting {<EOF>, MODEL_BEHAVIOUR, 'abstract', BEHAVIOR, EXCEPTIONAL_BEHAVIOUR, BREAK_BEHAVIOR, CONTINUE_BEHAVIOR, 'also', 'code_bigint_math', 'code_java_math', NON_NULL, NORMAL_BEHAVIOR, 'no_state', 'nowarn', NULLABLE, 'nullable_by_default', 'spec_save_math', 'code_save_math', 'spec_bigint_math', 'spec_java_math', 'spec_protected', 'spec_public', 'ghost', 'name', 'static', 'strictly_pure', 'two_state', 'unreachable', 'private', 'protected', 'public', 'pure', RETURN_BEHAVIOR, 'final', 'model', ACCESSIBLE, ASSERT, ASSUME, ASSIGNABLE, 'axiom', 'breaks', CAPTURES, CONSTRAINT, 'continues', DECREASING, 'determines', DIVERGES, ENSURES, 'for_example', 'helper', 'implies_that', IN, 'initially', 'instance', INVARIANT, MAPS, MEASURED_BY, 'monitors_for', 'readable', REPRESENTS, REQUIRES, 'returns', 'separates', 'set', SIGNALS, SIGNALS_ONLY, WHEN, WORKING_SPACE, 'writable', 'boolean', 'byte', 'int', 'long', 'short', 'void', '\bigint', '\duration', '\free', '\locset', '\real', '\seq', '\TYPE', IDENT, JML_IDENT, DEPENDS}
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/*@ public normal_behavior
     @ requires arg0 == 0;
     @ ensures seq == \seq_concat(\seq_singleton(arg0), \old(seq));
     @ assignable seq;
     @ determines seq \by seq, arg0;
     @*/
--- Contract ---
/*@ public normal_behavior
     @ requires 0 <= arg0 && arg0 < seq.length;
     @ ensures ((Object)seq[arg0]) == \result;
     @ assignable \nothing;
     @ determines \result \by seq, arg0;
     @*/
--- Contract ---
/*@ public normal_behavior
     @ ensures \result.index == 0;
     @ ensures \result.seq == seq;
     @ ensures \fresh(\result) && \fresh(\result.*);
     @ ensures \result instanceof ListIteratorImpl;
     @ assignable \nothing;
     @ determines \result.seq \by seq;
     @ determines \result.index \by \nothing;
     @*/
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
//@ public instance ghost \seq seq;
    //@ public instance ghost \bigint index;

    //@ public instance invariant 0 <= index && index <= seq.length;

    /*@ public normal_behavior
      @ ensures \result == true <==> index < seq.length;
      @ assignable \strictly_nothing;
      @ determines \result \by seq.length, index;
      @*/
--- Contract ---
/*@ public behavior
      @ requires index < seq.length;
      @ ensures \result == ((Object)seq[\old(index)]);
      @ ensures index == \old(index) + 1;
      @ assignable index;
      @ signals_only java.lang.RuntimeException;
      @ determines \result \by seq, index;
      @ determines index \by \itself;
      @*/
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
//@ public instance ghost \seq key_seq;
//@ public instance ghost \seq value_seq;

//@ public instance invariant key_seq.length == value_seq.length;
//@ public instance invariant (\forall \bigint i; 0 <= i && i < key_seq.length; ((Object)key_seq[i]) != null);
//@ public instance invariant (\forall \bigint i; 0 <= i && i < value_seq.length; ((Object)value_seq[i]) != null);

/*@ public normal_behavior
  @ ensures \result.seq == key_seq;
  @ ensures \fresh(\result);
  @ assignable \nothing;
  @*/
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
/* This file has been generated by Stubmaker (de.uka.ilkd.stubmaker)
 * Date: Fri Mar 28 13:47:08 CET 2008
 */
--- Contract ---
// public void print(float f);
// public void print(double d);
--- Contract ---
// public void println(float x);
// public void println(double x);
--- Contract ---
//@ public final ghost \bigint value;
//@ public static invariant java.math.BigInteger.ZERO.value == (\bigint) 0;
--- Contract ---
/*@ public normal_behavior
     @ requires true;
     @ ensures (\result <= 0) <==> (this.value - param0.value <= 0);
     @ ensures (\result >= 0) <==> (this.value - param0.value >= 0);
     @ assignable \strictly_nothing;
     @ determines \result \by this.value, param0.value;
     @*/
--- Contract ---
/*@ public normal_behavior
     @ requires true;
     @ ensures \result.value == this.value % param0.value;
     @ ensures \fresh(\result) && \fresh(\result.*) && \typeof(\result) == \type(BigInteger);
     @ assignable \nothing;
     @ determines \result \by \nothing \new_objects \result;
     @ determines \result.value \by this.value, param0.value;
     @*/
--- Contract ---
/*@ public normal_behavior
      @ ensures seq.length == 0;
      @ ensures \fresh(this) && \fresh(this.*);
      @ determines seq \by \nothing;
      @*/
--- Contract ---
/*@ public normal_behavior
      @ ensures seq == c.seq;
      @ ensures \fresh(this) && \fresh(this.*) && \typeof(this) == \type(ArrayList);
      @ determines this, seq \by c.seq \new_objects this;
      @*/
--- Contract ---
/*@ public normal_behavior
	  @ ensures \invariant_for(\result);
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/
--- Contract ---
/*@ public normal_behavior
      @ ensures \invariant_for(\result);
      @ ensures \fresh(\result);
      @ assignable \nothing;
      @*/
--- Contract ---
/*@ public normal_behavior
      @ ensures \fresh(\result) && \fresh(\result.*);
      @ ensures \invariant_for(\result);
      @ ensures (\forall \bigint i; 0 <= i && i < \result.seq.length; ((String)\result.seq[i]) != null);
      @ assignable \nothing;
      @*/
--- Contract ---
/*@ public normal_behavior
      @ ensures \fresh(\result) && \fresh(\result.*);
      @ ensures \invariant_for(\result);
      @ ensures (\forall \bigint i; 0 <= i && i < \result.seq.length; ((String)\result.seq[i]) != null);
      @ assignable \nothing;
      @*/
--- Contract ---
/*@ public behavior
     @ requires true;
     @ ensures true;
     @ assignable \everything;
     @*/
--- Contract ---
/*@ public normal_behavior
      @ ensures key_seq.length == 0;
      @ ensures value_seq.length == 0;
      @ assignable \nothing;
      @*/
--- Contract ---
/*@ public normal_behavior
	  @ ensures seq == param0.seq;
      @*/
--- Contract ---
/*@ public normal_behavior
      @ requires true;
      @*/
--- Contract ---
/*@ normal_behaviour
      @   requires (\forall int i; 0 <= i && i < a.length; 0 <= a[i]);
      @   assignable sum, max;
      @   ensures (\forall int i; 0 <= i && i < a.length; a[i] <= max);
      @   ensures (a.length > 0
      @           ==> (\exists int i; 0 <= i && i < a.length; max == a[i]));
      @   ensures sum == (\sum int i; 0 <= i && i < a.length; a[i]);
      @   ensures sum <= a.length * max;
      @*/
--- Contract ---
/*@ normal_behaviour
      @   requires (\forall int i; 0 <= i && i < a.length; 0 <= a[i]);
      @   assignable sum, max;
      @   ensures (\forall int i; 0 <= i && i < a.length; a[i] <= max);
      @   ensures (a.length > 0
      @           ==> (\exists int i; 0 <= i && i < a.length; max == a[i]));
      @   ensures sum == (\sum int i; 0 <= i && i < a.length; a[i]);
      @   ensures sum <= a.length * max;
      @*/
--- Contract ---
/*@ normal_behaviour
      @   requires (\forall int i; 0 <= i && i < a.length; 0 <= a[i]);
      @   assignable sum, max;
      @   ensures (\forall int i; 0 <= i && i < a.length; a[i] <= max);
      @   ensures (a.length > 0
      @           ==> (\exists int i; 0 <= i && i < a.length; max == a[i]));
      @   ensures sum == (\sum int i; 0 <= i && i < a.length; a[i]);
      @   ensures sum <= a.length * max;
      @*/
