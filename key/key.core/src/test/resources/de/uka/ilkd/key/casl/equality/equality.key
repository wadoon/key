\sorts {
    /*! @defaultValue(Nil) */
    Color;
}
\functions {
    Color Red(int);
    Color Green(int, int);
    Color Blue(int, boolean);
    Color Nil;
}
\axioms {
    color_induction {
        \schemaVar \formula phi;
        \schemaVar \variable Color base;

        \find( ==> \forall base; phi )

        "base case": \replacewith( ==>  {\subst base; Red} phi );
        "1. case": \replacewith( ==>  ( phi -> {\subst base; Green} phi ) );
        "2. case": \replacewith( ==>  ( phi -> {\subst base; Blue} phi ) );
        "3. case": \replacewith( ==>  ( phi -> {\subst base; Nil} phi ) )
    };
    color_ctor_split {
        \schemaVar \term Color color;
        \find(color) \sameUpdateLevel
        \replacewith(Red) \add(color = Red ==>);
        \replacewith(Green) \add(color = Green ==>);
        \replacewith(Blue) \add(color = Blue ==>);
        \replacewith(Nil) \add(color = Nil ==>)
    };
    eql_Color_RedLeft {
        \schemaVar \variable int var_0_l;
        \schemaVar \variable int var_0_r;
        \find( ==> Red(var_0_l) = Red(var_0_r) )
        \add( ==> var_0_l = var_0_r )
    };
    eql_Color_GreenLeft {
        \schemaVar \variable int var_0_l;
        \schemaVar \variable int var_1_l;
        \schemaVar \variable int var_0_r;
        \schemaVar \variable int var_1_r;
        \find( ==> Green(var_0_l, var_1_l) = Green(var_0_r, var_1_r) )
        \add( ==> var_0_l = var_0_r & var_1_l = var_1_r )
    };
    eql_Color_BlueLeft {
        \schemaVar \variable int var_0_l;
        \schemaVar \variable boolean var_1_l;
        \schemaVar \variable int var_0_r;
        \schemaVar \variable boolean var_1_r;
        \find( ==> Blue(var_0_l, var_1_l) = Blue(var_0_r, var_1_r) )
        \add( ==> var_0_l = var_0_r & var_1_l = var_1_r )
    };
    eql_Color_NilLeft {
        \find( ==> Nil() = Nil() )
        \add( ==>  )
    };
    eql_Color_RedRight {
        \schemaVar \variable int var_0_l;
        \schemaVar \variable int var_0_r;
        \find( Red(var_0_l) = Red(var_0_r) ==> )
        \add( var_0_l = var_0_r ==> )
    };
    eql_Color_GreenRight {
        \schemaVar \variable int var_0_l;
        \schemaVar \variable int var_1_l;
        \schemaVar \variable int var_0_r;
        \schemaVar \variable int var_1_r;
        \find( Green(var_0_l, var_1_l) = Green(var_0_r, var_1_r) ==> )
        \add( var_0_l = var_0_r & var_1_l = var_1_r ==> )
    };
    eql_Color_BlueRight {
        \schemaVar \variable int var_0_l;
        \schemaVar \variable boolean var_1_l;
        \schemaVar \variable int var_0_r;
        \schemaVar \variable boolean var_1_r;
        \find( Blue(var_0_l, var_1_l) = Blue(var_0_r, var_1_r) ==> )
        \add( var_0_l = var_0_r & var_1_l = var_1_r ==> )
    };
    eql_Color_NilRight {
        \find( Nil() = Nil() ==> )
        \add(  ==> )
    };
}
\javaSource ".";
\chooseContract
